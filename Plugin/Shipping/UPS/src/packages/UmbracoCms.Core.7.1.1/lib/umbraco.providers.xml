<?xml version="1.0"?>
<doc>
    <assembly>
        <name>umbraco.providers</name>
    </assembly>
    <members>
        <member name="T:umbraco.providers.members.MembershipEventHandler">
            <summary>
            Adds some event handling
            </summary>
        </member>
        <member name="T:umbraco.providers.members.UmbracoMembershipProvider">
            <summary>
            Custom Membership Provider for Umbraco Members (User authentication for Frontend applications NOT umbraco CMS)  
            </summary>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call 
            <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider 
            has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.PerformChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">This property is ignore for this provider</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.PerformChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="memberTypeAlias"></param>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">
            TODO: This setting currently has no effect
            </param>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Gets the number of users currently accessing the application.
            </summary>
            <returns>
            The number of users currently accessing the application.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.PerformGetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source.
            </summary>
            <param name="username">The user to retrieve the password for.</param>
            <param name="answer">The password answer for the user.</param>
            <returns>
            The password for the specified user name.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="username">The name of the user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets information from the data source for a user based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.PerformResetPassword(System.String,System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user (not used with Umbraco).</param>
            <param name="generatedPassword"></param>
            <returns>The new password for the specified user.</returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.UnlockUser(System.String)">
            <summary>
            Clears a lock so that the membership user can be validated.
            </summary>
            <param name="userName">The membership user to clear the lock status for.</param>
            <returns>
            true if the membership user was successfully unlocked; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates e-mail and potentially approved status, lock status and comment on a user.
            </summary>
            <param name="user">A <see cref="T:System.Web.Security.MembershipUser"></see> object that represents the user to update and the updated information for the user.</param>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.EncodePassword(System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="password">The password.</param>
            <returns>The encoded password.</returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.UnEncodePassword(System.String)">
            <summary>
            Unencode password.
            </summary>
            <param name="encodedPassword">The encoded password.</param>
            <returns>The unencoded password.</returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.ConvertToMembershipUser(umbraco.cms.businesslogic.member.Member)">
            <summary>
            Converts to membership user.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoMembershipProvider.ConvertToMembershipUser(Umbraco.Core.Models.IMember)">
            <summary>
            Converts to membership user.
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="P:umbraco.providers.members.UmbracoMembershipProvider.DefaultMinNonAlphanumericChars">
            <summary>
            Override to maintain backwards compatibility with 0 required non-alphanumeric chars
            </summary>
        </member>
        <member name="P:umbraco.providers.members.UmbracoMembershipProvider.DefaultMinPasswordLength">
            <summary>
            Override to maintain backwards compatibility with only 4 required length
            </summary>
        </member>
        <member name="P:umbraco.providers.members.UmbracoMembershipProvider.DefaultUseLegacyEncoding">
            <summary>
            Override to maintain backwards compatibility
            </summary>
        </member>
        <member name="P:umbraco.providers.members.UmbracoMembershipProvider.AllowManuallyChangingPassword">
            <summary>
            For backwards compatibility, this provider supports this option
            </summary>
        </member>
        <member name="M:umbraco.providers.members.UmbracoProfileProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the current umbraco member.
            </summary>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"/> describing the current application use.</param>
            <param name="collection">A <see cref="T:System.Configuration.SettingsPropertyCollection"/> containing the settings property group whose values are to be retrieved.</param>
            <returns>
            A <see cref="T:System.Configuration.SettingsPropertyValueCollection"/> containing the values for the specified settings property group.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoProfileProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Sets the values of the specified group of property settings for the current umbraco member.
            </summary>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"/> describing the current application usage.</param>
            <param name="collection">A <see cref="T:System.Configuration.SettingsPropertyValueCollection"/> representing the group of property settings to set.</param>
        </member>
        <member name="T:umbraco.providers.members.UmbracoRoleProvider">
            <summary>
            A role provider for members
            </summary>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call 
            <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider 
            after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be added to the specified roles.</param>
            <param name="roleNames">A string array of the role names to add the specified user names to.</param>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to create.</param>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
            <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
            <param name="roleName">The role to search in.</param>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
            <param name="username">The user to return a list of roles for.</param>
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to get the list of users for.</param>
            <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
            <param name="username">The user name to search for.</param>
            <param name="roleName">The role to search in.</param>
            <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be removed from the specified roles.</param>
            <param name="roleNames">A string array of role names to remove the specified user names from.</param>
        </member>
        <member name="M:umbraco.providers.members.UmbracoRoleProvider.RoleExists(System.String)">
            <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to search for in the data source.</param>
            <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="P:umbraco.providers.members.UmbracoRoleProvider.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
            <value></value>
            <returns>The name of the application to store and retrieve role information for.</returns>
        </member>
        <member name="T:umbraco.providers.SecUtility">
            <summary>
            Security Helper Methods
            </summary>
        </member>
        <member name="M:umbraco.providers.SecUtility.GetBooleanValue(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Gets the boolean value.
            </summary>
            <param name="config">The config.</param>
            <param name="valueName">Name of the value.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.providers.SecUtility.CheckArrayParameter(System.String[]@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Checks the array parameter.
            </summary>
            <param name="param">The param.</param>
            <param name="checkForNull">if set to <c>true</c> [check for null].</param>
            <param name="checkIfEmpty">if set to <c>true</c> [check if empty].</param>
            <param name="checkForCommas">if set to <c>true</c> [check for commas].</param>
            <param name="maxSize">Size of the max.</param>
            <param name="paramName">Name of the param.</param>
        </member>
        <member name="M:umbraco.providers.SecUtility.CheckParameter(System.String@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Checks the parameter.
            </summary>
            <param name="param">The param.</param>
            <param name="checkForNull">if set to <c>true</c> [check for null].</param>
            <param name="checkIfEmpty">if set to <c>true</c> [check if empty].</param>
            <param name="checkForCommas">if set to <c>true</c> [check for commas].</param>
            <param name="maxSize">Size of the max.</param>
            <param name="paramName">Name of the param.</param>
        </member>
        <member name="M:umbraco.providers.SecUtility.CheckPasswordParameter(System.String@,System.Int32,System.String)">
            <summary>
            Checks the password parameter.
            </summary>
            <param name="param">The param.</param>
            <param name="maxSize">Size of the max.</param>
            <param name="paramName">Name of the param.</param>
        </member>
        <member name="M:umbraco.providers.SecUtility.GetDefaultAppName">
            <summary>
            Gets the name of the default app.
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.providers.SecUtility.GetIntValue(System.Collections.Specialized.NameValueCollection,System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Gets the int value.
            </summary>
            <param name="config">The config.</param>
            <param name="valueName">Name of the value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="zeroAllowed">if set to <c>true</c> [zero allowed].</param>
            <param name="maxValueAllowed">The max value allowed.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.providers.SecUtility.ValidateParameter(System.String@,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Validates the parameter.
            </summary>
            <param name="param">The param.</param>
            <param name="checkForNull">if set to <c>true</c> [check for null].</param>
            <param name="checkIfEmpty">if set to <c>true</c> [check if empty].</param>
            <param name="checkForCommas">if set to <c>true</c> [check for commas].</param>
            <param name="maxSize">Size of the max.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.providers.SecUtility.ValidatePasswordParameter(System.String@,System.Int32)">
            <summary>
            Validates the password parameter.
            </summary>
            <param name="param">The param.</param>
            <param name="maxSize">Size of the max.</param>
            <returns></returns>
        </member>
        <member name="T:umbraco.providers.UsersMembershipProvider">
            <summary>
            Custom Membership Provider for Umbraco Users (User authentication for Umbraco Backend CMS)  
            </summary>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.PerformChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">The current password for the specified user.</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.PerformChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Gets the number of users currently accessing the application.
            </summary>
            <returns>
            The number of users currently accessing the application.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.PerformGetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source. This is - for security - not
            supported for Umbraco Users and an exception will be thrown
            </summary>
            <param name="username">The user to retrieve the password for.</param>
            <param name="answer">The password answer for the user.</param>
            <returns>
            The password for the specified user name.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="username">The name of the user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets information from the data source for a user based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.PerformResetPassword(System.String,System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user.</param>
            <returns>The new password for the specified user.</returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.UnlockUser(System.String)">
            <summary>
            Clears a lock so that the membership user can be validated.
            </summary>
            <param name="userName">The membership user to clear the lock status for.</param>
            <returns>
            true if the membership user was successfully unlocked; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates information about a user in the data source.
            </summary>
            <param name="user">A <see cref="T:System.Web.Security.MembershipUser"></see> object that represents the user to update and the updated information for the user.</param>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.EncodePassword(System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="password">The password.</param>
            <returns>The encoded password.</returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.UnEncodePassword(System.String)">
            <summary>
            Unencode password.
            </summary>
            <param name="encodedPassword">The encoded password.</param>
            <returns>The unencoded password.</returns>
        </member>
        <member name="M:umbraco.providers.UsersMembershipProvider.ConvertToMembershipUser(umbraco.BusinessLogic.User)">
            <summary>
            Converts to membership user.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="P:umbraco.providers.UsersMembershipProvider.DefaultMinNonAlphanumericChars">
            <summary>
            Override to maintain backwards compatibility with 0 required non-alphanumeric chars
            </summary>
        </member>
        <member name="P:umbraco.providers.UsersMembershipProvider.DefaultMinPasswordLength">
            <summary>
            Override to maintain backwards compatibility with only 4 required length
            </summary>
        </member>
        <member name="P:umbraco.providers.UsersMembershipProvider.DefaultUseLegacyEncoding">
            <summary>
            Override to maintain backwards compatibility
            </summary>
        </member>
        <member name="P:umbraco.providers.UsersMembershipProvider.AllowManuallyChangingPassword">
            <summary>
            For backwards compatibility, this provider supports this option
            </summary>
        </member>
        <member name="T:umbraco.providers.UsersMembershipUser">
            <summary>
            Wrapper for the umbraco.BusinessLogic.User class.
            </summary>
        </member>
        <member name="M:umbraco.providers.UsersMembershipUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:UmbracoMembershipUser"/> class.
            </summary>
        </member>
        <member name="M:umbraco.providers.UsersMembershipUser.#ctor(System.String,System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,umbraco.BusinessLogic.UserType)">
            <summary>
            Initializes a new instance of the <see cref="!:UmbracoMembershipUser"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="name">The name.</param>
            <param name="providerUserKey">The provider user key.</param>
            <param name="email">The email.</param>
            <param name="passwordQuestion">The password question.</param>
            <param name="comment">The comment.</param>
            <param name="isApproved">if set to <c>true</c> [is approved].</param>
            <param name="isLockedOut">if set to <c>true</c> [is locked out].</param>
            <param name="creationDate">The creation date.</param>
            <param name="lastLoginDate">The last login date.</param>
            <param name="lastActivityDate">The last activity date.</param>
            <param name="lastPasswordChangedDate">The last password changed date.</param>
            <param name="lastLockoutDate">The last lockout date.</param>
            <param name="fullName">The full name.</param>
            <param name="language">The language.</param>
            <param name="userType">Type of the user.</param>
        </member>
        <member name="P:umbraco.providers.UsersMembershipUser.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:umbraco.providers.UsersMembershipUser.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:umbraco.providers.UsersMembershipUser.UserType">
            <summary>
            Gets or sets the type of the user.
            </summary>
            <value>The type of the user.</value>
        </member>
        <member name="T:umbraco.providers.UsersRoleProvider">
            <summary>
            Custom Roles Provider for Umbraco
            </summary>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call 
            <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider 
            after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be added to the specified roles.</param>
            <param name="roleNames">A string array of the role names to add the specified user names to.</param>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to create.</param>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throw an exception if roleName has one or more members and do not delete roleName.</param>
            <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
            <param name="roleName">The role to search in.</param>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
            <param name="username">The user to return a list of roles for.</param>
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to get the list of users for.</param>
            <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
            <param name="username">The user name to search for.</param>
            <param name="roleName">The role to search in.</param>
            <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be removed from the specified roles.</param>
            <param name="roleNames">A string array of role names to remove the specified user names from.</param>
        </member>
        <member name="M:umbraco.providers.UsersRoleProvider.RoleExists(System.String)">
            <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to search for in the data source.</param>
            <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
        </member>
        <member name="P:umbraco.providers.UsersRoleProvider.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
            <value></value>
            <returns>The name of the application to store and retrieve role information for.</returns>
        </member>
    </members>
</doc>

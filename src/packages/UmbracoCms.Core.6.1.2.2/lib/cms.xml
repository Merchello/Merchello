<?xml version="1.0"?>
<doc>
    <assembly>
        <name>cms</name>
    </assembly>
    <members>
        <member name="T:umbraco.BusinessLogic.Actions.Action">
             <summary>
             Actions and Actionhandlers are a key concept to umbraco and a developer whom wish to apply
             businessrules whenever data is changed within umbraco, by implementing the IActionHandler
             interface it's possible to invoke methods (foreign to umbraco) - this can be used whenever
             there is a specific rule which needs to be applied to content.
            
             The Action class itself has responsibility for registering actions and actionhandlers,
             and contains methods which will be invoked whenever a change is made to ex. a document, media or member
             
             An action/actionhandler will automatically be registered, using reflection 
             which is enabling thirdparty developers to extend the core functionality of
             umbraco without changing the codebase.
             </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.ReRegisterActionsAndHandlers">
            <summary>
            This is used when an IAction or IActionHandler is installed into the system
            and needs to be loaded into memory.
            </summary>
            <remarks>
            TODO: this shouldn't be needed... we should restart the app pool when a package is installed!
            </remarks>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.RegisterIActionHandlers">
            <summary>
            Stores all IActionHandlers that have been loaded into memory into a list
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.RunActionHandlers(umbraco.cms.businesslogic.web.Document,umbraco.interfaces.IAction)">
            <summary>
            Whenever an action is performed upon a document/media/member, this method is executed, ensuring that 
            all registered handlers will have an oppotunity to handle the action.
            </summary>
            <param name="d">The document being operated on</param>
            <param name="action">The action triggered</param>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.ReturnJavascript(System.String)">
            <summary>
            Jacascript for the contextmenu
            Suggestion: this method should be moved to the presentation layer.
            </summary>
            <param name="language"></param>
            <returns>String representation</returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.GetJavaScriptFileReferences">
            <summary>
            Returns a list of JavaScript file paths.
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.findActions(System.String)">
            <summary>
            Javascript menuitems - tree contextmenu
            Umbraco console
            
            Suggestion: this method should be moved to the presentation layer.
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.GetAll">
            <summary>
            
            </summary>
            <returns>An arraylist containing all javascript variables for the contextmenu in the tree</returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.FromString(System.String)">
            <summary>
            This method will return a list of IAction's based on a string list. Each character in the list may represent
            an IAction. This will associate any found IActions based on the Letter property of the IAction with the character being referenced.
            </summary>
            <param name="actions"></param>
            <returns>returns a list of actions that have an associated letter found in the action string list</returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.ToString(System.Collections.Generic.List{umbraco.interfaces.IAction})">
            <summary>
            Returns the string representation of the actions that make up the actions collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.GetPermissionAssignable">
            <summary>
            Returns a list of IActions that are permission assignable
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.ValidateActionJs(umbraco.interfaces.IAction)">
            <summary>
            Check if the current IAction is using legacy javascript methods
            </summary>
            <param name="action"></param>
            <returns>false if the Iaction is incompatible with 4.5</returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.Action.ConvertLegacyJs(System.String)">
            <summary>
            Method to convert the old modal calls to the new ones
            </summary>
            <param name="javascript"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.PlaceboAction">
            <summary>
            This class is used to manipulate IActions that are implemented in a wrong way
            For instance incompatible trees with 4.0 vs 4.5
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionAssignDomain">
            <summary>
            This action is invoked when a domain is being assigned to a document
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionAssignDomain.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionAudit">
            <summary>
            This action is invoked upon viewing audittrailing on a document
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionAudit.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionBrowse">
            <summary>
            This action is used as a security constraint that grants a user the ability to view nodes in a tree 
            that has  permissions applied to it.
            </summary>
            <remarks>
            This action should not be invoked. It is used as the minimum required permission to view nodes in the content tree. By
            granting a user this permission, the user is able to see the node in the tree but not edit the document. This may be used by other trees
            that support permissions in the future.
            </remarks>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionCopy">
            <summary>
            This action is invoked when copying a document, media, member 
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionCopy.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionDelete">
            <summary>
            This action is invoked when a document, media, member is deleted
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionDelete.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionDisable">
            <summary>
            This action is invoked when a document is disabled.
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionDisable.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionEmptyTranscan">
            <summary>
            This action is invoked when the trash can is emptied
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionEmptyTranscan.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionExport">
            <summary>
            This action is invoked when exporting a document type
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionExport.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionImport">
            <summary>
            This action is invoked when importing a document type
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionImport.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionMove">
            <summary>
            This action is invoked upon creation of a document, media, member
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionMove.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionNew">
            <summary>
            This action is invoked upon creation of a document
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionNew.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionNewFolder">
            <summary>
            This action is invoked upon creation of a document
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionNewFolder.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionNotify">
            <summary>
            This action is invoked when a notification is sent 
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionNotify.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionNull">
            <summary>
            This permission is assigned to a node when there are no permissions assigned to the node.
            This is used internally to assign no permissions to a node for a user and shouldn't be used in code.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionPackage">
            <summary>
            This action is invoked upon creation of a document, media, member
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionPackage.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionPackageCreate">
            <summary>
            This action is invoked upon creation of a document, media, member
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionPackageCreate.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionProtect">
            <summary>
            This action is invoked when a document is protected or unprotected
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionProtect.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionPublish">
            <summary>
            This action is invoked when a document is being published
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionPublish.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionQuit">
            <summary>
            This action is invoked when a user logs out
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionQuit.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionRefresh">
            <summary>
            This action is invoked when a node reloads its children
            Concerns only the tree itself and thus you should not handle
            this action from without umbraco.
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionRefresh.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionRePublish">
            <summary>
            This action is invoked when all documents are being republished
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionRePublish.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionRights">
            <summary>
            This action is invoked when rights are changed on a document
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionRights.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionRollback">
            <summary>
            This action is invoked when copying a document is being rolled back
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionRollback.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionSave">
            <summary>
            This action is invoked upon saving of a document, media, member
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionSave.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionSendToTranslate">
            <summary>
            This action is invoked when a send to translate request occurs
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionSendToTranslate.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionSort">
            <summary>
            This action is invoked when children to a document, media, member is being sorted
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionSort.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionToPublish">
            <summary>
            This action is invoked when children to a document is being sent to published (by an editor without publishrights)
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionToPublish.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionTranslate">
            <summary>
            This action is invoked when a translation occurs
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionTranslate.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionUpdate">
            <summary>
            This action is invoked when copying a document or media 
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionUpdate.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance)
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ContextMenuSeperator">
            <summary>
            Used simply to define context menu seperator items.
            This should not be used directly in any code except for creating menus.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.ActionUnPublish">
            <summary>
            This action is invoked when a document is being unpublished
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Actions.ActionUnPublish.#ctor">
            <summary>
            A public constructor exists ONLY for backwards compatibility in regards to 3rd party add-ons.
            All Umbraco assemblies should use the singleton instantiation (this.Instance).
            When this applicatio is refactored, this constuctor should be made private.
            </summary>
        </member>
        <member name="T:umbraco.BusinessLogic.Actions.IActionHandler">
            <summary>
            Implement the IActionHandler interface in order to automatically get code
            run whenever a document, member or media changed, deleted, created etc.
            The Clases implementing IActionHandler are loaded at runtime which means
            that there are no other setup when creating a custom actionhandler.
            </summary>
            <example>
            
            </example>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl">
            <summary>
            Base class that defines the methods, properties and events for all datatype controls.
            </summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.datatype">
            <summary>
            The base datatype.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.#ctor(umbraco.cms.businesslogic.datatype.BaseDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl"/> class.
            </summary>
            <param name="datatype">The base datatype.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.Save">
            <summary>
            Saves the data in this control.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.FireOnSave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.OnSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.OnSave">
            <summary>
            Occurs when [on save].
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.Control">
            <summary>
            Gets or sets the control.
            </summary>
            <value>
            The control.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.ShowLabel">
            <summary>
            Gets a value indicating whether a label is shown
            </summary>
            <value>
              <c>true</c> if [show label]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.TreatAsRichTextEditor">
            <summary>
            Gets a value indicating whether the editor should be treated as a rich text editor.
            </summary>
            <value>
            <c>true</c> if [treat as rich text editor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.Editor">
            <summary>
            Gets the editor control.
            </summary>
            <value>
            The editor.
            </value>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.AbstractDataEditorControl.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute">
            <summary>
            This attribute is used for data types that uses client assets like Javascript and CSS for liveediting.
            The Live Editing feature in umbraco will look for this attribute and preload all dependencies to the page
            to ensure that all client events and assets gets loaded
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute.#ctor(System.Int32,umbraco.cms.businesslogic.datatype.ClientDependencyType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute"/> class.
            </summary>
            <param name="priority">The priority.</param>
            <param name="dependencyType">Type of the dependency.</param>
            <param name="filePath">The file path to the dependency.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute.#ctor(System.Int32,umbraco.cms.businesslogic.datatype.ClientDependencyType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute"/> class.
            </summary>
            <param name="priority">The priority.</param>
            <param name="dependencyType">Type of the dependency.</param>
            <param name="filePath">The file path to the dependency.</param>
            <param name="invokeJavascriptMethodOnLoad">The name of the Javascript method to invoke when the dependency is loaded.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute.#ctor(System.Int32,umbraco.cms.businesslogic.datatype.ClientDependencyType,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute"/> class.
            </summary>
            <param name="priority">The priority.</param>
            <param name="dependencyType">Type of the dependency.</param>
            <param name="filePath">The file path to the dependency.</param>
            <param name="appendUmbracoPath">if set to <c>true</c> the current umbraco path will be prefixed to the filePath.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute.#ctor(System.Int32,umbraco.cms.businesslogic.datatype.ClientDependencyType,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute"/> class.
            </summary>
            <param name="priority">The priority.</param>
            <param name="dependencyType">Type of the dependency.</param>
            <param name="filePath">The file path to the dependency.</param>
            <param name="appendUmbracoPath">if set to <c>true</c> the current umbraco path will be prefixed to the filePath.</param>
            <param name="invokeJavascriptMethodOnLoad">The name of the Javascript method to invoke when the dependency is loaded.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute.DependencyType">
            <summary>
            Gets or sets the type of the dependency.
            </summary>
            <value>The type of the dependency.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.ClientDependencyAttribute.InvokeJavascriptMethodOnLoad">
            <summary>
            Gets or sets the name of an optional javascript method that should be called on load.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.ClientDependencyType">
            <summary>
            The type of client file
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.DefaultData">
            <summary>
            Default implementation of the <c>IData</c> interface that stores data inside the Umbraco database.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DefaultData.#ctor(umbraco.cms.businesslogic.datatype.BaseDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.DefaultData"/> class.
            </summary>
            <param name="DataType">Type of the data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DefaultData.Initialize(System.Object,System.Int32)">
            <summary>
            Initializes the object.
            </summary>
            <param name="InitValue">The init value.</param>
            <param name="InitPropertyId">The init property id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DefaultData.LoadValueFromDatabase">
            <summary>
            Loads the data value from the database.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DefaultData.ToXMl(System.Xml.XmlDocument)">
            <summary>
            Converts the data to XML.
            </summary>
            <param name="data">The data.</param>
            <returns>The data as XML.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DefaultData.MakeNew(System.Int32)">
            <summary>
            Creates a new value.
            </summary>
            <param name="PropertyId">The property id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DefaultData.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.DefaultData.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.DefaultData.PropertyId">
            <summary>
            Gets or sets the property id.
            </summary>
            <value>The property id.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.DefaultData.NodeId">
            <summary>
            Gets the node id.
            </summary>
            <value>The node id.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.DefaultData.PreviewMode">
            <summary>
            Gets or sets a value indicating whether preview mode is switched on.
            In preview mode, the <see cref="P:umbraco.cms.businesslogic.datatype.DefaultData.Value"/> setter saves to a temporary location
            instead of persistent storage, which the getter also reads from on subsequent access.
            Switching off preview mode restores the persistent value.
            </summary>
            <value><c>true</c> if preview mode is switched on; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.FileHandlerData.EnsureLoadedContentItem(System.Guid)">
            <summary>
            Called to ensure we have a valid LoadedContentItem.
            </summary>
            <param name="version"></param>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.FileHandlerData.LoadedContentItem">
            <summary>
            Gets/sets the loaded Conent object which we can resolve from other classes since this class sets it's properties
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.PreValue">
            <summary>
            A simple class for storing predefined values on a datatype.
            A prevalue contains a value, a unique key and sort order.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.PreValue"/> class.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValue.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.PreValue"/> class.
            </summary>
            <param name="Id">The id.</param>
            <param name="SortOrder">The sort order.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.PreValue"/> class.
            </summary>
            <param name="Id">The id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValue.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.PreValue"/> class.
            </summary>
            <param name="DataTypeId">The data type id.</param>
            <param name="Value">The value.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValue.MakeNew(System.Int32,System.String)">
            <summary>
            Create a new pre value with a value
            </summary>
            <param name="dataTypeDefId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValue.Delete">
            <summary>
            Deletes a prevalue item
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValue.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValue.initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.PreValue.DataTypeId">
            <summary>
            Gets or sets the data type id.
            </summary>
            <value>The data type id.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.PreValue.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.PreValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.PreValue.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="T:umbraco.cms.businesslogic.ISaveHandlerContents">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ISaveHandlerContents.Execute(umbraco.cms.businesslogic.Content)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroEngineFactory.GetSupportedLanguages">
            <summary>
            Returns a collectino of MacroEngineLanguage objects, each of which describes a file extension and an associated macro engine
            </summary>
            <returns></returns>
            <remarks>
            Until the macro engines are rewritten, this method explicitly ignores the PartialViewMacroEngine because this method 
            is essentially just used for any macro engine that stores it's files in the ~/macroScripts folder where file extensions
            cannot overlap.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroEngineFactory.GetSupportedUILanguages">
            <summary>
            Returns a collectino of MacroEngineLanguage objects, each of which describes a file extension and an associated macro engine that
            supports file extension lookups.
            </summary>
            <returns></returns>		
            <remarks>
            The PartialViewMacroEngine will never be returned in these results because it does not support searching by file extensions. See
            the notes in the PartialViewMacroEngine regarding this.
            </remarks>
        </member>
        <member name="T:umbraco.cms.businesslogic.Packager.FileResources.PackageFiles">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Packager.FileResources.PackageFiles.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Packager.FileResources.PackageFiles.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Packager.FileResources.PackageFiles.Packages">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;packages&gt;&lt;/packages&gt;.
             </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.standardPackageActions.addApplication">
            <summary>
            This class implements the IPackageAction Interface, used to execute code when packages are installed.
            All IPackageActions only takes a PackageName and a XmlNode as input, and executes based on the data in the xmlnode.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:umbraco.cms.businesslogic.packager.standardPackageActions.addApplication.Execute(System.String,System.Xml.XmlNode)" -->
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.addApplication.Alias">
            <summary>
            Action alias.
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.standardPackageActions.addDashboardSection">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:umbraco.cms.businesslogic.packager.standardPackageActions.addDashboardSection.Execute(System.String,System.Xml.XmlNode)" -->
        <!-- Badly formed XML comment ignored for member "T:umbraco.cms.businesslogic.packager.standardPackageActions.addStringToHtmlElement" -->
        <!-- Badly formed XML comment ignored for member "M:umbraco.cms.businesslogic.packager.standardPackageActions.addStringToHtmlElement.Execute(System.String,System.Xml.XmlNode)" -->
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.addStringToHtmlElement.Undo(System.String,System.Xml.XmlNode)">
            <summary>
            Undoes the addStringToHtml Execute() method, by removing the same string from the same template.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.addStringToHtmlElement.Alias">
            <summary>
            Action alias.
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.standardPackageActions.allowDoctype">
            <summary>
            This class implements the IPackageAction Interface, used to execute code when packages are installed.
            All IPackageActions only takes a PackageName and a XmlNode as input, and executes based on the data in the xmlnode.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.allowDoctype.Execute(System.String,System.Xml.XmlNode)">
            <summary>
            Allows a documentType to be created below another documentType.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <example><code>
            <Action runat="install" alias="allowDocumenttype" documentTypeAlias="MyNewDocumentType" parentDocumentTypeAlias="HomePage"  />
            </code></example>
            <returns>Returns true on success</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.allowDoctype.Undo(System.String,System.Xml.XmlNode)">
            <summary>
            This action has no undo.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.allowDoctype.Alias">
            <summary>
            Action Alias.
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.standardPackageActions.moveRootDocument">
            <summary>
            This class implements the IPackageAction Interface, used to execute code when packages are installed.
            All IPackageActions only takes a PackageName and a XmlNode as input, and executes based on the data in the xmlnode.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.moveRootDocument.Execute(System.String,System.Xml.XmlNode)">
            <summary>
            Executes the specified package action.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <example><code>
            <Action runat="install" alias="moveRootDocument" documentName="News" parentDocumentType="Home"  />
            </code></example>
            <returns>True if executed succesfully</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.moveRootDocument.Undo(System.String,System.Xml.XmlNode)">
            <summary>
            This action has no undo.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.moveRootDocument.Alias">
            <summary>
            Action alias
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.standardPackageActions.publishRootDocument">
            <summary>
            This class implements the IPackageAction Interface, used to execute code when packages are installed.
            All IPackageActions only takes a PackageName and a XmlNode as input, and executes based on the data in the xmlnode.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.publishRootDocument.Execute(System.String,System.Xml.XmlNode)">
            <summary>
            Executes the specified package action.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <example>
            <Action runat="install" alias="publishRootDocument" documentName="News"  />
            </example>
            <returns>True if executed succesfully</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.publishRootDocument.Undo(System.String,System.Xml.XmlNode)">
            <summary>
            This action has no undo.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.publishRootDocument.Alias">
            <summary>
            Action alias
            </summary>
            <returns></returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.propertytype.PropertyTypeGroup.SqlHelper">
            <summary>
            Gets the SQL helper.
            </summary>
            <value>The SQL helper.</value>
        </member>
        <member name="M:umbraco.cms.businesslogic.Tags.Tag.RemoveTag(System.Int32)">
            <summary>
            Removes a tag from the database, this will also remove all relations
            </summary>
            <param name="tagId"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.Tags.Tag.RemoveTagsFromNode(System.Int32)">
            <summary>
            Delete all tag associations for the node specified
            </summary>
            <param name="nodeId"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:umbraco.cms.businesslogic.Tags.Tag.RemoveTagsFromNode(System.Int32,System.String)" -->
        <member name="M:umbraco.cms.businesslogic.Tags.Tag.RemoveTagFromNode(System.Int32,System.String,System.String)">
            <summary>
            Remove a single tag association
            </summary>
            <param name="nodeId"></param>
            <param name="tag"></param>
            <param name="group"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.Tags.Tag.GetTags(System.Int32)">
            <summary>
            Gets the tags from node as ITag objects.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Tags.Tag.GetTags(System.String)">
            <summary>
            Gets the tags from group as ITag objects.
            </summary>
            <param name="group">The group.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Tags.Tag.GetTags">
            <summary>
            Gets all the tags as ITag objects
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.task.Tasks">
            <summary>
            A collection of tasks.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Tasks.Add(umbraco.cms.businesslogic.task.Task)">
            <summary>
            Adds the specified new task.
            </summary>
            <param name="NewTask">The new task.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Tasks.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:umbraco.cms.businesslogic.task.Task"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.DocumentVersionList">
            <summary>
            A lightweight datastructure used to represent a version of a document
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentVersionList.#ctor(System.Guid,System.DateTime,System.String,umbraco.BusinessLogic.User)">
            <summary>
            Initializes a new instance of the DocumentVersionList class.
            </summary>
            <param name="Version">Unique version id</param>
            <param name="Date">Version createdate</param>
            <param name="Text">Version name</param>
            <param name="User">Creator</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.DocumentVersionList.Version">
            <summary>
            The unique id of the version
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.DocumentVersionList.Date">
            <summary>
            The date of the creation of the version 
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.DocumentVersionList.Text">
            <summary>
            The name of the document in the version
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.DocumentVersionList.User">
            <summary>
            The user which created the version
            </summary>
        </member>
        <member name="M:umbraco.cms.helpers.Casing.SafeAlias(System.String)">
            <summary>
            A helper method to ensure that an Alias string doesn't contains any illegal characters
            which is defined in a private constant 'ValidCharacters' in this class. 
            Conventions over configuration, baby. You can't touch this - MC Hammer!
            </summary>
            <param name="alias">The alias.</param>
            <returns>An alias guaranteed not to contain illegal characters</returns>
        </member>
        <member name="T:umbraco.cms.PluginManagerExtensions">
            <summary>
            Extension methods for the PluginTypeResolver
            </summary>
        </member>
        <member name="M:umbraco.cms.PluginManagerExtensions.ResolveActionHandlers(Umbraco.Core.PluginManager)">
            <summary>
            Returns all available IActionHandler in application
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.PluginManagerExtensions.ResolveActions(Umbraco.Core.PluginManager)">
            <summary>
            Returns all available IActions in application
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.PluginManagerExtensions.ResolveMacroEngines(Umbraco.Core.PluginManager)">
            <summary>
            Returns all available IDataType in application
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.PluginManagerExtensions.ResolveMediaFactories(Umbraco.Core.PluginManager)">
            <summary>
            Returns all available IMediaFactory in application
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.cache.Cache">
            <summary>
            Used to easily store and retreive items from the cache.
            </summary>
            <remarks>
            This whole class will become obsolete, however one of the methods is still used that is not ported over to the new CacheHelper
            class so that is why the class declaration is not marked obsolete.
            We haven't migrated it because I don't know why it is needed.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.cache.Cache.ClearAllCache">
            <summary>
            Clears everything in umbraco's runtime cache, which means that not only
            umbraco content is removed, but also other cache items from pages running in
            the same application / website. Use with care :-)
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.cache.Cache.ClearCacheItem(System.String)">
            <summary>
            Clears the item in umbraco's runtime cache with the given key 
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.cache.Cache.ClearCacheObjectTypes(System.String)">
            <summary>
            Clears all objects in the System.Web.Cache with the System.Type name as the
            input parameter. (using [object].GetType())
            </summary>
            <param name="TypeName">The name of the System.Type which should be cleared from cache ex "System.Xml.XmlDocument"</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.cache.Cache.ClearCacheByKeySearch(System.String)">
            <summary>
            Clears all cache items that starts with the key passed.
            </summary>
            <param name="KeyStartsWith">The start of the key</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.cache.Cache.ReturnCacheItemsOrdred">
            <summary>
            Retrieve all cached items
            </summary>
            <returns>A hastable containing all cacheitems</returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.CMSModuleI">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSModuleI.UniqueId">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.CMSNode">
            <summary>
            CMSNode class serves as the base class for many of the other components in the cms.businesslogic.xx namespaces.
            Providing the basic hierarchical data structure and properties Text (name), Creator, Createdate, updatedate etc.
            which are shared by most umbraco objects.
            
            The child classes are required to implement an identifier (Guid) which is used as the objecttype identifier, for 
            distinguishing the different types of CMSNodes (ex. Documents/Medias/Stylesheets/documenttypes and so forth).
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.CountByObjectType(System.Guid)">
            <summary>
            Get a count on all CMSNodes given the objecttype
            </summary>
            <param name="objectType">The objecttype identifier</param>
            <returns>
            The number of CMSNodes of the given objecttype
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.CountSubs(System.Int32)">
            <summary>
            Number of ancestors of the current CMSNode
            </summary>
            <param name="Id">The CMSNode Id</param>
            <returns>
            The number of ancestors from the given CMSNode
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.CountLeafNodes(System.Int32,System.Guid)">
            <summary>
            Returns the number of leaf nodes from the newParent id for a given object type
            </summary>
            <param name="parentId"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.IsNode(System.Guid)">
            <summary>
            Method for checking if a CMSNode exits with the given Guid
            </summary>
            <param name="uniqueID">Identifier</param>
            <returns>True if there is a CMSNode with the given Guid</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.IsNode(System.Int32)">
            <summary>
            Method for checking if a CMSNode exits with the given id
            </summary>
            <param name="Id">Identifier</param>
            <returns>True if there is a CMSNode with the given id</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.getAllUniquesFromObjectType(System.Guid)">
            <summary>
            Retrieve a list of the unique id's of all CMSNodes given the objecttype
            </summary>
            <param name="objectType">The objecttype identifier</param>
            <returns>
            A list of all unique identifiers which each are associated to a CMSNode
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.getAllUniqueNodeIdsFromObjectType(System.Guid)">
            <summary>
            Retrieve a list of the node id's of all CMSNodes given the objecttype
            </summary>
            <param name="objectType">The objecttype identifier</param>
            <returns>
            A list of all node ids which each are associated to a CMSNode
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.TopMostNodeIds(System.Guid)">
            <summary>
            Retrieves the top level nodes in the hierarchy
            </summary>
            <param name="ObjectType">The Guid identifier of the type of objects</param>
            <returns>
            A list of all top level nodes given the objecttype
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.MakeNew(System.Int32,System.Guid,System.Int32,System.Int32,System.String,System.Guid)">
            <summary>
            Given the protected modifier the CMSNode.MakeNew method can only be accessed by
            derived classes &gt; who by definition knows of its own objectType.
            </summary>
            <param name="parentId">The newParent CMSNode id</param>
            <param name="objectType">The objecttype identifier</param>
            <param name="userId">Creator</param>
            <param name="level">The level in the tree hieararchy</param>
            <param name="text">The name of the CMSNode</param>
            <param name="uniqueID">The unique identifier</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.getUniquesFromObjectTypeAndFirstLetter(System.Guid,System.Char)">
            <summary>
            Retrieve a list of the id's of all CMSNodes given the objecttype and the first letter of the name.
            </summary>
            <param name="objectType">The objecttype identifier</param>
            <param name="letter">Firstletter</param>
            <returns>
            A list of all CMSNodes which has the objecttype and a name that starts with the given letter
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.#ctor">
            <summary>
            Empty constructor that is not suported
            ...why is it here?
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.CMSNode"/> class.
            </summary>
            <param name="Id">The id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.CMSNode"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="noSetup">if set to <c>true</c> [no setup].</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.CMSNode"/> class.
            </summary>
            <param name="uniqueID">The unique ID.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.Equals(System.Object)">
            <summary>
            Ensures uniqueness by id
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.GetHashCode">
            <summary>
            Ensures uniqueness by id
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.ToXml(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            An xml representation of the CMSNOde
            </summary>
            <param name="xd">Xmldocument context</param>
            <param name="Deep">If true the xml will append the CMSNodes child xml</param>
            <returns>The CMSNode Xmlrepresentation</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.Move(System.Int32)">
            <summary>
            Moves the CMSNode from the current position in the hierarchy to the target
            </summary>
            <param name="NewParentId">Target CMSNode id</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.GetDescendants">
            <summary>
            Returns all descendant nodes from this node.
            </summary>
            <returns></returns>
            <remarks>
            This doesn't return a strongly typed IEnumerable object so that we can override in in super clases
            and since this class isn't a generic (thought it should be) this is not strongly typed.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.SetText(System.String)">
            <summary>
            This allows inheritors to set the underlying text property without persisting the change to the database.
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.setupNode">
            <summary>
            Sets up the internal data of the CMSNode, used by the various constructors
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.SetupNodeForTree(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32,System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            Sets up the node for the content tree, this makes no database calls, just sets the underlying properties
            </summary>
            <param name="uniqueID">The unique ID.</param>
            <param name="nodeObjectType">Type of the node object.</param>
            <param name="Level">The level.</param>
            <param name="ParentId">The newParent id.</param>
            <param name="UserId">The user id.</param>
            <param name="Path">The path.</param>
            <param name="Text">The text.</param>
            <param name="CreateDate">The create date.</param>
            <param name="hasChildren">if set to <c>true</c> [has children].</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.UpdateTempPathForTree(System.String)">
            <summary>
            Updates the temp path for the content tree.
            </summary>
            <param name="Path">The path.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.SavePreviewXml(System.Xml.XmlNode,System.Guid)">
            <summary>
            This needs to be synchronized since we are doing multiple sql operations in one method
            </summary>
            <param name="x"></param>
            <param name="versionId"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.FireCancelableEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Calls the subscribers of a cancelable event handler,
            stopping at the event handler which cancels the event (if any).
            </summary>
            <typeparam name="T">Type of the event arguments.</typeparam>
            <param name="cancelableEvent">The event to fire.</param>
            <param name="sender">Sender of the event.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.FireAfterSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.FireAfterNew(umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Raises the <see cref="E:AfterNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.FireBeforeMove(umbraco.cms.businesslogic.MoveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeMove"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.CMSNode.FireAfterMove(umbraco.cms.businesslogic.MoveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterMove"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.DefaultIconClasses">
            <summary>
            Gets the default icon classes.
            </summary>
            <value>The default icon classes.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.SqlHelper">
            <summary>
            Gets the SQL helper.
            </summary>
            <value>The SQL helper.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.HasChildren">
            <summary>
            Does the current CMSNode have any child nodes.
            </summary>
            <value>
            	<c>true</c> if this instance has children; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.IsTrashed">
            <summary>
            Determines if the node is in the recycle bin.
            This is only relavent for node types that support a recyle bin (such as Document/Media)
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.sortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.CreateDateTime">
            <summary>
            Gets or sets the create date time.
            </summary>
            <value>The create date time.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.User">
            <summary>
            Gets the creator
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.ParentId">
            <summary>
            Get the newParent id of the node
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Parent">
            <summary>
            Given the hierarchical tree structure a CMSNode has only one newParent but can have many children
            </summary>
            <value>The newParent.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Path">
            <summary>
            An comma separated string consisting of integer node id's
            that indicates the path from the topmost node to the given node
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Level">
            <summary>
            Returns an integer value that indicates in which level of the
            tree structure the given node is
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.nodeObjectType">
            <summary>
            All CMSNodes has an objecttype ie. Webpage, StyleSheet etc., used to distinguish between the different
            object types for for fast loading children to the tree.
            </summary>
            <value>The type of the node object.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Relations">
            <summary>
            Besides the hierarchy it's possible to relate one CMSNode to another, use this for alternative
            non-strict hierarchy
            </summary>
            <value>The relations.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Tasks">
            <summary>
            Returns all tasks associated with this node
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Children">
            <summary>
            The basic recursive tree pattern
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.ChildrenOfAllObjectTypes">
            <summary>
            Retrieve all CMSNodes in the umbraco installation
            Use with care.
            </summary>
            <value>The children of all object types.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.UniqueId">
            <summary>
            Unique identifier of the CMSNode, used when locating data.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Text">
            <summary>
            Human readable name/label
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.MenuItems">
            <summary>
            The menu items used in the tree view
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.DefaultEditorURL">
            <summary>
            Not implemented, always returns "about:blank"
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.Image">
            <summary>
            The icon in the tree
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.CMSNode.OpenImage">
            <summary>
            The "open/active" icon in the tree
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.CMSNode.BeforeSave">
            <summary>
            Occurs before a node is saved.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.CMSNode.AfterSave">
            <summary>
            Occurs after a node is saved.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.CMSNode.AfterNew">
            <summary>
            Occurs after a new node is created.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.CMSNode.BeforeDelete">
            <summary>
            Occurs before a node is deleted.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.CMSNode.AfterDelete">
            <summary>
            Occurs after a node is deleted.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.CMSNode.BeforeMove">
            <summary>
            Occurs before a node is moved.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.CMSNode.AfterMove">
            <summary>
            Occurs after a node is moved.
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.Content">
            <summary>
            Content is an intermediate layer between CMSNode and class'es which will use generic data.
            
            Content is a datastructure that holds generic data defined in its corresponding ContentType. Content can in some
            sence be compared to a row in a database table, it's contenttype hold a definition of the columns and the Content
            contains the data
            
            Note that Content data in umbraco is *not* tablular but in a treestructure.
            
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.getContentOfContentType(umbraco.cms.businesslogic.ContentType)">
            <summary>
            Retrive a list of Content sharing the ContentType
            </summary>
            <param name="ct">The ContentType</param>
            <returns>A list of Content objects sharing the ContentType defined.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.GetContentFromVersion(System.Guid)">
            <summary>
            Initialize a contentobject given a version.
            </summary>
            <param name="version">The version identifier</param>
            <returns>The Content object from the given version</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.Save">
            <summary>
            Used to persist object changes to the database. This ensures that the properties are re-loaded from the database.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.getProperty(System.String)">
            <summary>
            Retrieve a Property given the alias
            </summary>
            <param name="alias">Propertyalias (defined in the documenttype)</param>
            <returns>The property with the given alias</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.getProperty(umbraco.cms.businesslogic.propertytype.PropertyType)">
            <summary>
            Retrieve a property given the propertytype
            </summary>
            <param name="pt">PropertyType</param>
            <returns>The property with the given propertytype</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.addProperty(umbraco.cms.businesslogic.propertytype.PropertyType,System.Guid)">
            <summary>
            Add a property to the Content
            </summary>
            <param name="pt">The PropertyType of the Property</param>
            <param name="versionId">The version of the document on which the property should be add'ed</param>
            <returns>The new Property</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.ToXml(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            An Xmlrepresentation of a Content object.
            </summary>
            <param name="xd">Xmldocument context</param>
            <param name="Deep">If true, the Contents children are appended to the Xmlnode recursive</param>
            <returns>The Xmlrepresentation of the data on the Content object</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.XmlRemoveFromDB">
            <summary>
            Removes the Xml cached in the database - unpublish and cleaning
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.XmlGenerate(System.Xml.XmlDocument)">
            <summary>
            Generates the Content XmlNode
            </summary>
            <param name="xd"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.delete">
            <summary>
            Deletes the current Content object, must be overridden in the child class.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.InitializeContent(System.Int32,System.Guid,System.DateTime,System.String)">
            <summary>
            Sets up the ContentType property for this content item and sets the addition content properties manually.
            If the ContentType property is not already set, then this will get the ContentType from Cache.
            </summary>
            <param name="InitContentType"></param>
            <param name="InitVersion"></param>
            <param name="InitVersionDate"></param>
            <param name="InitContentTypeIcon"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.CreateContent(umbraco.cms.businesslogic.ContentType)">
            <summary>
            Creates a new Content object from the ContentType.
            </summary>
            <param name="ct"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.createNewVersion(System.DateTime)">
            <summary>
            Method for creating a new version of the data associated to the Content. 
            </summary>
            <returns>The new version Id</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.SaveXmlDocument(System.Xml.XmlNode)">
            <summary>
            Saves the XML document to the data source.
            </summary>
            <param name="node">The XML Document.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.DeleteAssociatedMediaFiles">
            <summary>
            Deletes all files and the folder that have been saved with this content item which are based on the Upload data
            type. This is called when a media or content tree node is deleted. 
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.ClearLoadedProperties">
            <summary>
            Clears the locally loaded properties which forces them to be reloaded next time they requested
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.EnsureProperties">
            <summary>
            Makes sure that the properties are initialized. If they are already initialized, this does nothing.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.InitializeProperties">
            <summary>
            Loads all properties from database into objects. If this method is re-called, it will re-query the database.
            </summary>
            <remarks>
            This optimizes sql calls. This will first check if all of the properties have been loaded. If not, 
            then it will query for all property types for the current version from the db. It will then iterate over each
            cmdPropertyData row and store the id and propertyTypeId in a list for lookup later. Once the records have been 
            read, we iterate over the cached property types for this ContentType and create a new property based on
            our stored list of proeprtyTypeIds. We then have a cached list of Property objects which will get returned
            on all subsequent calls and is also used to return a property with calls to getProperty.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.deleteAllProperties">
            <summary>
            Optimized method for bulk deletion of properties´on a Content object.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Content.hasVersion">
            <summary>
            Indication if the Content exists in at least one version.
            </summary>
            <returns>Returns true if the Content has a version</returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.Content.ContentType">
            <summary>
            The current Content objects ContentType, which defines the Properties of the Content (data)
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Content.ContentTypeIcon">
            <summary>
            The icon used in the tree - placed in this layer for performance reasons.
            </summary>
            <remarks>
            This is here for performance reasons only. If the _contentTypeIcon is manually set
            then a database call is not made to initialize the ContentType.
            
            The data layer has slightly changed in 4.1 so that for Document and Media, the ContentType
            is automatically initialized with one SQL call when creating the documents/medias so using this
            method or the ContentType.IconUrl property when accessing the icon from Media or Document 
            won't affect performance.
            </remarks>
        </member>
        <member name="P:umbraco.cms.businesslogic.Content.VersionDate">
            <summary>
            The createtimestamp on this version
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Content.GenericProperties">
            <summary>
            Retrieve a list of generic properties of the content
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Content.getProperties">
            <summary>
            Retrieve a list of generic properties of the content
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Content.Version">
            <summary>
            Content is under version control, you are able to programatically create new versions
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.contentitem.ContentItem">
            <summary>
            Summary description for ContentItem.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.contentitem.ContentItem.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.contentitem.ContentItemType">
            <summary>
            Summary description for ContentItemType.
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.ContentType">
            <summary>
            ContentTypes defines the datafields of Content objects of that type, it's similar to defining columns 
            in a database table, where the PropertyTypes on the ContentType each responds to a Column, and the Content
            objects is similar to a row of data, where the Properties on the Content object corresponds to the PropertyTypes
            on the ContentType.
            
            Besides data definition, the ContentType also defines the sorting and grouping (in tabs) of Properties/Datafields
            on the Content and which Content (by ContentType) can be created as child to the Content of the ContentType.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.ContentType"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.#ctor(System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Creates a new content type object manually.
            </summary>
            <param name="id"></param>
            <param name="alias"></param>
            <param name="icon"></param>
            <param name="thumbnail"></param>
            <param name="masterContentType"></param>
            <remarks>
            This is like creating a ContentType node using optimized mode but this lets you set
            all of the properties that are initialized normally from the database.
            This is used for performance reasons.
            </remarks>
        </member>
        <member name="F:umbraco.cms.businesslogic.ContentType.AliasToNames">
            <summary>
            Used for cache so we don't have to lookup column names all the time, this is actually only used for the ChildrenAsTable methods
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.GetAliasesAndNames(System.String)">
            <summary>
            Returns a content type's columns alias -> name mapping
            </summary>
            <param name="contentTypeAlias"></param>
            <returns></returns>
            <remarks>
            This is currently only used for ChildrenAsTable methods, caching is moved here instead of in the app logic so we can clear the cache
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.RemoveFromDataTypeCache(System.String)">
            <summary>
            Removes the static object cache
            </summary>
            <param name="contentTypeAlias"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.RemoveAllDataTypeCache">
            <summary>
            Removes the static object cache
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.GetContentType(System.Int32)">
            <summary>
            Gets the type of the content.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.FlushTabCache(System.Int32,System.Int32)">
            <summary>
            Flushes the tab cache.
            </summary>
            <param name="TabId">The tab id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Create(System.Int32,System.String,System.String)">
            <summary>
            Creates a new ContentType
            </summary>
            <param name="NodeId">The CMSNode Id of the ContentType</param>
            <param name="Alias">The Alias of the ContentType</param>
            <param name="IconUrl">The Iconurl of Contents of this ContentType</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.GetByAlias(System.String)">
            <summary>
            Initializes a ContentType object given the Alias.
            </summary>
            <param name="Alias">Alias of the content type</param>
            <returns>
            The ContentType with the corrosponding Alias
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.getTabIdFromPropertyType(umbraco.cms.businesslogic.propertytype.PropertyType)">
            <summary>
            Helper method for getting the Tab id from a given PropertyType
            </summary>
            <param name="pt">The PropertyType from which to get the Tab Id</param>
            <returns>The Id of the Tab on which the PropertyType is placed</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.RebuildXmlStructuresForContent">
            <summary>
            Used to rebuild all of the xml structures for content of the current content type in the cmsContentXml table
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.GetContentIdsForContentType">
            <summary>
            Returns all content ids associated with this content type
            </summary>
            <returns></returns>
            <remarks>
            This will generally just return the content ids associated with this content type but in the case
            of a DocumentType where we can have inherited types, this will return all content Ids that are of 
            this content type or any descendant types as well.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.RebuildXmlStructureForContentItem(System.Int32)">
            <summary>
            Rebuilds the xml structure for the content item by id
            </summary>
            <param name="contentId"></param>
            <remarks>
            This is not thread safe
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.ClearXmlStructuresForContent">
            <summary>
            Clears all xml structures in the cmsContentXml table for the current content type
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.ClearVirtualTabs">
            <summary>
            Clears the locally loaded tabs which forces them to be reloaded next time they requested
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.GetRawText">
            <summary>
            Gets the raw text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.GetAll">
            <summary>
            Retrieve a list of all ContentTypes
            </summary>
            <returns>The list of all ContentTypes</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.AddPropertyType(umbraco.cms.businesslogic.datatype.DataTypeDefinition,System.String,System.String)">
            <summary>
            Adding a PropertyType to the ContentType, will add a new datafield/Property on all Documents of this Type.
            </summary>
            <param name="dt">The DataTypeDefinition of the PropertyType</param>
            <param name="Alias">The Alias of the PropertyType</param>
            <param name="Name">The userfriendly name</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.SetTabOnPropertyType(umbraco.cms.businesslogic.propertytype.PropertyType,System.Int32)">
            <summary>
            Adding a PropertyType to a Tab, the Tabs are primarily used for making the 
            editing interface more userfriendly.
            </summary>
            <param name="pt">The PropertyType</param>
            <param name="TabId">The Id of the Tab</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.removePropertyTypeFromTab(umbraco.cms.businesslogic.propertytype.PropertyType)">
            <summary>
            Removing a PropertyType from the associated Tab
            </summary>
            <param name="pt">The PropertyType which should be freed from its tab</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.AddVirtualTab(System.String)">
            <summary>
            Creates a new Tab on the Content
            </summary>
            <param name="Caption">Returns the Id of the new Tab</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.DeleteVirtualTab(System.Int32)">
            <summary>
            Releases all PropertyTypes on tab (this does not delete the PropertyTypes) and then Deletes the Tab
            </summary>
            <param name="id">The Id of the Tab to be deleted.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.SetTabName(System.Int32,System.String)">
            <summary>
            Updates the caption of the Tab
            </summary>
            <param name="tabId">The Id of the Tab to be updated</param>
            <param name="Caption">The new Caption</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.SetTabSortOrder(System.Int32,System.Int32)">
            <summary>
            Updates the sort order of the Tab
            </summary>
            <param name="tabId">The Id of the Tab to be updated</param>
            <param name="sortOrder">The new order number</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.getPropertyType(System.String)">
            <summary>
            Retrieve a PropertyType by it's alias
            </summary>
            <param name="alias">PropertyType alias</param>
            <returns>The PropertyType with the given Alias</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.delete">
            <summary>
            Deletes the current ContentType
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.setupNode">
            <summary>
            Set up the internal data of the ContentType
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.FlushFromCache(System.Int32)">
            <summary>
            Flushes the cache.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.GetPropertiesCacheKey">
            <summary>
            The cache key used to cache the properties for the content type
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.EnsureVirtualTabs">
            <summary>
            Checks if we've loaded the virtual tabs into memory and if not gets them from the databse.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.InitializeVirtualTabs">
            <summary>
            Loads the tabs into memory from the database and stores them in a local list for retreival
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.Alias">
            <summary>
            The Alias of the ContentType, is used for import/export and more human readable initialization see: GetByAlias 
            method.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.IconUrl">
            <summary>
            A Content object is often (always) represented in the treeview in the Umbraco console, the ContentType defines
            which Icon the Content of this type is representated with.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.IsContainerContentType">
            <summary>
            Get or Sets the Container status of the Content Type. A Container Content Type doesn't show its children in the tree,
            but instead adds a tab when edited showing its children in a grid
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.AllowAtRoot">
            <summary>
            Gets or sets the 'allow at root' boolean
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.Thumbnail">
            <summary>
            Gets or sets the thumbnail.
            </summary>
            <value>The thumbnail.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.Text">
            <summary>
            Human readable name/label
            </summary>
            <value></value>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.PropertyTypes">
            <summary>
            The "datafield/column" definitions, a Content object of this type will have an equivalent
            list of Properties.
            </summary>		
            <remarks>
            Property types are are cached so any calls to this property will returne cached versions
            </remarks>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.MasterContentType">
            <summary>
            Gets or sets the Master Content Type for inheritance of tabs and properties.
            </summary>
            <value>The ID of the Master Content Type</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.getVirtualTabs">
            <summary>
            Retrieve a list of all Tabs on the current ContentType
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.AllowedChildContentTypeIDs">
            <summary>
            The list of ContentType Id's that defines which Content (by ContentType) can be created as child 
            to the Content of this ContentType
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.ContentType.TabI">
            <summary>
            An interface for the tabs, should be refactored
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.TabI.GetPropertyTypes(System.Int32)">
            <summary>
            Gets a list of all PropertyTypes on the Tab for a given ContentType.
            </summary>
            <remarks>This includes properties inherited from master content types.</remarks>
            <param name="contentTypeId">The unique identifier of the ContentType.</param>
            <returns>An array of PropertyType.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.TabI.GetPropertyTypes(System.Int32,System.Boolean)">
            <summary>
            Gets a list of all PropertyTypes on the Tab for a given ContentType.
            </summary>
            <param name="contentTypeId">The unique identifier of the ContentType.</param>
            <param name="includeInheritedProperties">Indicates whether properties inherited from master content types should be included.</param>
            <returns>An array of PropertyType.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.TabI.GetAllPropertyTypes">
            <summary>
            Gets a list if all PropertyTypes on the Tab for all ContentTypes.
            </summary>
            <returns>An IEnumerable of all the PropertyTypes.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.TabI.MoveUp">
            <summary>
            Method for moving the tab up
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.TabI.GetRawCaption">
            <summary>
            Method for retrieving the original, non processed name from the db
            </summary>
            <returns>The original, non processed name from the db</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.TabI.MoveDown">
            <summary>
            Method for moving the tab down
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.TabI.Id">
            <summary>
            Public identifier
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.TabI.Caption">
            <summary>
            The text on the tab
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.TabI.SortOrder">
            <summary>
            The sortorder of the tab
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.TabI.ContentType">
            <summary>
            The contenttype
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.ContentType.Tab">
            <summary>
            A tab is merely a way to organize data on a ContentType to make it more
            human friendly
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Tab.#ctor(System.Int32,System.String,System.Int32,umbraco.cms.businesslogic.ContentType)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.ContentType.Tab"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="caption">The caption.</param>
            <param name="sortOrder">The sort order.</param>
            <param name="cType">Type of the c.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Tab.FlushCache(System.Int32,System.Int32)">
            <summary>
            Flushes the cache.
            </summary>
            <param name="id">The id.</param>
            <param name="contentTypeId"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Tab.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Tab.GetCaptionById(System.Int32)">
            <summary>
            Gets the tab caption by id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Tab.MoveUp">
            <summary>
            Moves the Tab up
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Tab.MoveDown">
            <summary>
            Moves the Tab down
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Tab.GetRawCaption">
            <summary>
            Method for retrieving the original, non processed name from the db
            </summary>
            <returns>
            The original, non processed name from the db
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.ContentType.Tab.FixTabOrder">
            <summary>
            Fixes the tab order.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.Tab.PropertyTypes">
            <summary>
            A list of PropertyTypes on the Tab
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.Tab.SortOrder">
            <summary>
            The sortorder of the tab
            </summary>
            <value></value>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.Tab.Id">
            <summary>
            Public identifier
            </summary>
            <value></value>
        </member>
        <member name="P:umbraco.cms.businesslogic.ContentType.Tab.Caption">
            <summary>
            The text on the tab
            </summary>
            <value></value>
        </member>
        <member name="M:umbraco.cms.businesslogic.contentitem.ContentItemType.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.AbstractDataEditor">
            <summary>
            A much easier way to build custom datatypes. Inherit from this class
            and change Id and DataTypeName and then set the RenderControl property
            to your .NET webcontrol to be displayed
            </summary>
            <remarks>
            Made by NH in flight SK 925 on his way to MIX09
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.BaseDataType.SetDataTypeProperties(System.String,umbraco.cms.businesslogic.datatype.DBTypes)">
            <summary>
            This is used internally for performance reasons since we are querying for all of the data properties at once in the 
            DefaultData object, therefore, the DefaultDataObject will set these properties manually instead of incurring a bunch 
            of additional SQL calls.
            </summary>
            <param name="dataField"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.BaseDataType.GetDBType(System.String)">
            <summary>
            Returns the DBType based on the row value in the dbType column of the cmsDataType
            </summary>
            <param name="dbtypestr"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.BaseDataType.GetDataFieldName(umbraco.cms.businesslogic.datatype.DBTypes)">
            <summary>
            Returns the data column for the data base where the value resides based on the dbType
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="F:umbraco.cms.businesslogic.datatype.AbstractDataEditor.editor">
            <summary>
            The data editor.
            </summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.datatype.AbstractDataEditor.baseData">
            <summary>
            The stored data.
            </summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.datatype.AbstractDataEditor.prevalueEditor">
            <summary>
            The prevalue editor.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.AbstractDataEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.datatype.AbstractDataEditor"/> class.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditor.DataEditorControl">
            <summary>
            Gets the data editor control that is the 'real' IDataEditor control. 
            Hook into the OnSave event in your inherited class' constructor and update the base.Data.Value property to save a value.
            </summary>
            <value>The data editor control.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditor.RenderControl">
            <summary>
            Sets the RenderControl to the control that's rendered when editing. 
            This should be *your* control, so set this property to the WebControl that you're creating.
            </summary>
            <value>
            The render control.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditor.DataEditor">
            <summary>
            Gets the data editor.
            </summary>
            <value>
            The data editor.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditor.Data">
            <summary>
            Gets the stored data.
            </summary>
            <value>
            The stored data.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditor.PrevalueEditor">
            <summary>
            Gets the prevalue editor.
            </summary>
            <value>
            The prevalue editor.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditor.DataTypeName">
            <summary>
            Gets the name of the datatype.
            </summary>
            <value>
            The name of the datatype.
            </value>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.AbstractDataEditor.Id">
            <summary>
            Gets the unique id of the datatype.
            </summary>
            <value>
            The unique id of the datatype.
            </value>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.DataTypeDefinition">
            <summary>
            Datatypedefinitions is the basic buildingblocks of umbraco's documents/medias/members generic datastructure 
            
            A datatypedefinition encapsulates an object which implements the interface IDataType, and are used when defining
            the properties of a document in the documenttype. This extra layer between IDataType and a documenttypes propertytype
            are used amongst other for enabling shared prevalues.
            
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.#ctor(System.Int32)">
            <summary>
            Initialization of the datatypedefinition
            </summary>
            <param name="id">Datattypedefininition id</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.#ctor(System.Guid)">
            <summary>
            Initialization of the datatypedefinition
            </summary>
            <param name="id">Datattypedefininition id</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.GetAll">
            <summary>
            Retrieves a list of all datatypedefinitions
            </summary>
            <returns>A list of all datatypedefinitions</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.MakeNew(umbraco.BusinessLogic.User,System.String)">
            <summary>
            Creates a new datatypedefinition given its name and the user which creates it.
            </summary>
            <param name="u">The user who creates the datatypedefinition</param>
            <param name="Text">The name of the DataTypeDefinition</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.MakeNew(umbraco.BusinessLogic.User,System.String,System.Guid)">
            <summary>
            Creates a new datatypedefinition given its name and the user which creates it.
            </summary>
            <param name="u">The user who creates the datatypedefinition</param>
            <param name="Text">The name of the DataTypeDefinition</param>
            <param name="UniqueId">Overrides the CMSnodes uniqueID</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.GetByDataTypeId(System.Guid)">
            <summary>
            Retrieve a list of datatypedefinitions which share the same IDataType datatype
            </summary>
            <param name="DataTypeId">The unique id of the IDataType</param>
            <returns>A list of datatypedefinitions which are based on the IDataType specified</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.IsDefaultData(System.Object)">
            <summary>
            Analyzes an object to see if its basetype is umbraco.editorControls.DefaultData
            </summary>
            <param name="Data">The Data object to analyze</param>
            <returns>True if the basetype is the DefaultData class</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DataTypeDefinition.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.datatype.DataTypeDefinition.DataType">
            <summary>
            The associated datatype, which delivers the methods for editing data, editing prevalues see: umbraco.interfaces.IDataType
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.datatype.DataTypeDefinition.Saving">
            <summary>
            Occurs when a data type is saved.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.datatype.DataTypeDefinition.BeforeDelete">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.datatype.DataTypeDefinition.AfterDelete">
            <summary>
            Occurs when [after delete].
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.DefaultPreValueEditor.#ctor(umbraco.cms.businesslogic.datatype.BaseDataType,System.Boolean)">
            <summary>
            The default editor for editing the build-in pre values in umbraco
            </summary>
            <param name="DataType">The DataType to be parsed</param>
            <param name="DisplayTextBox">Whether to use the default text box</param>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.controls.Factory">
            <summary>
            IDataType factory, handles the registering and retrieval of IDatatypes.
            
            Then registering is done using reflection.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.controls.Factory.DataType(System.Guid)">
            <summary>
            Retrieves the IDataType specified by it's unique ID
            </summary>
            <param name="DataTypeId">The IDataType id</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.controls.Factory.GetNewObject(System.Guid)">
            <summary>
            Retrieves the IDataType specified by it's unique ID
            </summary>
            <param name="DataEditorId">The IDataType id</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.controls.Factory.GetAll">
            <summary>
            Retrieve a complete list of all registered IDataType's
            </summary>
            <returns>A list of IDataType's</returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.datatype.PreValues">
            <summary>
            Any data type in umbraco can have PreValues, which is a simple Key/Value collection of items attached to a specific instance of the data type.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValues.GetPreValues(System.Int32)">
            <summary>
            Gets the pre values collection.
            </summary>
            <param name="DataTypeId">The data type id.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValues.DeleteByDataTypeDefinition(System.Int32)">
            <summary>
            Removes all prevalues with the specified data type definition id
            </summary>
            <param name="dataTypeDefId"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.datatype.PreValues.CountOfPreValues(System.Int32)">
            <summary>
            Returns the number of prevalues for data type definition
            </summary>
            <param name="dataTypeDefId"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.Dictionary">
            <summary>
            The Dictionary is used for storing and retrieving language translated textpieces in Umbraco. It uses
            umbraco.cms.businesslogic.language.Item class as storage and can be used from the public website of umbraco
            all text are cached in memory.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Dictionary.EnsureCache">
            <summary>
            Reads all items from the database and stores in local cache
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Dictionary.ClearCache">
            <summary>
            Used by the cache refreshers to clear the cache on distributed servers
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Dictionary.getTopMostItems">
            <summary>
            Retrieve a list of toplevel DictionaryItems
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.Dictionary.DictionaryItem">
            <summary>
            A DictionaryItem is basically a key/value pair (key/language key/value) which holds the data
            associated to a key in various language translations
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Dictionary.DictionaryItem.#ctor(System.Int32,System.String,System.Guid,System.Guid)">
            <summary>
            Used internally to construct a new item object and store in cache
            </summary>
            <param name="id"></param>
            <param name="key"></param>
            <param name="uniqueKey"></param>
            <param name="parentId"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.Dictionary.DictionaryItem.IsTopMostItem">
            <summary>
            Returns if the dictionaryItem is the root item.            
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.Dictionary.DictionaryItem.setValue(System.String)">
            <summary>
            This sets the value for the placeholder language (id = 0), not for a language with an ID
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.Dictionary.DictionaryItem.Save">
            <summary>
            ensures events fire after setting proeprties
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Dictionary.DictionaryItem.Parent">
            <summary>
            Returns the parent.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Dictionary.DictionaryItem.id">
            <summary>
            The primary key in the database
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.Dictionary.DictionaryItem.key">
            <summary>
            Returns or sets the key.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.MacroErrorEventArgs.Name">
            <summary>
            Name of the faulting macro. 
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.MacroErrorEventArgs.Alias">
            <summary>
            Alias of the faulting macro. 
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.MacroErrorEventArgs.File">
            <summary>
            Filename of the faulting macro.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.MacroErrorEventArgs.Exception">
            <summary>
            Exception raised.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.MacroErrorEventArgs.Behaviour">
            <summary>
            Gets or sets the desired behaviour when a matching macro causes an error. See
            <see cref="T:Umbraco.Core.MacroErrorBehaviour"/> for definitions. By setting this in your event
            you can override the default behaviour defined in UmbracoSettings.config.
            </summary>
            <value>Macro error behaviour enum.</value>
        </member>
        <member name="T:umbraco.cms.businesslogic.language.Language">
            <summary>
            The language class contains methods for creating and modifing installed languages.
            
            A language is used internal in the umbraco console for displaying languagespecific text and 
            in the public website for language/country specific representation of ex. date/time, currencies.
            
            Besides by using the built in Dictionary you are able to store language specific bits and pieces of translated text
            for use in templates.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.language.Language"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.#ctor">
            <summary>
            Empty constructor used to create a language object manually
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.MakeNew(System.String)">
            <summary>
            Creates a new language given the culture code - ie. da-dk  (denmark)
            </summary>
            <param name="cultureCode">Culturecode of the language</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.GetAllAsList">
            <summary>
            Returns all installed languages
            </summary>
            <returns></returns>
            <remarks>
            This will return a cached set of all languages. if the cache is not found it will create it.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.GetByCultureCode(System.String)">
            <summary>
            Gets the language by its culture code, if no language is found, null is returned
            </summary>
            <param name="cultureCode">The culture code.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.Import(System.Xml.XmlNode)">
            <summary>
            Imports a language from XML
            </summary>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.Equals(System.Object)">
            <summary>
            Ensures uniqueness by id
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.GetHashCode">
            <summary>
            Ensures uniqueness by id
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.Delete">
            <summary>
            Deletes the current Language.
            
            Notice: this can have various sideeffects - use with care.
            </summary>
            <remarks>
            You cannot delete the default language: en-US, this is installed by default and is required.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Language.ToXml(System.Xml.XmlDocument)">
            <summary>
            Converts the instance to XML
            </summary>
            <param name="xd">The xml document.</param>
            <returns></returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.language.Language.SqlHelper">
            <summary>
            Gets the SQL helper.
            </summary>
            <value>The SQL helper.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.language.Language.getAll">
            <summary>
            Method for accessing all installed languagess
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.language.Language.id">
            <summary>
            The id used by umbraco to identify the language
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.language.Language.CultureAlias">
            <summary>
            The culture code of the language: ie. Danish/Denmark da-dk
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.language.Language.FriendlyName">
            <summary>
            The user friendly name of the language/country
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.language.Language.BeforeSave">
            <summary>
            Occurs when a language is saved.
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.language.Language.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.language.Language.NewEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.language.Language.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.language.Item">
            <summary>
            THIS CLASS IS NOT INTENDED TO BE USED DIRECTLY IN YOUR CODE, USE THE umbraco.cms.businesslogic.Dictionary class instead
            </summary>
            <remarks>
            This class is used by the DictionaryItem, all caching is handled in the DictionaryItem.Save() method which will ensure that
            cache is invalidated if anything is changed.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Item.EnsureCache">
            <summary>
            Populates the global hash table with the data from the database.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Item.ClearCache">
            <summary>
            Clears the cache, this is used for cache refreshers to ensure that the cache is up to date across all servers 
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Item.Text(System.Guid,System.Int32)">
            <summary>
            Retrieves the value of a languagetranslated item given the key
            </summary>
            <param name="key">Unique identifier</param>
            <param name="languageId">Umbraco languageid</param>
            <returns>The language translated text</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Item.hasText(System.Guid,System.Int32)">
            <summary>
            returns True if there is a value associated to the unique identifier with the specified language
            </summary>
            <param name="key">Unique identifier</param>
            <param name="languageId">Umbraco language id</param>
            <returns>returns True if there is a value associated to the unique identifier with the specified language</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Item.setText(System.Int32,System.Guid,System.String)">
            <summary>
            Updates the value of the language translated item, throws an exeption if the
            key does not exist
            </summary>
            <param name="languageId">Umbraco language id</param>
            <param name="key">Unique identifier</param>
            <param name="value">The new dictionaryvalue</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Item.addText(System.Int32,System.Guid,System.String)">
            <summary>
            Adds a new languagetranslated item to the collection
            
            </summary>
            <param name="languageId">Umbraco languageid</param>
            <param name="key">Unique identifier</param>
            <param name="value"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Item.removeText(System.Guid)">
            <summary>
            Removes all languagetranslated texts associated to the unique identifier.
            </summary>
            <param name="key">Unique identifier</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.language.Item.RemoveByLanguage(System.Int32)">
            <summary>
            Removes all entries by language id.
            Primary used when deleting a language from Umbraco.
            </summary>
            <param name="languageId"></param>
        </member>
        <member name="P:umbraco.cms.businesslogic.language.Item.SqlHelper">
            <summary>
            Gets the SQL helper.
            </summary>
            <value>The SQL helper.</value>
        </member>
        <member name="T:umbraco.cms.businesslogic.macro.Macro">
            <summary>
            The Macro component are one of the umbraco essentials, used for drawing dynamic content in the public website of umbraco.
            
            A Macro is a placeholder for either a xsl transformation, a custom .net control or a .net usercontrol.
            
            The Macro is representated in templates and content as a special html element, which are being parsed out and replaced with the
            output of either the .net control or the xsl transformation when a page is being displayed to the visitor.
            
            A macro can have a variety of properties which are used to transfer userinput to either the usercontrol/custom control or the xsl
            
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.#ctor">
            <summary>
            Macro initializer
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.#ctor(System.Int32)">
            <summary>
            Macro initializer
            </summary>
            <param name="Id">The id of the macro</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.macro.Macro"/> class.
            </summary>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.Delete">
            <summary>
            Deletes the current macro
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.ToXml(System.Xml.XmlDocument)">
            <summary>
            Get an xmlrepresentation of the macro, used for exporting the macro to a package for distribution
            </summary>
            <param name="xd">Current xmldocument context</param>
            <returns>An xmlrepresentation of the macro</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.MakeNew(System.String)">
            <summary>
            Creates a new macro given the name
            </summary>
            <param name="Name">Userfriendly name</param>
            <returns>The newly macro</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.GetAll">
            <summary>
            Retrieve all macroes
            </summary>
            <returns>A list of all macroes</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.Macro.GetByAlias(System.String)">
            <summary>
            Static contructor for retrieving a macro given an alias
            </summary>
            <param name="alias">The alias of the macro</param>
            <returns>If the macro with the given alias exists, it returns the macro, else null</returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.Id">
            <summary>
            id
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.UseInEditor">
            <summary>
            If set to true, the macro can be inserted on documents using the richtexteditor.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.RefreshRate">
            <summary>
            The cache refreshrate - the maximum amount of time the macro should remain cached in the umbraco
            runtime layer.
            
            The macro caches are refreshed whenever a document is changed
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.Alias">
            <summary>
            The alias of the macro - are used for retrieving the macro when parsing the {?UMBRACO_MACRO}{/?UMBRACO_MACRO} element,
            by using the alias instead of the Id, it's possible to distribute macroes from one installation to another - since the id
            is given by an autoincrementation in the database table, and might be used by another macro in the foreing umbraco
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.Name">
            <summary>
            The userfriendly name
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.Assembly">
            <summary>
            If the macro is a wrapper for a custom control, this is the assemly name from which to load the macro
            
            specified like: /bin/mydll (without the .dll extension)
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.Type">
            <summary>
            The relative path to the usercontrol or the assembly type of the macro when using .Net custom controls
            </summary>
            <remarks>
            When using a user control the value is specified like: /usercontrols/myusercontrol.ascx (with the .ascx postfix)
            </remarks>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.Xslt">
            <summary>
            The xsl file used to transform content
            
            Umbraco assumes that the xslfile is present in the "/xslt" folder
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.ScriptingFile">
            <summary>
            This field is used to store the file value for any scripting macro such as python, ruby, razor macros or Partial View Macros        
            </summary>
            <remarks>
            Depending on how the file is stored depends on what type of macro it is. For example if the file path is a full virtual path
            starting with the ~/Views/MacroPartials then it is deemed to be a Partial View Macro, otherwise the file extension of the file
            saved will determine which macro engine will be used to execute the file.
            </remarks>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.RenderContent">
            <summary>
            The python file used to be executed
            
            Umbraco assumes that the python file is present in the "/python" folder
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.CachePersonalized">
            <summary>
            Gets or sets a value indicating whether [cache personalized].
            </summary>
            <value><c>true</c> if [cache personalized]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.CacheByPage">
            <summary>
            Gets or sets a value indicating whether the macro is cached for each individual page.
            </summary>
            <value><c>true</c> if [cache by page]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.Macro.Properties">
            <summary>
            Properties which are used to send parameters to the xsl/usercontrol/customcontrol of the macro
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.macro.Macro.BeforeSave">
            <summary>
            Occurs when a macro is saved.
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.macro.MacroComment">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroComment.#ctor(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="Comment">Not implemented</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroComment.Comment">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.macro.MacroProperty">
            <summary>
            The macro property is used by macroes to communicate/transfer userinput to an instance of a macro.
            
            It contains information on which type of data is inputted aswell as the userinterface used to input data
            
            A MacroProperty uses it's MacroPropertyType to define which underlaying component should be used when
            rendering the MacroProperty editor aswell as which datatype its containing.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.macro.MacroProperty"/> class.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroProperty.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Id">Id</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroProperty.Delete">
            <summary>
            Deletes the current macroproperty
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroProperty.ToXml(System.Xml.XmlDocument)">
            <summary>
            Retrieve a Xmlrepresentation of the MacroProperty used for exporting the Macro to the package
            </summary>
            <param name="xd">XmlDocument context</param>
            <returns>A xmlrepresentation of the object</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroProperty.GetProperties(System.Int32)">
            <summary>
            Retieve all MacroProperties of a macro
            </summary>
            <param name="MacroId">Macro identifier</param>
            <returns>All MacroProperties of a macro</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroProperty.MakeNew(umbraco.cms.businesslogic.macro.Macro,System.Boolean,System.String,System.String,umbraco.cms.businesslogic.macro.MacroPropertyType)">
            <summary>
            Creates a new MacroProperty on a macro
            </summary>
            <param name="M">The macro</param>
            <param name="show">Will the editor be able to input data</param>
            <param name="alias">The alias of the property</param>
            <param name="name">Userfriendly MacroProperty name</param>
            <param name="propertyType">The MacroPropertyType of the property</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroProperty.SortOrder">
            <summary>
            The sortorder
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroProperty.Public">
            <summary>
            If set to true, the user will be presented with an editor to input data.
            
            If not, the field can be manipulated by a default value given by the MacroPropertyType, this is s
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:umbraco.cms.businesslogic.macro.MacroProperty.Alias" -->
        <member name="P:umbraco.cms.businesslogic.macro.MacroProperty.Name">
            <summary>
            The userfriendly name
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroProperty.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroProperty.Macro">
            <summary>
            Gets or sets the macro.
            </summary>
            <value>The macro.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroProperty.Type">
            <summary>
            The basetype which defines which component is used in the UI for editing content
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.macro.MacroPropertyType">
            <summary>
            The MacroPropertyType class contains information on the assembly and class of the 
            IMacroGuiRendering component and basedatatype
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroPropertyType.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="Id">Identifier</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.macro.MacroPropertyType.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Alias">The alias of the MacroPropertyType</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroPropertyType.Id">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroPropertyType.Alias">
            <summary>
            The alias of the MacroPropertyType
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroPropertyType.Assembly">
            <summary>
            The assembly (without the .dll extension) used to retrieve the component at runtime
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroPropertyType.Type">
            <summary>
            The MacroPropertyType
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.macro.MacroPropertyType.BaseType">
            <summary>
            The IMacroGuiRendering component (namespace.namespace.Classname)
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.CreatedPackage.BeforeSave">
            <summary>
            Occurs when a macro is saved.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.InstalledPackage.BeforeSave">
            <summary>
            Occurs when a macro is saved.
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.PackageAction">
            <summary>
            Package actions are executed on packge install / uninstall.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.PackageAction.RunPackageAction(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Runs the package action with the specified action alias.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="actionAlias">The action alias.</param>
            <param name="actionXml">The action XML.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.PackageAction.UndoPackageAction(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Undos the package action with the specified action alias.
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="actionAlias">The action alias.</param>
            <param name="actionXml">The action XML.</param>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.standardPackageActions.addApplicationTree">
            <summary>
            This class implements the IPackageAction Interface, used to execute code when packages are installed.
            All IPackageActions only takes a PackageName and a XmlNode as input, and executes based on the data in the xmlnode.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:umbraco.cms.businesslogic.packager.standardPackageActions.addApplicationTree.Execute(System.String,System.Xml.XmlNode)" -->
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.addApplicationTree.Undo(System.String,System.Xml.XmlNode)">
            <summary>
            Undoes the action
            </summary>
            <param name="packageName">Name of the package.</param>
            <param name="xmlData">The XML data.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.standardPackageActions.addApplicationTree.Alias">
            <summary>
            Action alias.
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.utill">
            <summary>
            A utillity class for working with packager data.
            It provides basic methods for adding new items to a package manifest, moving files and other misc.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.utill.PackageInfo(umbraco.cms.businesslogic.packager.PackageInstance,System.Xml.XmlDocument)">
            <summary>
            Creates a package manifest containing name, license, version and other meta data.
            </summary>
            <param name="pack">The packinstance.</param>
            <param name="doc">The xml document.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.utill.Template(System.Int32,System.Xml.XmlDocument)">
            <summary>
            Converts an umbraco template to a package xml node
            </summary>
            <param name="templateId">The template id.</param>
            <param name="doc">The xml doc.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.utill.Stylesheet(System.Int32,System.Boolean,System.Xml.XmlDocument)">
            <summary>
            Converts a umbraco stylesheet to a package xml node
            </summary>
            <param name="ssId">The ss id.</param>
            <param name="incluceProperties">if set to <c>true</c> [incluce properties].</param>
            <param name="doc">The doc.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.utill.Macro(System.Int32,System.Boolean,System.String,System.Xml.XmlDocument)">
            <summary>
            Converts a macro to a package xml node
            </summary>
            <param name="macroId">The macro id.</param>
            <param name="appendFile">if set to <c>true</c> [append file].</param>
            <param name="packageDirectory">The package directory.</param>
            <param name="doc">The doc.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.utill.AppendFileToManifest(System.String,System.String,System.Xml.XmlDocument)">
            <summary>
            Appends a file to package manifest and copies the file to the correct folder.
            </summary>
            <param name="path">The path.</param>
            <param name="packageDirectory">The package directory.</param>
            <param name="doc">The doc.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.utill.IsFileInManifest(System.String,System.Xml.XmlDocument)">
            <summary>
            Determines whether the file is in the package manifest
            </summary>
            <param name="guid">The GUID.</param>
            <param name="doc">The doc.</param>
            <returns>
            	<c>true</c> if [is file in manifest]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.utill.ZipPackage(System.String,System.String)">
            <summary>
            Zips the package.
            </summary>
            <param name="Path">The path.</param>
            <param name="savePath">The save path.</param>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.Installer">
            <summary>
            The packager is a component which enables sharing of both data and functionality components between different umbraco installations.
            
            The output is a .umb (a zip compressed file) which contains the exported documents/medias/macroes/documenttypes (etc.)
            in a Xml document, along with the physical files used (images/usercontrols/xsl documents etc.)
            
            Partly implemented, import of packages is done, the export is *under construction*.
            </summary>
            <remarks>
            Ruben Verborgh 31/12/2007: I had to change some code, I marked my changes with "DATALAYER".
            Reason: @@IDENTITY can't be used with the new datalayer.
            I wasn't able to test the code, since I'm not aware how the code functions.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Name">The name of the package</param>
            <param name="Version">The version of the package</param>
            <param name="Url">The url to a descriptionpage</param>
            <param name="License">The license under which the package is released (preferably GPL ;))</param>
            <param name="LicenseUrl">The url to a licensedescription</param>
            <param name="Author">The original author of the package</param>
            <param name="AuthorUrl">The url to the Authors website</param>
            <param name="RequirementsMajor">Umbraco version major</param>
            <param name="RequirementsMinor">Umbraco version minor</param>
            <param name="RequirementsPatch">Umbraco version patch</param>
            <param name="Readme">The readme text</param>
            <param name="Control">The name of the usercontrol used to configure the package after install</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.AddMacro(umbraco.cms.businesslogic.macro.Macro)">
            <summary>
            Adds the macro to the package
            </summary>
            <param name="MacroToAdd">Macro to add</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.Import(System.String)">
            <summary>
            Imports the specified package
            </summary>
            <param name="InputFile">Filename of the umbracopackage</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.InstallCleanUp(System.Int32,System.String)">
            <summary>
            Remove the temp installation folder
            </summary>
            <param name="packageId"></param>
            <param name="tempDir"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.Install(System.String,System.String,System.String)">
            <summary>
            Invoking this method installs the entire current package
            </summary>
            <param name="tempDir">Temporary folder where the package's content are extracted to</param>
            <param name="guid"></param>
            <param name="repoGuid"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.LoadConfig(System.String)">
            <summary>
            Reads the configuration of the package from the configuration xmldocument
            </summary>
            <param name="tempDir">The folder to which the contents of the package is extracted</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.Fetch(System.Guid)">
            <summary>
            This uses the old method of fetching and only supports the packages.umbraco.org repository.
            </summary>
            <param name="Package"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Installer.GetFileName(System.String,System.String)">
            <summary>
            Gets the name of the file in the specified path.
            Corrects possible problems with slashes that would result from a simple concatenation.
            Can also be used to concatenate paths.
            </summary>
            <param name="path">The path.</param>
            <param name="fileName">Name of the file.</param>
            <returns>The name of the file in the specified path.</returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.Installer.Config">
            <summary>
            The xmldocument, describing the contents of a package.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.Package.#ctor(System.Int32)">
            <summary>
            Initialize package install status object by specifying the internal id of the installation. 
            The id is specific to the local umbraco installation and cannot be used to identify the package in general. 
            Use the Package(Guid) constructor to check whether a package has been installed
            </summary>
            <param name="Id">The internal id.</param>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.Media">
            <summary>
            A media represents a physical file and metadata on the file.
             
            By inheriting the Content class it has a generic datafields which enables custumization
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.#ctor(System.Int32)">
            <summary>
            Contructs a media object given the Id
            </summary>
            <param name="id">Identifier</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.#ctor(System.Guid)">
            <summary>
            Contructs a media object given the Id
            </summary>
            <param name="id">Identifier</param>
        </member>
        <member name="F:umbraco.cms.businesslogic.media.Media._objectType">
            <summary>
            -
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.MakeNew(System.String,umbraco.cms.businesslogic.media.MediaType,umbraco.BusinessLogic.User,System.Int32)">
            <summary>
            Creates a new Media
            </summary>
            <param name="Name">The name of the media</param>
            <param name="dct">The type of the media</param>
            <param name="u">The user creating the media</param>
            <param name="ParentId">The id of the folder under which the media is created</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.GetRootMedias">
            <summary>
            Retrieve a list of all toplevel medias and folders
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.DeleteFromType(umbraco.cms.businesslogic.media.MediaType)">
            <summary>
            Deletes all medias of the given type, used when deleting a mediatype
            
            Use with care.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.Move(System.Int32)">
            <summary>
            Overrides the moving of a <see cref="T:umbraco.cms.businesslogic.media.Media"/> object to a new location by changing its parent id.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.delete">
            <summary>
            Moves the media to the trash
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.delete(System.Boolean)">
            <summary>
            With either move the media to the trash or permanently remove it from the database.
            </summary>
            <param name="deletePermanently">flag to set whether or not to completely remove it from the database or just send to trash</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.DeletePermanently">
            <summary>
            Used internally to permanently delete the data from the database
            </summary>      
            <returns>returns true if deletion isn't cancelled</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.MoveToTrash">
            <summary>
            Used internally to move the node to the recyle bin
            </summary>
            <returns>Returns true if the move was not cancelled</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.FireAfterSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.OnNew(umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Raises the <see cref="E:New"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.FireBeforeMoveToTrash(umbraco.cms.businesslogic.MoveToTrashEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.Media.FireAfterMoveToTrash(umbraco.cms.businesslogic.MoveToTrashEventArgs)">
            <summary>
            Fires the after move to trash.
            </summary>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.MoveToTrashEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.media.Media.Children">
            <summary>
            Retrieve a list of all medias underneath the current
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.Media.BeforeSave">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.Media.AfterSave">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.Media.New">
            <summary>
            Occurs when [new].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.Media.BeforeDelete">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.Media.AfterDelete">
            <summary>
            Occurs when [after delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.Media.BeforeMoveToTrash">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.Media.AfterMoveToTrash">
            <summary>
            Occurs when [after move to trash].
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.Media.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.Media.NewEventHandler">
            <summary>
            The new  event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.Media.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.Media.MoveToTrashEventHandler">
            <summary>
            The Move to trash event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.MediaType">
            <summary>
            The Mediatype
            
            Due to the inheritance of the ContentType class,it enables definition of generic datafields on a Media.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.#ctor(System.Int32)">
            <summary>
            Constructs a MediaTypeobject given the id
            </summary>
            <param name="id">Id of the mediatype</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.#ctor(System.Guid)">
            <summary>
            Constructs a MediaTypeobject given the id
            </summary>
            <param name="id">Id of the mediatype</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.GetByAlias(System.String)">
            <summary>
            Retrieve a MediaType by it's alias
            </summary>
            <param name="Alias">The alias of the MediaType</param>
            <returns>The MediaType with the alias</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.MakeNew(umbraco.BusinessLogic.User,System.String)">
            <summary>
            Create a new Mediatype
            </summary>
            <param name="u">The Umbraco user context</param>
            <param name="Text">The name of the MediaType</param>
            <returns>The new MediaType</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.delete">
            <summary>
            Deletes the current MediaType and all created Medias of the type.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.FireAfterSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.OnNew(umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Raises the <see cref="E:New"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.media.MediaType.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.media.MediaType.GetAll">
            <summary>
            Retrieve all MediaTypes in the umbraco installation
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.MediaType.BeforeSave">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.MediaType.AfterSave">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.MediaType.New">
            <summary>
            Occurs when [new].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.MediaType.BeforeDelete">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.media.MediaType.AfterDelete">
            <summary>
            Occurs when [after delete].
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.MediaType.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.MediaType.NewEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.media.MediaType.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.Member">
            <summary>
            The Member class represents a member of the public website (not to be confused with umbraco users)
            
            Members are used when creating communities and collaborative applications using umbraco, or if there are a 
            need for identifying or authentifying the visitor. (extranets, protected/private areas of the public website)
            
            Inherits generic datafields from it's baseclass content.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Member class.
            </summary>
            <param name="id">Identifier</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the Member class.
            </summary>
            <param name="id">Identifier</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the Member class, with an option to only initialize 
            the data used by the tree in the umbraco console.
            </summary>
            <param name="id">Identifier</param>
            <param name="noSetup"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.getAllOtherMembers">
            <summary>
            Retrieves a list of members thats not start with a-z
            </summary>
            <returns>array of members</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.getMemberFromFirstLetter(System.Char)">
            <summary>
            Retrieves a list of members by the first letter in their name.
            </summary>
            <param name="letter">The first letter</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.MakeNew(System.String,umbraco.cms.businesslogic.member.MemberType,umbraco.BusinessLogic.User)">
            <summary>
            Creates a new member
            </summary>
            <param name="Name">Membername</param>
            <param name="mbt">Member type</param>
            <param name="u">The umbraco usercontext</param>
            <returns>The new member</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.MakeNew(System.String,System.String,umbraco.cms.businesslogic.member.MemberType,umbraco.BusinessLogic.User)">
            <summary>
            Creates a new member
            </summary>
            <param name="Name">Membername</param>
            <param name="mbt">Member type</param>
            <param name="u">The umbraco usercontext</param>
            <param name="Email">The email of the user</param>
            <returns>The new member</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.MakeNew(System.String,System.String,System.String,umbraco.cms.businesslogic.member.MemberType,umbraco.BusinessLogic.User)">
            <summary>
            Creates a new member
            </summary>
            <param name="Name">Membername</param>
            <param name="mbt">Member type</param>
            <param name="u">The umbraco usercontext</param>
            <param name="Email">The email of the user</param>
            <returns>The new member</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.GetMemberFromLoginName(System.String)">
            <summary>
            Retrieve a member given the loginname
            
            Used when authentifying the Member
            </summary>
            <param name="loginName">The unique Loginname</param>
            <returns>The member with the specified loginname - null if no Member with the login exists</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.GetMemberFromEmail(System.String)">
            <summary>
            Retrieve a Member given an email, the first if there multiple members with same email
            
            Used when authentifying the Member
            </summary>
            <param name="email">The email of the member</param>
            <returns>The member with the specified email - null if no Member with the email exists</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.GetMembersFromEmail(System.String)">
            <summary>
            Retrieve Members given an email
            
            Used when authentifying a Member
            </summary>
            <param name="email">The email of the member(s)</param>
            <returns>The members with the specified email</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.GetMemberFromLoginNameAndPassword(System.String,System.String)">
            <summary>
            Retrieve a Member given the credentials
            
            Used when authentifying the member
            </summary>
            <param name="loginName">Member login</param>
            <param name="password">Member password</param>
            <returns>The member with the credentials - null if none exists</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.IsMember(System.String)">
            <summary>
            Helper method - checks if a Member with the LoginName exists
            </summary>
            <param name="loginName">Member login</param>
            <returns>True if the member exists</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.DeleteFromType(umbraco.cms.businesslogic.member.MemberType)">
            <summary>
            Deletes all members of the membertype specified
            
            Used when a membertype is deleted
            
            Use with care
            </summary>
            <param name="dt">The membertype which are being deleted</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.ToXml(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Xmlrepresentation of a member
            </summary>
            <param name="xd">The xmldocument context</param>
            <param name="Deep">Recursive - should always be set to false</param>
            <returns>A the xmlrepresentation of the current member</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.delete">
            <summary>
            Deltes the current member
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.AddGroup(System.Int32)">
            <summary>
            Adds the member to group with the specified id
            </summary>
            <param name="GroupId">The id of the group which the member is being added to</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.RemoveGroup(System.Int32)">
            <summary>
            Removes the member from the MemberGroup specified
            </summary>
            <param name="GroupId">The MemberGroup from which the Member is removed</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.AddMemberToCache(umbraco.cms.businesslogic.member.Member)">
            <summary>
            Method is used when logging a member in.
            
            Adds the member to the cache of logged in members
            
            Uses cookiebased recognition
            
            Can be used in the runtime
            </summary>
            <param name="m">The member to log in</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.AddMemberToCache(umbraco.cms.businesslogic.member.Member,System.Boolean,System.TimeSpan)">
            <summary>
            Method is used when logging a member in.
            
            Adds the member to the cache of logged in members
            
            Uses cookie or session based recognition
            
            Can be used in the runtime
            </summary>
            <param name="m">The member to log in</param>
            <param name="UseSession">create a persistent cookie</param>
            <param name="TimespanForCookie">Has no effect</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.RemoveMemberFromCache(umbraco.cms.businesslogic.member.Member)">
            <summary>
            Removes the member from the cache
            
            Can be used in the public website
            </summary>
            <param name="m">Member to remove</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.RemoveMemberFromCache(System.Int32)">
            <summary>
            Removes the member from the cache
            
            Can be used in the public website
            </summary>
            <param name="NodeId">Node Id of the member to remove</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.ClearMemberFromClient(umbraco.cms.businesslogic.member.Member)">
            <summary>
            Deletes the member cookie from the browser 
            
            Can be used in the public website
            </summary>
            <param name="m">Member</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.ClearMemberFromClient(System.Int32)">
            <summary>
            Deletes the member cookie from the browser 
            
            Can be used in the public website
            </summary>
            <param name="NodeId">The Node id of the member to clear</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.CachedMembers">
            <summary>
            Retrieve a collection of members in the cache
            
            Can be used from the public website
            </summary>
            <returns>A collection of cached members</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.GetMemberFromCache(System.Int32)">
            <summary>
            Retrieve a member from the cache
            
            Can be used from the public website
            </summary>
            <param name="id">Id of the member</param>
            <returns>If the member is cached it returns the member - else null</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.IsLoggedOn">
            <summary>
            An indication if the current visitor is logged in
            
            Can be used from the public website
            </summary>
            <returns>True if the the current visitor is logged in</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.memberExists(System.Int32)">
            <summary>
            Make a lookup in the database to verify if a member truely exists
            </summary>
            <param name="NodeId">The node id of the member</param>
            <returns>True is a record exists in db</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.CurrentMemberId">
            <summary>
            Gets the current visitors memberid
            </summary>
            <returns>The current visitors members id, if the visitor is not logged in it returns 0</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.GetCurrentMember">
            <summary>
            Get the current member
            </summary>
            <returns>Returns the member, if visitor is not logged in: null</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.Member.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.member.Member.GetAll">
            <summary>
            A list of all members in the current umbraco install
            
            Note: is ressource intensive, use with care.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.member.Member.Text">
            <summary>
            The name of the member
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.member.Member.Password">
            <summary>
            The members password, used when logging in on the public website
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.member.Member.LoginName">
            <summary>
            The loginname of the member, used when logging in
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.member.Member.Groups">
            <summary>
            A list of groups the member are member of
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.member.Member.Email">
            <summary>
            The members email
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.member.Member.BeforeSave">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.Member.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.Member.NewEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.Member.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.Member.AddingToCacheEventHandler">
            <summary>
            The add to cache event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.Member.AddingGroupEventHandler">
            <summary>
            The add group event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.Member.RemovingGroupEventHandler">
            <summary>
            The remove group event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.Member.MemberShipHelper">
            <summary>
            ONLY FOR INTERNAL USE.
            This is needed due to a design flaw where the Umbraco membership provider is located 
            in a separate project referencing this project, which means we can't call special methods
            directly on the UmbracoMemberShipMember class.
            This is a helper implementation only to be able to use the encryption functionality 
            of the membership provides (which are protected).
            
            ... which means this class should have been marked internal with a Friend reference to the other assembly right??
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.MemberGroup">
            <summary>
            Membergroups are used for grouping Umbraco Members
            
            A Member can exist in multiple groups.
            
            It's possible to protect webpages/documents by membergroup.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberGroup.#ctor(System.Int32)">
            <summary>
            Initialize a new object of the MemberGroup class
            </summary>
            <param name="id">Membergroup id</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberGroup.#ctor(System.Guid)">
            <summary>
            Initialize a new object of the MemberGroup class
            </summary>
            <param name="id">Membergroup id</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberGroup.delete">
            <summary>
            Deltes the current membergroup
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberGroup.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberGroup.GetByName(System.String)">
            <summary>
            Get a membergroup by it's name
            </summary>
            <param name="Name">Name of the membergroup</param>
            <returns>If a MemberGroup with the given name exists, it will return this, else: null</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberGroup.MakeNew(System.String,umbraco.BusinessLogic.User)">
            <summary>
            Create a new MemberGroup
            </summary>
            <param name="Name">The name of the MemberGroup</param>
            <param name="u">The creator of the MemberGroup</param>
            <returns>The new MemberGroup</returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.member.MemberGroup.GetAll">
            <summary>
            Retrieve a list of all existing MemberGroups
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.member.MemberGroup.BeforeSave">
            <summary>
            Occurs when a language is saved.
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.MemberGroup.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.MemberGroup.NewEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.MemberGroup.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.MemberType">
            MemberType
            
            Due to the inheritance of the ContentType class, it enables definition of generic datafields on a Members.
            
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MemberType class.
            </summary>
            <param name="id">MemberType id</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the MemberType class.
            </summary>
            <param name="id">MemberType id</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.RebuildXmlStructureForContentItem(System.Int32)">
            <summary>
            Rebuilds the xml structure for the member item by id
            </summary>
            <param name="contentId"></param>
            <remarks>
            This is not thread safe
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.MemberCanEdit(umbraco.cms.businesslogic.propertytype.PropertyType)">
            <summary>
            Get an true/false if the Member can edit the given data defined in the propertytype
            </summary>
            <param name="pt">Propertytype to edit</param>
            <returns>True if the Member can edit the data</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.ViewOnProfile(umbraco.cms.businesslogic.propertytype.PropertyType)">
            <summary>
            Get an true/false if the given data defined in the propertytype, should be visible on the members profile page
            </summary>
            <param name="pt">Propertytype</param>
            <returns>True if the data should be displayed on the profilepage</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.setMemberCanEdit(umbraco.cms.businesslogic.propertytype.PropertyType,System.Boolean)">
            <summary>
            Set if the member should be able to edit the data defined by its propertytype
            </summary>
            <param name="pt">PropertyType</param>
            <param name="value">True/False if Members of the type shoúld be able to edit the data</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.setMemberViewOnProfile(umbraco.cms.businesslogic.propertytype.PropertyType,System.Boolean)">
            <summary>
            Set if the data should be displayed on members of this type's profilepage
            </summary>
            <param name="pt">PropertyType</param>
            <param name="value">True/False if the data should be displayed</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.delete">
            <summary>
            Delete the current MemberType.
            
            Deletes all Members of the type
            
            Use with care
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.GetByAlias(System.String)">
            <summary>
            Get a MemberType by it's alias
            </summary>
            <param name="Alias">The alias of the MemberType</param>
            <returns>The MemberType with the given Alias</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.member.MemberType.MakeNew(umbraco.BusinessLogic.User,System.String)">
            <summary>
            Create a new MemberType
            </summary>
            <param name="Text">The name of the MemberType</param>
            <param name="u">Creator of the MemberType</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.member.MemberType.GetAll">
            <summary>
            Retrieve a list of all MemberTypes
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.member.MemberType.BeforeSave">
            <summary>
            Occurs when a language is saved.
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.MemberType.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.MemberType.NewEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.member.MemberType.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.#ctor(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.Categories(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginCategories(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndCategories(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.CategoriesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.CategoriesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.Nitros">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginNitros(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndNitros(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosAsync">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosByVersion(umbraco.cms.businesslogic.packager.repositories.Version)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginNitrosByVersion(umbraco.cms.businesslogic.packager.repositories.Version,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndNitrosByVersion(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosByVersionAsync(umbraco.cms.businesslogic.packager.repositories.Version)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosByVersionAsync(umbraco.cms.businesslogic.packager.repositories.Version,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCategorized">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginNitrosCategorized(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndNitrosCategorized(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCategorizedAsync">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCategorizedAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCategorizedByVersion(umbraco.cms.businesslogic.packager.repositories.Version)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginNitrosCategorizedByVersion(umbraco.cms.businesslogic.packager.repositories.Version,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndNitrosCategorizedByVersion(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCategorizedByVersionAsync(umbraco.cms.businesslogic.packager.repositories.Version)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCategorizedByVersionAsync(umbraco.cms.businesslogic.packager.repositories.Version,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKits">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginStarterKits(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndStarterKits(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitsAsync">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitModulesCategorized">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginStarterKitModulesCategorized(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndStarterKitModulesCategorized(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitModulesCategorizedAsync">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitModulesCategorizedAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitModules">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginStarterKitModules(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndStarterKitModules(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitModulesAsync">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitModulesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.authenticate(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.Beginauthenticate(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.Endauthenticate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.authenticateAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.authenticateAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchPackageByVersion(System.String,umbraco.cms.businesslogic.packager.repositories.Version)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginfetchPackageByVersion(System.String,umbraco.cms.businesslogic.packager.repositories.Version,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndfetchPackageByVersion(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchPackageByVersionAsync(System.String,umbraco.cms.businesslogic.packager.repositories.Version)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchPackageByVersionAsync(System.String,umbraco.cms.businesslogic.packager.repositories.Version,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchPackage(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginfetchPackage(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndfetchPackage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchPackageAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchPackageAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchProtectedPackage(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginfetchProtectedPackage(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndfetchProtectedPackage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchProtectedPackageAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchProtectedPackageAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SubmitPackage(System.String,System.String,System.String,System.Byte[],System.Byte[],System.Byte[],System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginSubmitPackage(System.String,System.String,System.String,System.Byte[],System.Byte[],System.Byte[],System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndSubmitPackage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SubmitPackageAsync(System.String,System.String,System.String,System.Byte[],System.Byte[],System.Byte[],System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SubmitPackageAsync(System.String,System.String,System.String,System.Byte[],System.Byte[],System.Byte[],System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.PackageByGuid(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginPackageByGuid(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndPackageByGuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.PackageByGuidAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.PackageByGuidAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SkinByGuid(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginSkinByGuid(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndSkinByGuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SkinByGuidAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SkinByGuidAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.Skins(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.BeginSkins(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.EndSkins(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SkinsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SkinsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.CategoriesCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosByVersionCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCategorizedCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.NitrosCategorizedByVersionCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitsCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitModulesCategorizedCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.StarterKitModulesCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.authenticateCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchPackageByVersionCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchPackageCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.fetchProtectedPackageCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SubmitPackageCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.PackageByGuidCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SkinByGuidCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.cms.businesslogic.packager.repositories.RepositoryWebservice.SkinsCompleted">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.Category">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Category.Text">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Category.Description">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Category.Url">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Category.Id">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Category.Packages">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.Package">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.RepoGuid">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Text">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Description">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Icon">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Thumbnail">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Documentation">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Demo">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Accepted">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.EditorsPick">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Protected">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.HasUpgrade">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.UpgradeVersion">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.UpgradeReadMe">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Package.Url">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.Skin">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.RepoGuid">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.Text">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.Thumbnail">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.Preview">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.Description">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.Author">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.AuthorUrl">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.License">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.Skin.LicenseUrl">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.Version">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.Version.Version3">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.Version.Version4">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.Version.Version41">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.Version.Version41Legacy">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.Version.Version50">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.SubmitStatus">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.SubmitStatus.Complete">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.SubmitStatus.Exists">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.SubmitStatus.NoAccess">
            <remarks/>
        </member>
        <member name="F:umbraco.cms.businesslogic.packager.repositories.SubmitStatus.Error">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.CategoriesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.CategoriesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.CategoriesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.NitrosCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.NitrosCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.NitrosCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.NitrosByVersionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.NitrosByVersionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.NitrosByVersionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.NitrosCategorizedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.NitrosCategorizedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.NitrosCategorizedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.NitrosCategorizedByVersionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.NitrosCategorizedByVersionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.NitrosCategorizedByVersionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.StarterKitsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.StarterKitsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.StarterKitsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.StarterKitModulesCategorizedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.StarterKitModulesCategorizedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.StarterKitModulesCategorizedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.StarterKitModulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.StarterKitModulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.StarterKitModulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.authenticateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.authenticateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.authenticateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.fetchPackageByVersionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.fetchPackageByVersionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.fetchPackageByVersionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.fetchPackageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.fetchPackageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.fetchPackageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.fetchProtectedPackageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.fetchProtectedPackageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.fetchProtectedPackageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.SubmitPackageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.SubmitPackageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.SubmitPackageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.PackageByGuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.PackageByGuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.PackageByGuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.SkinByGuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.SkinByGuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.SkinByGuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.SkinsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.cms.businesslogic.packager.repositories.SkinsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.cms.businesslogic.packager.repositories.SkinsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.BusinessLogic.Permission">
            <summary>
            Summary description for Permission.
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Permission.#ctor">
            <summary>
            Private constructor, this class cannot be directly instantiated
            </summary>
        </member>
        <member name="M:umbraco.BusinessLogic.Permission.GetUserPermissions(umbraco.BusinessLogic.User)">
            <summary>
            Returns the permissions for a user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Permission.GetNodePermissions(umbraco.cms.businesslogic.CMSNode)">
            <summary>
            Returns the permissions for a node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.BusinessLogic.Permission.DeletePermissions(umbraco.BusinessLogic.User,umbraco.cms.businesslogic.CMSNode)">
            <summary>
            Delets all permissions for the node/user combination
            </summary>
            <param name="user"></param>
            <param name="node"></param>
        </member>
        <member name="M:umbraco.BusinessLogic.Permission.DeletePermissions(umbraco.BusinessLogic.User)">
            <summary>
            deletes all permissions for the user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:umbraco.BusinessLogic.Permission.DeletePermissions(umbraco.cms.businesslogic.CMSNode)">
            <summary>
            delete all permissions for this node
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:umbraco.cms.businesslogic.propertytype.PropertyType">
            <summary>
            Summary description for propertytype.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.propertytype.PropertyType.GetByDataTypeDefinition(System.Int32)">
            <summary>
            Returns all property types based on the data type definition
            </summary>
            <param name="dataTypeDefId"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.propertytype.PropertyType.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.propertytype.PropertyType.TabId">
            <summary>
            Setting the tab id is not meant to be used directly in code. Use the ContentType SetTabOnPropertyType method instead
            as that will handle all of the caching properly, this will not.
            </summary>
            <remarks>
            Setting the tab id to a negative value will actually set the value to NULL in the database
            </remarks>
        </member>
        <member name="T:umbraco.cms.businesslogic.property.Property">
            <summary>
            Property class encapsulates property factory, ensuring that the work
            with umbraco generic properties stays nice and easy..
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.RecycleBin.#ctor(System.Guid,umbraco.cms.businesslogic.RecycleBin.RecycleBinType)">
            <summary>
            Constructor to create a new recycle bin 
            </summary>
            <param name="nodeObjectType"></param>
            <param name="type"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.RecycleBin.#ctor(umbraco.cms.businesslogic.RecycleBin.RecycleBinType)">
            <summary>
            Constructor to create a new recycle bin based on RecycleBinType
            Will automatically update internal nodeObjectType based on the RecycleBinType enum
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.RecycleBin.#ctor(System.Guid)">
            <summary>
            Old constructor to create a content recycle bin
            </summary>
            <param name="nodeObjectType"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.RecycleBin.Count">
            <summary>
            Get the number of items in the Recycle Bin
            </summary>
            <returns>The number of all items in the Recycle Bin</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.RecycleBin.Smells">
            <summary>
            If I smell, I'm not empty 
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.RecycleBin.CallTheGarbageMan(System.Action{System.Int32})">
            <summary>
            Empties the trash can
            </summary>
            <param name="itemDeletedCallback">a function to call whenever an item is removed from the bin</param>
        </member>
        <member name="T:umbraco.cms.businesslogic.RecycleBin.RecycleBinType">
            <summary>
            The types of Recycle Bins.
            </summary>
            <remarks>
            Each enum item represents the integer value of the node Id of the recycle bin in the database.
            </remarks>
        </member>
        <member name="T:umbraco.cms.businesslogic.relation.Relation">
            <summary>
            Summary description for Relation.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.relation.Relation.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.relation.RelationType">
            <summary>
            Summary description for RelationType.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.relation.RelationType.#ctor">
            <summary>
            Internal constructor to create a new relation type
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.relation.RelationType.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.relation.RelationType.GetAll">
            <summary>
            Return all relation types
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.task.Task">
            <summary>
            An umbraco task is currently only used with the translation workflow in umbraco. But is extendable to cover other taskbased system as well.
            A task represent a simple job, it will always be assigned to a user, related to a node, and contain a comment about the task.
            The user attached to the task can complete the task, and the author of the task can reopen tasks that are not complete correct.
            
            Tasks can in umbraco be used for setting up simple workflows, and contains basic controls structures to determine if the task is completed or not.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Task.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.task.Task"/> class.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Task.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.businesslogic.task.Task"/> class.
            </summary>
            <param name="TaskId">The task id.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Task.Delete">
            <summary>
            Deletes the current task.
            Generally tasks should not be deleted and closed instead.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Task.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Task.GetTasksByType(System.Int32)">
            <summary>
            Returns all tasks by type
            </summary>
            <param name="taskType"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Task.GetTasks(System.Int32)">
            <summary>
            Get all tasks assigned to a node
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Task.GetTasks(umbraco.BusinessLogic.User,System.Boolean)">
            <summary>
            Retrieves a collection of open tasks assigned to the user
            </summary>
            <param name="User">The User who have the tasks assigned</param>
            <param name="IncludeClosed">If true both open and closed tasks will be returned</param>
            <returns>A collections of tasks</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.Task.GetOwnedTasks(umbraco.BusinessLogic.User,System.Boolean)">
            <summary>
            Retrieves a collection of open tasks assigned to the user
            </summary>
            <param name="User">The User who have the tasks assigned</param>
            <param name="IncludeClosed">If true both open and closed tasks will be returned</param>
            <returns>A collections of tasks</returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.Closed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:umbraco.cms.businesslogic.task.Task"/> is closed.
            </summary>
            <value><c>true</c> if closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.Node">
            <summary>
            Gets or sets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.ParentUser">
            <summary>
            Gets or sets the parent user.
            </summary>
            <value>The parent user.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.Task.SqlHelper">
            <summary>
            Gets the SQL helper.
            </summary>
            <value>The SQL helper.</value>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.TaskType.Delete">
            <summary>
            Deletes the current task type.
            This will remove all tasks associated with this type
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.task.TaskType.GetAll">
            <summary>
            Returns all task types stored in the database
            </summary>
            <returns></returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.task.TaskType.Tasks">
            <summary>
            All tasks associated with this task type
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.template.Template">
            <summary>
            Summary description for Template.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.template.Template.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.template.Template.RemoveAllReferences">
            <summary>
            Removes any references to this templates from child templates, documenttypes and documents
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.template.Template.DetermineRenderingEngine(umbraco.cms.businesslogic.template.Template,System.String)">
            <summary>
            This checks what the default rendering engine is set in config but then also ensures that there isn't already 
            a template that exists in the opposite rendering engine's template folder, then returns the appropriate 
            rendering engine to use.
            </summary>
            <param name="t"></param>
            <param name="design">If a template body is specified we'll check if it contains master page markup, if it does we'll auto assume its webforms </param>
            <returns></returns>
            <remarks>
            The reason this is required is because for example, if you have a master page file already existing under ~/masterpages/Blah.aspx
            and then you go to create a template in the tree called Blah and the default rendering engine is MVC, it will create a Blah.cshtml 
            empty template in ~/Views. This means every page that is using Blah will go to MVC and render an empty page. 
            This is mostly related to installing packages since packages install file templates to the file system and then create the 
            templates in business logic. Without this, it could cause the wrong rendering engine to be used for a package.
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.template.Template.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.template.Template.FireAfterSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.template.Template.OnNew(umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Raises the <see cref="E:New"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.template.Template.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.template.Template.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.template.Template.TemplateFilePath">
            <summary>
            Returns the file path for the current template
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.template.Template.BeforeSave">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.template.Template.AfterSave">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.template.Template.New">
            <summary>
            Occurs when [new].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.template.Template.BeforeDelete">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.template.Template.AfterDelete">
            <summary>
            Occurs when [after delete].
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.template.Template.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.template.Template.NewEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.template.Template.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.utilities.Diff">
            <summary>
            This Class implements the Difference Algorithm published in
            "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
            Algorithmica Vol. 1 No. 2, 1986, p 251.  
            
            There are many C, Java, Lisp implementations public available but they all seem to come
            from the same source (diffutils) that is under the (unfree) GNU public License
            and cannot be reused as a sourcecode for a commercial application.
            There are very old C implementations that use other (worse) algorithms.
            Microsoft also published sourcecode of a diff-tool (windiff) that uses some tree data.
            Also, a direct transfer from a C source to C# is not easy because there is a lot of pointer
            arithmetic in the typical C solutions and i need a managed solution.
            These are the reasons why I implemented the original published algorithm from the scratch and
            make it avaliable without the GNU license limitations.
            I do not need a high performance diff tool because it is used only sometimes.
            I will do some performace tweaking when needed.
            
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. See DiffText(). 
            
            Some chages to the original algorithm:
            The original algorithm was described using a recursive approach and comparing zero indexed arrays.
            Extracting sub-arrays and rejoining them is very performance and memory intensive so the same
            (readonly) data arrays are passed arround together with their lower and upper bounds.
            This circumstance makes the LCS and SMS functions more complicate.
            I added some code to the LCS function to get a fast response on sub-arrays that are identical,
            completely deleted or inserted.
            
            The result from a comparisation is stored in 2 arrays that flag for modified (deleted or inserted)
            lines in the 2 data arrays. These bits are then analysed to produce a array of Item objects.
            
            Further possible optimizations:
            (first rule: don't do it; second: don't do it yet)
            The arrays DataA and DataB are passed as parameters, but are never changed after the creation
            so they can be members of the class to avoid the paramter overhead.
            In SMS is a lot of boundary arithmetic in the for-D and for-k loops that can be done by increment
            and decrement of local variables.
            The DownVector and UpVector arrays are alywas created and destroyed each time the SMS gets called.
            It is possible to reuse tehm when transfering them to members of the class.
            See TODO: hints.
            
            diff.cs: A port of the algorythm to C#
            Copyright (c) by Matthias Hertel, http://www.mathertel.de
            This work is licensed under a BSD style license. See http://www.mathertel.de/License.aspx
            
            Changes:
            2002.09.20 There was a "hang" in some situations.
            Now I undestand a little bit more of the SMS algorithm. 
            There have been overlapping boxes; that where analyzed partial differently.
            One return-point is enough.
            A assertion was added in CreateDiffs when in debug-mode, that counts the number of equal (no modified) lines in both arrays.
            They must be identical.
            
            2003.02.07 Out of bounds error in the Up/Down vector arrays in some situations.
            The two vetors are now accessed using different offsets that are adjusted using the start k-Line. 
            A test case is added. 
            
            2006.03.05 Some documentation and a direct Diff entry point.
            
            2006.03.08 Refactored the API to static methods on the Diff class to make usage simpler.
            2006.03.10 using the standard Debug class for self-test now.
                       compile with: csc /target:exe /out:diffTest.exe /d:DEBUG /d:TRACE /d:SELFTEST Diff.cs
            2007.01.06 license agreement changed to a BSD style license.
            2007.06.03 added the Optimize method.
            2007.09.23 UpVector and DownVector optimization by Jan Stoklasa ().
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.Diff2Html(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines, returns the result as Html.
            If content has been removed, it will be marked up with a &lt;del&gt; html element.
            If content has been added, it will be marked up with a &lt;ins&gt; html element
            </summary>
            <param name="a_line">The old version of the string.</param>
            <param name="b_line">The new version of the string.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.DiffText(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find the difference in 2 text documents, comparing by textlines.
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. This hash-value is computed by storing all
            textlines into a common hashtable so i can find dublicates in there, and generating a 
            new number each time a new textline is inserted.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparation is done.</param>
            <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparation is done.</param>
            <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivivalence before the comparation is done.</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.Optimize(umbraco.cms.businesslogic.utilities.DiffData)">
            <summary>
            If a sequence of modified lines starts with a line that contains the same content
            as the line that appends the changes, the difference sequence is modified so that the
            appended line and not the starting line is marked as modified.
            This leads to more readable diff sequences when comparing text files.
            </summary>
            <param name="Data">A Diff data buffer containing the identified changes.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.DiffInt(System.Int32[],System.Int32[])">
            <summary>
            Find the difference in 2 arrays of integers.
            </summary>
            <param name="ArrayA">A-version of the numbers (usualy the old one)</param>
            <param name="ArrayB">B-version of the numbers (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.DiffCodes(System.String,System.Collections.Hashtable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function converts all textlines of the text into unique numbers for every unique textline
            so further work can work only with simple numbers.
            </summary>
            <param name="aText">the input text</param>
            <param name="h">This extern initialized hashtable is used for storing all ever used textlines.</param>
            <param name="trimSpace">ignore leading and trailing space characters</param>
            <returns>a array of integers.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.SMS(umbraco.cms.businesslogic.utilities.DiffData,System.Int32,System.Int32,umbraco.cms.businesslogic.utilities.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="DownVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="UpVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.LCS(umbraco.cms.businesslogic.utilities.DiffData,System.Int32,System.Int32,umbraco.cms.businesslogic.utilities.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the divide-and-conquer implementation of the longes common-subsequence (LCS) 
            algorithm.
            The published algorithm passes recursively parts of the A and B sequences.
            To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="DownVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="UpVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.Diff.CreateDiffs(umbraco.cms.businesslogic.utilities.DiffData,umbraco.cms.businesslogic.utilities.DiffData)">
            <summary>Scan the tables of which lines are inserted and deleted,
            producing an edit script in forward order.  
            </summary>
            dynamic array
        </member>
        <member name="T:umbraco.cms.businesslogic.utilities.Diff.Item">
            <summary>details of one difference.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.utilities.Diff.Item.StartA">
            <summary>Start Line number in Data A.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.utilities.Diff.Item.StartB">
            <summary>Start Line number in Data B.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.utilities.Diff.Item.deletedA">
            <summary>Number of changes in Data A.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.utilities.Diff.Item.insertedB">
            <summary>Number of changes in Data B.</summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.utilities.Diff.SMSRD">
            <summary>
            Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.utilities.DiffData">
            <summary>Data on one input file being compared.  
            </summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.utilities.DiffData.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.utilities.DiffData.data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.utilities.DiffData.modified">
            <summary>
            Array of booleans that flag for modified data.
            This is the result of the diff.
            This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.utilities.DiffData.#ctor(System.Int32[])">
            <summary>
            Initialize the Diff-Data buffer.
            </summary>
            <param name="data">reference to the buffer</param>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Access">
            <summary>
            Summary description for Access.
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document">
            <summary>
            Document represents a webpage,
            type (umbraco.cms.businesslogic.web.DocumentType)
            
            Pubished Documents are exposed to the runtime/the public website in a cached xml document.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.#ctor(System.Guid,System.Boolean)">
            <summary>
            Constructs a new document
            </summary>
            <param name="id">Id of the document</param>
            <param name="noSetup">true if the data shouldn't loaded from the db</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the Document class.
            You can set an optional flag noSetup, used for optimizing for loading nodes in the tree, 
            therefor only data needed by the tree is initialized.
            </summary>
            <param name="id">Id of the document</param>
            <param name="noSetup">true if the data shouldn't loaded from the db</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.#ctor(System.Int32,System.Guid)">
            <summary>
            Initializes a new instance of the Document class to a specific version, used for rolling back data from a previous version
            of the document.
            </summary>
            <param name="id">The id of the document</param>
            <param name="Version">The version of the document</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Document class.
            </summary>
            <param name="id">The id of the document</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.#ctor(System.Guid)">
            <summary>
            Initialize the document
            </summary>
            <param name="id">The id of the document</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a Document object with one SQL query instead of many
            </summary>
            <param name="optimizedMode"></param>
            <param name="id"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.#ctor(Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.Boolean)">
            <summary>
            Internal initialization of a legacy Document object using the new IUmbracoEntity object
            </summary>
            <param name="entity"></param>
            <param name="noSetup"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.#ctor(Umbraco.Core.Models.IContent)">
            <summary>
            Internal initialization of a legacy Document object using the new IContent object
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:umbraco.cms.businesslogic.web.Document._children">
            <summary>
            This is used to cache the child documents of Document when the children property
            is accessed or enumerated over, this will save alot of database calls.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.Import(System.Int32,umbraco.BusinessLogic.User,System.Xml.XmlElement)">
            <summary>
            Imports (create) a document from a xmlrepresentation of a document, used by the packager
            </summary>
            <param name="ParentId">The id to import to</param>
            <param name="Creator">Creator of the new document</param>
            <param name="Source">Xmlsource</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.MakeNew(System.String,umbraco.cms.businesslogic.web.DocumentType,umbraco.BusinessLogic.User,System.Int32)">
            <summary>
            Creates a new document
            </summary>
            <param name="Name">The name (.Text property) of the document</param>
            <param name="dct">The documenttype</param>
            <param name="u">The usercontext under which the action are performed</param>
            <param name="ParentId">The id of the parent to the document</param>
            <returns>The newly created document</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.IsDocument(System.Int32)">
            <summary>
            Check if a node is a document
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.GetRootDocuments">
            <summary>
            Used to get the firstlevel/root documents of the hierachy
            </summary>
            <returns>Root documents</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.DeleteFromType(umbraco.cms.businesslogic.web.DocumentType)">
            <summary>
            Deletes all documents of a type, will be invoked if a documenttype is deleted.
            
            Note: use with care: this method can result in wast amount of data being deleted.
            </summary>
            <param name="dt">The type of which documents should be deleted</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.GetChildrenForTree(System.Int32)">
            <summary>
            Performance tuned method for use in the tree
            </summary>
            <param name="NodeId">The parentdocuments id</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.RePublishAll">
            <summary>
            This will clear out the cmsContentXml table for all Documents (not media or members) and then
            rebuild the xml for each Docuemtn item and store it in this table.
            </summary>
            <remarks>
            This method is thread safe
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.GetDocumentsForExpiration">
            <summary>
            Retrieve a list of documents with an expirationdate greater than today
            </summary>
            <returns>A list of documents with expirationdates than today</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.GetDocumentsForRelease">
            <summary>
            Retrieve a list of documents with with releasedate greater than today
            </summary>
            <returns>Retrieve a list of documents with with releasedate greater than today</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.SendToPublication(umbraco.BusinessLogic.User)">
            <summary>
            Executes handlers and events for the Send To Publication action.
            </summary>
            <param name="u">The User</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.Publish(umbraco.BusinessLogic.User)">
            <summary>
            Saves and Publishes a document.
            A xmlrepresentation of the document and its data are exposed to the runtime data
            (an xmlrepresentation is added -or updated if the document previously are published) ,
            this will lead to a new version of the document being created, for continuing editing of
            the data.
            </summary>
            <param name="u">The usercontext under which the action are performed</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.PublishWithResult(umbraco.BusinessLogic.User)">
            <summary>
            Publishing a document
            A xmlrepresentation of the document and its data are exposed to the runtime data
            (an xmlrepresentation is added -or updated if the document previously are published) ,
            this will lead to a new version of the document being created, for continuing editing of
            the data.
            </summary>
            <param name="u">The usercontext under which the action are performed</param>
            <returns>True if the publishing succeed. Possible causes for not publishing is if an event aborts the publishing</returns>
            <remarks>        
            This method needs to be marked with [MethodImpl(MethodImplOptions.Synchronized)]
            because we execute multiple queries affecting the same data, if two thread are to do this at the same time for the same node we may have problems
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.RollBack(System.Guid,umbraco.BusinessLogic.User)">
            <summary>
            Rollbacks a document to a previous version, this will create a new version of the document and copy
            all of the old documents data.
            </summary>
            <param name="u">The usercontext under which the action are performed</param>
            <param name="VersionId">The unique Id of the version to roll back to</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.PublishWithSubs(umbraco.BusinessLogic.User)">
            <summary>
            Recursive publishing.
            
            Envoking this method will publish the documents and all children recursive.
            </summary>
            <param name="u">The usercontext under which the action are performed</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.Save">
            <summary>
            Used to persist object changes to the database. 
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.SaveAndPublish(umbraco.BusinessLogic.User)">
            <summary>
            Saves and publishes a document
            </summary>
            <param name="u">The usercontext under which the action are performed</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.HasPendingChanges">
            <summary>
            Pending changes means that there have been property/data changes since the last published version.
            This is determined by the comparing the version date to the updated date. if they are different by more than 2 seconds, 
            then this is considered a change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.GetVersions">
            <summary>
            Used for rolling back documents to a previous version
            </summary>
            <returns> Previous published versions of the document</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.GetPublishedVersion">
            <summary>
            Returns the published version of this document
            </summary>
            <returns>The published version of this document</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.GetTextPath">
            <summary>
            
            </summary>
            <returns>Returns a breadcrumlike path for the document like: /ancestorname/ancestorname</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.Move(System.Int32)">
            <summary>
            Overrides the moving of a <see cref="T:umbraco.cms.businesslogic.web.Document"/> object to a new location by changing its parent id.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.Copy(System.Int32,umbraco.BusinessLogic.User)">
            <summary>
            Creates a new document of the same type and copies all data from the current onto it. Due to backwards compatibility we can't return
            the new Document, but it's included in the CopyEventArgs.Document if you subscribe to the AfterCopy event
            </summary>
            <param name="CopyTo">The parentid where the document should be copied to</param>
            <param name="u">The usercontext under which the action are performed</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.Copy(System.Int32,umbraco.BusinessLogic.User,System.Boolean)">
            <summary>
            Creates a new document of the same type and copies all data from the current onto it. Due to backwards compatibility we can't return
            the new Document, but it's included in the CopyEventArgs.Document if you subscribe to the AfterCopy event
            </summary>
            <param name="CopyTo"></param>
            <param name="u"></param>
            <param name="RelateToOrignal"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.delete">
            <summary>
            Puts the current document in the trash
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.delete(System.Boolean)">
            <summary>
            With either move the document to the trash or permanently remove it from the database.
            </summary>
            <param name="deletePermanently">flag to set whether or not to completely remove it from the database or just send to trash</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.GetDescendants">
            <summary>
            Returns all decendants of the current document
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.XmlNodeRefresh(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Refreshes the xml, used when publishing data on a document which already is published
            </summary>
            <param name="xd">The source xmldocument</param>
            <param name="x">The previous xmlrepresentation of the document</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.XmlGenerate(System.Xml.XmlDocument)">
            <summary>
            Creates an xmlrepresentation of the document and saves it to the database
            </summary>
            <param name="xd"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.ToXml(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            A xmlrepresentaion of the document, used when publishing/exporting the document, 
            
            Optional: Recursive get childdocuments xmlrepresentation
            </summary>
            <param name="xd">The xmldocument</param>
            <param name="Deep">Recursive add of childdocuments</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.XmlPopulate(System.Xml.XmlDocument,System.Xml.XmlNode@,System.Boolean)">
            <summary>
            Populate a documents xmlnode
            </summary>
            <param name="xd">Xmldocument context</param>
            <param name="x">The node to fill with data</param>
            <param name="Deep">If true the documents childrens xmlrepresentation will be appended to the Xmlnode recursive</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.refreshXmlSortOrder">
            <summary>
            This is a specialized method which literally just makes sure that the sortOrder attribute of the xml
            that is stored in the database is up to date.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.RemoveTemplate">
            <summary>
            Method to remove an assigned template from a document
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.saveXml(System.Xml.XmlNode)">
            <summary>
            This needs to be synchronized since we're doing multiple sql operations in the single method
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.DeletePermanently">
            <summary>
            Used internally to permanently delete the data from the database
            </summary>
            <returns>returns true if deletion isn't cancelled</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.MoveToTrash">
            <summary>
            Used internally to move the node to the recyle bin
            </summary>
            <returns>Returns true if the move was not cancelled</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireAfterSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.OnNew(umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Raises the <see cref="E:New"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireBeforeMoveToTrash(umbraco.cms.businesslogic.MoveToTrashEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireAfterMoveToTrash(umbraco.cms.businesslogic.MoveToTrashEventArgs)">
            <summary>
            Fires the after move to trash.
            </summary>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.MoveToTrashEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireBeforePublish(umbraco.cms.businesslogic.PublishEventArgs)">
            <summary>
            Raises the <see cref="E:BeforePublish"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireAfterPublish(umbraco.cms.businesslogic.PublishEventArgs)">
            <summary>
            Raises the <see cref="E:AfterPublish"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireBeforeSendToPublish(umbraco.cms.businesslogic.SendToPublishEventArgs)">
            <summary>
            Raises the <see cref="E:BeforePublish"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireAfterSendToPublish(umbraco.cms.businesslogic.SendToPublishEventArgs)">
            <summary>
            Raises the <see cref="E:AfterPublish"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireBeforeUnPublish(umbraco.cms.businesslogic.UnPublishEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeUnPublish"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireAfterUnPublish(umbraco.cms.businesslogic.UnPublishEventArgs)">
            <summary>
            Raises the <see cref="E:AfterUnPublish"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireBeforeCopy(umbraco.cms.businesslogic.CopyEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeCopy"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireAfterCopy(umbraco.cms.businesslogic.CopyEventArgs)">
            <summary>
            Raises the <see cref="E:AfterCopy"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireBeforeRollBack(umbraco.cms.businesslogic.RollBackEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeRollBack"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Document.FireAfterRollBack(umbraco.cms.businesslogic.RollBackEventArgs)">
            <summary>
            Raises the <see cref="E:AfterRollBack"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.OptimizedMode">
            <summary>
            Gets a value indicating whether the document was constructed for the optimized mode
            </summary>
            <value><c>true</c> if the document is working in the optimized mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.UserId">
            <summary>
            The id of the user whom created the document
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.Creator">
            <summary>
            Gets the user who created the document.
            </summary>
            <value>The creator.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.Writer">
            <summary>
            Gets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.Published">
            <summary>
            Gets or sets a value indicating whether the document is published.
            </summary>
            <remarks>A document can be published yet not visible, because of one or more of its
            parents being unpublished. Use <c>PathPublished</c> to get a value indicating whether
            the node and all its parents are published, and therefore whether the node is visible.</remarks>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.PathPublished">
            <summary>
            Gets a value indicating whether the document and all its parents are published.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.UpdateDate">
            <summary>
            The date of the last update of the document
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.ReleaseDate">
            <summary>
            A datestamp which indicates when a document should be published, used in automated publish/unpublish scenarios
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.ExpireDate">
            <summary>
            A datestamp which indicates when a document should be unpublished, used in automated publish/unpublish scenarios
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.Template">
            <summary>
            The id of the template associated to the document
            
            When a document is created, it will get have default template given by it's documenttype,
            an editor is able to assign alternative templates (allowed by it's the documenttype)
            
            You are always able to override the template in the runtime by appending the following to the querystring to the Url:
            
            ?altTemplate=[templatealias]
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Document.Children">
            <summary>
            A collection of documents imidiately underneath this document ie. the childdocuments
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.BeforeSave">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.AfterSave">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.New">
            <summary>
            Occurs when [new].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.BeforeDelete">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.AfterDelete">
            <summary>
            Occurs when [after delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.BeforeMoveToTrash">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.AfterMoveToTrash">
            <summary>
            Occurs when [after move to trash].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.BeforePublish">
            <summary>
            Occurs when [before publish].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.AfterPublish">
            <summary>
            Occurs when [after publish].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.BeforeSendToPublish">
            <summary>
            Occurs when [before publish].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.AfterSendToPublish">
            <summary>
            Occurs when [after publish].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.BeforeUnPublish">
            <summary>
            Occurs when [before un publish].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.AfterUnPublish">
            <summary>
            Occurs when [after un publish].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.BeforeCopy">
            <summary>
            Occurs when [before copy].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.AfterCopy">
            <summary>
            Occurs when [after copy].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.BeforeRollBack">
            <summary>
            Occurs when [before roll back].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Document.AfterRollBack">
            <summary>
            Occurs when [after roll back].
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.NewEventHandler">
            <summary>
            The New event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.DeleteEventHandler">
            <summary>
            The delete  event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.PublishEventHandler">
            <summary>
            The publish event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.SendToPublishEventHandler">
            <summary>
            The Send To Publish event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.UnPublishEventHandler">
            <summary>
            The unpublish event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.CopyEventHandler">
            <summary>
            The copy event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.RollBackEventHandler">
            <summary>
            The rollback event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Document.MoveToTrashEventHandler">
            <summary>
            The Move to trash event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.DocumentType">
            <summary>
            Summary description for DocumentType.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.GenerateDtd">
            <summary>
            Generates the complete (simplified) XML DTD 
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.GetContentIdsForContentType">
            <summary>
            This will return all PUBLISHED content Ids that are of this content type or any descendant types as well.
            </summary>
            <returns></returns>
            <remarks>
            This will also work if we have multiple child content types (if one day we support that)
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.RebuildXmlStructureForContentItem(System.Int32)">
            <summary>
            Rebuilds the xml structure for the content item by id
            </summary>
            <param name="contentId"></param>
            <remarks>
            This is not thread safe
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.ClearXmlStructuresForContent">
            <summary>
            Clears all xml structures in the cmsContentXml table for the current content type and any of it's descendant types
            </summary>
            <remarks>
            This is not thread safe.
            This will also work if we have multiple child content types (if one day we support that)
            </remarks>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.delete">
            <summary>
            
            </summary>
            <exception cref="T:System.ArgumentException">Throws an exception if trying to delete a document type that is assigned as a master document type</exception>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.FireAfterSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.OnNew(umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Raises the <see cref="E:New"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.DocumentType.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.DocumentType.allowedTemplates">
            <summary>
            Gets/sets the allowed templates for this document type.
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.DocumentType.BeforeSave">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.DocumentType.AfterSave">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.DocumentType.New">
            <summary>
            Occurs when [new].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.DocumentType.BeforeDelete">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.DocumentType.AfterDelete">
            <summary>
            Occurs when [after delete].
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.DocumentType.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.DocumentType.NewEventHandler">
            <summary>
            The New event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.DocumentType.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.Domain">
            <summary>
            Summary description for Domain.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.Domain.#ctor">
            <summary>
            Empty ctor used for unit tests to create a custom domain
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.Domain.BeforeSave">
            <summary>
            Occurs when a macro is saved.
            </summary>
        </member>
        <member name="P:umbraco.cms.businesslogic.web.Domain.IsWildcard">
            <summary>
            Gets a value indicating whether the domain is a wildcard domain.
            </summary>
            <returns>A value indicating whether the domain is a wildcard domain.</returns>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.StyleSheet">
            <summary>
            Summary description for StyleSheet.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StyleSheet.Save">
            <summary>
            Used to persist object changes to the database. In Version3.0 it's just a stub for future compatibility
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StyleSheet.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StyleSheet.FireAfterSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StyleSheet.OnNew(umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Raises the <see cref="E:New"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StyleSheet.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StyleSheet.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StyleSheet.BeforeSave">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StyleSheet.AfterSave">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StyleSheet.New">
            <summary>
            Occurs when [new].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StyleSheet.BeforeDelete">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StyleSheet.AfterDelete">
            <summary>
            Occurs when [after delete].
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.StyleSheet.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.StyleSheet.NewEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.StyleSheet.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StylesheetProperty.FireBeforeSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StylesheetProperty.FireAfterSave(umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Raises the <see cref="E:AfterSave"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StylesheetProperty.OnNew(umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Raises the <see cref="E:New"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StylesheetProperty.FireBeforeDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:BeforeDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.web.StylesheetProperty.FireAfterDelete(umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Raises the <see cref="E:AfterDelete"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StylesheetProperty.BeforeSave">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StylesheetProperty.AfterSave">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StylesheetProperty.New">
            <summary>
            Occurs when [new].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StylesheetProperty.BeforeDelete">
            <summary>
            Occurs when [before delete].
            </summary>
        </member>
        <member name="E:umbraco.cms.businesslogic.web.StylesheetProperty.AfterDelete">
            <summary>
            Occurs when [after delete].
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.StylesheetProperty.SaveEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.StylesheetProperty.NewEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.web.StylesheetProperty.DeleteEventHandler">
            <summary>
            The delete event handler
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.workflow.Diff">
            <summary>    
            This Class implements the Difference Algorithm published in
            "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
            Algorithmica Vol. 1 No. 2, 1986, p 251.  
            
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. See DiffText().     
            
            diff.cs: A port of the algorithm to C#
            Copyright (c) by Matthias Hertel, http://www.mathertel.de
            This work is licensed under a BSD style license. See http://www.mathertel.de/License.aspx    
            </summary>    
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.DiffText(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.DiffText1(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines. 
            This method uses the DiffInt internally by 1st converting the string into char codes
            then uses the diff int method
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find the difference in 2 text documents, comparing by textlines.
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. This hash-value is computed by storing all
            textlines into a common hashtable so i can find dublicates in there, and generating a 
            new number each time a new textline is inserted.
            </summary>
            <param name="TextA">A-version of the text (usualy the old one)</param>
            <param name="TextB">B-version of the text (usualy the new one)</param>
            <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparation is done.</param>
            <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparation is done.</param>
            <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivivalence before the comparation is done.</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.DiffCharCodes(System.String,System.Boolean)">
            <summary>
            Diffs the char codes.
            </summary>
            <param name="aText">A text.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.Optimize(umbraco.cms.businesslogic.workflow.DiffData)">
            <summary>
            If a sequence of modified lines starts with a line that contains the same content
            as the line that appends the changes, the difference sequence is modified so that the
            appended line and not the starting line is marked as modified.
            This leads to more readable diff sequences when comparing text files.
            </summary>
            <param name="Data">A Diff data buffer containing the identified changes.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.DiffInt(System.Int32[],System.Int32[])">
            <summary>
            Find the difference in 2 arrays of integers.
            </summary>
            <param name="ArrayA">A-version of the numbers (usualy the old one)</param>
            <param name="ArrayB">B-version of the numbers (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.DiffCodes(System.String,System.Collections.Hashtable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function converts all textlines of the text into unique numbers for every unique textline
            so further work can work only with simple numbers.
            </summary>
            <param name="aText">the input text</param>
            <param name="h">This extern initialized hashtable is used for storing all ever used textlines.</param>
            <param name="trimSpace">ignore leading and trailing space characters</param>
            <returns>a array of integers.</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.SMS(umbraco.cms.businesslogic.workflow.DiffData,System.Int32,System.Int32,umbraco.cms.businesslogic.workflow.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="DownVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="UpVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.LCS(umbraco.cms.businesslogic.workflow.DiffData,System.Int32,System.Int32,umbraco.cms.businesslogic.workflow.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the divide-and-conquer implementation of the longes common-subsequence (LCS) 
            algorithm.
            The published algorithm passes recursively parts of the A and B sequences.
            To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="DataA">sequence A</param>
            <param name="LowerA">lower bound of the actual range in DataA</param>
            <param name="UpperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="DataB">sequence B</param>
            <param name="LowerB">lower bound of the actual range in DataB</param>
            <param name="UpperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="DownVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="UpVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Diff.CreateDiffs(umbraco.cms.businesslogic.workflow.DiffData,umbraco.cms.businesslogic.workflow.DiffData)">
            <summary>Scan the tables of which lines are inserted and deleted,
            producing an edit script in forward order.  
            </summary>
            dynamic array
        </member>
        <member name="T:umbraco.cms.businesslogic.workflow.Diff.Item">
            <summary>details of one difference.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.workflow.Diff.Item.StartA">
            <summary>Start Line number in Data A.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.workflow.Diff.Item.StartB">
            <summary>Start Line number in Data B.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.workflow.Diff.Item.deletedA">
            <summary>Number of changes in Data A.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.workflow.Diff.Item.insertedB">
            <summary>Number of changes in Data B.</summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.workflow.Diff.SMSRD">
            <summary>
            Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="T:umbraco.cms.businesslogic.workflow.DiffData">
            <summary>Data on one input file being compared.  
            </summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.workflow.DiffData.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.workflow.DiffData.data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:umbraco.cms.businesslogic.workflow.DiffData.modified">
            <summary>
            Array of booleans that flag for modified data.
            This is the result of the diff.
            This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.DiffData.#ctor(System.Int32[])">
            <summary>
            Initialize the Diff-Data buffer.
            </summary>
            <param name="data">reference to the buffer</param>
        </member>
        <member name="T:umbraco.cms.businesslogic.workflow.Notification">
            <summary>
            Notifications are a part of the umbraco workflow.
            A notification is created every time an action on a node occurs and a umbraco user has subscribed to this specific action on this specific node.
            Notifications generates an email, which is send to the subscribing users.
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.#ctor">
            <summary>
            Private constructor as this object should not be allowed to be created currently
            </summary>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.GetNotifications(umbraco.cms.businesslogic.CMSNode,umbraco.BusinessLogic.User,umbraco.interfaces.IAction)">
            <summary>
            Sends the notifications for the specified user regarding the specified node and action.
            </summary>
            <param name="Node">The node.</param>
            <param name="user">The user.</param>
            <param name="Action">The action.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.sendNotification(umbraco.BusinessLogic.User,umbraco.BusinessLogic.User,umbraco.cms.businesslogic.web.Document,umbraco.interfaces.IAction)">
            TODO: Include update with html mail notification and document contents
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.GetUserNotifications(umbraco.BusinessLogic.User)">
            <summary>
            Returns the notifications for a user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.GetNodeNotifications(umbraco.cms.businesslogic.CMSNode)">
            <summary>
            Returns the notifications for a node
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.DeleteNotifications(umbraco.cms.businesslogic.CMSNode)">
            <summary>
            Deletes notifications by node
            </summary>
            <param name="nodeId"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.DeleteNotifications(umbraco.BusinessLogic.User)">
            <summary>
            Delete notifications by user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.DeleteNotifications(umbraco.BusinessLogic.User,umbraco.cms.businesslogic.CMSNode)">
            <summary>
            Delete notifications by user and node
            </summary>
            <param name="user"></param>
            <param name="node"></param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.MakeNew(umbraco.BusinessLogic.User,umbraco.cms.businesslogic.CMSNode,System.Char)">
            <summary>
            Creates a new notification
            </summary>
            <param name="User">The user.</param>
            <param name="Node">The node.</param>
            <param name="ActionLetter">The action letter.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.UpdateNotifications(umbraco.BusinessLogic.User,umbraco.cms.businesslogic.CMSNode,System.String)">
            <summary>
            Updates the notifications.
            </summary>
            <param name="User">The user.</param>
            <param name="Node">The node.</param>
            <param name="Notifications">The notifications.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.ReplaceHTMLSymbols(System.String@)">
            <summary>
            Replaces the HTML symbols with the character equivalent.
            </summary>
            <param name="oldString">The old string.</param>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.CompareText(System.String,System.String)">
            <summary>
            Compares the text.
            </summary>
            <param name="oldText">The old text.</param>
            <param name="newText">The new text.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.CompareText(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Compares the text.
            </summary>
            <param name="oldText">The old text.</param>
            <param name="newText">The new text.</param>
            <param name="displayInsertedText">if set to <c>true</c> [display inserted text].</param>
            <param name="displayDeletedText">if set to <c>true</c> [display deleted text].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.businesslogic.workflow.Notification.CompareText(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Compares the text.
            </summary>
            <param name="oldText">The old text.</param>
            <param name="newText">The new text.</param>
            <param name="displayInsertedText">if set to <c>true</c> [display inserted text].</param>
            <param name="displayDeletedText">if set to <c>true</c> [display deleted text].</param>
            <param name="insertedStyle">The inserted style.</param>
            <param name="deletedStyle">The deleted style.</param>
            <returns></returns>
        </member>
        <member name="P:umbraco.cms.businesslogic.workflow.Notification.SqlHelper">
            <summary>
            Gets the SQL helper.
            </summary>
            <value>The SQL helper.</value>
        </member>
        <member name="T:umbraco.cms.helpers.url">
            <summary>
            Summary description for url.
            </summary>
        </member>
        <member name="M:umbraco.cms.helpers.url.ValidateProxyUrl(System.String,System.String)">
            <summary>
            Utility method for checking for valid proxy urls or redirect urls to prevent Open Redirect security issues
            </summary>
            <param name="url">The url to validate</param>
            <param name="callerUrl">The url of the current local domain (to ensure we can validate if the requested url is local without dependency on the request)</param>
            <returns>True if it's an allowed url</returns>
        </member>
        <member name="T:umbraco.cms.helpers.xhtml">
            <summary>
            Summary description for xhtml.
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>umbraco.DataLayer</name>
    </assembly>
    <members>
        <member name="T:umbraco.DataLayer.DataLayerHelper">
            <summary>
            The DataLayerHelper class is the main interface to the data layer.
            </summary>
        </member>
        <member name="F:umbraco.DataLayer.DataLayerHelper.ConnectionStringDataLayerIdentifier">
            <summary>Name of the property that identifies the SQL helper type.</summary>
        </member>
        <member name="F:umbraco.DataLayer.DataLayerHelper.DefaultDataHelperName">
            <summary>Name of the default data layer, that is used when nothing is specified.</summary>
        </member>
        <member name="F:umbraco.DataLayer.DataLayerHelper.DefaultDataHelperFormat">
            <summary>Format used when the SQL helper is qualified by its simple name, instead of the full class name.</summary>
        </member>
        <member name="M:umbraco.DataLayer.DataLayerHelper.CreateSqlHelper(System.String)">
            <summary>
            Creates a SQL helper for the specified connection string.
            </summary>
            <param name="connectionString">The connection string containing the SQL helper type.</param>
            <returns>A new SQL helper.</returns>
            <remarks>This method will change to allow the addition of external SQL helpers.</remarks>
        </member>
        <member name="T:umbraco.DataLayer.Extensions.ISqlHelperExtension">
            <summary>
            Interface for an extension to an <see cref="T:umbraco.DataLayer.ISqlHelper"/>.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.ISqlHelperExtension.OnExecuteScalar(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when <c>ExecuteScalar</c> is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.ISqlHelperExtension.OnExecuteNonQuery(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when <c>ExecuteNonQuery</c> is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.ISqlHelperExtension.OnExecuteReader(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when <c>ExecuteReader</c> is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.ISqlHelperExtension.OnExecuteXmlReader(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when <c>ExecuteXmlReader</c> is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="T:umbraco.DataLayer.Extensions.Logger">
            <summary>
            Extension to <see cref="T:umbraco.DataLayer.ISqlHelper"/> that logs all executed commands to a stream.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.Extensions.SqlHelperExtension">
            <summary>
            Abstract base class for an SQL helper extension.
            Implements all methods with an empty body.
            You will find it convenient to use this class as a base for most extensions,
            because you only have to override the functions you actually use.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtension.OnExecuteScalar(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when ExecuteScalar is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtension.OnExecuteNonQuery(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when ExecuteNonQuery is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtension.OnExecuteReader(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when ExecuteReader is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtension.OnExecuteXmlReader(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when ExecuteXmlReader is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="F:umbraco.DataLayer.Extensions.Logger.LogLineFormat">
            <summary>Format of a line in the log file.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Extensions.Logger.m_LogStream">
            <summary>Stream to which the commands are logged.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Extensions.Logger.m_SqlParser">
            <summary>Parser used to inline query parameters.</summary>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.Logger.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Extensions.Logger"/> class.
            </summary>
            <param name="inputStream">The input stream to which the commands will be logged.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.Logger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Extensions.Logger"/> class.
            </summary>
            <param name="filename">The name of the file in which the commands will be logged.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.Logger.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:umbraco.DataLayer.Extensions.Logger"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.Logger.OnExecuteScalar(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when ExecuteScalar is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.Logger.OnExecuteNonQuery(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when ExecuteNonQuery is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.Logger.OnExecuteReader(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when ExecuteReader is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.Logger.OnExecuteXmlReader(umbraco.DataLayer.ISqlHelper,System.String@,umbraco.DataLayer.IParameter[]@)">
            <summary>
            Called when ExecuteXmlReader is executed.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The SQL parameters.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.Logger.AppendToLog(umbraco.DataLayer.ISqlHelper,System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Appends a command to the log stream.
            </summary>
            <param name="sqlHelper">The SQL helper executing the command.</param>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:umbraco.DataLayer.Extensions.SqlHelperExtender">
            <summary>
            Class that adds extensions to an existing SQL helper.
            </summary>
            <remarks>Decorator design pattern.</remarks>
        </member>
        <member name="T:umbraco.DataLayer.ISqlHelper">
            <summary>
            Interface of a module that interacts with a certain type of SQL database.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.ISqlHelper.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new parameter for use with this specific implementation of ISqlHelper.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <returns>A new parameter of the correct type.</returns>
            <remarks>Abstract factory pattern</remarks>
        </member>
        <member name="M:umbraco.DataLayer.ISqlHelper.EscapeString(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="value">The value.</param>
            <returns>The escaped value.</returns>
            <remarks>You should use parameters instead.</remarks>
        </member>
        <member name="M:umbraco.DataLayer.ISqlHelper.Concat(System.String[])">
            <summary>
            Creates a concatenation fragment for use in an SQL query.
            </summary>
            <param name="values">The values that need to be concatenated</param>
            <returns>The SQL query fragment.</returns>
            <remarks>SQL Server uses a+b, MySql uses concat(a,b), Oracle uses a||b...</remarks>
        </member>
        <member name="M:umbraco.DataLayer.ISqlHelper.ExecuteNonQuery(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command and returns the number of rows affected.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>The number of rows affected by the command.</returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="M:umbraco.DataLayer.ISqlHelper.ExecuteReader(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command and returns a records reader containing the results.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>A data reader containing the results of the command.</returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="M:umbraco.DataLayer.ISqlHelper.ExecuteScalar``1(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command that returns a single value.
            </summary>
            <typeparam name="ScalarType">The type of the value.</typeparam>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value of the command.</returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="M:umbraco.DataLayer.ISqlHelper.ExecuteXmlReader(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command that returns an XML value.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>An XML reader containing the return value.</returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="P:umbraco.DataLayer.ISqlHelper.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:umbraco.DataLayer.ISqlHelper.Utility">
            <summary>
            Gets the Umbraco utility associated with this SQL helper.
            </summary>
            <value>The utilities.</value>
        </member>
        <member name="F:umbraco.DataLayer.Extensions.SqlHelperExtender.m_SqlHelper">
            <summary>SQL helper this SqlHelperExtender extends.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Extensions.SqlHelperExtender.m_Extensions">
            <summary>Extensions that are currently in use.</summary>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.#ctor(umbraco.DataLayer.ISqlHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Extensions.SqlHelperExtender"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.#ctor(umbraco.DataLayer.ISqlHelper,umbraco.DataLayer.Extensions.ISqlHelperExtension[])">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Extensions.SqlHelperExtender"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="extensions">The extensions.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.AddExtension(umbraco.DataLayer.Extensions.ISqlHelperExtension)">
            <summary>
            Adds the extension to the extension chain.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.RemoveExtension(umbraco.DataLayer.Extensions.ISqlHelperExtension)">
            <summary>
            Removes an extension from the extension chain.
            </summary>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new parameter for use with this specific implementation of ISqlHelper.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <returns>A new parameter of the correct type.</returns>
            <remarks>Abstract factory pattern</remarks>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.Concat(System.String[])">
            <summary>
            Creates a concatenation fragment for use in an SQL query.
            </summary>
            <param name="values">The values that need to be concatenated</param>
            <returns>The SQL query fragment.</returns>
            <remarks>SQL Server uses a+b, MySql uses concat(a,b), Oracle uses a||b...</remarks>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.EscapeString(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="text">The text to be escaped.</param>
            <returns>The escaped value.</returns>
            <remarks>You should use SQL parameters instead.</remarks>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.ExecuteNonQuery(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command and returns the number of rows affected.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The number of rows affected by the command.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.ExecuteReader(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command and returns a records reader containing the results.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            A data reader containing the results of the command.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.ExecuteScalar``1(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command that returns a single value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value of the command.</returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.ExecuteXmlReader(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command that returns an XML value.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            An XML reader containing the return value.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.Extensions.SqlHelperExtender.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:umbraco.DataLayer.Extensions.SqlHelperExtender.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:umbraco.DataLayer.Extensions.SqlHelperExtender.Utility">
            <summary>
            Gets the Umbraco utility associated with this SQL helper.
            </summary>
            <value>The utilities.</value>
        </member>
        <member name="T:umbraco.DataLayer.IRecordsReader">
            <summary>
            Represents an object that reads record data from a result set.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.Read">
            <summary>
            Advances to the next record.
            </summary>
            <returns>
            <c>true</c> if there are more records; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.Close">
            <summary>
            Closes the reader.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.ContainsField(System.String)">
            <summary>
            Determines whether a field with the specified field name exists in the record.
            The field can still contain a null value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns><c>true</c> if the specified field exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.IsNull(System.String)">
            <summary>
            Determines whether the specified field is null.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns><c>true</c> if the specified field is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.Get``1(System.String)">
            <summary>
            Gets the specified field value.
            </summary>
            <typeparam name="FieldType">The field type.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetObject(System.String)">
            <summary>
            Gets the value of the specified field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetBoolean(System.String)">
            <summary>
            Gets the value of the specified field as a bool.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetByte(System.String)">
            <summary>
            Gets the value of the specified field as a byte.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetDateTime(System.String)">
            <summary>
            Gets the value of the specified field as a DateTime.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetDecimal(System.String)">
            <summary>
            Gets the value of the specified field as a decimal.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetDouble(System.String)">
            <summary>
            Gets the value of the specified field as a double.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetFloat(System.String)">
            <summary>
            Gets the value of the specified field as a float.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetGuid(System.String)">
            <summary>
            Gets the value of the specified field as a Guid.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetShort(System.String)">
            <summary>
            Gets the value of the specified field as a short.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetInt(System.String)">
            <summary>
            Gets the value of the specified field as an int.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetLong(System.String)">
            <summary>
            Gets the value of the specified field as a long.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.IRecordsReader.GetString(System.String)">
            <summary>
            Gets the value of the specified field as a string.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="P:umbraco.DataLayer.IRecordsReader.HasRecords">
            <summary>
            Gets a value indicating whether this instance has records.
            </summary>
            <value><c>true</c> if this instance has records; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:umbraco.DataLayer.IParameterContainer`1">
            <summary>
            Interface for an <see cref="T:umbraco.DataLayer.IParameter"/> that wraps around a <see cref="T:System.Data.IDataParameter"/>.
            </summary>
            <typeparam name="P">Data type of the wrapped parameter.</typeparam>
        </member>
        <member name="T:umbraco.DataLayer.IParameter">
            <summary>
            Interface for a parameter of a data layer instruction.
            </summary>
        </member>
        <member name="P:umbraco.DataLayer.IParameter.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:umbraco.DataLayer.IParameter.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
            <value>The value of the parameter.</value>
        </member>
        <member name="P:umbraco.DataLayer.IParameterContainer`1.RawParameter">
            <summary>
            Gets the original parameter.
            </summary>
            <value>The original parameter.</value>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelperException">
            <summary>
            Exception generated in an SQL helper.
            </summary>
        </member>
        <member name="T:umbraco.UmbracoException">
            <summary>
            Represents an exception that is generated in an Umbraco module.
            </summary>
            <remarks>This should be moved out of the data layer for general use.</remarks>
        </member>
        <member name="F:umbraco.UmbracoException.m_Component">
            <summary>The Umbraco component that generated the exception.</summary>
        </member>
        <member name="M:umbraco.UmbracoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.UmbracoException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:umbraco.UmbracoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.UmbracoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:umbraco.UmbracoException.Component">
            <summary>
            Gets the Umbraco component that generated the exception.
            </summary>
            <value>The component.</value>
        </member>
        <member name="P:umbraco.UmbracoException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>The error message that explains the reason for the exception.</value>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelperException.#ctor(System.String,System.String,umbraco.DataLayer.IParameter[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelperException"/> class.
            </summary>
            <param name="method">The method where the exception occurred.</param>
            <param name="commandText">The command text. Only used in debug mode.</param>
            <param name="parameters">The command parameters. Only used in debug mode.</param>
            <param name="innerException">The inner exception.</param>
            <remarks>
            *Never* place the command text inside the exception message,
            since the message could be shown on a level with lower security.
            Especially dangerous with faulty command texts (code injection),
            or commands with inline parameters. (information leak)
            (So there's another reason to use real parameters.)
            </remarks>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller">
            <summary>
            Database installer for an MySql data source.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1">
            <summary>
            Base class for installers that use an ISqlHelper as data source.
            </summary>
            <typeparam name="S">The SQL helper type.</typeparam>
        </member>
        <member name="T:umbraco.DataLayer.Utility.BaseUtility`1">
            <summary>
            Base class for utilities that use an ISqlHelper as data source.
            </summary>
            <typeparam name="S">The SQL helper type.</typeparam>
        </member>
        <member name="F:umbraco.DataLayer.Utility.BaseUtility`1.m_SqlHelper">
            <summary>SQL helper the utility uses as data source.</summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.BaseUtility`1.#ctor(`0)">
            <summary>
            Initializes the <see cref="T:umbraco.DataLayer.Utility.BaseUtility`1"/> with the specified SQL helper.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="P:umbraco.DataLayer.Utility.BaseUtility`1.SqlHelper">
            <summary>
            Gets the SQL helper.
            </summary>
            <value>The SQL helper.</value>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Installer.IInstallerUtility">
            <summary>
            Interface for a utility that helps installing an Umbraco data source.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Installer.IInstallerUtility.Install">
            <summary>
            Installs the latest version into the data source.
            </summary>
            <exception cref="T:System.NotSupportedException">
            If installing or upgrading is not supported.</exception>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.IInstallerUtility.CurrentVersion">
            <summary>
            Gets the current data source version.
            </summary>
            <value>The current version.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.IInstallerUtility.LatestVersion">
            <summary>
            Gets the latest available version.
            </summary>
            <value>The latest version.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.IInstallerUtility.CanConnect">
            <summary>
            Gets a value indicating whether this installer can connect to the data source.
            </summary>
            <value>
            	<c>true</c> if the installer can connect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.IInstallerUtility.IsEmpty">
            <summary>
            Gets a value indicating whether the data source is empty and ready for installation.
            </summary>
            <value>
            	<c>true</c> if the data source is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.IInstallerUtility.IsLatestVersion">
            <summary>
            Gets a value indicating whether the data source has an up to date version.
            </summary>
            <value>
            	<c>true</c> if the data source is up to date; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.IInstallerUtility.CanUpgrade">
            <summary>
            Gets a value indicating whether the installer can upgrade the data source.
            </summary>
            <value>
            	<c>true</c> if the installer can upgrade the data source; otherwise, <c>false</c>.
            </value>
            <remarks>Empty data sources can't be upgraded, just installed.</remarks>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.m_LatestVersion">
            <summary>The latest available version this installer provides.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.m_CurrentVersion">
            <summary>The currently installed database version, <c>null</c> if undetermined.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.m_findComments">
            <summary>Regular expression that finds multiline block comments.</summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.#ctor(`0,umbraco.DataLayer.Utility.Installer.DatabaseVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
            <param name="latestVersion">The latest available version.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.Install">
            <summary>
            Installs the latest version into the data source.
            </summary>
            <exception cref="T:System.NotSupportedException">
            If installing or upgrading is not supported.</exception>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.DetermineCurrentVersion">
            <summary>
            Determines the current version of the SQL data source,
            by attempting to select a certain field from a certain table.
            The specifications are retrieved using the VersionSpecs property.
            </summary>
            <returns>The current version of the SQL data source</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.ExecuteStatements(System.String)">
            <summary>
            Executes a list of semicolon separated statements.
            Statements starting with
            </summary>
            <param name="statements">The statements.</param>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.CurrentVersion">
            <summary>
            Gets the current data source version.
            </summary>
            <value>The current version.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.LatestVersion">
            <summary>
            Gets the latest available version.
            </summary>
            <value>The latest version.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.CanConnect">
            <summary>
            Gets a value indicating whether this installer can connect to the data source.
            </summary>
            <value>
            	<c>true</c> if the installer can connect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.IsEmpty">
            <summary>
            Gets a value indicating whether the data source is empty and ready for installation.
            </summary>
            <value>
            	<c>true</c> if the data source is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.IsLatestVersion">
            <summary>
            Gets a value indicating whether the data source has an up to date version.
            </summary>
            <value>
            	<c>true</c> if the data source is up to date; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.CanUpgrade">
            <summary>
            Gets a value indicating whether the installer can upgrade the data source.
            </summary>
            <value>
            	<c>true</c> if the installer can upgrade the data source; otherwise, <c>false</c>.
            </value>
            <remarks>Empty data sources can't be upgraded, just installed.</remarks>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Installer.DefaultInstallerUtility`1.VersionSpecs">
            <summary>
            Gets the version specification for evaluation by DetermineCurrentVersion.
            Only first matching specification is taken into account.
            </summary>
            <value>The version specifications.</value>
        </member>
        <member name="F:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.LatestVersionSupported">
            <summary>The latest database version this installer supports.</summary>
        </member>
        <member name="F:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.m_VersionSpecs">
            <summary>The specifications to determine the database version.</summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.#ctor(umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.ConvertToMySql4(System.String)">
            <summary>
            Converts the SQL command to the MySQL 4.x dialect.
            </summary>
            <param name="sql">The SQL in MySQL 5+ dialect.</param>
            <returns>The SQL in MySQL 4.x dialect.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.GetMySqlVersion">
            <summary>
            Gets the MySQL major version number.
            </summary>
            <returns>The MySQL major version number</returns>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.CanUpgrade">
            <summary>
            Gets a value indicating whether the installer can upgrade the data source.
            </summary>
            <value>
            	<c>true</c> if the installer can upgrade the data source; otherwise, <c>false</c>.
            </value>
            <remarks>Empty data sources can't be upgraded, just installed.</remarks>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.VersionSpecs">
            <summary>
            Gets the version specification for evaluation by DetermineCurrentVersion.
            Only first matching specification is taken into account.
            </summary>
            <value>The version specifications.</value>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.FullInstallSql">
            <summary>
            Returns the sql to do a full install
            </summary>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.MySql.MySqlInstaller.UpgradeSql">
            <summary>
            Returns the sql to do an upgrade
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlParser">
            <summary>
            Object that performs parsing tasks on a MySQL command.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.SqlParser">
            <summary>
            Object that performs parsing tasks on an SQL command.
            </summary>
        </member>
        <member name="F:umbraco.DataLayer.SqlParser.m_SrcTokens">
            <summary>Original tokens for query token replacement.</summary>
        </member>
        <member name="F:umbraco.DataLayer.SqlParser.m_DestTokens">
            <summary>Destination tokens for query token replacement.</summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlParser"/> class.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlParser.#ctor(System.Char[],System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlParser"/> class
            that performs the specified token translation.
            </summary>
            <param name="srcTokens">The original tokens.</param>
            <param name="destTokens">The new tokens, each token corresponds with the item of
            <c>srcTokens</c> at the same index.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlParser.Parse(System.String)">
            <summary>
            Parses the query, performing provider specific changes.
            </summary>
            <param name="query">The query.</param>
            <returns>The modified query.</returns>
            <remarks>
            The default implementation returns the original query.
            Overriding classes can change this behavior.
            </remarks>
        </member>
        <member name="M:umbraco.DataLayer.SqlParser.ApplyParameters(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Replaces parameters in a query by their values.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>The query, with parameter placeholders replaced by their values.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlParser.ReplaceIdentifierTokens(System.String)">
            <summary>Replaces tokens before or after identifiers in a query string.</summary>
            <param name="query">The original query.</param>
            <returns>The query with replaced identifier tokens.</returns>
            <remarks>Assumes a correct query.</remarks>
        </member>
        <member name="M:umbraco.DataLayer.SqlParser.UppercaseIdentifiers(System.String)">
            <summary>
            Uppercases the identifiers in the query, leaving strings untouched.
            </summary>
            <param name="query">The query.</param>
            <returns>The query with uppercased identifiers.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlParser.FindStringEndPosition(System.String,System.Int32)">
            <summary>Searches the position in a query where a string is terminated.</summary>
            <param name="query">The query to search.</param>
            <param name="startPos">The position of the opening quote of the string.</param>
            <returns>The position of termination quote of the string.</returns>
            <remarks>
            Assumes a correct query, 0&lt;startPos&lt;query.Length-1 and query[startPos]=='\''.
            (because the function is optimized for speed)
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">If the query is incorrect,
            startPos not in ]0,query.Length-1[ or query[startPos]!='\''. </exception>
        </member>
        <member name="P:umbraco.DataLayer.SqlParser.StringDelimiter">
            <summary>
            Gets the character strings are surrounded with.
            </summary>
            <value>The string delimiter.</value>
        </member>
        <member name="P:umbraco.DataLayer.SqlParser.ParamToken">
            <summary>
            Gets the param character parameters start with.
            </summary>
            <value>The parameter starting token.</value>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlParser"/> class.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlParser.Parse(System.String)">
            <summary>
            Parses the query, performing provider specific changes.
            </summary>
            <param name="query">The query.</param>
            <returns>The modified query.</returns>
            <remarks>
            Uppercases identifiers and replaces their tokens.
            </remarks>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlUtility">
            <summary>
            Utility for an MySql data source.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.Utility.DefaultUtility`1">
            <summary>
            Base class providing access to various Umbraco utilities
            that operate on data layer level.
            </summary>
            <typeparam name="S"></typeparam>
        </member>
        <member name="T:umbraco.DataLayer.Utility.IUtilitySet">
            <summary>
            Interface for classes providing access to various Umbraco utilities
            that operate on data layer level.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.IUtilitySet.CreateInstaller">
            <summary>
            Creates an installer.
            </summary>
            <returns>The installer.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.IUtilitySet.CreateTableUtility">
            <summary>
            Creates a table utility.
            </summary>
            <returns>The table utility</returns>
        </member>
        <member name="F:umbraco.DataLayer.Utility.DefaultUtility`1.m_SqlHelper">
            <summary>SQL helper the utility uses as data source.</summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.DefaultUtility`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Utility.DefaultUtility`1"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.DefaultUtility`1.CreateInstaller">
            <summary>
            Creates an installer.
            </summary>
            <returns>The default installer.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.DefaultUtility`1.CreateTableUtility">
            <summary>
            Creates a table utility.
            </summary>
            <returns>The table utility</returns>
        </member>
        <member name="P:umbraco.DataLayer.Utility.DefaultUtility`1.SqlHelper">
            <summary>
            Gets the SQL helper.
            </summary>
            <value>The SQL helper.</value>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlUtility.#ctor(umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlUtility"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlUtility.CreateInstaller">
            <summary>
            Creates an installer.
            </summary>
            <returns>The MySql installer.</returns>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility">
            <summary>
            SQL Server implementation of <see cref="T:umbraco.DataLayer.Utility.Table.DefaultTableUtility`1"/>.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Table.DefaultTableUtility`1">
            <summary>
            Default implementation of the <see cref="T:umbraco.DataLayer.Utility.Table.ITableUtility"/> interface.
            </summary>
            <typeparam name="S">The type of SQL helper.</typeparam>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Table.ITableUtility">
            <summary>
            Interface for a tool that provides access to the tables of a data source.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITableUtility.ContainsTable(System.String)">
            <summary>
            Determines whether the table with the specified name exists.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the table exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITableUtility.GetTable(System.String)">
            <summary>
            Gets the table with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The table, or <c>null</c> if no table with that name exists.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITableUtility.CreateTable(System.String)">
            <summary>
            Creates the table with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The table.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITableUtility.SaveTable(umbraco.DataLayer.Utility.Table.ITable)">
            <summary>
            Saves or updates the table.
            </summary>
            <param name="table">The table to be saved.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTableUtility`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Utility.Table.DefaultTableUtility`1"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTableUtility`1.ContainsTable(System.String)">
            <summary>
            Determines whether the table with the specified name exists.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the table exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTableUtility`1.GetTable(System.String)">
            <summary>
            Gets the table with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The table, or <c>null</c> if no table with that name exists.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTableUtility`1.SaveTable(umbraco.DataLayer.Utility.Table.ITable)">
            <summary>
            Saves or updates the table.
            </summary>
            <param name="table">The table to be saved.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTableUtility`1.CreateTable(System.String)">
            <summary>
            Creates the table with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The table.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility.#ctor(umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility.GetTable(System.String)">
            <summary>
            Gets the table with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The table, or <c>null</c> if no table with that name exists.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility.SaveTable(umbraco.DataLayer.Utility.Table.ITable)">
            <summary>
            Saves or updates the table.
            </summary>
            <param name="table">The table to be saved.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility.CreateTable(umbraco.DataLayer.Utility.Table.ITable)">
            <summary>
            Creates the table in the data source.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility.CreateColumn(umbraco.DataLayer.Utility.Table.ITable,umbraco.DataLayer.Utility.Table.IField)">
            <summary>
            Creates a new column in the table.
            </summary>
            <param name="table">The table.</param>
            <param name="field">The field used to create the column.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility.GetType(umbraco.DataLayer.IRecordsReader)">
            <summary>
            Gets the .Net type corresponding to the specified database data type.
            </summary>
            <param name="dataTypeReader">The data type reader.</param>
            <returns>The .Net type</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility.GetDatabaseType(umbraco.DataLayer.Utility.Table.IField)">
            <summary>
            Gets the database type corresponding to the field, complete with field properties.
            </summary>
            <param name="field">The field.</param>
            <returns>The database type.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerTableUtility.GetDatabaseTypeName(umbraco.DataLayer.Utility.Table.IField)">
            <summary>
            Gets the name of the database type, without field properties.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller">
            <summary>
            Database installer for an SQL Server data source.
            </summary>
        </member>
        <member name="F:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller.LatestVersionSupported">
            <summary>The latest database version this installer supports.</summary>
        </member>
        <member name="F:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller.m_VersionSpecs">
            <summary>The specifications to determine the database version.</summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller.#ctor(umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller.CanUpgrade">
            <summary>
            Gets a value indicating whether the installer can upgrade the data source.
            </summary>
            <value>
            	<c>true</c> if the installer can upgrade the data source; otherwise, <c>false</c>.
            </value>
            <remarks>Empty data sources can't be upgraded, just installed.</remarks>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller.VersionSpecs">
            <summary>
            Gets the version specification for evaluation by DetermineCurrentVersion.
            Only first matching specification is taken into account.
            </summary>
            <value>The version specifications.</value>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller.FullInstallSql">
            <summary>
            Returns the sql to do a full install
            </summary>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerInstaller.UpgradeSql">
            <summary>
            Returns the sql to do an upgrade
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerUtility">
            <summary>
            Utility for an SQL Server data source.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerUtility.#ctor(umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerUtility"/> class.
            </summary>
            <param name="sqlHelper">The SQL helper.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerUtility.CreateInstaller">
            <summary>
            Creates an installer.
            </summary>
            <returns>The SQL Server installer.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerUtility.CreateTableUtility">
            <summary>
            Creates a table utility.
            </summary>
            <returns>The table utility</returns>
        </member>
        <member name="M:umbraco.DataLayer.StringExtensions.TrimToOneLine(System.String)">
            <summary>
            This trims all white spaces from beginning and end of the string and removes any line breaks (repacing with a space)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.UmbracoComponent">
            <summary>
            Enum of all Umbraco components
            </summary>
        </member>
        <member name="F:umbraco.UmbracoComponent.External">
            <summary>Unknown component</summary>
        </member>
        <member name="F:umbraco.UmbracoComponent.BusinessLogic">
            <summary>Business logic component</summary>
        </member>
        <member name="F:umbraco.UmbracoComponent.CMS">
            <summary>CMS component</summary>
        </member>
        <member name="F:umbraco.UmbracoComponent.Controls">
            <summary>Controls component</summary>
        </member>
        <member name="F:umbraco.UmbracoComponent.DataLayer">
            <summary>Data layer component</summary>
        </member>
        <member name="F:umbraco.UmbracoComponent.EditorControls">
            <summary>Editor controls component</summary>
        </member>
        <member name="F:umbraco.UmbracoComponent.Presentation">
            <summary>Presentation component</summary>
        </member>
        <member name="F:umbraco.UmbracoComponent.Providers">
            <summary>Providers component</summary>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Installer.DatabaseVersion">
            <summary>
            Version number of an Umbraco database.
            </summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DatabaseVersion.Unavailable">
            <summary>Database connection unsuccessful.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DatabaseVersion.None">
            <summary>Empty database, connection successful.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DatabaseVersion.Version3">
            <summary>Umbraco version 3.0.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DatabaseVersion.Version4">
            <summary>Umbraco version 4.0.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DatabaseVersion.Version4_1">
            <summary>Umbraco version 4.1.</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.DatabaseVersion.Version4_8">
            <summary>Umbraco version 4.8.</summary>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Installer.VersionSpecs">
            <summary>
            A triple (Field, Table, Version) meaning:
            if a <c>SELECT</c> statement of <c>Field FROM Table</c> succeeds,
            the database version is at least <c>Version</c>.
            </summary>
            <remarks>
            This also supports checking for a value in a table.
            </remarks>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.VersionSpecs.Sql">
            <summary>The SQL statament to execute in order to test for the specified version</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.VersionSpecs.ExpectedRows">
            <summary>An integer identifying the expected row count from the Sql statement</summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Installer.VersionSpecs.Version">
            <summary>The minimum version number of a database that contains the specified field.</summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Installer.VersionSpecs.#ctor(System.String,umbraco.DataLayer.Utility.Installer.DatabaseVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Utility.Installer.VersionSpecs"/> struct.
            </summary>
            <param name="sql">The sql statement to execute.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Installer.VersionSpecs.#ctor(System.String,System.Int32,umbraco.DataLayer.Utility.Installer.DatabaseVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Utility.Installer.VersionSpecs"/> struct.
            </summary>
            <param name="sql">The sql statement to execute.</param>
            <param name="expectedRows">The expected row count.</param>
            <param name="version">The version.</param>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Table.DefaultField">
            <summary>
            Default implementation of the <see cref="T:umbraco.DataLayer.Utility.Table.IField"/> interface.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Table.IField">
            <summary>
            Interface for classes that represent a table field.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.IField.HasProperty(umbraco.DataLayer.Utility.Table.FieldProperties)">
            <summary>
            Determines whether the field has the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c> if the field has the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.IField.Name">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.IField.DataType">
            <summary>
            Gets the data type of the field.
            </summary>
            <value>The field data type.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.IField.Size">
            <summary>
            Gets a value indicating the field size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.IField.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultField.#ctor(System.String,System.Type,System.Int32,umbraco.DataLayer.Utility.Table.FieldProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Utility.Table.DefaultField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Type of the data.</param>
            <param name="size">The size of the field.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultField.HasProperty(umbraco.DataLayer.Utility.Table.FieldProperties)">
            <summary>
            Determines whether the field has the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c> if the field has the property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.DefaultField.Name">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.DefaultField.DataType">
            <summary>
            Gets the data type of the field.
            </summary>
            <value>The field data type.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.DefaultField.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.DefaultField.Size">
            <summary>
            Gets a value indicating the field size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Table.DefaultTable">
            <summary>
            Default implementation of the <see cref="T:umbraco.DataLayer.Utility.Table.DefaultTable"/> interface.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Table.ITable">
            <summary>
            Interface for classes that represent a data source table.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITable.AddField(umbraco.DataLayer.Utility.Table.IField)">
            <summary>
            Adds the field to the table.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITable.CreateField(System.String,System.Type)">
            <summary>
            Creates a new field.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The field data type.</param>
            <returns>A new field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITable.CreateField(System.String,System.Type,umbraco.DataLayer.Utility.Table.FieldProperties)">
            <summary>
            Creates a new field.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The field data type.</param>
            <param name="properties">The properties.</param>
            <returns>A new field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITable.CreateField(System.String,System.Type,System.Int32)">
            <summary>
            Creates a new field.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The field data type.</param>
            <param name="size">The size.</param>
            <returns>A new field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITable.CreateField(System.String,System.Type,System.Int32,umbraco.DataLayer.Utility.Table.FieldProperties)">
            <summary>
            Creates a new field.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The field data type.</param>
            <param name="size">The size.</param>
            <param name="properties">The properties.</param>
            <returns>A new field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITable.FindField(System.String)">
            <summary>
            Finds the field with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The field, or <c>null</c> if a field with the specified name doesn't exist.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITable.FindField(System.Predicate{umbraco.DataLayer.Utility.Table.IField})">
            <summary>
            Finds the first field satisfiying the matcher.
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>The first field found, or <c>null</c> if no field matches.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.ITable.FindFields(System.Predicate{umbraco.DataLayer.Utility.Table.IField})">
            <summary>
            Finds all fields satisfiying the matcher.
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>A list of all matching fields.</returns>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.ITable.Name">
            <summary>
            Gets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Table.DefaultTable.m_Fields">
            <summary>List of table fields.</summary>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.Utility.Table.DefaultTable"/> class.
            </summary>
            <param name="name">The table name.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.AddField(umbraco.DataLayer.Utility.Table.IField)">
            <summary>
            Adds the field to the table.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.CreateField(System.String,System.Type)">
            <summary>
            Creates a new field.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The field data type.</param>
            <returns>A new field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.CreateField(System.String,System.Type,umbraco.DataLayer.Utility.Table.FieldProperties)">
            <summary>
            Creates a new field.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The field data type.</param>
            <param name="properties">The properties.</param>
            <returns>A new field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.CreateField(System.String,System.Type,System.Int32)">
            <summary>
            Creates a new field.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The field data type.</param>
            <param name="size">The size.</param>
            <returns>A new field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.CreateField(System.String,System.Type,System.Int32,umbraco.DataLayer.Utility.Table.FieldProperties)">
            <summary>
            Creates a new field.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">The field data type.</param>
            <param name="size">The size.</param>
            <param name="properties">The properties.</param>
            <returns>A new field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.FindField(System.String)">
            <summary>
            Finds the field with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The field, or <c>null</c> if a field with the specified name doesn't exist.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.FindField(System.Predicate{umbraco.DataLayer.Utility.Table.IField})">
            <summary>
            Finds the first field satisfiying the matcher.
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>
            The first field found, or <c>null</c> if no field matches.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.FindFields(System.Predicate{umbraco.DataLayer.Utility.Table.IField})">
            <summary>
            Finds all fields satisfiying the matcher.
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>A list of all matching fields.</returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.Utility.Table.DefaultTable.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:umbraco.DataLayer.Utility.Table.DefaultTable.Name">
            <summary>
            Gets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="T:umbraco.DataLayer.Utility.Table.FieldProperties">
            <summary>
            Properties for a table field.
            </summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Table.FieldProperties.None">
            <summary>
            No special properties.
            </summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Table.FieldProperties.NotNull">
            <summary>
            The field cannot be null.
            </summary>
        </member>
        <member name="F:umbraco.DataLayer.Utility.Table.FieldProperties.Identity">
            <summary>
            The field is an identity field.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlDataReader">
            <summary>
            Class that adapts a MySql.Data.MySqlClient.MySqlDataReader to a RecordsReaderAdapter.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.RecordsReaderAdapter`1">
            <summary>
            Class that adapts a generic data reader to an IRecordsReader.
            </summary>
            <typeparam name="D">The data reader class</typeparam>
        </member>
        <member name="F:umbraco.DataLayer.RecordsReaderAdapter`1.m_DataReader">
            <summary> Wrapped data reader. </summary>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.RecordsReaderAdapter`1"/> class.
            </summary>
            <param name="dataReader">The data reader.</param>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:umbraco.DataLayer.RecordsReaderAdapter`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.Close">
            <summary>
            Closes the data reader.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.Read">
            <summary>
            Advances to the next record.
            </summary>
            <returns>
            <c>true</c> if there are more records; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.Get``1(System.String)">
            <summary>
            Gets the value of the specified field.
            </summary>
            <typeparam name="FieldType">The field type.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the specified field</returns>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetBoolean(System.String)">
            <summary>
            Gets the value of the specified field as a bool.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetByte(System.String)">
            <summary>
            Gets the value of the specified field as a byte.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetDateTime(System.String)">
            <summary>
            Gets the value of the specified field as a DateTime.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetDecimal(System.String)">
            <summary>
            Gets the value of the specified field as a decimal.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetDouble(System.String)">
            <summary>
            Gets the value of the specified field as a double.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetFloat(System.String)">
            <summary>
            Gets the value of the specified field as a float.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetGuid(System.String)">
            <summary>
            Gets the value of the specified field as a Guid.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetShort(System.String)">
            <summary>
            Gets the value of the specified field as a short.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetInt(System.String)">
            <summary>
            Gets the value of the specified field as an int.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetLong(System.String)">
            <summary>
            Gets the value of the specified field as a long.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetString(System.String)">
            <summary>
            Gets the value of the specified field as a string.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetObject(System.String)">
            <summary>
            Gets the value of the specified field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.IsNull(System.String)">
            <summary>
            Determines whether the specified field is null.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>
            	<c>true</c> if the specified field is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.ContainsField(System.String)">
            <summary>
            Determines whether a field with the specified field name exists in the record.
            The field can still contain a null value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>
            	<c>true</c> if the specified field exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetOrdinal(System.String)">
            <summary>
            Returns the index of the field with the specified name.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <returns>The index of the field.</returns>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the records.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through records.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.RecordsReaderAdapter`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
                                    <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:umbraco.DataLayer.RecordsReaderAdapter`1.DataReader">
            <summary>Gets the internal data reader.</summary>
            <value>The data reader.</value>
        </member>
        <member name="P:umbraco.DataLayer.RecordsReaderAdapter`1.RawDataReader">
            <summary>Gets the internal data reader.</summary>
            <value>The data reader.</value>
            <remarks>Obsolete. You should NOT try to close or dispose the RawDataReader,
                     but instead close or dispose this RecordsReaderAdapter.
                     Inheriting classes can call the protected DataReader property.</remarks>
        </member>
        <member name="P:umbraco.DataLayer.RecordsReaderAdapter`1.Depth">
            <summary>
            Gets the depth of nesting of the current row.
            </summary>
            <value>The depth of nesting of the current row.</value>
        </member>
        <member name="P:umbraco.DataLayer.RecordsReaderAdapter`1.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
            <value><c>true</c> if this instance is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:umbraco.DataLayer.RecordsReaderAdapter`1.HasRecords">
            <summary>
            Gets a value indicating whether this instance has records.
            </summary>
            <value>
            	<c>true</c> if this instance has records; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlDataReader.#ctor(MySql.Data.MySqlClient.MySqlDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlDataReader"/> class.
            </summary>
            <param name="dataReader">The data reader.</param>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.MySql.MySqlDataReader.HasRecords">
            <summary>
            Gets a value indicating whether this instance has records.
            </summary>
            <value>
            	<c>true</c> if this instance has records; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper">
            <summary>
            Sql Helper for a MySQL 5.0 database.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelper`1">
            <summary>
            Abstract base class for SQL helpers that use parameters implementing IDataParameter.
            </summary>
            <typeparam name="P">SQL parameter data type.</typeparam>
        </member>
        <member name="F:umbraco.DataLayer.SqlHelper`1.m_ConnectionString">
            <summary>The connection string that provides access to the SQL database.</summary>
        </member>
        <member name="F:umbraco.DataLayer.SqlHelper`1.m_Utility">
            <summary>Utility that provides access to complex database actions.</summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelper`1"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.#ctor(System.String,umbraco.DataLayer.Utility.IUtilitySet)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelper`1"/> class.
            </summary>
            <param name="connectionString">The connection string, cannot be <c>null</c>.</param>
            <param name="utility">The utility, a default utility will be used if <c>null</c>.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:umbraco.DataLayer.SqlHelper`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ConvertCommand(System.String)">
            <summary>
            Performs necessary conversion on the SQL command prior to its execution.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The original command text. Inheriting classes can change this behavior.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ConvertParameters(umbraco.DataLayer.IParameter[])">
            <summary>
            Performs necessary conversion on the parameters prior to its execution.
            </summary>
            <param name="parameters">The parameters. Expected to be of type IParameterContainer.</param>
            <returns>The parameters, converted to the raw types of their containers.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ConvertScalar``1(System.Object)">
            <summary>Converts the scalar value to the given type.</summary>
            <typeparam name="T">Desired type of the value.</typeparam>
            <param name="scalar">A scalar returned by ExecuteScalar.</param>
            <returns>The scalar, converted to type T.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.Concat(System.String[])">
            <summary>
            Creates a concatenation fragment for use in an SQL query.
            </summary>
            <param name="values">The values that need to be concatenated</param>
            <returns>The SQL query fragment.</returns>
            <remarks>SQL Server uses a+b, MySql uses concat(a,b), Oracle uses a||b...</remarks>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.EscapeString(System.String)">
            <summary>
            Escapes a string for use in an SQL query.
            </summary>
            <param name="value">The value.</param>
            <returns>The escaped value.</returns>
            <remarks>You should use SQL parameters instead.</remarks>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new parameter for use with this specific implementation of ISqlHelper.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <returns>A new parameter of the correct type.</returns>
            <remarks>Abstract factory pattern</remarks>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ExecuteScalar``1(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command that returns a single value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value of the command.</returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ExecuteNonQuery(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command and returns the number of rows affected.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The number of rows affected by the command.
            </returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ExecuteReader(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command and returns a records reader containing the results.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            A data reader containing the results of the command.
            </returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ExecuteXmlReader(System.String,umbraco.DataLayer.IParameter[])">
            <summary>
            Executes a command that returns an XML value.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            An XML reader containing the return value.
            </returns>
            <exception cref="T:umbraco.DataLayer.SqlHelperException">If a data source error occurs.</exception>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ExecuteScalar(System.String,`0[])">
            <summary>
            Executes a command that returns a single value.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value of the command.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ExecuteNonQuery(System.String,`0[])">
            <summary>
            Executes a command and returns the number of rows affected.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The number of rows affected by the command.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ExecuteReader(System.String,`0[])">
            <summary>
            Executes a command and returns a records reader containing the results.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            A data reader containing the results of the command.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.ExecuteXmlReader(System.String,`0[])">
            <summary>
            Executes a command that returns an XML value.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            An XML reader containing the return value.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelper`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelper`1.ConnectionString">
            <summary>
            Gets the connection string that provides access to the SQL database.
            </summary>
            <value>The connection string that provides access to the SQL database.</value>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelper`1.Utility">
            <summary>
            Gets the Umbraco utility associated with this SQL helper.
            </summary>
            <value>The utilities.</value>
        </member>
        <member name="F:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.m_SqlParser">
            <summary>SQL parser that replaces the SQL-Server specific tokens by their MySQL equivalent.</summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper"/> class.</summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new parameter for use with this specific implementation of ISqlHelper.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <returns>A new parameter of the correct type.</returns>
            <remarks>Abstract factory pattern</remarks>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.ConvertCommand(System.String)">
            <summary>Converts a the command before executing.</summary>
            <param name="commandText">The command text.</param>
            <returns>The original command text.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.ExecuteScalar(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>Executes a command that returns a single value.</summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value of the command.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.ExecuteNonQuery(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>Executes a command and returns the number of rows affected.</summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The number of rows affected by the command.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.ExecuteReader(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>Executes a command and returns a records reader containing the results.</summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            A data reader containing the results of the command.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.ConvertScalar``1(System.Object)">
            <summary>Converts the scalar value to the given type.</summary>
            <typeparam name="T">Desired type of the value.</typeparam>
            <param name="scalar">A scalar returned by ExecuteScalar.</param>
            <returns>The scalar, converted to type T.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlHelper.Concat(System.String[])">
            <summary>
            Creates a concatenation fragment for use in an SQL query.
            </summary>
            <param name="values">The values that need to be concatenated</param>
            <returns>The SQL query fragment.</returns>
            <remarks>SQL Server uses a+b, MySql uses concat(a,b), Oracle uses a||b...</remarks>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlParameter">
            <summary>
            Parameter class for the MySqlHelper.
            </summary>
        </member>
        <member name="T:umbraco.DataLayer.SqlParameterAdapter`1">
            <summary>
            Generic class adapter to ISqlParameterContainer for parameters implementing IDataParameter.
            </summary>
            <typeparam name="P">SQL parameter data type</typeparam>
        </member>
        <member name="F:umbraco.DataLayer.SqlParameterAdapter`1.m_RawParameter">
            <summary>The original parameter.</summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlParameterAdapter`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlParameterAdapter`1"/> class.
            </summary>
            <param name="rawParameter">The raw parameter.</param>
        </member>
        <member name="P:umbraco.DataLayer.SqlParameterAdapter`1.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="P:umbraco.DataLayer.SqlParameterAdapter`1.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
            <value>The value of the parameter.</value>
        </member>
        <member name="P:umbraco.DataLayer.SqlParameterAdapter`1.RawParameter">
            <summary>
            Gets the wrapped parameter.
            </summary>
            <value>The wrapped parameter.</value>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.MySql.MySqlParameter"/> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.MySql.MySqlParameter.CorrectParameterName(System.String)">
            <summary>
            Changes the parameter name to the MySQL equivalent.
            </summary>
            <param name="parameterName">The name of the parameter, preceded by an at sign.</param>
            <returns>The name of the parameter, preceded by a question mark.</returns>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerDataReader">
            <summary>
            Class that adapts a SqlDataReader.SqlDataReader to a RecordsReaderAdapter.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerDataReader.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerDataReader"/> class.
            </summary>
            <param name="dataReader">The data reader.</param>
        </member>
        <member name="P:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerDataReader.HasRecords">
            <summary>
            Gets a value indicating whether this instance has records.
            </summary>
            <value>
            	<c>true</c> if this instance has records; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper">
            <summary>
            Sql Helper for an SQL Server database.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new parameter for use with this specific implementation of ISqlHelper.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <returns>A new parameter of the correct type.</returns>
            <remarks>Abstract factory pattern</remarks>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper.ExecuteScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command that returns a single value.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value of the command.</returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command and returns the number of rows affected.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The number of rows affected by the command.
            </returns>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerHelper.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Executes a command and returns a records reader containing the results.
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            A data reader containing the results of the command.
            </returns>
        </member>
        <member name="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerParameter">
            <summary>
            Parameter class for the SqlServerHelper.
            </summary>
        </member>
        <member name="M:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.DataLayer.SqlHelpers.SqlServer.SqlServerParameter"/> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
        </member>
    </members>
</doc>

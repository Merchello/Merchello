@inherits Umbraco.Web.Mvc.UmbracoViewPage<Merchello.Web.Models.VirtualContent.IProductContent>
@using Merchello.FastTrack.Ui
@using Merchello.Web
@using Merchello.Web.Models
@using Merchello.Web.Models.Ui.Rendering
@using Merchello.Web.Models.VirtualContent
@{
    Layout = "FastTrack.cshtml";

    // the Model passed here is IProductContent (virtual content) that is not generated by the Models Builder.
    // However, it is a Typed IPublishedContent model that exposes product properties such as Price, SalePrice, etc.
    // and the properties from the ContentType that was attached to the product in Merchello's back office.
    // These can be accessed in the same way as any normal IPublishedContent property e.g. GetPropertyValue
}

<div class="page-header">
    <h1>@Model.Name</h1>
    @Categories(Model)
</div>

<div class="row">
    <div class="col-md-4 col-md-push-8">
        @Html.Action("AddProductToBasketForm", "StoreBasket", new { area = "Merchello", model = Model })
    </div>
    <div class="col-md-8 col-md-pull-4">
        <div class="row">
            @if (Model.HasValue("image"))
            {
                var images = Model.GetPropertyValue<List<IPublishedContent>>("image");
                <div class="col-xs-8">
                    @foreach (var image in images)
                    {
                        <img class="img-responsive" src="@image.GetCropUrl(height: 450)" alt="@Model.Name">
                    }
                </div>
            }
            <div class="col-xs-4">
                @Html.Raw(Model.GetPropertyValue<string>("brief"))
            </div>

        </div>
        <hr />
        <div class="row">
            @Html.Raw(Model.GetPropertyValue<string>("description"))
        </div>
        @if (Model.HasProperty("relatedProducts") && Model.HasValue("relatedProducts"))
        {
            <div class="row related-products">
                <h3>Related Products</h3>
                @Html.Partial("_ProductBoxList", Model.GetPropertyValue<IEnumerable<IProductContent>>("relatedProducts"))
            </div>

        }
    </div>

</div>

@*@foreach (var variant in Model.ProductVariants)
{
    <h3>@variant.Name</h3>
    <table class="table table-striped">
        <tr>
            <td>Name</td>
            <td>Has content</td>
            <td>Body text</td>
        </tr>
        @foreach (var att in variant.Attributes)
        { 
            <tr>
                <td><b>@att.Name</b></td>
                <td>@variant.AttributeHasContent(att)</td>
                <td style="background-color: #eee">
                    @if (variant.AttributeHasContent(att))
                    {
                        var content = variant.GetContentForAttribute(att);
                        if (content != null)
                        {
                            var html = content.GetPropertyValue<IHtmlString>("bodyText");
                            @html
                        }
                    }
                </td>
            </tr>
        }
    </table>
}*@

@helper Categories(IProductContent product)
{
var collections = product.Collections().ToArray();
if (collections.Any())
{
    var pages = new List<Tuple<IProductCollection, IPublishedContent>>();
    foreach (var col in collections)
    {
        var page = ExampleUiHelper.Content.GetCategoryPageForCollection(col.Key);
        if (page != null)
        {
            pages.Add(new Tuple<IProductCollection, IPublishedContent>(col, page));
        }
    }
    var needsComma = false;
        <small>
            Categories:
            @foreach (var pc in pages)
            {
                @Umbraco.If(needsComma, ",") <a href="@pc.Item2.Url">@pc.Item1.Name</a>
                needsComma = true;
            }
        </small>
}
}
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbraco.Core</name>
    </assembly>
    <members>
        <member name="T:Umbraco.Core.ActivatorHelper">
            <summary>
            Helper methods for Activation
            </summary>
        </member>
        <member name="M:Umbraco.Core.ActivatorHelper.CreateInstance``1">
            <summary>
            Creates an instance of a type using that type's default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.ApplicationContext">
            <summary>
            the Umbraco Application context
            </summary>
            <remarks>
            one per AppDomain, represents the global Umbraco application
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.#ctor(Umbraco.Core.DatabaseContext,Umbraco.Core.Services.ServiceContext,Umbraco.Core.CacheHelper,Umbraco.Core.Logging.ProfilingLogger)">
            <summary>
            Constructor
            </summary>
            <param name="dbContext"></param>
            <param name="serviceContext"></param>
            <param name="cache"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.#ctor(Umbraco.Core.DatabaseContext,Umbraco.Core.Services.ServiceContext,Umbraco.Core.CacheHelper)">
            <summary>
            Constructor
            </summary>
            <param name="dbContext"></param>
            <param name="serviceContext"></param>
            <param name="cache"></param>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.#ctor(Umbraco.Core.CacheHelper)">
            <summary>
            Creates a basic app context
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.#ctor(Umbraco.Core.CacheHelper,Umbraco.Core.Logging.ProfilingLogger)">
            <summary>
            Creates a basic app context
            </summary>
            <param name="cache"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.EnsureContext(Umbraco.Core.ApplicationContext,System.Boolean)">
            <summary>
            A method used to set and/or ensure that a global ApplicationContext singleton is created.
            </summary>
            <param name="appContext">
            The instance to set on the global application singleton
            </param>
            <param name="replaceContext">If set to true and the singleton is already set, it will be replaced</param>
            <returns></returns>
            <remarks>
            This is NOT thread safe 
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.EnsureContext(Umbraco.Core.DatabaseContext,Umbraco.Core.Services.ServiceContext,Umbraco.Core.CacheHelper,System.Boolean)">
            <summary>
            A method used to create and ensure that a global ApplicationContext singleton is created.
            </summary>
            <param name="cache"></param>
            <param name="replaceContext">
            If set to true will replace the current singleton instance - This should only be used for unit tests or on app 
            startup if for some reason the boot manager is not the umbraco boot manager.
            </param>
            <param name="dbContext"></param>
            <param name="serviceContext"></param>
            <returns></returns>
            <remarks>
            This is NOT thread safe 
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.EnsureContext(Umbraco.Core.DatabaseContext,Umbraco.Core.Services.ServiceContext,Umbraco.Core.CacheHelper,Umbraco.Core.Logging.ProfilingLogger,System.Boolean)">
            <summary>
            A method used to create and ensure that a global ApplicationContext singleton is created.
            </summary>
            <param name="cache"></param>
            <param name="logger"></param>
            <param name="replaceContext">
            If set to true will replace the current singleton instance - This should only be used for unit tests or on app 
            startup if for some reason the boot manager is not the umbraco boot manager.
            </param>
            <param name="dbContext"></param>
            <param name="serviceContext"></param>
            <returns></returns>
            <remarks>
            This is NOT thread safe 
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.System#IDisposable#Dispose">
            <summary>
            This will dispose and reset all resources used to run the application
            </summary>
            <remarks>
            IMPORTANT: Never dispose this object if you require the Umbraco application to run, disposing this object
            is generally used for unit testing and when your application is shutting down after you have booted Umbraco.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.Current">
            <summary>
            Singleton accessor
            </summary>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.ApplicationCache">
            <summary>
            Returns the application wide cache accessor
            </summary>
            <remarks>
            Any caching that is done in the application (app wide) should be done through this property
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.ProfilingLogger">
            <summary>
            Exposes the global ProfilingLogger - this should generally not be accessed via the UmbracoContext and should normally just be exposed 
            on most base classes or injected with IoC
            </summary>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.IsUpgrading">
            <summary>
            If the db is configured, there is a database context and there is an umbraco schema, but we are not 'configured' , then it means we are upgrading
            </summary>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.UmbracoApplicationUrl">
            <summary>
            The application url.
            </summary>
            <remarks>
            The application url is the url that should be used by services to talk to the application,
            eg keep alive or scheduled publishing services. It must exist on a global context because
            some of these services may not run within a web context.
            The format of the application url is:
            - has a scheme (http or https)
            - has the SystemDirectories.Umbraco path
            - does not end with a slash
            It is initialized on the first request made to the server, by UmbracoModule.EnsureApplicationUrl:
            - if umbracoSettings:settings/web.routing/@umbracoApplicationUrl is set, use the value (new setting)
            - if umbracoSettings:settings/scheduledTasks/@baseUrl is set, use the value (backward compatibility)
            - otherwise, use the url of the (first) request.
            Not locking, does not matter if several threads write to this.
            See also issues:
            - http://issues.umbraco.org/issue/U4-2059
            - http://issues.umbraco.org/issue/U4-6788
            - http://issues.umbraco.org/issue/U4-5728
            - http://issues.umbraco.org/issue/U4-5391
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.DatabaseContext">
            <summary>
            Gets the current DatabaseContext
            </summary>
            <remarks>
            Internal set is generally only used for unit tests
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.Services">
            <summary>
            Gets the current ServiceContext
            </summary>
            <remarks>
            Internal set is generally only used for unit tests
            </remarks>
        </member>
        <member name="T:Umbraco.Core.ApplicationEventHandler">
            <summary>
            A plugin type that allows developers to execute code during the Umbraco bootup process
            </summary>
            <remarks>
            Allows you to override the methods that you would like to execute code for: ApplicationInitialized, ApplicationStarting, ApplicationStarted.
            
            By default none of these methods will execute if the Umbraco application is not configured or if the Umbraco database is not configured, however
            if you need these methods to execute even if either of these are not configured you can override the properties: 
            ExecuteWhenApplicationNotConfigured and ExecuteWhenDatabaseNotConfigured
            </remarks>
        </member>
        <member name="T:Umbraco.Core.IApplicationEventHandler">
            <summary>
            Custom IApplicationStartupHandler that auto subscribes to the applications events
            </summary>
        </member>
        <member name="M:Umbraco.Core.IApplicationEventHandler.OnApplicationInitialized(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            ApplicationContext is created and other static objects that require initialization have been setup
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.IApplicationEventHandler.OnApplicationStarting(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            All resolvers have been initialized but resolution is not frozen so they can be modified in this method
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.IApplicationEventHandler.OnApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Bootup is completed, this allows you to perform any other bootup logic required for the application.
            Resolution is frozen so now they can be used to resolve instances.
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.ApplicationEventHandler.ApplicationInitialized(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Overridable method to execute when the ApplicationContext is created and other static objects that require initialization have been setup
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.ApplicationEventHandler.ApplicationStarting(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Overridable method to execute when All resolvers have been initialized but resolution is not frozen so they can be modified in this method
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.ApplicationEventHandler.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Overridable method to execute when Bootup is completed, this allows you to perform any other bootup logic required for the application.
            Resolution is frozen so now they can be used to resolve instances.
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.ApplicationEventHandler.ShouldExecute(Umbraco.Core.ApplicationContext)">
            <summary>
            Determine if the methods should execute based on the configuration status of the application.
            </summary>
            <param name="applicationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.ApplicationEventHandler.ExecuteWhenApplicationNotConfigured">
            <summary>
            A flag to determine if the overridable methods for this class will execute even if the 
            Umbraco application is not configured
            </summary>
            <remarks>
            An Umbraco Application is not configured when it requires a new install or upgrade. When the latest version in the
            assembly does not match the version in the config.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ApplicationEventHandler.ExecuteWhenDatabaseNotConfigured">
            <summary>
            A flag to determine if the overridable methods for this class will execute even if the 
            Umbraco database is not configured
            </summary>
            <remarks>
            The Umbraco database is not configured when we cannot connect to the database or when the database tables are not installed.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.GetAssemblyFile(System.Reflection.Assembly)">
            <summary>
            Returns the file used to load the assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.IsAppCodeAssembly(System.Reflection.Assembly)">
            <summary>
            Returns true if the assembly is the App_Code assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.IsGlobalAsaxAssembly(System.Reflection.Assembly)">
            <summary>
            Returns true if the assembly is the compiled global asax.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.GetAssemblyFile(System.Reflection.AssemblyName)">
            <summary>
             Returns the file used to load the assembly
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Attempt`1">
            <summary>
            Represents the result of an operation attempt.
            </summary>
            <typeparam name="T">The type of the attempted operation result.</typeparam>
        </member>
        <member name="F:Umbraco.Core.Attempt`1.False">
            <summary>
            Represents an unsuccessful attempt.
            </summary>
            <remarks>Keep it for backward compatibility sake.</remarks>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.#ctor(System.Boolean,`0)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.Attempt`1"/> struct with a result.
            </summary>
            <param name="success">A value indicating whether the attempt is successful.</param>
            <param name="result">The result of the attempt.</param>
            <remarks>Keep it for backward compatibility sake.</remarks>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.#ctor(System.Exception)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.Attempt`1"/> struct representing a failed attempt, with an exception.
            </summary>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <remarks>Keep it for backward compatibility sake.</remarks>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Succeed">
            <summary>
            Creates a successful attempt.
            </summary>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Succeed(`0)">
            <summary>
            Creates a successful attempt with a result.
            </summary>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Fail">
            <summary>
            Creates a failed attempt.
            </summary>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Fail(System.Exception)">
            <summary>
            Creates a failed attempt with an exception.
            </summary>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Fail(`0)">
            <summary>
            Creates a failed attempt with a result.
            </summary>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.Fail(`0,System.Exception)">
            <summary>
            Creates a failed attempt with a result and an exception.
            </summary>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.SucceedIf(System.Boolean)">
            <summary>
            Creates a successful or a failed attempt.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.SucceedIf(System.Boolean,`0)">
            <summary>
            Creates a successful or a failed attempt, with a result.
            </summary>
            <param name="condition">A value indicating whether the attempt is successful.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.op_Implicit(Umbraco.Core.Attempt{`0})~System.Boolean">
            <summary>
            Implicity operator to check if the attempt was successful without having to access the 'success' property
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Umbraco.Core.Attempt`1"/> was successful.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Exception">
            <summary>
            Gets the exception associated with an unsuccessful attempt.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Error">
            <summary>
            Gets the exception associated with an unsuccessful attempt.
            </summary>
            <remarks>Keep it for backward compatibility sake.</remarks>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Result">
            <summary>
            Gets the attempt result.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.New">
            <summary>
            Used when new nodes are added
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Save">
            <summary>
            Used when nodes are saved
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Open">
            <summary>
            Used when nodes are opened
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Delete">
            <summary>
            Used when nodes are deleted
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Publish">
            <summary>
            Used when nodes are published
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.SendToPublish">
            <summary>
            Used when nodes are send to publishing
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.UnPublish">
            <summary>
            Used when nodes are unpublished
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Move">
            <summary>
            Used when nodes are moved
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Copy">
            <summary>
            Used when nodes are copied
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.AssignDomain">
            <summary>
            Used when nodes are assígned a domain
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.PublicAccess">
            <summary>
            Used when public access are changed for a node
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Sort">
            <summary>
            Used when nodes are sorted
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Notify">
            <summary>
            Used when a notification are send to a user
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.System">
            <summary>
            General system notification
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.RollBack">
            <summary>
            Used when a node's content is rolled back to a previous version
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.PackagerInstall">
            <summary>
            Used when a package is installed
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.PackagerUninstall">
            <summary>
            Used when a package is uninstalled
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.SendToTranslate">
            <summary>
            Used when a node is send to translation
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Custom">
            <summary>
            Use this log action for custom log messages that should be shown in the audit trail
            </summary>
        </member>
        <member name="T:Umbraco.Core.CacheHelper">
            <summary>
            Class that is exposed by the ApplicationContext for application wide caching purposes
            </summary>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.CreateDisabledCacheHelper">
            <summary>
            Creates a cache helper with disabled caches
            </summary>
            <returns></returns>
            <remarks>
            Good for unit testing
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.#ctor">
            <summary>
            Initializes a new instance for use in the web
            </summary>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.#ctor(System.Web.Caching.Cache)">
            <summary>
            Initializes a new instance for use in the web
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.#ctor(Umbraco.Core.Cache.IRuntimeCacheProvider,Umbraco.Core.Cache.ICacheProvider,Umbraco.Core.Cache.ICacheProvider,Umbraco.Core.Cache.IsolatedRuntimeCache)">
            <summary>
            Initializes a new instance based on the provided providers
            </summary>
            <param name="httpCacheProvider"></param>
            <param name="staticCacheProvider"></param>
            <param name="requestCacheProvider"></param>
            <param name="isolatedCacheManager"></param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearAllCache">
            <summary>
            Clears the item in umbraco's runtime cache
            </summary>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearCacheItem(System.String)">
            <summary>
            Clears the item in umbraco's runtime cache with the given key 
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearCacheObjectTypes(System.String)">
            <summary>
            Clears all objects in the System.Web.Cache with the System.Type name as the
            input parameter. (using [object].GetType())
            </summary>
            <param name="typeName">The name of the System.Type which should be cleared from cache ex "System.Xml.XmlDocument"</param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearCacheObjectTypes``1">
            <summary>
            Clears all objects in the System.Web.Cache with the System.Type specified
            </summary>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearCacheByKeySearch(System.String)">
            <summary>
            Clears all cache items that starts with the key passed.
            </summary>
            <param name="keyStartsWith">The start of the key</param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearCacheByKeyExpression(System.String)">
            <summary>
            Clears all cache items that have a key that matches the regular expression
            </summary>
            <param name="regexString"></param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.GetCacheItem``1(System.String)">
            <summary>
            Returns a cache item by key, does not update the cache if it isn't there.
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.GetCacheItem``1(System.String,System.Func{``0})">
            <summary>
            Gets (and adds if necessary) an item from the cache with all of the default parameters
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="cacheKey"></param>
            <param name="getCacheItem"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.GetCacheItem``1(System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            Gets (and adds if necessary) an item from the cache with the specified absolute expiration date (from NOW)
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="cacheKey"></param>
            <param name="timeout">This will set an absolute expiration from now until the timeout</param>
            <param name="getCacheItem"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.GetCacheItem``1(System.String,System.Web.Caching.CacheItemRemovedCallback,System.TimeSpan,System.Func{``0})">
            <summary>
            Gets (and adds if necessary) an item from the cache with the specified absolute expiration date (from NOW)
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="cacheKey"></param>
            <param name="refreshAction"></param>
            <param name="timeout">This will set an absolute expiration from now until the timeout</param>
            <param name="getCacheItem"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.GetCacheItem``1(System.String,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.TimeSpan,System.Func{``0})">
            <summary>
            Gets (and adds if necessary) an item from the cache with the specified absolute expiration date (from NOW)
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="cacheKey"></param>
            <param name="priority"></param>
            <param name="refreshAction"></param>
            <param name="timeout">This will set an absolute expiration from now until the timeout</param>
            <param name="getCacheItem"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.GetCacheItem``1(System.String,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.Web.Caching.CacheDependency,System.TimeSpan,System.Func{``0})">
            <summary>
            Gets (and adds if necessary) an item from the cache with the specified absolute expiration date (from NOW)
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="cacheKey"></param>
            <param name="priority"></param>
            <param name="refreshAction"></param>
            <param name="cacheDependency"></param>
            <param name="timeout">This will set an absolute expiration from now until the timeout</param>
            <param name="getCacheItem"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.GetCacheItem``1(System.String,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheDependency,System.Func{``0})">
            <summary>
            Gets (and adds if necessary) an item from the cache
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="cacheKey"></param>
            <param name="priority"></param>
            <param name="cacheDependency"></param>
            <param name="getCacheItem"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.InsertCacheItem``1(System.String,System.Web.Caching.CacheItemPriority,System.Func{``0})">
            <summary>
            Inserts an item into the cache, if it already exists in the cache it will be replaced
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="priority"></param>
            <param name="getCacheItem"></param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.InsertCacheItem``1(System.String,System.Web.Caching.CacheItemPriority,System.TimeSpan,System.Func{``0})">
            <summary>
            Inserts an item into the cache, if it already exists in the cache it will be replaced
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="priority"></param>
            <param name="timeout">This will set an absolute expiration from now until the timeout</param>
            <param name="getCacheItem"></param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.InsertCacheItem``1(System.String,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheDependency,System.TimeSpan,System.Func{``0})">
            <summary>
            Inserts an item into the cache, if it already exists in the cache it will be replaced
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="priority"></param>
            <param name="cacheDependency"></param>
            <param name="timeout">This will set an absolute expiration from now until the timeout</param>
            <param name="getCacheItem"></param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.InsertCacheItem``1(System.String,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.Web.Caching.CacheDependency,System.Nullable{System.TimeSpan},System.Func{``0})">
            <summary>
            Inserts an item into the cache, if it already exists in the cache it will be replaced
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <param name="priority"></param>
            <param name="refreshAction"></param>
            <param name="cacheDependency"></param>
            <param name="timeout">This will set an absolute expiration from now until the timeout</param>
            <param name="getCacheItem"></param>
        </member>
        <member name="P:Umbraco.Core.CacheHelper.RequestCache">
            <summary>
            Returns the current Request cache
            </summary>
        </member>
        <member name="P:Umbraco.Core.CacheHelper.StaticCache">
            <summary>
            Returns the current Runtime cache
            </summary>
        </member>
        <member name="P:Umbraco.Core.CacheHelper.RuntimeCache">
            <summary>
            Returns the current Runtime cache
            </summary>
        </member>
        <member name="P:Umbraco.Core.CacheHelper.IsolatedRuntimeCache">
            <summary>
            Returns the current Isolated Runtime cache manager
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.CacheKeys">
            <summary>
            Constants storing cache keys used in caching
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.CacheProviderExtensions">
            <summary>
            Extensions for strongly typed access
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2">
            <summary>
            The default cache policy for retrieving a single entity
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
            <remarks>
            This cache policy uses sliding expiration and caches instances for 5 minutes. However if allow zero count is true, then we use the
            default policy with no expiry.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.DisposableObject">
            <summary>
            Abstract implementation of IDisposable.
            </summary>
            <remarks>
            Can also be used as a pattern for when inheriting is not possible.
            
            See also: https://msdn.microsoft.com/en-us/library/b1yfkh5e%28v=vs.110%29.aspx
            See also: https://lostechies.com/chrispatterson/2012/11/29/idisposable-done-right/
            
            Note: if an object's ctor throws, it will never be disposed, and so if that ctor
            has allocated disposable objects, it should take care of disposing them.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.DisposeResources">
            <summary>
            The disposal performs the caching
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyBase`2.SetCacheAction(System.Action)">
            <summary>
            Sets the action to execute on disposal
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.HasZeroCountCache">
            <summary>
            Looks up the zero count cache, must return null if it doesn't exist
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.GetAllFromCache">
            <summary>
            Performs the lookup for all entities of this type from the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.SetCacheAction(System.String,`0)">
            <summary>
            Sets the action to execute on disposal for a single entity
            </summary>
            <param name="cacheKey"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2.SetCacheAction(`1[],`0[])">
            <summary>
            Sets the action to execute on disposal for an entity collection
            </summary>
            <param name="ids"></param>
            <param name="entityCollection"></param>
        </member>
        <member name="T:Umbraco.Core.Cache.DefaultRepositoryCachePolicyFactory`2">
            <summary>
            Creates cache policies
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2">
            <summary>
            A caching policy that caches an entire dataset as a single collection
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.SetCacheAction(System.String,`0)">
            <summary>
            For this type of caching policy, we don't cache individual items
            </summary>
            <param name="cacheKey"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.SetCacheAction(`0[])">
            <summary>
            Sets the action to execute on disposal for an entity collection
            </summary>
            <param name="entityCollection"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.HasZeroCountCache">
            <summary>
            Looks up the zero count cache, must return null if it doesn't exist
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2.GetAllFromCache">
            <summary>
            This policy will cache the full data set as a single collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Cache.FullDataSetRepositoryCachePolicyFactory`2">
            <summary>
            Creates cache policies
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Cache.ICacheProvider">
            <summary>
            An abstract class for implementing a basic cache provider
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.ICacheProvider.ClearAllCache">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.ICacheProvider.ClearCacheItem(System.String)">
            <summary>
            Removes an item from the cache, identified by its key.
            </summary>
            <param name="key">The key of the item.</param>
        </member>
        <member name="M:Umbraco.Core.Cache.ICacheProvider.ClearCacheObjectTypes(System.String)">
            <summary>
            Removes items from the cache, of a specified type.
            </summary>
            <param name="typeName">The name of the type to remove.</param>
            <remarks>
            <para>If the type is an interface, then all items of a type implementing that interface are
            removed. Otherwise, only items of that exact type are removed (items of type inheriting from
            the specified type are not removed).</para>
            <para>Performs a case-sensitive search.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.ICacheProvider.ClearCacheObjectTypes``1">
            <summary>
            Removes items from the cache, of a specified type.
            </summary>
            <typeparam name="T">The type of the items to remove.</typeparam>
            <remarks>If the type is an interface, then all items of a type implementing that interface are
            removed. Otherwise, only items of that exact type are removed (items of type inheriting from
            the specified type are not removed).</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.ICacheProvider.ClearCacheObjectTypes``1(System.Func{System.String,``0,System.Boolean})">
            <summary>
            Removes items from the cache, of a specified type, satisfying a predicate.
            </summary>
            <typeparam name="T">The type of the items to remove.</typeparam>
            <param name="predicate">The predicate to satisfy.</param>
            <remarks>If the type is an interface, then all items of a type implementing that interface are
            removed. Otherwise, only items of that exact type are removed (items of type inheriting from
            the specified type are not removed).</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.ICacheProvider.GetCacheItem(System.String)">
            <summary>
            Returns an item with a given key
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Cache.CacheRefresherBase`1">
            <summary>
            A base class for cache refreshers to inherit from that ensures the correct events are raised
            when cache refreshing occurs.
            </summary>
            <typeparam name="TInstanceType">The real cache refresher type, this is used for raising strongly typed events</typeparam>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.OnCacheUpdated(`0,Umbraco.Core.Cache.CacheRefresherEventArgs)">
            <summary>
            Raises the event
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.CacheRefresherBase`1.ClearAllIsolatedCacheByEntityType``1">
            <summary>
            Clears the cache for all repository entities of this type
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="E:Umbraco.Core.Cache.CacheRefresherBase`1.CacheUpdated">
            <summary>
            An event that is raised when cache is updated on an individual server
            </summary>
            <remarks>
            This event will fire on each server configured for an Umbraco project whenever a cache refresher
            is updated.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.CacheRefresherBase`1.Instance">
            <summary>
            Returns the real instance of the object ('this') for use  in strongly typed events
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.CacheRefresherEventArgs">
            <summary>
            Event args for cache refresher updates
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.HttpRequestCacheProvider">
            <summary>
            A cache provider that caches items in the HttpContext.Items
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.IPayloadCacheRefresher">
            <summary>
            A cache refresher that supports refreshing cache based on a custom payload
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.IJsonCacheRefresher">
            <summary>
            A cache refresher that supports refreshing or removing cache based on a custom Json payload
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.IJsonCacheRefresher.Refresh(System.String)">
            <summary>
            Refreshes, clears, etc... any cache based on the information provided in the json
            </summary>
            <param name="jsonPayload"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.IPayloadCacheRefresher.Refresh(System.Object)">
            <summary>
            Refreshes, clears, etc... any cache based on the information provided in the payload
            </summary>
            <param name="payload"></param>
        </member>
        <member name="T:Umbraco.Core.Cache.IsolatedRuntimeCache">
            <summary>
            Used to get/create/manipulate isolated runtime cache
            </summary>
            <remarks>
            This is useful for repository level caches to ensure that cache lookups by key are fast so 
            that the repository doesn't need to search through all keys on a global scale.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedRuntimeCache.#ctor(System.Func{System.Type,Umbraco.Core.Cache.IRuntimeCacheProvider})">
            <summary>
            Constructor that allows specifying a factory for the type of runtime isolated cache to create
            </summary>
            <param name="cacheFactory"></param>
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedRuntimeCache.GetOrCreateCache``1">
            <summary>
            Returns an isolated runtime cache for a given type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedRuntimeCache.GetOrCreateCache(System.Type)">
            <summary>
            Returns an isolated runtime cache for a given type
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedRuntimeCache.GetCache``1">
            <summary>
            Tries to get a cache by the type specified
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedRuntimeCache.ClearCache``1">
            <summary>
            Clears all values inside this isolated runtime cache
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Cache.IsolatedRuntimeCache.ClearAllCaches">
            <summary>
            Clears all of the isolated caches
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.ObjectCacheRuntimeCacheProvider">
            <summary>
            A cache provider that wraps the logic of a System.Runtime.Caching.ObjectCache
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.IRuntimeCacheProvider">
            <summary>
            An abstract class for implementing a runtime cache provider
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.ObjectCacheRuntimeCacheProvider.InstanceId">
            <summary>
            Used for debugging
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.HttpRuntimeCacheProvider">
            <summary>
            A CacheProvider that wraps the logic of the HttpRuntime.Cache
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.HttpRuntimeCacheProvider.GetCacheItem(System.String,System.Func{System.Object})">
            <summary>
            Gets (and adds if necessary) an item from the cache with all of the default parameters
            </summary>
            <param name="cacheKey"></param>
            <param name="getCacheItem"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Cache.HttpRuntimeCacheProvider.GetCacheItem(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.Web.Caching.CacheDependency)">
            <summary>
            This overload is here for legacy purposes
            </summary>
            <param name="cacheKey"></param>
            <param name="getCacheItem"></param>
            <param name="timeout"></param>
            <param name="isSliding"></param>
            <param name="priority"></param>
            <param name="removedCallback"></param>
            <param name="dependency"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Cache.HttpRuntimeCacheProvider.InsertCacheItem(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.Web.Caching.CacheDependency)">
            <summary>
            This overload is here for legacy purposes
            </summary>
            <param name="cacheKey"></param>
            <param name="getCacheItem"></param>
            <param name="timeout"></param>
            <param name="isSliding"></param>
            <param name="priority"></param>
            <param name="removedCallback"></param>
            <param name="dependency"></param>
        </member>
        <member name="P:Umbraco.Core.Cache.HttpRuntimeCacheProvider.InstanceId">
            <summary>
            Used for debugging
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.JsonCacheRefresherBase`1">
            <summary>
            Provides a base class for "json" cache refreshers.
            </summary>
            <typeparam name="TInstance">The actual cache refresher type.</typeparam>
            <remarks>Ensures that the correct events are raised when cache refreshing occurs.</remarks>
        </member>
        <member name="T:Umbraco.Core.Cache.SingleItemsOnlyRepositoryCachePolicy`2">
            <summary>
            A caching policy that ignores all caches for GetAll - it will only cache calls for individual items
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Cache.OnlySingleItemsRepositoryCachePolicyFactory`2">
            <summary>
            Creates cache policies
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Cache.PayloadCacheRefresherBase`1">
            <summary>
            Provides a base class for "payload" cache refreshers.
            </summary>
            <typeparam name="TInstance">The actual cache refresher type.</typeparam>
            <remarks>Ensures that the correct events are raised when cache refreshing occurs.</remarks>
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyOptions.#ctor(System.Func{System.Int32})">
            <summary>
            Ctor - sets GetAllCacheValidateCount = true
            </summary>
        </member>
        <member name="M:Umbraco.Core.Cache.RepositoryCachePolicyOptions.#ctor">
            <summary>
            Ctor - sets GetAllCacheValidateCount = false
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.RepositoryCachePolicyOptions.PerformCount">
            <summary>
            Callback required to get count for GetAllCacheValidateCount
            </summary>
        </member>
        <member name="P:Umbraco.Core.Cache.RepositoryCachePolicyOptions.GetAllCacheValidateCount">
            <summary>
            True/false as to validate the total item count when all items are returned from cache, the default is true but this
            means that a db lookup will occur - though that lookup will probably be significantly less expensive than the normal 
            GetAll method. 
            </summary>
            <remarks>
            setting this to return false will improve performance of GetAll cache with no params but should only be used
            for specific circumstances
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Cache.RepositoryCachePolicyOptions.GetAllCacheAllowZeroCount">
            <summary>
            True if the GetAll method will cache that there are zero results so that the db is not hit when there are no results found
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.StaticCacheProvider">
            <summary>
            A cache provider that statically caches everything in an in memory dictionary
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.TypedCacheRefresherBase`2">
            <summary>
            A base class for cache refreshers to inherit from that ensures the correct events are raised
            when cache refreshing occurs.
            </summary>
            <typeparam name="TInstanceType">The real cache refresher type, this is used for raising strongly typed events</typeparam>
            <typeparam name="TEntityType">The entity type that this refresher can update cache for</typeparam>
        </member>
        <member name="T:Umbraco.Core.Cache.ICacheRefresher`1">
            <summary>
            Strongly type cache refresher that is able to refresh cache of real instances of objects as well as IDs
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            This is much better for performance when we're not running in a load balanced environment so we can refresh the cache
            against a already resolved object instead of looking the object back up by id. 
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Cache.IRuntimeCacheProviderWrapper">
            <summary>
            Interface describing this cache provider as a wrapper for another
            </summary>
        </member>
        <member name="T:Umbraco.Core.Cache.DeepCloneRuntimeCacheProvider">
            <summary>
            A wrapper for any IRuntimeCacheProvider that ensures that all inserts and returns 
            are a deep cloned copy of the item when the item is IDeepCloneable and that tracks changes are
            reset if the object is TracksChangesEntityBase
            </summary>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.FriendlyNameAttribute">
            <summary>
            Attribute to add a Friendly Name string with an UmbracoObjectType enum value
            </summary>
        </member>
        <member name="F:Umbraco.Core.CodeAnnotations.FriendlyNameAttribute._friendlyName">
            <summary>
            friendly name value
            </summary>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.FriendlyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FriendlyNameAttribute class
            Sets the friendly name value
            </summary>
            <param name="friendlyName">attribute value</param>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.FriendlyNameAttribute.ToString">
            <summary>
            Gets the friendly name
            </summary>
            <returns>string of friendly name</returns>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.UmbracoObjectTypeAttribute">
            <summary>
            Attribute to associate a GUID string and Type with an UmbracoObjectType Enum value
            </summary>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute">
            <summary>
            Marks the program elements that Umbraco will obsolete.
            </summary>
            <remarks>
            Indicates that Umbraco will obsolete the program element at some point in the future, but we do not want to
            explicitely mark it [Obsolete] yet to avoid warning messages showing when developers compile Umbraco.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute"/> class with a description.
            </summary>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute"/> class with a tracker url and a description.
            </summary>
            <param name="trackerUrl">The url of a tracker issue containing more details, discussion, and planning.</param>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute">
            <summary>
            Marks the program elements that Umbraco is experimenting with and could become public.
            </summary>
            <remarks>
            <para>Indicates that Umbraco  is experimenting with code that potentially could become
            public, but we're not sure, and the code is not stable and can be refactored at any time.</para>
            <para>The issue tracker should contain more details, discussion, and planning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute"/> class with a description.
            </summary>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute"/> class with a tracker url and a description.
            </summary>
            <param name="trackerUrl">The url of a tracker issue containing more details, discussion, and planning.</param>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute">
            <summary>
            Marks the program elements that Umbraco is considering making public.
            </summary>
            <remarks>
            <para>Indicates that Umbraco considers making the (currently internal) program element public
            at some point in the future, but the decision is not fully made yet and is still pending reviews.</para>
            <para>Note that it is not a commitment to make the program element public. It may not ever become public.</para>
            <para>The issue tracker should contain more details, discussion, and planning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute"/> class with a description.
            </summary>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute"/> class with a tracker url and a description.
            </summary>
            <param name="trackerUrl">The url of a tracker issue containing more details, discussion, and planning.</param>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="T:Umbraco.Core.Collections.DeepCloneableList`1">
            <summary>
            A List that can be deep cloned with deep cloned elements and can reset the collection's items dirty flags
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.IRememberBeingDirty">
            <summary>
            An interface that defines if the object is tracking property changes and that is is also
            remembering what property changes had been made after the changes were committed.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.ICanBeDirty">
            <summary>
            An interface that defines the object is tracking property changes and if it is Dirty
            </summary>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Default behavior is CloneOnce
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.DeepClone">
            <summary>
            Creates a new list and adds each element as a deep cloned element if it is of type IDeepCloneable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.IsPropertyDirty(System.String)">
            <summary>
            Always returns false, the list has no properties we need to report
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Collections.DeepCloneableList`1.WasPropertyDirty(System.String)">
            <summary>
            Always returns false, the list has no properties we need to report
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Core.Collections.ListCloneBehavior.CloneOnce">
            <summary>
            When set, DeepClone will clone the items one time and the result list behavior will be None
            </summary>
        </member>
        <member name="F:Umbraco.Core.Collections.ListCloneBehavior.None">
            <summary>
            When set, DeepClone will not clone any items
            </summary>
        </member>
        <member name="F:Umbraco.Core.Collections.ListCloneBehavior.Always">
            <summary>
            When set, DeepClone will always clone all items
            </summary>
        </member>
        <member name="T:Umbraco.Core.ConcurrentHashSet`1">
            <summary>
            A thread-safe representation of a <see cref="T:System.Collections.Generic.HashSet`1"/>. 
            Enumerating this collection is thread-safe and will only operate on a clone that is generated before returning the enumerator.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.TryAdd(`0)">
            <summary>
            Attempts to add an item to the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/> to an <see cref="T:System.Array"/>, starting at a specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>. The array must have zero-based indexing.</param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in Visual Basic).</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception><exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/> -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Umbraco.Core.ConcurrentHashSet`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception><exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Umbraco.Core.ConcurrentHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Umbraco.Core.ConcurrentHashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Umbraco.Core.Configuration.BaseRest.IBaseRestSection.Enabled">
            <summary>
            Gets a value indicating whether base rest extensions are enabled.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.CaseInsensitiveEnumConfigConverter`1">
            <summary>
            A case-insensitive configuration converter for enumerations.
            </summary>
            <typeparam name="T">The type of the enumeration.</typeparam>
        </member>
        <member name="M:Umbraco.Core.Configuration.ClientDependencyConfiguration.IncreaseVersionNumber">
            <summary>
            Changes the version number in ClientDependency.config to a random value to avoid stale caches
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.UmbracoConfigurationSection">
            <summary>
            Represents an Umbraco section within the configuration file.
            </summary>
            <remarks>
            <para>The requirement for these sections is to be read-only.</para>
            <para>However for unit tests purposes it is internally possible to override some values, and
            then calling <c>>ResetSection</c> should cancel these changes and bring the section back to
            what it was originally.</para>
            <para>The <c>UmbracoSettings.For{T}</c> method will return a section, either one that
            is in the configuration file, or a section that was created with default values.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Configuration.IUmbracoConfigurationSection">
            <summary>
            Represents an Umbraco configuration section which can be used to pass to UmbracoConfiguration.For{T}
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoConfigurationSection.IsPresent">
            <summary>
            Gets a value indicating whether the section actually is in the configuration file.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.BaseRest.BaseRestSection.Enabled">
            <summary>
            Gets or sets a value indicating whether base rest extensions are enabled.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.RawXmlConfigurationElement">
            <summary>
            A configuration section that simply exposes the entire raw xml of the section itself which inheritors can use
            to do with as they please.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.Dashboard.IAccessItem.Action">
            <summary>
            This can be grant, deny or grantBySection
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.Dashboard.IAccessItem.Value">
            <summary>
            The value of the action
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.Dashboard.AccessItem.Action">
            <summary>
            This can be grant, deny or grantBySection
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.Dashboard.AccessItem.Value">
            <summary>
            The value of the action
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.InnerTextConfigurationElement`1">
            <summary>
            A full config section is required for any full element and we have some elements that are defined like this:
            {element}MyValue{/element} instead of as attribute values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Configuration.InnerTextConfigurationElement`1.op_Implicit(Umbraco.Core.Configuration.InnerTextConfigurationElement{`0})~`0">
            <summary>
            Implicit operator so we don't need to use the 'Value' property explicitly
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Configuration.InnerTextConfigurationElement`1.ToString">
            <summary>
            Return the string value of Value
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Configuration.InnerTextConfigurationElement`1.RawValue">
            <summary>
            Exposes the raw string value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.UmbracoConfig">
            <summary>
            The gateway to all umbraco configuration
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.#ctor(Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection,Umbraco.Core.Configuration.BaseRest.IBaseRestSection,Umbraco.Core.Configuration.Dashboard.IDashboardSection)">
            <summary>
            Constructor - can be used for testing
            </summary>
            <param name="umbracoSettings"></param>
            <param name="baseRestSettings"></param>
            <param name="dashboardSettings"></param>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.DashboardSettings">
            <summary>
            Gets the IDashboardSection
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.SetDashboardSettings(Umbraco.Core.Configuration.Dashboard.IDashboardSection)">
            <summary>
            Only for testing
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.SetUmbracoSettings(Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection)">
            <summary>
            Only for testing
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.UmbracoSettings">
            <summary>
            Gets the IUmbracoSettings
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.SetBaseRestExtensions(Umbraco.Core.Configuration.BaseRest.IBaseRestSection)">
            <summary>
            Only for testing
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.BaseRestExtensions">
            <summary>
            Gets the IBaseRestSection
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.SetGridConfig(Umbraco.Core.Configuration.Grid.IGridConfig)">
            <summary>
            Only for testing
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoConfig.GridConfig(Umbraco.Core.Logging.ILogger,Umbraco.Core.Cache.IRuntimeCacheProvider,System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Gets the IGridConfig
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.CommaDelimitedConfigurationElement">
            <summary>
            Defines a configuration section that contains inner text that is comma delimited
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.CommaDelimitedConfigurationElement.InnerEnumerator">
            <summary>
            A wrapper for StringEnumerator since it doesn't explicitly implement IEnumerable
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.Alias">
            <summary>
            Allow setting internally so we can create a default
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ImagingAutoFillUploadFieldElement.Alias">
            <summary>
            Allow setting internally so we can create a default
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.UmbracoSettings.CustomBooleanTypeConverter">
            <summary>
            Allows for converting string representations of 0 and 1 to boolean
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.OptionalCommaDelimitedConfigurationElement">
            <summary>
            Used for specifying default values for comma delimited config
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.OptionalInnerTextConfigurationElement`1">
            <summary>
            This is used to supply optional/default values when using InnerTextConfigurationElement
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.Current">
            <summary>
            Gets the current version of Umbraco.
            Version class with the specified major, minor, build (Patch), and revision numbers.
            </summary>
            <remarks>
            CURRENT UMBRACO VERSION ID.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.CurrentComment">
            <summary>
            Gets the version comment (like beta or RC).
            </summary>
            <value>The version comment.</value>
        </member>
        <member name="T:Umbraco.Core.Attempt">
            <summary>
            Provides ways to create attempts.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Attempt.Succeed``1(``0)">
            <summary>
            Creates a successful attempt with a result.
            </summary>
            <typeparam name="T">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <returns>The successful attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.Fail``1(``0)">
            <summary>
            Creates a failed attempt with a result.
            </summary>
            <typeparam name="T">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.Fail``1(``0,System.Exception)">
            <summary>
            Creates a failed attempt with a result and an exception.
            </summary>
            <typeparam name="T">The type of the attempted operation result.</typeparam>
            <param name="result">The result of the attempt.</param>
            <param name="exception">The exception causing the failure of the attempt.</param>
            <returns>The failed attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.If``1(System.Boolean,``0)">
            <summary>
            Creates a successful or a failed attempt, with a result.
            </summary>
            <typeparam name="T">The type of the attempted operation result.</typeparam>
            <param name="success">A value indicating whether the attempt is successful.</param>
            <param name="result">The result of the attempt.</param>
            <returns>The attempt.</returns>
        </member>
        <member name="M:Umbraco.Core.Attempt.Try``1(Umbraco.Core.Attempt{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Executes an attempt function, with callbacks.
            </summary>
            <typeparam name="T">The type of the attempted operation result.</typeparam>
            <param name="attempt">The attempt returned by the attempt function.</param>
            <param name="onSuccess">An action to execute in case the attempt succeeds.</param>
            <param name="onFail">An action to execute in case the attempt fails.</param>
            <returns>The outcome of the attempt.</returns>
            <remarks>Runs <paramref name="onSuccess"/> or <paramref name="onFail"/> depending on the
            whether the attempt function reports a success or a failure.</remarks>
        </member>
        <member name="T:Umbraco.Core.Attempt.Outcome">
            <summary>
            Represents the outcome of an attempt.
            </summary>
            <remarks>Can be a success or a failure, and allows for attempts chaining.</remarks>
        </member>
        <member name="F:Umbraco.Core.Attempt.Outcome.Success">
            <summary>
            Gets an outcome representing a success.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Attempt.Outcome.Failure">
            <summary>
            Gets an outcome representing a failure.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Attempt.Outcome.OnFailure``1(System.Func{Umbraco.Core.Attempt{``0}},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Executes another attempt function, if the previous one failed, with callbacks.
            </summary>
            <typeparam name="T">The type of the attempted operation result.</typeparam>
            <param name="nextFunction">The attempt function to execute, returning an attempt.</param>
            <param name="onSuccess">An action to execute in case the attempt succeeds.</param>
            <param name="onFail">An action to execute in case the attempt fails.</param>
            <returns>If it executes, returns the outcome of the attempt, else returns a success outcome.</returns>
            <remarks>
            <para>Executes only if the previous attempt failed, else does not execute and return a success outcome.</para>
            <para>If it executes, then runs <paramref name="onSuccess"/> or <paramref name="onFail"/> depending on the
            whether the attempt function reports a success or a failure.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Attempt.Outcome.OnSuccess``1(System.Func{Umbraco.Core.Attempt{``0}},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Executes another attempt function, if the previous one succeeded, with callbacks.
            </summary>
            <typeparam name="T">The type of the attempted operation result.</typeparam>
            <param name="nextFunction">The attempt function to execute, returning an attempt.</param>
            <param name="onSuccess">An action to execute in case the attempt succeeds.</param>
            <param name="onFail">An action to execute in case the attempt fails.</param>
            <returns>If it executes, returns the outcome of the attempt, else returns a failed outcome.</returns>
            <remarks>
            <para>Executes only if the previous attempt succeeded, else does not execute and return a success outcome.</para>
            <para>If it executes, then runs <paramref name="onSuccess"/> or <paramref name="onFail"/> depending on the
            whether the attempt function reports a success or a failure.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Constants">
            <summary>
            Constants all the identifiers within the Umbraco core.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Examine.InternalMemberSearcher">
            <summary>
            The alias of the internal member searcher
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Examine.InternalSearcher">
            <summary>
            The alias of the internal content searcher
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.ContentType">
            <summary>
            System contenttype icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.DataType">
            <summary>
            System datatype icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.PropertyEditor">
            <summary>
            System property editor icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.Macro">
            <summary>
            System macro icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.Member">
            <summary>
            System member icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.MemberType">
            <summary>
            System member icon
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Icons.Template">
            <summary>
            System member icon
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Applications">
            <summary>
            Defines the alias identifiers for Umbraco's core application sections.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Content">
            <summary>
            Application alias for the content section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Developer">
            <summary>
            Application alias for the developer section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Media">
            <summary>
            Application alias for the media section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Members">
            <summary>
            Application alias for the members section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Settings">
            <summary>
            Application alias for the settings section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Translation">
            <summary>
            Application alias for the translation section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Users">
            <summary>
            Application alias for the users section.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Applications.Forms">
            <summary>
            Application alias for the forms section.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Trees">
            <summary>
            Defines the alias identifiers for Umbraco's core trees.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Content">
            <summary>
            alias for the content tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Members">
            <summary>
            alias for the member tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Media">
            <summary>
            alias for the media tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.DataTypes">
            <summary>
            alias for the datatype tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Dictionary">
            <summary>
            alias for the dictionary tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.DocumentTypes">
            <summary>
            alias for the document type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.MediaTypes">
            <summary>
            alias for the media type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.MemberTypes">
            <summary>
            alias for the member type tree.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Trees.Templates">
            <summary>
            alias for the template tree.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions">
            <summary>
            Defines the identifiers for property-type alias conventions that are used within the Umbraco core.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Localization.DictionaryItemRootId">
            <summary>
            The root id for all top level dictionary items
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.Content">
            <summary>
            Constants for Umbraco Content property aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.InternalRedirectId">
            <summary>
            Property alias for the Content's Url (internal) redirect.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.NaviHide">
            <summary>
            Property alias for the Content's navigational hide, (not actually used in core code).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.Redirect">
            <summary>
            Property alias for the Content's Url redirect.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.UrlAlias">
            <summary>
            Property alias for the Content's Url alias.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Content.UrlName">
            <summary>
            Property alias for the Content's Url name.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.Media">
            <summary>
            Constants for Umbraco Media property aliases.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.File">
            <summary>
            Property alias for the Media's file name.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.Width">
            <summary>
            Property alias for the Media's width.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.Height">
            <summary>
            Property alias for the Media's height.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.Bytes">
            <summary>
            Property alias for the Media's file size (in bytes).
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Media.Extension">
            <summary>
            Property alias for the Media's file extension.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.MediaTypes">
            <summary>
            Defines the alias identifiers for Umbraco media types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MediaTypes.File">
            <summary>
            MediaType alias for a file.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MediaTypes.Folder">
            <summary>
            MediaType alias for a folder.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MediaTypes.Image">
            <summary>
            MediaType alias for an image.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.Member">
            <summary>
            Constants for Umbraco Member property aliases.
            </summary>		    
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.PasswordQuestion">
            <summary>
            Property alias for a Members Password Question
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.PasswordAnswer">
            <summary>
            Property alias for Members Password Answer
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.Comments">
            <summary>
            Property alias for the Comments on a Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.IsApproved">
            <summary>
            Property alias for the Approved boolean of a Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.IsLockedOut">
            <summary>
            Property alias for the Locked out boolean of a Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.LastLoginDate">
            <summary>
            Property alias for the last date the Member logged in
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.LastPasswordChangeDate">
            <summary>
            Property alias for the last date a Member changed its password
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.LastLockoutDate">
            <summary>
            Property alias for the last date a Member was locked out
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.FailedPasswordAttempts">
            <summary>
            Property alias for the number of failed login attemps
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.StandardPropertiesGroupName">
            <summary>
            Group name to put the membership properties on
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Member.InternalRolePrefix">
            <summary>
            if a role starts with __umbracoRole we won't show it as it's an internal role used for public access
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.MemberTypes">
            <summary>
            Defines the alias identifiers for Umbraco member types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.MemberTypes.DefaultAlias">
            <summary>
            MemberType alias for default member type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.Url">
            <summary>
            Constants for Umbraco URLs/Querystrings.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.Url.AltTemplate">
            <summary>
            Querystring parameter name used for Umbraco's alternative template functionality.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Conventions.RelationTypes">
            <summary>
            Defines the alias identifiers for built-in Umbraco relation types.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateDocumentOnCopyName">
            <summary>
            ContentType name for default relation type "Relate Document On Copy".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateDocumentOnCopyAlias">
            <summary>
            ContentType alias for default relation type "Relate Document On Copy".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateParentDocumentOnDeleteName">
            <summary>
            ContentType name for default relation type "Relate Parent Document On Delete".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Conventions.RelationTypes.RelateParentDocumentOnDeleteAlias">
            <summary>
            ContentType alias for default relation type "Relate Parent Document On Delete".
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.PropertyEditors">
            <summary>
            Defines the identifiers for Umbraco Property Editors as constants for easy centralized access/management.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.InternalGenericPropertiesPrefix">
            <summary>
            Used to prefix generic properties that are internal content properties
            </summary>            
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.CheckBoxList">
            <summary>
            Guid for the Checkbox list datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.CheckBoxListAlias">
            <summary>
            Alias for Checkbox list datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.ColorPicker">
            <summary>
            Guid for the Color Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.ColorPickerAlias">
            <summary>
            Alias for the Color Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.ContentPicker">
            <summary>
            Guid for the Content Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.ContentPickerAlias">
            <summary>
            Alias for the Content Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Date">
            <summary>
            Guid for the Date datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DateAlias">
            <summary>
            Alias for the Date datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DateTime">
            <summary>
            Guid for the Date/Time datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DateTimeAlias">
            <summary>
            Alias for the Date/Time datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DictionaryPicker">
            <summary>
            Guid for the Dictionary Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DropDownList">
            <summary>
            Guid for the Dropdown list datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DropDownListAlias">
            <summary>
            Alias for the Dropdown list datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DropDownListMultiple">
            <summary>
            Guid for the Dropdown list multiple datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DropDownListMultipleAlias">
            <summary>
            Alias for the Dropdown list multiple datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DropdownlistMultiplePublishKeys">
            <summary>
            Guid for the Dropdown list multiple, publish keys datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DropdownlistMultiplePublishKeysAlias">
            <summary>
            Alias for the Dropdown list multiple, publish keys datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DropdownlistPublishingKeys">
            <summary>
            Guid for the Dropdown list, publishing keys datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DropdownlistPublishingKeysAlias">
            <summary>
            Alias for the Dropdown list, publishing keys datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.FolderBrowser">
            <summary>
            Guid for the Folder browser datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.FolderBrowserAlias">
            <summary>
            Alias for the Folder browser datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.GridAlias">
            <summary>
            Alias for the grid datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.ImageCropper">
            <summary>
            Guid for the Image Cropper datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Integer">
            <summary>
            Guid for the Integer datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.IntegerAlias">
            <summary>
            Alias for the Integer datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.DecimalAlias">
            <summary>
            Alias for the Decimal datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.ListViewAlias">
            <summary>
            Alias for the listview datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.ListView">
            <summary>
            Guid for the list view datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MacroContainer">
            <summary>
            Guid for the Macro Container datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MacroContainerAlias">
            <summary>
            Alias for the Macro Container datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MediaPicker">
            <summary>
            Guid for the Media Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MediaPickerAlias">
            <summary>
            Alias for the Media Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MemberPicker">
            <summary>
            Guid for the Member Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MemberPickerAlias">
            <summary>
            Alias for the Member Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MemberGroupPickerAlias">
            <summary>
            Alias for the Member Group Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MultiNodeTreePicker">
            <summary>
            Guid for the Multi-Node Tree Picker datatype
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MultiNodeTreePickerAlias">
            <summary>
            Alias for the Multi-Node Tree Picker datatype
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MultipleTextstring">
            <summary>
            Guid for the Multiple Textstring datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MultipleTextstringAlias">
            <summary>
            Alias for the Multiple Textstring datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.NoEdit">
            <summary>
            Guid for the No edit datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.NoEditAlias">
            <summary>
            Alias for the No edit datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.PickerRelations">
            <summary>
            Guid for the Picker Relations datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.PickerRelationsAlias">
            <summary>
            Alias for the Picker Relations datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.RadioButtonList">
            <summary>
            Guid for the Radiobutton list datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.RadioButtonListAlias">
            <summary>
            Alias for the Radiobutton list datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.RelatedLinks">
            <summary>
            Guid for the Related Links datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.RelatedLinksAlias">
            <summary>
            Alias for the Related Links datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Slider">
            <summary>
            Guid for the Slider datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.SliderAlias">
            <summary>
            Alias for the Slider datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Tags">
            <summary>
            Guid for the Tags datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.TagsAlias">
            <summary>
            Alias for the Tags datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.Textbox">
            <summary>
            Guid for the Textbox datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.TextboxAlias">
            <summary>
            Alias for the Textbox datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.TextboxMultiple">
            <summary>
            Guid for the Textarea datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.TextboxMultipleAlias">
            <summary>
            Alias for the Textarea datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.TinyMCEv3">
            <summary>
            Guid for the TinyMCE v3 wysiwyg datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.TinyMCEAlias">
            <summary>
            Alias for the TinyMCE wysiwyg datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.TrueFalse">
            <summary>
            Guid for the True/False (Ja/Nej) datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.TrueFalseAlias">
            <summary>
            Alias for the True/False (Ja/Nej) datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.UltimatePicker">
            <summary>
            Guid for the Ultimate Picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.UltraSimpleEditor">
            <summary>
            Guid for the UltraSimpleEditor datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.MarkdownEditorAlias">
            <summary>
            Alias for the MarkdownEditor datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.UmbracoUserControlWrapper">
            <summary>
            Guid for the Umbraco Usercontrol Wrapper datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.UploadField">
            <summary>
            Guid for the Upload field datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.UserPickerAlias">
            <summary>
            Alias for the User picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.UserPicker">
            <summary>
            Guid for the User picker datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.UploadFieldAlias">
            <summary>
            Alias for the Upload field datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.XPathCheckBoxList">
            <summary>
            Guid for the XPath CheckBoxList datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.XPathCheckBoxListAlias">
            <summary>
            Alias for the XPath CheckBoxList datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.XPathDropDownList">
            <summary>
            Guid for the XPath DropDownList datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.XPathDropDownListAlias">
            <summary>
            Alias for the XPath DropDownList datatype.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyEditors.EmailAddressAlias">
            <summary>
            Alias for the email address property editor
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.PropertyTypeGroups">
            <summary>
            Defines the identifiers for property-type groups conventions that are used within the Umbraco core.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyTypeGroups.Image">
            <summary>
            Guid for a Image PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyTypeGroups.File">
            <summary>
            Guid for a File PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyTypeGroups.Contents">
            <summary>
            Guid for a Image PropertyTypeGroup object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.PropertyTypeGroups.Membership">
            <summary>
            Guid for a Image PropertyTypeGroup object.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Packaging">
            <summary>
                Defines the constants used for Umbraco packages in the package.config xml
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.ObjectTypes">
            <summary>
            Defines the identifiers for Umbraco object types as constants for easy centralized access/management.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.DataTypeContainer">
            <summary>
            Guid for a data type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.DocumentTypeContainer">
            <summary>
            Guid for a doc type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.MediaTypeContainer">
            <summary>
            Guid for a doc type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.ContentItem">
            <summary>
            Guid for a Content Item object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.ContentItemType">
            <summary>
            Guid for a Content Item Type object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.ContentRecycleBin">
            <summary>
            Guid for the Content Recycle Bin.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.DataType">
            <summary>
            Guid for a DataType object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.Document">
            <summary>
            Guid for a Document object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.DocumentType">
            <summary>
            Guid for a Document Type object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.Media">
            <summary>
            Guid for a Media object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.MediaRecycleBin">
            <summary>
            Guid for the Media Recycle Bin.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.MediaType">
            <summary>
            Guid for a Media Type object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.Member">
            <summary>
            Guid for a Member object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.MemberGroup">
            <summary>
            Guid for a Member Group object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.MemberType">
            <summary>
            Guid for a Member Type object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.Stylesheet">
            <summary>
            Guid for a Stylesheet object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.SystemRoot">
            <summary>
            Guid for the System Root.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.Template">
            <summary>
            Guid for a Template object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.LockObject">
            <summary>
            Guid for a Lock object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.DataTypeContainerGuid">
            <summary>
            Guid for a data type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.DocumentTypeContainerGuid">
            <summary>
            Guid for a doc type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.MediaTypeContainerGuid">
            <summary>
            Guid for a doc type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.DataTypeGuid">
            <summary>
            Guid for a DataType object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.DocumentTypeGuid">
            <summary>
            Guid for a Document Type object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.MediaTypeGuid">
            <summary>
            Guid for a Media Type object.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.ObjectTypes.MemberTypeGuid">
            <summary>
            Guid for a Member Type object.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.System">
            <summary>
            Defines the identifiers for Umbraco system nodes.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.System.Root">
            <summary>
            The integer identifier for global system root node.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RecycleBinContent">
            <summary>
            The integer identifier for content's recycle bin.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.System.RecycleBinMedia">
            <summary>
            The integer identifier for media's recycle bin.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Constants.Web">
            <summary>
            Defines the identifiers for Umbraco system nodes.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Web.PreviewCookieName">
            <summary>
            The preview cookie name
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Web.AuthCookieName">
            <summary>
            The auth cookie name
            </summary>
        </member>
        <member name="F:Umbraco.Core.Constants.Security.BackOfficeExternalAuthenticationTypePrefix">
            <summary>
            The prefix used for external identity providers for their authentication type
            </summary>
            <remarks>
            By default we don't want to interfere with front-end external providers and their default setup, for back office the 
            providers need to be setup differently and each auth type for the back office will be prefixed with this value
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ControlExtensions.FindControlRecursive``1(System.Web.UI.Control,System.String)">
            <summary>
            Recursively finds a control with the specified identifier.
            </summary>
            <typeparam name="T">
            The type of control to be found.
            </typeparam>
            <param name="parent">
            The parent control from which the search will start.
            </param>
            <param name="id">
            The identifier of the control to be found.
            </param>
            <returns>
            The control with the specified identifier, otherwise <see langword="null"/> if the control 
            is not found.
            </returns>
        </member>
        <member name="T:Umbraco.Core.CoreBootManager">
            <summary>
            A bootstrapper for the Umbraco application which initializes all objects for the Core of the application 
            </summary>
            <remarks>
            This does not provide any startup functionality relating to web objects
            </remarks>
        </member>
        <member name="T:Umbraco.Core.IBootManager">
            <summary>
             A bootstrapper interface for the Umbraco application
            </summary>
        </member>
        <member name="M:Umbraco.Core.IBootManager.Initialize">
            <summary>
            Fires first in the application startup process before any customizations can occur
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IBootManager.Startup(System.Action{Umbraco.Core.ApplicationContext})">
            <summary>
            Fires after initialization and calls the callback to allow for customizations to occur
            </summary>
            <param name="afterStartup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IBootManager.Complete(System.Action{Umbraco.Core.ApplicationContext})">
            <summary>
            Fires after startup and calls the callback once customizations are locked
            </summary>
            <param name="afterComplete"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.CreateServiceContext(Umbraco.Core.DatabaseContext,Umbraco.Core.Persistence.IDatabaseFactory)">
            <summary>
            Creates and returns the service context for the app
            </summary>
            <param name="dbContext"></param>
            <param name="dbFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.CreateApplicationContext(Umbraco.Core.DatabaseContext,Umbraco.Core.Services.ServiceContext)">
            <summary>
            Creates and returns the application context for the app
            </summary>
            <param name="dbContext"></param>
            <param name="serviceContext"></param>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.CreateApplicationCache">
            <summary>
            Creates and returns the CacheHelper for the app
            </summary>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.InitializeModelMappers">
            <summary>
            This method allows for configuration of model mappers
            </summary>
            <remarks>
            Model mappers MUST be defined on ApplicationEventHandler instances with the interface IMapperConfiguration.
            This allows us to search for less types on startup.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.InitializeLoggerResolver">
            <summary>
            Special method to initialize the LoggerResolver
            </summary>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.InitializeProfilerResolver">
            <summary>
            Special method to initialize the ProfilerResolver
            </summary>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.InitializeApplicationEventsResolver">
            <summary>
            Special method to initialize the ApplicationEventsResolver and any modifications required for it such 
            as adding custom types to the resolver.
            </summary>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.InitializeApplicationRootPath(System.String)">
            <summary>
            Special method to extend the use of Umbraco by enabling the consumer to overwrite
            the absolute path to the root of an Umbraco site/solution, which is used for stuff
            like Umbraco.Core.IO.IOHelper.MapPath etc.
            </summary>
            <param name="rootPath">Absolute</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.CoreBootManager.Startup(System.Action{Umbraco.Core.ApplicationContext})" -->
        <member name="M:Umbraco.Core.CoreBootManager.Complete(System.Action{Umbraco.Core.ApplicationContext})">
            <summary>
            Fires after startup and calls the callback once customizations are locked
            </summary>
            <param name="afterComplete"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.EnsureDatabaseConnection">
            <summary>
            We cannot continue if the db cannot be connected to
            </summary>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.FreezeResolution">
            <summary>
            Freeze resolution to not allow Resolvers to be modified
            </summary>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.InitializeResolvers">
            <summary>
            Create the resolvers
            </summary>
        </member>
        <member name="T:Umbraco.Core.DatabaseContext">
            <summary>
            The Umbraco Database context
            </summary>
            <remarks>
            One per AppDomain, represents the Umbraco database
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.#ctor(Umbraco.Core.Persistence.IDatabaseFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviders)">
            <summary>
            Default constructor
            </summary>
            <param name="factory"></param>
            <param name="logger"></param>
            <param name="syntaxProviders"></param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.#ctor(Umbraco.Core.Persistence.IDatabaseFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,System.String)">
            <summary>
            Create a configured DatabaseContext
            </summary>
            <param name="factory"></param>
            <param name="logger"></param>
            <param name="sqlSyntax"></param>
            <param name="providerName"></param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.ConfigureEmbeddedDatabaseConnection">
            <summary>
            Configure a ConnectionString for the embedded database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.ConfigureDatabaseConnection(System.String)">
            <summary>
            Configure a ConnectionString that has been entered manually.
            </summary>
            <remarks>
            Please note that we currently assume that the 'System.Data.SqlClient' provider can be used.
            </remarks>
            <param name="connectionString"></param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.ConfigureDatabaseConnection(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Configures a ConnectionString for the Umbraco database based on the passed in properties from the installer.
            </summary>
            <param name="server">Name or address of the database server</param>
            <param name="databaseName">Name of the database</param>
            <param name="user">Database Username</param>
            <param name="password">Database Password</param>
            <param name="databaseProvider">Type of the provider to be used (Sql, Sql Azure, Sql Ce, MySql)</param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.ConfigureIntegratedSecurityDatabaseConnection(System.String,System.String)">
            <summary>
            Configures a ConnectionString for the Umbraco database that uses Microsoft SQL Server integrated security.
            </summary>
            <param name="server">Name or address of the database server</param>
            <param name="databaseName">Name of the database</param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.SaveConnectionString(System.String,System.String)">
            <summary>
            Saves the connection string as a proper .net ConnectionString and the legacy AppSettings key/value.
            </summary>
            <remarks>
            Saves the ConnectionString in the very nasty 'medium trust'-supportive way.
            </remarks>
            <param name="connectionString"></param>
            <param name="providerName"></param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.Initialize">
            <summary>
            Internal method to initialize the database configuration.
            </summary>
            <remarks>
            If an Umbraco connectionstring exists the database can be configured on app startup,
            but if its a new install the entry doesn't exist and the db cannot be configured.
            So for new installs the Initialize() method should be called after the connectionstring
            has been added to the web.config.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.DetermineSqlServerVersion">
            <summary>
            Set the lazy resolution of determining the SQL server version if that is the db type we're using
            </summary>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.UpgradeSchemaAndData(Umbraco.Core.Services.IMigrationEntryService)">
            <summary>
            This assumes all of the previous checks are done!
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.Database">
            <summary>
            Gets the <see cref="P:Umbraco.Core.DatabaseContext.Database"/> object for doing CRUD operations
            against custom tables that resides in the Umbraco database.
            </summary>
            <remarks>
            This should not be used for CRUD operations or queries against the
            standard Umbraco tables! Use the Public services for that.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.IsDatabaseConfigured">
            <summary>
            Boolean indicating whether the database has been configured
            </summary>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.CanConnect">
            <summary>
            Determines if the db can be connected to
            </summary>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.ConnectionString">
            <summary>
            Gets the configured umbraco db connection string.
            </summary>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.ProviderName">
            <summary>
            Returns the name of the dataprovider from the connectionstring setting in config
            </summary>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.DatabaseProvider">
            <summary>
            Returns the Type of DatabaseProvider used
            </summary>
        </member>
        <member name="T:Umbraco.Core.DataTableExtensions">
            <summary>
            Static and extension methods for the DataTable object
            </summary>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.GenerateDataTable(System.String,System.Func{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}}})">
            <summary>
            Creates a DataTable with the specified alias and columns and uses a callback to populate the headers.
            </summary>
            <param name="tableAlias"></param>
            <param name="getHeaders"></param>
            <param name="rowData"> </param>
            <returns></returns>
            <remarks>
            This has been migrated from the Node class and uses proper locking now. It is now used by the Node class and the 
            DynamicPublishedContent extensions for legacy reasons.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.CreateTableData">
            <summary>
            Helper method to return this ugly object
            </summary>
            <returns></returns>
            <remarks>
            This is for legacy code, I didn't want to go creating custom classes for these
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.AddRowData(System.Collections.Generic.List{System.Tuple{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Helper method to deal with these ugly objects
            </summary>
            <param name="rowData"></param>
            <param name="standardVals"></param>
            <param name="userVals"></param>
            <remarks>
            This is for legacy code, I didn't want to go creating custom classes for these
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DateTimeExtensions.ToIsoString(System.DateTime)">
            <summary>
            Returns the DateTime as an ISO formatted string that is globally expectable
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.DictionaryExtensions" -->
        <member name="M:Umbraco.Core.DictionaryExtensions.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Method to Get a value by the key. If the key doesn't exist it will create a new TVal object for the key and return it.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.TryUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1,``1})">
            <summary>
            Updates an item with the specified key with the specified value
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="updateFactory"></param>
            <returns></returns>
            <remarks>
            Taken from: http://stackoverflow.com/questions/12240219/is-there-a-way-to-use-concurrentdictionary-tryupdate-with-a-lambda-expression
            
            If there is an item in the dictionary with the key, it will keep trying to update it until it can
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.TryUpdateOptimisitic``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1,``1})">
            <summary>
            Updates an item with the specified key with the specified value
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="updateFactory"></param>
            <returns></returns>
            <remarks>
            Taken from: http://stackoverflow.com/questions/12240219/is-there-a-way-to-use-concurrentdictionary-tryupdate-with-a-lambda-expression
            
            WARNING: If the value changes after we've retreived it, then the item will not be updated
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary)">
            <summary>
            Converts a dictionary to another type by only using direct casting
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary,System.Func{System.Object,``0},System.Func{System.Object,``1})">
            <summary>
            Converts a dictionary to another type using the specified converters
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <param name="keyConverter"></param>
            <param name="valConverter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary to a NameValueCollection
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``1,``2}},System.Boolean)">
            <summary>
            Merges all key/values from the sources dictionaries into the destination dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="destination">The source dictionary to merge other dictionaries into</param>
            <param name="overwrite">
            By default all values will be retained in the destination if the same keys exist in the sources but 
            this can changed if overwrite = true, then any key/value found in any of the sources will overwritten in the destination. Note that
            it will just use the last found key/value if this is true.
            </param>
            <param name="sources">The other dictionaries to merge values from</param>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IDictionary{``1,``2},System.Boolean)">
            <summary>
            Merges all key/values from the sources dictionaries into the destination dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="destination">The source dictionary to merge other dictionaries into</param>
            <param name="overwrite">
            By default all values will be retained in the destination if the same keys exist in the sources but 
            this can changed if overwrite = true, then any key/value found in any of the sources will overwritten in the destination. Note that
            it will just use the last found key/value if this is true.
            </param>
            <param name="source">The other dictionary to merge values from</param>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value of the key value based on the key, if the key is not found, a null value is returned
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TVal">The type of the val.</typeparam>
            <param name="d">The d.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueAsString``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value of the key value based on the key as it's string value, if the key is not found, then an empty string is returned
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueAsString``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String)">
            <summary>
            Returns the value of the key value based on the key as it's string value, if the key is not found or is an empty string, then the provided default value is returned
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ContainsKeyIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>contains key ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">Value Type</typeparam>
            <returns>The contains key ignore case.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.DictionaryExtensions.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="T:Umbraco.Core.Dictionary.CultureDictionaryFactoryResolver">
            <summary>
            Resolves the current CultureDictionaryFactory
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2">
            <summary>
            The base class for all single-object resolvers.
            </summary>
            <typeparam name="TResolver">The type of the concrete resolver class.</typeparam>
            <typeparam name="TResolved">The type of the resolved object.</typeparam>
            <remarks>
            Resolves "single" objects ie objects for which there is only one application-wide instance, such as the MVC Controller factory.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.ResolverBase`1">
            <summary>
            The base class for all resolvers.
            </summary>
            <typeparam name="TResolver">The type of the concrete resolver class.</typeparam>
            <remarks>Provides singleton management to all resolvers.</remarks>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.ResolverBase">
            <summary>
            Base non-generic class for resolvers
            </summary>
        </member>
        <member name="F:Umbraco.Core.ObjectResolution.ResolverBase`1._resolver">
            <summary>
            The underlying singleton object instance
            </summary>
        </member>
        <member name="F:Umbraco.Core.ObjectResolution.ResolverBase`1.ResolversLock">
            <summary>
            The lock for the singleton.
            </summary>
            <remarks>
            Though resharper says this is in error, it is actually correct. We want a different lock object for each generic type.
            See this for details: http://confluence.jetbrains.net/display/ReSharper/Static+field+in+generic+type
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ResolverBase`1.#ctor">
            <summary>
            Constructor set the reset action for the underlying object
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ResolverBase`1.Reset(System.Boolean)">
            <summary>
            Resets the resolver singleton instance to null.
            </summary>
            <remarks>
            To be used in unit tests. DO NOT USE THIS DURING PRODUCTION.
            </remarks>
            <param name="resetResolution">
            By default this is true because we always need to reset resolution before we reset a resolver, however in some insanely rare cases like unit testing you might not want to do this.
            </param>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ResolverBase`1.Current">
            <summary>
            Gets or sets the resolver singleton instance.
            </summary>
            <remarks>The value can be set only once, and cannot be read before it has been set.</remarks>
            <exception cref="T:System.InvalidOperationException">value is read before it has been set, or value is set again once it has already been set.</exception>
            <exception cref="T:System.ArgumentNullException">value is <c>null</c>.</exception>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ResolverBase`1.HasCurrent">
            <summary>
            Gets a value indicating whether a the singleton instance has been set.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2"/> class.
            </summary>
            <remarks>By default <c>CanBeNull</c> is false, so <c>Value</c> has to be initialized before being read,
            otherwise an exception will be thrown when reading it.</remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.#ctor(`1)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2"/> class with an instance of the resolved object.
            </summary>
            <param name="value">An instance of the resolved object.</param>
            <remarks>By default <c>CanBeNull</c> is false, so <c>value</c> has to be non-null, or <c>Value</c> has to be
            initialized before being accessed, otherwise an exception will be thrown when reading it.</remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.#ctor(System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2"/> class with a value indicating whether the resolved object instance can be null.
            </summary>
            <param name="canBeNull">A value indicating whether the resolved object instance can be null.</param>
            <remarks>If <c>CanBeNull</c> is false, <c>Value</c> has to be initialized before being read,
            otherwise an exception will be thrown when reading it.</remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.#ctor(`1,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2"/> class with an instance of the resolved object,
            and a value indicating whether that instance can be null.
            </summary>
            <param name="value">An instance of the resolved object.</param>
            <param name="canBeNull">A value indicating whether the resolved object instance can be null.</param>
            <remarks>If <c>CanBeNull</c> is false, <c>value</c> has to be non-null, or <c>Value</c> has to be initialized before being read,
            otherwise an exception will be thrown when reading it.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.CanResolveBeforeFrozen">
            <summary>
            Gets or sets a value indicating whether the resolver can resolve objects before resolution is frozen.
            </summary>
            <remarks>This is false by default and is used for some special internal resolvers.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.CanBeNull">
            <summary>
            Gets a value indicating whether the resolved object instance can be null.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.HasValue">
            <summary>
            Gets a value indicating whether the resolved object instance is null.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.Value">
            <summary>
            Gets or sets the resolved object instance.
            </summary>
            <remarks></remarks>
            <exception cref="T:System.ArgumentNullException">value is set to null, but cannot be null (<c>CanBeNull</c> is <c>false</c>).</exception>
            <exception cref="T:System.InvalidOperationException">value is read and is null, but cannot be null (<c>CanBeNull</c> is <c>false</c>),
            or value is set (read) and resolution is (not) frozen.</exception>
        </member>
        <member name="M:Umbraco.Core.Dictionary.CultureDictionaryFactoryResolver.SetDictionaryFactory(Umbraco.Core.Dictionary.ICultureDictionaryFactory)">
            <summary>
            Can be used by developers at runtime to set their ICultureDictionaryFactory at app startup
            </summary>
            <param name="factory"></param>
        </member>
        <member name="P:Umbraco.Core.Dictionary.CultureDictionaryFactoryResolver.Factory">
            <summary>
            Returns the ICultureDictionaryFactory
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.CaseInsensitiveDynamicObject`1">
            <summary>
            This will check enable dynamic access to properties and methods in a case insensitive manner
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            This works by using reflection on the type - the reflection lookup is lazy so it will not execute unless a dynamic method needs to be accessed
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Dynamics.CaseInsensitiveDynamicObject`1.CaseInsensitivePropertyAccess">
            <summary>
            Used for dynamic access for case insensitive property access
            </summary>`
        </member>
        <member name="F:Umbraco.Core.Dynamics.CaseInsensitiveDynamicObject`1.CaseInsensitiveMethodAccess">
            <summary>
            Used for dynamic access for case insensitive property access
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.DynamicInstanceHelper">
            <summary>
            A helper class to try invoke members, find properties, etc...
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicInstanceHelper.TryInvokeMember``1(Umbraco.Core.Cache.IRuntimeCacheProvider,``0,System.Dynamic.InvokeMemberBinder,System.Object[])">
            <summary>
            Attempts to invoke a member based on the dynamic instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="runtimeCache"></param>
            <param name="thisObject">The object instance to invoke the extension method for</param>
            <param name="binder"></param>
            <param name="args"></param>
            <returns></returns>
            <remarks>
            First tries to find a property with the binder name, if that fails it will try to find a static or instance method
            on the object that matches the binder name
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicInstanceHelper.TryInvokeMember``1(Umbraco.Core.Cache.IRuntimeCacheProvider,``0,System.Dynamic.InvokeMemberBinder,System.Object[],System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Attempts to invoke a member based on the dynamic instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="runtimeCache"></param>
            <param name="thisObject">The object instance to invoke the extension method for</param>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="findExtensionMethodsOnTypes">The types to scan for extension methods </param>
            <returns></returns>
            <remarks>
            First tries to find a property with the binder name, if that fails it will try to find a static or instance method
            on the object that matches the binder name, if that fails it will then attempt to invoke an extension method
            based on the binder name and the extension method types to scan.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicInstanceHelper.FindAndExecuteExtensionMethod``1(Umbraco.Core.Cache.IRuntimeCacheProvider,``0,System.Object[],System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Attempts to find an extension method that matches the name and arguments based on scanning the Type's passed in
            to the findMethodsOnTypes parameter
            </summary>
            <param name="runtimeCache"></param>
            <param name="thisObject">The instance object to execute the extension method for</param>
            <param name="args"></param>
            <param name="name"></param>
            <param name="findMethodsOnTypes"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Dynamics.RawXmlString">
            <summary>
            Used to return the raw xml string value from DynamicXml when using type converters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.RawXElement">
            <summary>
            Used to return the raw xml XElement value from DynamicXml when using type converters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.RawXmlElement">
            <summary>
            Used to return the raw xml XElement value from DynamicXml when using type converters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.RawXmlDocument">
            <summary>
            Used to return the raw xml XmlDocument value from DynamicXml when using type converters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.DynamicXmlConverter">
            <summary>
            A custom type converter for DynamicXml
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.CancellableEventArgs">
            <summary>
            Event args for that can support cancellation
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.CancellableEventArgs.CancelOperation(Umbraco.Core.Events.EventMessage)">
            <summary>
            if this instance supports cancellation, this will set Cancel to true with an affiliated cancellation message
            </summary>
            <param name="cancelationMessage"></param>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.CanCancel">
            <summary>
            Flag to determine if this instance will support being cancellable
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.Cancel">
            <summary>
            If this instance supports cancellation, this gets/sets the cancel value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.Messages">
            <summary>
            Returns the EventMessages object which is used to add messages to the message collection for this event
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.AdditionalData">
            <summary>
            In some cases raised evens might need to contain additional arbitrary readonly data which can be read by event subscribers
            </summary>
            <remarks>
            This allows for a bit of flexibility in our event raising - it's not pretty but we need to maintain backwards compatibility 
            so we cannot change the strongly typed nature for some events.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Events.CancellableObjectEventArgs`1">
            <summary>
            Event args for a strongly typed object that can support cancellation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableObjectEventArgs`1.EventObject">
            <summary>
            Returns the object relating to the event
            </summary>
            <remarks>
            This is protected so that inheritors can expose it with their own name
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.Copy">
            <summary>
            The copied entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.Original">
            <summary>
            The original entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.ParentId">
            <summary>
            Gets or Sets the Id of the objects new parent.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteEventArgs`1.DeletedEntities">
            <summary>
            Returns all entities that were deleted during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteEventArgs`1.MediaFilesToDelete">
            <summary>
            A list of media files that can be added to during a deleted operation for which Umbraco will ensure are removed
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteEventArgs.Id">
            <summary>
            Gets the Id of the object being deleted.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteRevisionsEventArgs.IsDeletingSpecificRevision">
            <summary>
            Returns true if we are deleting a specific revision
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventExtensions">
            <summary>
            Extension methods for cancellable event operations
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.EventExtensions.IsRaisedEventCancelled``2(Umbraco.Core.Events.TypedEventHandler{``0,``1},``1,``0)">
            <summary>
            Raises the event and returns a boolean value indicating if the event was cancelled
            </summary>
            <typeparam name="TSender"></typeparam>
            <typeparam name="TArgs"></typeparam>
            <param name="eventHandler"></param>
            <param name="args"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Events.EventExtensions.RaiseEvent``2(Umbraco.Core.Events.TypedEventHandler{``0,``1},``1,``0)">
            <summary>
            Raises the event
            </summary>
            <typeparam name="TSender"></typeparam>
            <typeparam name="TArgs"></typeparam>
            <param name="eventHandler"></param>
            <param name="args"></param>
            <param name="sender"></param>
        </member>
        <member name="T:Umbraco.Core.Events.EventMessage">
            <summary>
            An event message
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.EventMessage.#ctor(System.String,System.String,Umbraco.Core.Events.EventMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Events.EventMessage"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.EventMessage.IsDefaultEventMessage">
            <summary>
            This is used to track if this message should be used as a default message so that Umbraco doesn't also append it's own default messages
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventMessages">
            <summary>
            Event messages collection
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ExportEventArgs`1.#ctor(`0,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="xml"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Core.Events.ExportEventArgs`1.#ctor(`0,System.String)">
            <summary>
            Constructor accepting a single entity instance
            and cancellable by default
            </summary>
            <param name="eventObject"></param>
            <param name="elementName"></param>
        </member>
        <member name="P:Umbraco.Core.Events.ExportEventArgs`1.ExportedEntities">
            <summary>
            Returns all entities that were exported during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.ExportEventArgs`1.Xml">
            <summary>
            Returns the xml relating to the export event
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.IEventMessagesFactory">
            <summary>
            Event messages factory
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.ImportEventArgs`1.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructor accepting an XElement with the xml being imported
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Events.ImportEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Constructor accepting a list of entities and an XElement with the imported xml
            </summary>
            <param name="eventObject"></param>
            <param name="xml"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Core.Events.ImportEventArgs`1.ImportedEntities">
            <summary>
            Returns all entities that were imported during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.ImportEventArgs`1.Xml">
            <summary>
            Returns the xml relating to the import event
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventMessageType">
            <summary>
            The type of event message
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IList{Umbraco.Core.Persistence.Migrations.IMigration},Semver.SemVersion,Semver.SemVersion,System.String,System.Boolean)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="targetVersion"></param>
            <param name="productName"></param>
            <param name="canCancel"></param>
            <param name="configuredVersion"></param>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IList{Umbraco.Core.Persistence.Migrations.IMigration},Semver.SemVersion,Semver.SemVersion,System.Boolean)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="targetVersion"></param>
            <param name="canCancel"></param>
            <param name="configuredVersion"></param>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IList{Umbraco.Core.Persistence.Migrations.IMigration},Umbraco.Core.Persistence.Migrations.MigrationContext,Semver.SemVersion,Semver.SemVersion,System.String,System.Boolean)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="migrationContext"></param>
            <param name="targetVersion"></param>
            <param name="productName"></param>
            <param name="canCancel"></param>
            <param name="configuredVersion"></param>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IList{Umbraco.Core.Persistence.Migrations.IMigration},Umbraco.Core.Persistence.Migrations.MigrationContext,Semver.SemVersion,Semver.SemVersion,System.Boolean)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="migrationContext"></param>
            <param name="targetVersion"></param>
            <param name="canCancel"></param>
            <param name="configuredVersion"></param>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IList{Umbraco.Core.Persistence.Migrations.IMigration},Semver.SemVersion,Semver.SemVersion,System.String)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="configuredVersion"></param>
            <param name="targetVersion"></param>
            <param name="productName"></param>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IList{Umbraco.Core.Persistence.Migrations.IMigration},Semver.SemVersion,Semver.SemVersion)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="configuredVersion"></param>
            <param name="targetVersion"></param>
        </member>
        <member name="P:Umbraco.Core.Events.MigrationEventArgs.Migrations">
            <summary>
            Returns all migrations that were used in the migration runner
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0,System.Boolean,System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0,System.Boolean,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
        </member>
        <member name="P:Umbraco.Core.Events.PublishEventArgs`1.PublishedEntities">
            <summary>
            Returns all entities that were published during the operation
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.RecycleBinEventArgs.#ctor(System.Guid,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property}},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Backwards compatibility constructor
            </summary>
            <param name="nodeObjectType"></param>
            <param name="allPropertyData"></param>
            <param name="files"></param>
            <param name="emptiedSuccessfully"></param>
        </member>
        <member name="M:Umbraco.Core.Events.RecycleBinEventArgs.#ctor(System.Guid,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property}},System.Collections.Generic.List{System.String})">
            <summary>
            Backwards compatibility constructor
            </summary>
            <param name="nodeObjectType"></param>
            <param name="allPropertyData"></param>
            <param name="files"></param>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.NodeObjectType">
            <summary>
            Gets the Id of the node object type of the items 
            being deleted from the Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.Ids">
            <summary>
            Gets the list of Ids for each of the items being deleted from the Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.Files">
            <summary>
            Gets the list of Files that should be deleted as part
            of emptying the Recycle Bin.
            </summary>
            <remarks>
            This list can be appended to during an event handling operation, generally this is done based on the property data contained in these event args
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.AllPropertyData">
            <summary>
            Gets the list of all property data associated with a content id
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.RecycleBinEmptiedSuccessfully">
            <summary>
            Boolean indicating whether the Recycle Bin was emptied successfully
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.IsContentRecycleBin">
            <summary>
            Boolean indicating whether this event was fired for the Content's Recycle Bin.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RecycleBinEventArgs.IsMediaRecycleBin">
            <summary>
            Boolean indicating whether this event was fired for the Media's Recycle Bin.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.TransientMessagesFactory">
            <summary>
            A simple/default transient messages factory
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.MoveEventArgs`1.#ctor(System.Boolean,Umbraco.Core.Events.EventMessages,Umbraco.Core.Events.MoveEventInfo{`0}[])">
            <summary>
            Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
            <param name="moveInfo">
            A colleciton of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Core.Events.MoveEventArgs`1.#ctor(Umbraco.Core.Events.EventMessages,Umbraco.Core.Events.MoveEventInfo{`0}[])">
            <summary>
            Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="eventMessages"></param>
            <param name="moveInfo">
            A colleciton of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Core.Events.MoveEventArgs`1.#ctor(System.Boolean,Umbraco.Core.Events.MoveEventInfo{`0}[])">
            <summary>
            Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="canCancel"></param>
            <param name="moveInfo">
            A colleciton of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="M:Umbraco.Core.Events.MoveEventArgs`1.#ctor(Umbraco.Core.Events.MoveEventInfo{`0}[])">
            <summary>
            Constructor accepting a collection of MoveEventInfo objects
            </summary>
            <param name="moveInfo">
            A colleciton of MoveEventInfo objects that exposes all entities that have been moved during a single move operation
            </param>
        </member>
        <member name="P:Umbraco.Core.Events.MoveEventArgs`1.MoveInfoCollection">
            <summary>
            Gets all MoveEventInfo objects used to create the object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MoveEventArgs`1.Entity">
            <summary>
            The entity being moved
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MoveEventArgs`1.ParentId">
            <summary>
            Gets the Id of the object's new parent
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Entity">
            <summary>
            The entity being created
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Alias">
            <summary>
            Gets or Sets the Alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.ParentId">
            <summary>
            Gets or Sets the Id of the parent.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Parent">
            <summary>
            Gets or Sets the parent IContent object.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RollbackEventArgs`1.Entity">
            <summary>
            The entity being rolledback
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="messages"></param>
            <param name="additionalData"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Core.Events.EventMessages,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="messages"></param>
            <param name="additionalData"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean,Umbraco.Core.Events.EventMessages)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="eventMessages"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Core.Events.SaveEventArgs`1.SavedEntities">
            <summary>
            Returns all entities that were saved during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.SendToPublishEventArgs`1.Entity">
            <summary>
            The entity being sent to publish
            </summary>
        </member>
        <member name="T:Umbraco.Core.Exceptions.UmbracoStartupFailedException">
            <summary>
            An exception that is thrown if the umbraco application cannnot boot
            </summary>
        </member>
        <member name="M:Umbraco.Core.Exceptions.UmbracoStartupFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="T:Umbraco.Core.FileResources.Files">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Umbraco.Core.FileResources.Files.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.FileResources.Files.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.FileResources.Files.BlockingWebConfig">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            
            &lt;!-- Blocks public downloading of anything in this folder and sub folders --&gt;
            
            &lt;configuration&gt; 
              &lt;system.web&gt;
                &lt;httpHandlers&gt;
                  &lt;add path=&quot;*&quot; verb=&quot;*&quot; type=&quot;System.Web.HttpNotFoundHandler&quot;/&gt;
                &lt;/httpHandlers&gt;
              &lt;/system.web&gt;
              &lt;system.webServer&gt;
                &lt;validation validateIntegratedModeConfiguration=&quot;false&quot; /&gt;
                &lt;handlers&gt;
                  &lt;remove name=&quot;BlockViewHandler&quot;/&gt;
                  &lt;add name=&quot;BlockViewHandler&quot; path=&quot;*&quot; verb=&quot;*&quot; preCondition=&quot;integratedMode&quot; type=&quot;System.Web.H [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Umbraco.Core.HideFromTypeFinderAttribute">
            <summary>
            Used to notify the TypeFinder to ignore any class attributed with this during it's discovery
            </summary>
        </member>
        <member name="T:Umbraco.Core.IDisposeOnRequestEnd">
            <summary>
            Any class implementing this interface that is added to the httpcontext.items keys or values will be disposed of at the end of the request.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.AsyncForwardingAppenderBase">
            <remarks>
            Based on https://github.com/cjbhaines/Log4Net.Async
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Logging.AsyncForwardingAppenderBase.InternalLoggerName">
            <summary>
            The logger name that will be used for logging internal errors.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.LoggingEventContext">
            <remarks>
            Based on https://github.com/cjbhaines/Log4Net.Async
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Logging.LoggingEventHelper">
            <remarks>
            Based on https://github.com/cjbhaines/Log4Net.Async
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.OwinLogger.WriteCore(System.Diagnostics.TraceEventType,System.Int32,System.Object,System.Exception,System.Func{System.Object,System.Exception,System.String})">
            <summary>
            Aggregates most logging patterns to a single method.  This must be compatible with the Func representation in the OWIN environment.
                        To check IsEnabled call WriteCore with only TraceEventType and check the return value, no event will be written.
            </summary>
            <param name="eventType"/><param name="eventId"/><param name="state"/><param name="exception"/><param name="formatter"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Logging.OwinLoggerFactory.Create(System.String)">
            <summary>
            Creates a new ILogger instance of the given name.
            </summary>
            <param name="name"/>
            <returns/>
        </member>
        <member name="T:Umbraco.Core.Logging.ParallelForwardingAppender">
            <summary>
            An asynchronous appender based on <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/>
            </summary>
            <remarks>
            Based on https://github.com/cjbhaines/Log4Net.Async
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.ParallelForwardingAppender.SubscriberLoop">
            <summary>
            Iterates over a BlockingCollection containing LoggingEvents.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.ParallelForwardingAppender.BufferSize">
            <summary>
            Gets or sets the number of LoggingEvents that will be buffered.  Set to null for unlimited.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Logging.ParallelForwardingAppender.ShutdownFlushTimeout">
            <summary>
            Gets or sets the time period in which the system will wait for appenders to flush before canceling the background task.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.GridEditorConverter">
            <summary>
            Ensures that virtual paths are taken care of
            </summary>
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonCreationConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Create an instance of objectType, based properties in the JSON object
            </summary>
            <param name="objectType">type of object expected</param>
            <param name="jObject">contents of JSON object that will be deserialized</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.Entity">
            <summary>
            Base Abstract Entity
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase">
            <summary>
            A base class for use to implement IRememberBeingDirty/ICanBeDirty
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase._propertyChangedInfo">
            <summary>
            Tracks the properties that have changed
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase._lastPropertyChangedInfo">
            <summary>
            Tracks the properties that we're changed before the last commit (or last call to ResetDirtyProperties)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.OnPropertyChanged(System.Reflection.PropertyInfo)">
            <summary>
            Method to call on a property setter.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.IsPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current entity is dirty.
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>True if Property is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.IsDirty">
            <summary>
            Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.WasDirty">
            <summary>
            Indicates that the entity had been changed and the changes were committed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.WasPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current entity was changed and the changes were committed
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>True if Property was changed, otherwise False. Returns false if the entity had not been previously changed.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.ForgetPreviouslyDirtyProperties">
            <summary>
            Resets the remembered dirty properties from before the last commit
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.ResetDirtyProperties">
            <summary>
            Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
            <remarks>
            Please note that resetting the dirty properties could potentially
            obstruct the saving of a new or updated entity.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.ResetDirtyProperties(System.Boolean)">
            <summary>
            Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
            <param name="rememberPreviouslyChangedProperties">
            true if we are to remember the last changes made after resetting
            </param>
            <remarks>
            Please note that resetting the dirty properties could potentially
            obstruct the saving of a new or updated entity.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.SetPropertyValueAndDetectChanges``1(System.Func{``0,``0},``0,System.Reflection.PropertyInfo)">
            <summary>
            Used by inheritors to set the value of properties, this will detect if the property value actually changed and if it did
            it will ensure that the property has a dirty flag set.
            </summary>
            <param name="setValue"></param>
            <param name="value"></param>
            <param name="propertySelector"></param>
            <returns>returns true if the value changed</returns>
            <remarks>
            This is required because we don't want a property to show up as "dirty" if the value is the same. For example, when we 
            save a document type, nearly all properties are flagged as dirty just because we've 'reset' them, but they are all set 
            to the same value, so it's really not dirty.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.SetPropertyValueAndDetectChanges``1(System.Func{``0,``0},``0,System.Reflection.PropertyInfo,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Used by inheritors to set the value of properties, this will detect if the property value actually changed and if it did
            it will ensure that the property has a dirty flag set.
            </summary>
            <param name="setValue"></param>
            <param name="value"></param>
            <param name="propertySelector"></param>
            <param name="comparer">The equality comparer to use</param>
            <returns>returns true if the value changed</returns>
            <remarks>
            This is required because we don't want a property to show up as "dirty" if the value is the same. For example, when we 
            save a document type, nearly all properties are flagged as dirty just because we've 'reset' them, but they are all set 
            to the same value, so it's really not dirty.
            </remarks>
        </member>
        <member name="E:Umbraco.Core.Models.EntityBase.TracksChangesEntityBase.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.IEntity">
            <summary>
            Defines an Entity.
            Entities should always have an Id, Created and Modified date
            </summary>
            <remarks>The current database schema doesn't provide a modified date
            for all entities, so this will have to be changed at a later stage.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.Id">
            <summary>
            The Id of the entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.Key">
            <summary>
            Guid based Id
            </summary>
            <remarks>The key is currectly used to store the Unique Id from the 
            umbracoNode table, which many of the entities are based on.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.CreateDate">
            <summary>
            Gets or sets the Created Date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.UpdateDate">
            <summary>
            Gets or sets the Modified Date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, eg. Id.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.Entity.AddingEntity">
            <summary>
            Method to call on entity saved when first added
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.Entity.UpdatingEntity">
            <summary>
            Method to call on entity saved/updated
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.Id">
            <summary>
            Integer Id
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.Key">
            <summary>
            Guid based Id
            </summary>
            <remarks>The key is currectly used to store the Unique Id from the 
            umbracoNode table, which many of the entities are based on.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.CreateDate">
            <summary>
            Gets or sets the Created Date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.WasCancelled">
            <summary>
            Gets or sets the WasCancelled flag, which is used to track
            whether some action against an entity was cancelled through some event.
            This only exists so we have a way to check if an event was cancelled through
            the new api, which also needs to take effect in the legacy api.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.UpdateDate">
            <summary>
            Gets or sets the Modified Date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, eg. Id.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.IAggregateRoot">
            <summary>
            Marker interface for aggregate roots
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.AuditType">
            <summary>
            Enums for vailable types of auditing
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.New">
            <summary>
            Used when new nodes are added
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Save">
            <summary>
            Used when nodes are saved
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Open">
            <summary>
            Used when nodes are opened
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Delete">
            <summary>
            Used when nodes are deleted
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Publish">
            <summary>
            Used when nodes are published
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.SendToPublish">
            <summary>
            Used when nodes are send to publishing
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.UnPublish">
            <summary>
            Used when nodes are unpublished
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Move">
            <summary>
            Used when nodes are moved
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Copy">
            <summary>
            Used when nodes are copied
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.AssignDomain">
            <summary>
            Used when nodes are assígned a domain
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.PublicAccess">
            <summary>
            Used when public access are changed for a node
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Sort">
            <summary>
            Used when nodes are sorted
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Notify">
            <summary>
            Used when a notification are send to a user
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.System">
            <summary>
            General system notification
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.RollBack">
            <summary>
            Used when a node's content is rolled back to a previous version
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.PackagerInstall">
            <summary>
            Used when a package is installed
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.PackagerUninstall">
            <summary>
            Used when a package is uninstalled
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.SendToTranslate">
            <summary>
            Used when a node is send to translation
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.AuditType.Custom">
            <summary>
            Use this log action for custom log messages that should be shown in the audit trail
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeAvailableCompositionsResult">
            <summary>
            Used when determining available compositions for a given content type
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeAvailableCompositionsResults">
            <summary>
            Used when determining available compositions for a given content type
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityContainer">
            <summary>
            Represents a folder for organizing entities such as content types and data types.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.UmbracoEntity">
            <summary>
            Implementation of the <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> for internal use.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.CreatorId">
            <summary>
            Profile of the user who created this Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.Level">
            <summary>
            Gets or sets the level of the Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.Name">
            <summary>
            Gets or Sets the Name of the Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.ParentId">
            <summary>
            Gets or sets the Id of the Parent Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.Path">
            <summary>
            Gets or sets the path to the Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.SortOrder">
            <summary>
            Gets or sets the sort order of the Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.Trashed">
            <summary>
            Boolean indicating whether this Entity is Trashed or not.
            If an Entity is Trashed it will be located in the Recyclebin.
            </summary>
            <remarks>
            When content is trashed it should be unpublished.
            Not all entities support being trashed, they'll always return false.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.AdditionalData">
            <summary>
            Some entities may expose additional data that other's might not, this custom data will be available in this collection
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.UmbracoEntity.EntityProperty">
            <summary>
            A struction that can be contained in the additional data of an UmbracoEntity representing 
            a user defined property
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityContainer.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of an <see cref="T:Umbraco.Core.Models.EntityContainer"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityContainer.#ctor(System.Int32,System.Guid,System.Int32,System.String,System.Int32,System.Int32,System.Guid,System.String,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:Umbraco.Core.Models.EntityContainer"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityContainer.GetContainerObjectType(System.Guid)">
            <summary>
            Gets the container object type corresponding to a contained object type.
            </summary>
            <param name="containedObjectType">The contained object type.</param>
            <returns>The object type of containers containing objects of the contained object type.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityContainer.GetContainedObjectType(System.Guid)">
            <summary>
            Gets the contained object type corresponding to a container object type.
            </summary>
            <param name="containerObjectType">The container object type.</param>
            <returns>The object type of objects that containers of the container object type can contain.</returns>
        </member>
        <member name="P:Umbraco.Core.Models.EntityContainer.ContainedObjectType">
            <summary>
            Gets or sets the node object type of the contained objects.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityContainer.ContainerObjectType">
            <summary>
            Gets the node object type of the container objects.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Mapping.MapperConfiguration">
            <summary>
            Used to declare a mapper configuration
            </summary>
            <remarks>
            Use this class if your mapper configuration isn't also explicitly an ApplicationEventHandler.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Mapping.IMapperConfiguration">
            <summary>
            This is used to explicitly decorate any ApplicationEventHandler class if there are
            AutoMapper configurations defined. 
            </summary>
            <remarks>
            All automapper configurations are done during startup
            inside an Automapper Initialize call which is better for performance
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IdentityUser`4">
            <summary>
            Default IUser implementation
            </summary>
            <typeparam name="TKey"/><typeparam name="TLogin"/><typeparam name="TRole"/><typeparam name="TClaim"/>
            <remarks>
            This class normally exists inside of the EntityFramework library, not sure why MS chose to explicitly put it there but we don't want
            references to that so we will create our own here
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.IdentityUser`4.#ctor">
            <summary>
            Constructor
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Email">
            <summary>
            Email
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.EmailConfirmed">
            <summary>
            True if the email is confirmed, default is false
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.PasswordHash">
            <summary>
            The salted/hashed form of the user password
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.SecurityStamp">
            <summary>
            A random value that should change whenever a users credentials have changed (password changed, login removed)
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.PhoneNumber">
            <summary>
            PhoneNumber for the user
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.PhoneNumberConfirmed">
            <summary>
            True if the phone number is confirmed, default is false
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.TwoFactorEnabled">
            <summary>
            Is two factor enabled for the user
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.LockoutEndDateUtc">
            <summary>
            DateTime in UTC when lockout ends, any time in the past is considered not locked out.
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.LockoutEnabled">
            <summary>
            Is lockout enabled for this user
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.AccessFailedCount">
            <summary>
            Used to record failures for the purposes of lockout
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Roles">
            <summary>
            Navigation property for user roles
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Claims">
            <summary>
            Navigation property for user claims
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Logins">
            <summary>
            Navigation property for user logins
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.Id">
            <summary>
            User ID (Primary Key)
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUser`4.UserName">
            <summary>
            User name
            
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IdentityUserClaim`1">
            <summary>
            EntityType that represents one specific user claim
            
            </summary>
            <typeparam name="TKey"/>
            <remarks>
            This class normally exists inside of the EntityFramework library, not sure why MS chose to explicitly put it there but we don't want
            references to that so we will create our own here
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserClaim`1.Id">
            <summary>
            Primary key
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserClaim`1.UserId">
            <summary>
            User Id for the user who owns this login
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserClaim`1.ClaimType">
            <summary>
            Claim type
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserClaim`1.ClaimValue">
            <summary>
            Claim value
            
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IdentityUserLogin">
            <summary>
            Entity type for a user's login (i.e. facebook, google)
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IIdentityUserLogin.LoginProvider">
            <summary>
            The login provider for the login (i.e. facebook, google)
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IIdentityUserLogin.ProviderKey">
            <summary>
            Key representing the login for the provider
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IIdentityUserLogin.UserId">
            <summary>
            User Id for the user who owns this login
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserLogin.LoginProvider">
            <summary>
            The login provider for the login (i.e. facebook, google)
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserLogin.ProviderKey">
            <summary>
            Key representing the login for the provider
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserLogin.UserId">
            <summary>
            User Id for the user who owns this login
            
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Identity.IdentityUserRole`1">
            <summary>
            EntityType that represents a user belonging to a role
            
            </summary>
            <typeparam name="TKey"/>
            <remarks>
            This class normally exists inside of the EntityFramework library, not sure why MS chose to explicitly put it there but we don't want
            references to that so we will create our own here
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserRole`1.UserId">
            <summary>
            UserId for the user that is in the role
            
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.IdentityUserRole`1.RoleId">
            <summary>
            RoleId for the role
            
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.SetLoginsCallback(System.Lazy{System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Identity.IIdentityUserLogin}})">
            <summary>
            Used to set a lazy call back to populate the user's Login list
            </summary>
            <param name="callback"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.Name">
            <summary>
            Gets/sets the user's real name
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.LockoutEnabled">
            <summary>
            Lockout is always enabled
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.IsLockedOut">
            <summary>
            Based on the user's lockout end date, this will determine if they are locked out
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Identity.BackOfficeIdentityUser.Logins">
            <summary>
            Overridden to make the retrieval lazy
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IPublishedContentWithKey">
            <summary>
            Represents a cached content with a GUID key.
            </summary>
            <remarks>This is temporary, because we cannot add the Key property to IPublishedContent without
            breaking backward compatibility. With v8, it will be merged into IPublishedContent.</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.IPublishedContent">
            <summary>
            Represents a cached content.
            </summary>
            <remarks>
            <para>SD: A replacement for INode which needs to occur since INode doesn't contain the document type alias
            and INode is poorly formatted with mutable properties (i.e. Lists instead of IEnumerable).</para>
            <para>Stephan: initially, that was for cached published content only. Now, we're using it also for
            cached preview (so, maybe unpublished) content. A better name would therefore be ICachedContent, as
            has been suggested. However, can't change now. Maybe in v7?</para>
            </remarks>	
        </member>
        <member name="M:Umbraco.Core.Models.IPublishedContent.GetIndex">
            <summary>
            Gets the index of the published content within its current owning content set.
            </summary>
            <returns>The index of the published content within its current owning content set.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IPublishedContent.GetProperty(System.String)">
            <summary>
            Gets a property identified by its alias.
            </summary>
            <param name="alias">The property alias.</param>
            <returns>The property identified by the alias.</returns>
            <remarks>
            <para>If the content type has no property with that alias, including inherited properties, returns <c>null</c>,</para>
            <para>otherwise return a property -- that may have no value (ie <c>HasValue</c> is <c>false</c>).</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IPublishedContent.GetProperty(System.String,System.Boolean)">
            <summary>
            Gets a property identified by its alias.
            </summary>
            <param name="alias">The property alias.</param>
            <param name="recurse">A value indicating whether to navigate the tree upwards until a property with a value is found.</param>
            <returns>The property identified by the alias.</returns>
            <remarks>
            <para>Navigate the tree upwards and look for a property with that alias and with a value (ie <c>HasValue</c> is <c>true</c>).
            If found, return the property. If no property with that alias is found, having a value or not, return <c>null</c>. Otherwise
            return the first property that was found with the alias but had no value (ie <c>HasValue</c> is <c>false</c>).</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.ContentSet">
            <summary>
            Gets the content set to which the content belongs.
            </summary>
            <remarks>The default set consists in the siblings of the content (including the content 
            itself) ordered by <c>sortOrder</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.ContentType">
            <summary>
            Gets the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.ItemType">
            <summary>
            Gets a value indicating whether the content is a content (aka a document) or a media.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.IsDraft">
            <summary>
            Gets a value indicating whether the content is draft.
            </summary>
            <remarks>A content is draft when it is the unpublished version of a content, which may
            have a published version, or not.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.Parent">
            <summary>
            Gets the parent of the content.
            </summary>
            <remarks>The parent of root content is <c>null</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.Children">
            <summary>
            Gets the children of the content.
            </summary>
            <remarks>Children are sorted by their sortOrder.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.Properties">
            <summary>
            Gets the properties of the content.
            </summary>
            <remarks>
            <para>Contains one <c>IPublishedProperty</c> for each property defined for the content type, including
            inherited properties. Some properties may have no value.</para>
            <para>The properties collection of an IPublishedContent instance should be read-only ie it is illegal
            to add properties to the collection.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.Item(System.String)">
            <summary>
            Gets the value of a property identified by its alias.
            </summary>
            <param name="alias">The property alias.</param>
            <returns>The value of the property identified by the alias.</returns>
            <remarks>
            <para>If <c>GetProperty(alias)</c> is <c>null</c> then returns <c>null</c> else return <c>GetProperty(alias).Value</c>.</para>
            <para>So if the property has no value, returns the default value for that property type.</para>
            <para>This one is defined here really because we cannot define index extension methods, but all it should do is:
            <code>var p = GetProperty(alias); return p == null ? null : p.Value;</code> and nothing else.</para>
            <para>The recursive syntax (eg "_title") is _not_ supported here.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.IServerAddress">
            <summary>
            Provides the address of a server.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.IServerAddress.ServerAddress">
            <summary>
            Gets the server address.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.ServerIdentity">
            <summary>
            Gets or sets the server unique identity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.IsActive">
            <summary>
            Gets or sets a value indicating whether the server is active.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.IsMaster">
            <summary>
            Gets or sets a value indicating whether the server is master.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.Registered">
            <summary>
            Gets the date and time the registration was created.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IServerRegistration.Accessed">
            <summary>
            Gets the date and time the registration was last accessed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Mapping.MappingExpressionExtensions.IgnoreAllUnmapped``2(AutoMapper.IMappingExpression{``0,``1})">
            <summary>
            Ignores all unmapped members by default - Use with caution!
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped">
            <summary>
            Provides an abstract base class for <c>IPublishedContent</c> implementations that
            wrap and extend another <c>IPublishedContent</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.#ctor(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped"/> class
            with an <c>IPublishedContent</c> instance to wrap and extend.
            </summary>
            <param name="content">The content to wrap and extend.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentWrapped.Unwrap">
            <summary>
            Gets the wrapped content.
            </summary>
            <returns>The wrapped content, that was passed as an argument to the constructor.</returns>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedContentExtended">
            <summary>
            Provides methods to handle extended content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentExtended.AddProperty(Umbraco.Core.Models.IPublishedProperty)">
            <summary>
            Adds a property to the extended content.
            </summary>
            <param name="property">The property to add.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentExtended.SetContentSet(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IPublishedContent})">
            <summary>
            Sets the content set of the extended content.
            </summary>
            <param name="contentSet"></param>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentExtended.ClearContentSet">
            <summary>
            Resets the content set of the extended content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentExtended.SetIndex(System.Int32)">
            <summary>
            Sets the index of the extended content.
            </summary>
            <param name="value">The index value.</param>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentExtended.ClearIndex">
            <summary>
            Resets the index of the extended content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.IPublishedContentExtended.HasAddedProperties">
            <summary>
            Gets a value indicating whether properties were added to the extended content.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentModel">
            <summary>
            Represents a strongly-typed published content.
            </summary>
            <remarks>Every strongly-typed published content class should inherit from <c>PublishedContentModel</c>
            (or inherit from a class that inherits from... etc.) so they are picked by the factory.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentModel.#ctor(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentModel"/> class with
            an original <see cref="T:Umbraco.Core.Models.IPublishedContent"/> instance.
            </summary>
            <param name="content">The original content.</param>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentWithKeyWrapped">
            <summary>
            Provides an abstract base class for <c>IPublishedContentWithKey</c> implementations that
            wrap and extend another <c>IPublishedContentWithKey</c>.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.BitConverterEx">
            <summary>
            An endian-aware converter for converting between base data types 
            and an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToChar(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a Unicode character.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToUInt16(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToUInt32(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToUInt64(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToInt16(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 16-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToInt32(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 32-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToInt64(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a 64-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToSingle(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a single precision floating number.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToDouble(System.Byte[],System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of bytes to a double precision floating number.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.UInt16,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 16-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.UInt32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 32-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.UInt64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 64-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Int16,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 16-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Int32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 32-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given 64-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Single,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given single precision floating-point number to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Double,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given double precision floating-point number to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToChar(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToUInt16(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToUInt32(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToUInt64(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToInt16(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 16-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToInt32(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 32-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToInt64(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a 64-bit signed integer.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToSingle(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a single precision floating number.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.ToDouble(System.Byte[],System.Int64)">
            <summary>
            Converts the given array of bytes to a double precision floating number.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.UInt16)">
            <summary>
            Converts the given 16-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.UInt32)">
            <summary>
            Converts the given 32-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.UInt64)">
            <summary>
            Converts the given 64-bit unsigned integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Int16)">
            <summary>
            Converts the given 16-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Int32)">
            <summary>
            Converts the given 32-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Int64)">
            <summary>
            Converts the given 64-bit signed integer to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Single)">
            <summary>
            Converts the given single precision floating-point number to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.GetBytes(System.Double)">
            <summary>
            Converts the given double precision floating-point number to an array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.CheckData(System.Byte[],System.Int64,System.Int64,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Reverse the array of bytes as needed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.BitConverterEx.CheckData(System.Byte[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Reverse the array of bytes as needed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.BitConverterEx.SystemByteOrder">
            <summary>
            Indicates the byte order in which data is stored in this platform.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.BitConverterEx.LittleEndian">
            <summary>
            Returns a bit converter that converts between little-endian and system byte-order.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.BitConverterEx.BigEndian">
            <summary>
            Returns a bit converter that converts between big-endian and system byte-order.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.BitConverterEx.SystemEndian">
            <summary>
            Returns a bit converter that does not do any byte-order conversion.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder">
            <summary>
            Represents the byte order.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifBitConverter">
            <summary>
            Converts between exif data types and array of bytes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToAscii(System.Byte[],System.Boolean,System.Text.Encoding)">
            <summary>
            Returns an ASCII string converted from the given byte array.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToAscii(System.Byte[],System.Text.Encoding)">
            <summary>
            Returns an ASCII string converted from the given byte array.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a string converted from the given byte array.
            from the numeric value of each byte.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToDateTime(System.Byte[],System.Boolean)">
            <summary>
            Returns a DateTime object converted from the given byte array.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToDateTime(System.Byte[])">
            <summary>
            Returns a DateTime object converted from the given byte array.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToURational(System.Byte[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an unsigned rational number converted from the first 
            eight bytes of the given byte array. The first four bytes are
            assumed to be the numerator and the next four bytes are the
            denumerator.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToSRational(System.Byte[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns a signed rational number converted from the first 
            eight bytes of the given byte array. The first four bytes are
            assumed to be the numerator and the next four bytes are the
            denumerator.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToUShortArray(System.Byte[],System.Int32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of 16-bit unsigned integers converted from 
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToUIntArray(System.Byte[],System.Int32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of 32-bit unsigned integers converted from 
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToSIntArray(System.Byte[],System.Int32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of 32-bit signed integers converted from 
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToURationalArray(System.Byte[],System.Int32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of unsigned rational numbers converted from 
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.ToSRationalArray(System.Byte[],System.Int32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns an array of signed rational numbers converted from 
            the given byte array.
            Numbers are converted from the given byte-order to platform byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Converts the given ascii string to an array of bytes optionally adding a null terminator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts the given ascii string to an array of bytes without adding a null terminator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(System.DateTime,System.Boolean)">
            <summary>
            Converts the given datetime to an array of bytes with a null terminator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(Umbraco.Core.Media.Exif.MathEx.UFraction32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given unsigned rational number to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(Umbraco.Core.Media.Exif.MathEx.Fraction32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given signed rational number to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(System.UInt16[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of 16-bit unsigned integers to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(System.UInt32[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of 32-bit unsigned integers to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(System.Int32[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of 32-bit signed integers to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(Umbraco.Core.Media.Exif.MathEx.UFraction32[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of unsigned rationals to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifBitConverter.GetBytes(Umbraco.Core.Media.Exif.MathEx.Fraction32[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Converts the given array of signed rationals to an array of bytes.
            Numbers are converted from the platform byte-order to the given byte-order.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExposureProgram.Creative">
            <summary>
            Biased toward depth of field.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExposureProgram.Action">
            <summary>
            Biased toward fast shutter speed.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExposureProgram.Portrait">
            <summary>
            For closeup photos with the background out of focus.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExposureProgram.Landscape">
            <summary>
            For landscape photos with the background in focus.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.LightSource.DaylightFluorescent">
            <summary>
            D 5700 – 7100K
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.LightSource.DayWhiteFluorescent">
            <summary>
            N 4600 – 5400K
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.LightSource.CoolWhiteFluorescent">
            <summary>
            W 3900 – 4500K
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.LightSource.WhiteFluorescent">
            <summary>
            WW 3200 – 3700K
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.NotValidExifFileException">
            <summary>
            The exception that is thrown when the format of the JPEG/Exif file
            could not be understood.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.UnknownIFDSectionException">
            <summary>
            The exception that is thrown when the IFD section ID could not be understood.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.UnknownEnumTypeException">
            <summary>
            The exception that is thrown when an invalid enum type is given to an 
            ExifEnumProperty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.IFD0IsEmptyException">
            <summary>
            The exception that is thrown when the 0th IFD section does not contain any fields.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifEnumProperty`1">
            <summary>
            Represents an enumerated value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifProperty">
            <summary>
            Represents the abstract base class for an Exif property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifProperty.Tag">
            <summary>
            Gets the Exif tag associated with this property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifProperty.IFD">
            <summary>
            Gets the IFD section contaning this property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifProperty.Name">
            <summary>
            Gets or sets the name of this property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifProperty.Value">
            <summary>
            Gets or sets the value of this property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifProperty.Interoperability">
            <summary>
            Gets interoperability data for this property.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifEncodedString">
            <summary>
            Represents an ASCII string. (EXIF Specification: UNDEFINED) Used for the UserComment field.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifDateTime">
            <summary>
            Represents an ASCII string formatted as DateTime. (EXIF Specification: ASCII) Used for the date time fields.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifVersion">
            <summary>
            Represents the exif version as a 4 byte ASCII string. (EXIF Specification: UNDEFINED) 
            Used for the ExifVersion, FlashpixVersion, InteroperabilityVersion and GPSVersionID fields.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifPointSubjectArea">
            <summary>
            Represents the location and area of the subject (EXIF Specification: 2xSHORT)
            The coordinate values, width, and height are expressed in relation to the 
            upper left as origin, prior to rotation processing as per the Rotation tag.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifUShortArray">
            <summary>
            Represents an array of 16-bit unsigned integers. 
            (EXIF Specification: SHORT with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifCircularSubjectArea">
            <summary>
            Represents the location and area of the subject (EXIF Specification: 3xSHORT)
            The coordinate values, width, and height are expressed in relation to the 
            upper left as origin, prior to rotation processing as per the Rotation tag.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifRectangularSubjectArea">
            <summary>
            Represents the location and area of the subject (EXIF Specification: 4xSHORT)
            The coordinate values, width, and height are expressed in relation to the 
            upper left as origin, prior to rotation processing as per the Rotation tag.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.GPSLatitudeLongitude">
            <summary>
            Represents GPS latitudes and longitudes (EXIF Specification: 3xRATIONAL)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifURationalArray">
            <summary>
            Represents an array of unsigned rational numbers. 
            (EXIF Specification: RATIONAL with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.GPSTimeStamp">
            <summary>
            Represents a GPS time stamp as UTC (EXIF Specification: 3xRATIONAL)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.WindowsByteString">
            <summary>
            Represents an ASCII string. (EXIF Specification: BYTE) 
            Used by Windows XP.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifFileTypeDescriptionProvider">
            <summary>
            Provides a custom type descriptor for an ExifFile instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifFileTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor"/>.</param>
            <returns>
            An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> that can provide metadata for the type.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifFileTypeDescriptor">
            <summary>
            Expands ExifProperty objects contained in an ExifFile as separate properties.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifFileTypeDescriptor.GetProperties">
            <summary>
            Returns a collection of property descriptors for the object represented by this type descriptor.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"/>.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifInterOperability">
            <summary>
            Represents interoperability data for an exif tag in the platform byte order.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifInterOperability.ToString">
            <summary>
            Returns the string representation of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifInterOperability.TagID">
            <summary>
            Gets the tag ID defined in the Exif standard.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifInterOperability.TypeID">
            <summary>
            Gets the type code defined in the Exif standard.
            <list type="bullet">
            <item>1 = BYTE (byte)</item>
            <item>2 = ASCII (byte array)</item>
            <item>3 = SHORT (ushort)</item>
            <item>4 = LONG (uint)</item>
            <item>5 = RATIONAL (2 x uint: numerator, denominator)</item>
            <item>6 = BYTE (sbyte)</item>
            <item>7 = UNDEFINED (byte array)</item>
            <item>8 = SSHORT (short)</item>
            <item>9 = SLONG (int)</item>
            <item>10 = SRATIONAL (2 x int: numerator, denominator)</item>
            <item>11 = FLOAT (float)</item>
            <item>12 = DOUBLE (double)</item>
            </list>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifInterOperability.Count">
            <summary>
            Gets the byte count or number of components.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifInterOperability.Data">
            <summary>
            Gets the field value as an array of bytes.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifByte">
            <summary>
            Represents an 8-bit unsigned integer. (EXIF Specification: BYTE)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifByteArray">
            <summary>
            Represents an array of 8-bit unsigned integers. (EXIF Specification: BYTE with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifAscii">
            <summary>
            Represents an ASCII string. (EXIF Specification: ASCII)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifUShort">
            <summary>
            Represents a 16-bit unsigned integer. (EXIF Specification: SHORT)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifUInt">
            <summary>
            Represents a 32-bit unsigned integer. (EXIF Specification: LONG)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifUIntArray">
            <summary>
            Represents an array of 16-bit unsigned integers. 
            (EXIF Specification: LONG with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifURational">
            <summary>
            Represents a rational number defined with a 32-bit unsigned numerator 
            and denominator. (EXIF Specification: RATIONAL)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifUndefined">
            <summary>
            Represents a byte array that can take any value. (EXIF Specification: UNDEFINED)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifSInt">
            <summary>
            Represents a 32-bit signed integer. (EXIF Specification: SLONG)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifSIntArray">
            <summary>
            Represents an array of 32-bit signed integers. 
            (EXIF Specification: SLONG with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifSRational">
            <summary>
            Represents a rational number defined with a 32-bit signed numerator 
            and denominator. (EXIF Specification: SRATIONAL)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifSRationalArray">
            <summary>
            Represents an array of signed rational numbers. 
            (EXIF Specification: SRATIONAL with count > 1)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifPropertyCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> objects.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.Byte)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.String)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.UInt16)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.Int32)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.UInt32)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.Single)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.Double)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.Object)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.String,System.Text.Encoding)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
            <param name="encoding">String encoding.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.DateTime)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="value">The value of tag.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Set(Umbraco.Core.Media.Exif.ExifTag,System.Single,System.Single,System.Single)">
            <summary>
            Sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
            <param name="key">The tag to set.</param>
            <param name="d">Angular degrees (or clock hours for a timestamp).</param>
            <param name="m">Angular minutes (or clock minutes for a timestamp).</param>
            <param name="s">Angular seconds (or clock seconds for a timestamp).</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Add(Umbraco.Core.Media.Exif.ExifProperty)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> to add to the collection.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.ContainsKey(Umbraco.Core.Media.Exif.ExifTag)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the collection.</param>
            <returns>
            true if the collection contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Remove(Umbraco.Core.Media.Exif.ExifTag)">
            <summary>
            Removes the element with the specified key from the collection.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.Remove(Umbraco.Core.Media.Exif.IFD)">
            <summary>
            Removes all items with the given IFD from the collection.
            </summary>
            <param name="ifd">The IFD section to remove.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.TryGetValue(Umbraco.Core.Media.Exif.ExifTag,Umbraco.Core.Media.Exif.ExifProperty@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the collection contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.System#Collections#Generic#IDictionary{Umbraco#Core#Media#Exif#ExifTag@Umbraco#Core#Media#Exif#ExifProperty}#Add(Umbraco.Core.Media.Exif.ExifTag,Umbraco.Core.Media.Exif.ExifProperty)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Umbraco#Core#Media#Exif#ExifTag@Umbraco#Core#Media#Exif#ExifProperty}}#Add(System.Collections.Generic.KeyValuePair{Umbraco.Core.Media.Exif.ExifTag,Umbraco.Core.Media.Exif.ExifProperty})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Umbraco#Core#Media#Exif#ExifTag@Umbraco#Core#Media#Exif#ExifProperty}}#CopyTo(System.Collections.Generic.KeyValuePair{Umbraco.Core.Media.Exif.ExifTag,Umbraco.Core.Media.Exif.ExifProperty}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Umbraco#Core#Media#Exif#ExifTag@Umbraco#Core#Media#Exif#ExifProperty}}#Remove(System.Collections.Generic.KeyValuePair{Umbraco.Core.Media.Exif.ExifTag,Umbraco.Core.Media.Exif.ExifProperty})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{Umbraco#Core#Media#Exif#ExifTag@Umbraco#Core#Media#Exif#ExifProperty}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifPropertyCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifPropertyCollection.Keys">
            <summary>
            Gets a collection containing the keys in this collection.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifPropertyCollection.Values">
            <summary>
            Gets a collection containing the values in this collection.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifPropertyCollection.Item(Umbraco.Core.Media.Exif.ExifTag)">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Core.Media.Exif.ExifProperty"/> with the specified key.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ExifPropertyCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Umbraco#Core#Media#Exif#ExifTag@Umbraco#Core#Media#Exif#ExifProperty}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifPropertyFactory">
            <summary>
            Creates exif properties from interoperability parameters.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifPropertyFactory.Get(System.UInt16,System.UInt16,System.UInt32,System.Byte[],Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,Umbraco.Core.Media.Exif.IFD,System.Text.Encoding)">
            <summary>
            Creates an ExifProperty from the given interoperability parameters.
            </summary>
            <param name="tag">The tag id of the exif property.</param>
            <param name="type">The type id of the exif property.</param>
            <param name="count">Byte or component count.</param>
            <param name="value">Field data as an array of bytes.</param>
            <param name="byteOrder">Byte order of value.</param>
            <param name="ifd">IFD section containing this propery.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
            <returns>an ExifProperty initialized from the interoperability parameters.</returns>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ExifTag">
            <summary>
            Represents the tags associated with exif fields.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFIFVersion">
            <summary>
            Represents the JFIF version.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFIFUnits">
            <summary>
            Represents units for X and Y densities.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.XDensity">
            <summary>
            Horizontal pixel density.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.YDensity">
            <summary>
            Vertical pixel density
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFIFXThumbnail">
            <summary>
            Thumbnail horizontal pixel count.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFIFYThumbnail">
            <summary>
            Thumbnail vertical pixel count.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFIFThumbnail">
            <summary>
            JFIF JPEG thumbnail.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFXXExtensionCode">
            <summary>
            Code which identifies the JFIF extension.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFXXXThumbnail">
            <summary>
            Thumbnail horizontal pixel count.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFXXYThumbnail">
            <summary>
            Thumbnail vertical pixel count.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFXXPalette">
            <summary>
            The 256-Color RGB palette.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ExifTag.JFXXThumbnail">
            <summary>
            JFIF thumbnail. The thumbnail will be either a JPEG, 
            a 256 color palette bitmap, or a 24-bit RGB bitmap.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifTagFactory.GetExifTag(Umbraco.Core.Media.Exif.IFD,System.UInt16)">
            <summary>
            Returns the ExifTag corresponding to the given tag id.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifTagFactory.GetTagID(Umbraco.Core.Media.Exif.ExifTag)">
            <summary>
            Returns the tag id corresponding to the given ExifTag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifTagFactory.GetTagIFD(Umbraco.Core.Media.Exif.ExifTag)">
            <summary>
            Returns the IFD section containing the given tag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifTagFactory.GetTagName(Umbraco.Core.Media.Exif.ExifTag)">
            <summary>
            Returns the string representation for the given exif tag.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifTagFactory.GetTagName(Umbraco.Core.Media.Exif.IFD,System.UInt16)">
            <summary>
            Returns the string representation for the given tag id.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ExifTagFactory.GetTagLongName(Umbraco.Core.Media.Exif.ExifTag)">
            <summary>
            Returns the string representation for the given exif tag including 
            IFD section and tag id.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDomain.LanguageIsoCode">
            <summary>
            Readonly value of the language ISO code for the domain
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.UmbracoDomain.LanguageIsoCode">
            <summary>
            Readonly value of the language ISO code for the domain
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.DoNotCloneAttribute">
            <summary>
            Used to attribute properties that have a setter and are a reference type
            that should be ignored for cloning when using the DeepCloneHelper
            </summary>
            <remarks>
            
            This attribute must be used:
            * when the property is backed by a field but the result of the property is the un-natural data stored in the field
             
            This attribute should not be used:
            * when the property is virtual
            * when the setter performs additional required logic other than just setting the underlying field
            
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Factories.TaskFactory">
            <summary>
            Creates the model mappings for Tasks
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.IMigration">
            <summary>
            Marker interface for database migrations
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.TaskTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.TaskType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSevenThreeTwo.EnsureMigrationsTableIdentityIsCorrect">
            <summary>
            This reinserts all migrations in the migrations table to account for initial rows inserted
            on creation without identity enabled.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSevenFourZero.EnsureContentTypeUniqueIdsAreConsistent">
            <summary>
            Courier on v. 7.4+ will handle ContentTypes using GUIDs instead of
            alias, so we need to ensure that these are initially consistent on
            all environments (based on the alias).
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSevenThreeZero.CleanUpCorruptedPublishedFlags">
            <summary>
            Older corrupted dbs might have multiple published flags for a content item, this shouldn't be possible
            so we need to clear the content flag on the older version
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.IFD">
            <summary>
            Represents the IFD section containing tags.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ImageFile">
            <summary>
            Represents the base class for image files.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFile.ToImage">
            <summary>
            Converts the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> to a <see cref="T:System.Drawing.Image"/>.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.Image"/> containing image data.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFile.Save(System.String)">
            <summary>
            Saves the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> to the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFile.Save(System.IO.Stream)">
            <summary>
            Saves the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> to the specified stream.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> to save image data to.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFile.FromFile(System.String)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> from the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file.</param>
            <returns>The <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> created from the file.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFile.FromFile(System.String,System.Text.Encoding)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> from the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
            <returns>The <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> created from the file.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFile.FromStream(System.IO.Stream)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> from the specified data stream.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> that contains image data.</param>
            <returns>The <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> created from the file.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFile.FromStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> from the specified data stream.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> that contains image data.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
            <returns>The <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> created from the file.</returns>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ImageFile.Format">
            <summary>
            Returns the format of the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ImageFile.Properties">
            <summary>
            Gets the collection of Exif properties contained in the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ImageFile.Thumbnail">
            <summary>
            Gets or sets the embedded thumbnail image.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ImageFile.Item(Umbraco.Core.Media.Exif.ExifTag)">
            <summary>
            Gets or sets the Exif property with the given key.
            </summary>
            <param name="key">The Exif tag associated with the Exif property.</param>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ImageFile.Encoding">
            <summary>
            Gets the encoding used for text metadata when the source encoding is unknown.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ImageFileDirectory">
            <summary>
            Represents an image file directory.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFileDirectory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Media.Exif.ImageFileDirectory"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFileDirectory.FromBytes(System.Byte[],System.UInt32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns a <see cref="T:Umbraco.Core.Media.Exif.ImageFileDirectory"/> initialized from the given byte data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset into <paramref name="data"/>.</param>
            <param name="byteOrder">The byte order of <paramref name="data"/>.</param>
            <returns>A <see cref="T:Umbraco.Core.Media.Exif.ImageFileDirectory"/> initialized from the given byte data.</returns>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ImageFileDirectory.Fields">
            <summary>
            The fields contained in this IFD.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ImageFileDirectory.NextIFDOffset">
            <summary>
            Offset to the next IFD.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.ImageFileDirectory.Strips">
            <summary>
            Compressed image data.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry">
            <summary>
            Represents an entry in the image file directory.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry.Tag">
            <summary>
            The tag that identifies the field.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry.Type">
            <summary>
            Field type identifier.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry.Count">
            <summary>
            Count of Type.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry.Data">
            <summary>
            Field data.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry.#ctor(System.UInt16,System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry"/> struct.
            </summary>
            <param name="tag">The tag that identifies the field.</param>
            <param name="type">Field type identifier.</param>
            <param name="count">Count of Type.</param>
            <param name="data">Field data.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry.FromBytes(System.Byte[],System.UInt32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Returns a <see cref="T:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry"/> initialized from the given byte data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset into <paramref name="data"/>.</param>
            <param name="byteOrder">The byte order of <paramref name="data"/>.</param>
            <returns>A <see cref="T:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry"/> initialized from the given byte data.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.ImageFileDirectoryEntry.GetBaseLength(System.UInt16)">
            <summary>
            Gets the base byte length for the given type.
            </summary>
            <param name="type">Type identifier.</param>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.ImageFileFormat">
            <summary>
            Represents the format of the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/>.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ImageFileFormat.Unknown">
            <summary>
            The file is not recognized.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ImageFileFormat.JPEG">
            <summary>
            The file is a JPEG/Exif or JPEG/JFIF file.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.ImageFileFormat.TIFF">
            <summary>
            The file is a TIFF File.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.JFIFDensityUnit">
            <summary>
            Represents the units for the X and Y densities
            for a JFIF file.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.JFIFDensityUnit.None">
            <summary>
            No units, XDensity and YDensity specify the pixel aspect ratio.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.JFIFDensityUnit.DotsPerInch">
            <summary>
            XDensity and YDensity are dots per inch.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.JFIFDensityUnit.DotsPerCm">
            <summary>
            XDensity and YDensity are dots per cm.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.JFIFExtension">
            <summary>
            Represents the JFIF extension.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.JFIFExtension.ThumbnailJPEG">
            <summary>
            Thumbnail coded using JPEG.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.JFIFExtension.ThumbnailPaletteRGB">
            <summary>
            Thumbnail stored using a 256-Color RGB palette.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.JFIFExtension.Thumbnail24BitRGB">
            <summary>
            Thumbnail stored using 3 bytes/pixel (24-bit) RGB values.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.JFIFVersion">
            <summary>
            Represents the JFIF version as a 16 bit unsigned integer. (EXIF Specification: SHORT) 
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JFIFVersion.Major">
            <summary>
            Gets the major version.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JFIFVersion.Minor">
            <summary>
            Gets the minor version.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.JFIFThumbnailProperty">
            <summary>
            Represents a JFIF thumbnail. (EXIF Specification: BYTE) 
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.JFIFThumbnail">
            <summary>
            Represents a JFIF thumbnail.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JFIFThumbnail.Palette">
            <summary>
            Gets the 256 color RGB palette.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JFIFThumbnail.PixelData">
            <summary>
            Gets raw image data.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JFIFThumbnail.Format">
            <summary>
            Gets the image format.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.UnknownImageFormatException">
            <summary>
            The exception that is thrown when the format of the image file
            could not be understood.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.NotValidImageFileException">
            <summary>
            The exception that is thrown when the format of the image file
            could not be understood.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.NotValidJPEGFileException">
            <summary>
            The exception that is thrown when the format of the JPEG file
            could not be understood.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.NotValidTIFFileException">
            <summary>
            The exception that is thrown when the format of the TIFF file
            could not be understood.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.NotValidTIFFHeader">
            <summary>
            The exception that is thrown when the format of the TIFF header
            could not be understood.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.SectionExceeds64KBException">
            <summary>
            The exception that is thrown when the length of a section exceeds 64 kB.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.JPEGFile">
            <summary>
            Represents the binary view of a JPEG compressed file.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="!:ExifFile"/> class.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> that contains image data.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the JPEG/Exif image to the given stream.
            </summary>
            <param name="filename">The path to the JPEG/Exif file.</param>
            <param name="preserveMakerNote">Determines whether the maker note offset of
            the original file will be preserved.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.Save(System.String,System.Boolean)">
            <summary>
            Saves the JPEG/Exif image with the given filename.
            </summary>
            <param name="filename">The path to the JPEG/Exif file.</param>
            <param name="preserveMakerNote">Determines whether the maker note offset of
            the original file will be preserved.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.Save(System.String)">
            <summary>
            Saves the JPEG/Exif image with the given filename.
            </summary>
            <param name="filename">The path to the JPEG/Exif file.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.Save(System.IO.Stream)">
            <summary>
            Saves the JPEG/Exif image to the given stream.
            </summary>
            <param name="filename">The path to the JPEG/Exif file.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.ToImage">
            <summary>
            Returns a System.Drawing.Image created with image data.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.ReadJFIFAPP0">
            <summary>
            Reads the APP0 section containing JFIF metadata.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.WriteJFIFApp0">
            <summary>
            Replaces the contents of the APP0 section with the JFIF properties.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.ReadJFXXAPP0">
            <summary>
            Reads the APP0 section containing JFIF extension metadata.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.WriteJFXXApp0">
            <summary>
            Replaces the contents of the APP0 section with the JFIF extension properties.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.ReadExifAPP1">
            <summary>
            Reads the APP1 section containing Exif metadata.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGFile.WriteExifApp1(System.Boolean)">
            <summary>
            Replaces the contents of the APP1 section with the Exif properties.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JPEGFile.ByteOrder">
            <summary>
            Gets or sets the byte-order of the Exif properties.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JPEGFile.Sections">
            <summary>
            Gets or sets the sections contained in the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JPEGFile.TrailingData">
            <summary>
            Gets or sets non-standard trailing data following the End of Image (EOI) marker.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.JPEGMarker">
            <summary>
            Represents a JPEG marker byte.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.JPEGSection">
            <summary>
            Represents the memory view of a JPEG section.
            A JPEG section is the data between markers of the JPEG file.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGSection.#ctor(Umbraco.Core.Media.Exif.JPEGMarker,System.Byte[],System.Byte[])">
            <summary>
            Constructs a JPEGSection represented by the marker byte and containing
            the given data.
            </summary>
            <param name="marker">The marker byte representing the section.</param>
            <param name="data">Section data.</param>
            <param name="entropydata">Entropy coded data.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGSection.#ctor(Umbraco.Core.Media.Exif.JPEGMarker)">
            <summary>
            Constructs a JPEGSection represented by the marker byte.
            </summary>
            <param name="marker">The marker byte representing the section.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.JPEGSection.ToString">
            <summary>
            Returns a string representation of the current section.
            </summary>
            <returns>A System.String that represents the current section.</returns>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JPEGSection.Marker">
            <summary>
            The marker byte representing the section.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JPEGSection.Header">
            <summary>
            Section header as a byte array. This is different from the header
            definition in JPEG specification in that it does not include the 
            two byte section length.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.JPEGSection.EntropyData">
            <summary>
            For the SOS and RST markers, this contains the entropy coded data.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.MathEx">
            <summary>
            Contains extended Math functions.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.GCD(System.UInt32,System.UInt32)">
            <summary>
            Returns the greatest common divisor of two numbers.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.GCD(System.UInt64,System.UInt64)">
            <summary>
            Returns the greatest common divisor of two numbers.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.MathEx.Fraction32">
            <summary>
            Represents a generic rational number represented by 32-bit signed numerator and denominator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.IsNan(Umbraco.Core.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to a value
            that is not a number.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.NaN; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.IsNegativeInfinity(Umbraco.Core.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative
            infinity.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.IsPositiveInfinity(Umbraco.Core.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive
            infinity.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.IsInfinity(Umbraco.Core.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative
            or positive infinity.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.NegativeInfinity or Fraction.PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.Inverse(Umbraco.Core.Media.Exif.MathEx.Fraction32)">
            <summary>
            Returns the multiplicative inverse of a given value.
            </summary>
            <param name="f">A fraction.</param>
            <returns>Multiplicative inverse of f.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.Parse(System.String)">
            <summary>
            Converts the string representation of a fraction to a fraction object.
            </summary>
            <param name="s">A string formatted as numerator/denominator</param>
            <returns>A fraction object converted from s.</returns>
            <exception cref="T:System.ArgumentNullException">s is null</exception>
            <exception cref="T:System.FormatException">s is not in the correct format</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than System.UInt32.MinValue or greater than 
            System.UInt32.MaxValue.
            </exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.TryParse(System.String,Umbraco.Core.Media.Exif.MathEx.Fraction32@)">
            <summary>
            Converts the string representation of a fraction to a fraction object.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string formatted as numerator/denominator</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.Set(System.Int32,System.Int32)">
            <summary>
            Sets the value of this instance to the fraction represented
            by the given numerator and denominator.
            </summary>
            <param name="numerator">The new numerator.</param>
            <param name="denominator">The new denominator.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal value-wise.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>true if obj and this instance are the same type and represent 
            the same value; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.Equals(Umbraco.Core.Media.Exif.MathEx.Fraction32)">
            <summary>
            Indicates whether this instance and a specified object are equal value-wise.
            </summary>
            <param name="obj">Another fraction object to compare to.</param>
            <returns>true if obj and this instance represent the same value; 
            otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns> A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">
            An System.IFormatProvider that supplies culture-specific 
            formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as 
            specified by format and provider.
            </returns>
            <exception cref="T:System.FormatException">
            format is invalid or not supported.
            </exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.ToString(System.String)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>
            The string representation of the value of this instance as 
            specified by format.
            </returns>
            <exception cref="T:System.FormatException">
            format is invalid or not supported.
            </exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="formatProvider">
            An System.IFormatProvider that supplies culture-specific 
            formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as 
            specified by provider.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.ToString">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <returns>A string formatted as numerator/denominator.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of
            their relative values.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj. 
            Greater than zero: This instance is greater than obj or obj is null.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not a Fraction.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.CompareTo(Umbraco.Core.Media.Exif.MathEx.Fraction32)">
            <summary>
            Compares this instance to a specified object and returns an indication of
            their relative values.
            </summary>
            <param name="obj">An fraction to compare with this instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj. 
            Greater than zero: This instance is greater than obj or obj is null.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.FromDouble(System.Double)">
            <summary>
            Converts the given floating-point number to its rational representation.
            </summary>
            <param name="value">The floating-point number to be converted.</param>
            <returns>The rational representation of value.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.FromString(System.String)">
            <summary>Converts the string representation of a fraction to a Fraction type.</summary>
            <param name="s">The input string formatted as numerator/denominator.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s is not formatted as numerator/denominator.</exception>
            <exception cref="T:System.OverflowException">
            s represents numbers less than System.Int32.MinValue or greater than 
            System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.Fraction32.Reduce(System.Int32@,System.Int32@)">
            <summary>
            Reduces the given numerator and denominator by dividing with their
            greatest common divisor.
            </summary>
            <param name="numerator">numerator to be reduced.</param>
            <param name="denominator">denominator to be reduced.</param>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.MathEx.Fraction32.Numerator">
            <summary>
            Gets or sets the numerator.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.MathEx.Fraction32.Denominator">
            <summary>
            Gets or sets the denominator.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.MathEx.Fraction32.Error">
            <summary>
            Gets the error term.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.MathEx.Fraction32.IsNegative">
            <summary>
            Gets or sets a value determining id the fraction is a negative value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.MathEx.UFraction32">
            <summary>
            Represents a generic rational number represented by 32-bit unsigned numerator and denominator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.IsNan(Umbraco.Core.Media.Exif.MathEx.UFraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to a value
            that is not a number.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.NaN; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.IsInfinity(Umbraco.Core.Media.Exif.MathEx.UFraction32)">
            <summary>
            Returns a value indicating whether the specified number evaluates to infinity.
            </summary>
            <param name="f">A fraction.</param>
            <returns>true if f evaluates to Fraction.Infinity; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.Parse(System.String)">
            <summary>
            Converts the string representation of a fraction to a fraction object.
            </summary>
            <param name="s">A string formatted as numerator/denominator</param>
            <returns>A fraction object converted from s.</returns>
            <exception cref="T:System.ArgumentNullException">s is null</exception>
            <exception cref="T:System.FormatException">s is not in the correct format</exception>
            <exception cref="T:System.OverflowException">
            s represents a number less than System.UInt32.MinValue or greater than 
            System.UInt32.MaxValue.
            </exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.TryParse(System.String,Umbraco.Core.Media.Exif.MathEx.UFraction32@)">
            <summary>
            Converts the string representation of a fraction to a fraction object.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string formatted as numerator/denominator</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.Set(System.UInt32,System.UInt32)">
            <summary>
            Sets the value of this instance to the fraction represented
            by the given numerator and denominator.
            </summary>
            <param name="numerator">The new numerator.</param>
            <param name="denominator">The new denominator.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.Inverse(Umbraco.Core.Media.Exif.MathEx.UFraction32)">
            <summary>
            Returns the multiplicative inverse of a given value.
            </summary>
            <param name="f">A fraction.</param>
            <returns>Multiplicative inverse of f.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal value-wise.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>true if obj and this instance are the same type and represent 
            the same value; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.Equals(Umbraco.Core.Media.Exif.MathEx.UFraction32)">
            <summary>
            Indicates whether this instance and a specified object are equal value-wise.
            </summary>
            <param name="obj">Another fraction object to compare to.</param>
            <returns>true if obj and this instance represent the same value; 
            otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns> A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">
            An System.IFormatProvider that supplies culture-specific 
            formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as 
            specified by format and provider.
            </returns>
            <exception cref="T:System.FormatException">
            format is invalid or not supported.
            </exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.ToString(System.String)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>
            The string representation of the value of this instance as 
            specified by format.
            </returns>
            <exception cref="T:System.FormatException">
            format is invalid or not supported.
            </exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.ToString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <param name="formatProvider">
            An System.IFormatProvider that supplies culture-specific 
            formatting information.
            </param>
            <returns>
            The string representation of the value of this instance as 
            specified by provider.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.ToString">
            <summary>
            Returns a string representation of the fraction.
            </summary>
            <returns>A string formatted as numerator/denominator.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of
            their relative values.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj. 
            Greater than zero: This instance is greater than obj or obj is null.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not a Fraction.</exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.CompareTo(Umbraco.Core.Media.Exif.MathEx.UFraction32)">
            <summary>
            Compares this instance to a specified object and returns an indication of
            their relative values.
            </summary>
            <param name="obj">An fraction to compare with this instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Less than zero: This instance is less than obj.
            Zero: This instance is equal to obj. 
            Greater than zero: This instance is greater than obj or obj is null.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.FromDouble(System.Double)">
            <summary>
            Converts the given floating-point number to its rational representation.
            </summary>
            <param name="value">The floating-point number to be converted.</param>
            <returns>The rational representation of value.</returns>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.FromString(System.String)">
            <summary>Converts the string representation of a fraction to a Fraction type.</summary>
            <param name="s">The input string formatted as numerator/denominator.</param>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s is not formatted as numerator/denominator.</exception>
            <exception cref="T:System.OverflowException">
            s represents numbers less than System.UInt32.MinValue or greater than 
            System.UInt32.MaxValue.
            </exception>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.MathEx.UFraction32.Reduce(System.UInt32@,System.UInt32@)">
            <summary>
            Reduces the given numerator and denominator by dividing with their
            greatest common divisor.
            </summary>
            <param name="numerator">numerator to be reduced.</param>
            <param name="denominator">denominator to be reduced.</param>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.MathEx.UFraction32.Numerator">
            <summary>
            Gets or sets the numerator.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.MathEx.UFraction32.Denominator">
            <summary>
            Gets or sets the denominator.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.MathEx.UFraction32.Error">
            <summary>
            Gets the error term.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.TIFFFile">
            <summary>
            Represents the binary view of a TIFF file.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.TIFFFile.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Media.Exif.JPEGFile"/> class from the
            specified data stream.
            </summary>
            <param name="stream">A <see cref="!:Sytem.IO.Stream"/> that contains image data.</param>
            <param name="encoding">The encoding to be used for text metadata when the source encoding is unknown.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.TIFFFile.Save(System.IO.Stream)">
            <summary>
            Saves the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> to the given stream.
            </summary>
            <param name="stream">The data stream used to save the image.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.TIFFFile.ToImage">
            <summary>
            Converts the <see cref="T:Umbraco.Core.Media.Exif.ImageFile"/> to a <see cref="T:System.Drawing.Image"/>.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.Image"/> containing image data.</returns>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.TIFFFile.TIFFHeader">
            <summary>
            Gets the TIFF header.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.TIFFFile.IFDs">
            <summary>
            Gets the image file directories.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.TIFFHeader">
            <summary>
            Represents a TIFF Header.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.TIFFHeader.ByteOrder">
            <summary>
            The byte order of the image file.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.TIFFHeader.ID">
            <summary>
            TIFF ID. This value should always be 42.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.TIFFHeader.IFDOffset">
            <summary>
            The offset to the first IFD section from the 
            start of the TIFF header.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Media.Exif.TIFFHeader.TIFFHeaderByteOrder">
            <summary>
            The byte order of the TIFF header itself.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.TIFFHeader.#ctor(Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder,System.Byte,System.UInt32,Umbraco.Core.Media.Exif.BitConverterEx.ByteOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Media.Exif.TIFFHeader"/> struct.
            </summary>
            <param name="byteOrder">The byte order.</param>
            <param name="id">The TIFF ID. This value should always be 42.</param>
            <param name="ifdOffset">The offset to the first IFD section from the 
            start of the TIFF header.</param>
            <param name="headerByteOrder">The byte order of the TIFF header itself.</param>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.TIFFHeader.FromBytes(System.Byte[],System.Int32)">
            <summary>
            Returns a <see cref="T:Umbraco.Core.Media.Exif.TIFFHeader"/> initialized from the given byte data.
            </summary>
            <param name="data">The data.</param>
            <param name="offset">The offset into <paramref name="data"/>.</param>
            <returns>A <see cref="T:Umbraco.Core.Media.Exif.TIFFHeader"/> initialized from the given byte data.</returns>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.TIFFStrip">
            <summary>
            Represents a strip of compressed image data in a TIFF file.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.TIFFStrip.#ctor(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Media.Exif.TIFFStrip"/> class.
            </summary>
            <param name="data">The byte array to copy strip from.</param>
            <param name="offset">The offset to the beginning of strip.</param>
            <param name="length">The length of strip.</param>
        </member>
        <member name="P:Umbraco.Core.Media.Exif.TIFFStrip.Data">
            <summary>
            Compressed image data contained in this strip.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.Exif.Utility">
            <summary>
            Contains utility functions.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.Exif.Utility.GetStreamBytes(System.IO.Stream)">
            <summary>
            Reads the entire stream and returns its contents as a byte array.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read.</param>
            <returns>Contents of the <paramref name="stream"/> as a byte array.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSevenThreeOne.UpdateUserLanguagesToIsoCode">
            <summary>
            This fixes the storage of user languages from the old format like en_us to en-US
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.PetaPocoRepositoryBase`2">
            <summary>
            Represent an abstract Repository for PetaPoco based repositories
            </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.RepositoryBase`2">
            <summary>
            Represent an abstract Repository, which is the base of the Repository implementations
            </summary>
            <typeparam name="TEntity">Type of <see cref="T:Umbraco.Core.Models.EntityBase.IAggregateRoot"/> entity for which the repository is used</typeparam>
            <typeparam name="TId">Type of the Id used for this entity</typeparam>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.RepositoryBase.UnitOfWork">
            <summary>
            Returns the Unit of Work added to the repository
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.RepositoryBase.UnitKey">
            <summary>
            Internal for testing purposes
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.RepositoryBase.RuntimeCache">
            <summary>
            The runtime cache used for this repo - by standard this is the runtime cache exposed by the CacheHelper but can be overridden
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRepositoryQueryable`2">
            <summary>
            Defines the implementation of a Repository, which allows queries against the <see cref="!:TEntity"/>
            </summary>
            <typeparam name="TEntity">Type of <see cref="T:Umbraco.Core.Models.EntityBase.IAggregateRoot"/> entity for which the repository is used</typeparam>
            <typeparam name="TId">Type of the Id used for this entity</typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRepository`2">
            <summary>
            Defines the implementation of a Repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRepository">
            <summary>
            Defines the base implementation of a Repository
            </summary>
            <remarks>
            Currently this interface is empty but it is useful for flagging a repository without having generic parameters, it also might
            come in handy if we need to add anything to the base/non-generic repository interface.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IReadRepository`2.Get(`0)">
            <summary>
            Gets an Entity by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IReadRepository`2.GetAll(`0[])">
            <summary>
            Gets all entities of the spefified type
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IReadRepository`2.Exists(`0)">
            <summary>
            Boolean indicating whether an Entity with the specified Id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepository`2.AddOrUpdate(`1)">
            <summary>
            Adds or Updates an Entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepository`2.Delete(`1)">
            <summary>
            Deletes an Entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryQueryable`2.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Gets all entities of the specified type and query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryQueryable`2.Count(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Returns the count for the specified query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository">
            <summary>
            Defines the Unit Of Work-part of a repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.AddOrUpdate(`1)">
            <summary>
            Adds or Updates an entity of type TEntity
            </summary>
            <remarks>This method is backed by an <see cref="T:Umbraco.Core.Cache.IRuntimeCacheProvider"/> cache</remarks>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.Delete(`1)">
            <summary>
            Deletes the passed in entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.Get(`0)">
            <summary>
            Gets an entity by the passed in Id utilizing the repository's cache policy
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.GetAll(`0[])">
            <summary>
            Gets all entities of type TEntity or a list according to the passed in Ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Gets a list of entities by the passed in query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.Exists(`0)">
            <summary>
            Returns a boolean indicating whether an entity with the passed Id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.Count(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Returns an integer with the count of entities found with the passed in query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.PersistNewItem(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the new entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.PersistUpdatedItem(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the updated entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.PersistDeletedItem(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the deletion of the entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.RuntimeCache">
            <summary>
            The runtime cache used for this repo by default is the isolated cache for this type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.CachePolicyFactory">
            <summary>
            Returns the Cache Policy for the repository
            </summary>
            <remarks>
            The Cache Policy determines how each entity or entity collection is cached
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.PetaPocoRepositoryBase`2.UnitOfWork">
            <summary>
            Returns the database Unit of Work added to the repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.EntityContainerRepository">
            <summary>
            An internal repository for managing entity containers such as doc type, media type, data type containers.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.EntityContainerRepository.RuntimeCache">
            <summary>
            Do not cache anything
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IDeleteMediaFilesRepository.DeleteMediaFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called to remove all files associated with entities when an entity is permanently deleted
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.DecimalValidator">
            <summary>
            A validator that validates that the value is a valid decimal
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ManifestValueValidator">
            <summary>
            A validator used to validate a value based on a validator name defined in a package manifest
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ManifestValueValidator.Validate(System.Object,System.String,Umbraco.Core.Models.PreValueCollection,Umbraco.Core.PropertyEditors.PropertyEditor)">
            <summary>
            Performs the validation against the value
            </summary>
            <param name="value">
            Depending on what is being validated, this value can be a json structure (JObject, JArray, etc...) representing an editor's model, it could be a single
            string representing an editor's model.
            </param>
            <param name="config">
            An object that is used to configure the validator. An example could be a regex 
            expression if the validator was a regex validator. This is defined in the manifest along with
            the definition of the validator.
            </param>
            <param name="preValues">The current pre-values stored for the data type</param>
            <param name="editor">The property editor instance that is being validated</param>
            <returns>
            Returns a list of validation results. If a result does not have a field name applied to it then then we assume that 
            the validation message applies to the entire property type being validated. If there is a field name applied to a 
            validation result we will try to match that field name up with a field name on the item itself.
            </returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IPropertyValidator">
            <summary>
            An interface defining a validator
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValidator.Validate(System.Object,Umbraco.Core.Models.PreValueCollection,Umbraco.Core.PropertyEditors.PropertyEditor)">
            <summary>
            Validates the object with the resolved ValueValidator found for this type
            </summary>
            <param name="value">
            Depending on what is being validated, this value can be a json structure (JObject, JArray, etc...) representing an editor's model, it could be a single
            string representing an editor's model, this class structure is also used to validate pre-values and in that case this value
            could be a json structure or a single value representing a pre-value field.
            </param>
            <param name="preValues">
            When validating a property editor value (not a pre-value), this is the current pre-values stored for the data type.
            When validating a pre-value field this will be null.
            </param>
            <param name="editor">The property editor instance that we are validating for</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.GridValueConverter">
            <summary>
            This ensures that the grid config is merged in with the front-end value
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.JsonValueConverter">
            <summary>
            The default converter for all property editors that expose a JSON value type
            </summary>
            <remarks>
            Since this is a default (umbraco) converter it will be ignored if another converter found conflicts with this one.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyValueConverterBase">
            <summary>
            Provides a default overridable implementation for <see cref="T:Umbraco.Core.PropertyEditors.IPropertyValueConverter"/> that does nothing.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IPropertyValueConverter">
            <summary>
            Provides published content properties conversion service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.IsConverter(Umbraco.Core.Models.PublishedContent.PublishedPropertyType)">
            <summary>
            Gets a value indicating whether the converter supports a property type.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>A value indicating whether the converter supports a property type.</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.ConvertDataToSource(Umbraco.Core.Models.PublishedContent.PublishedPropertyType,System.Object,System.Boolean)">
            <summary>
            Converts a property Data value to a Source value.
            </summary>
            <param name="propertyType">The property type.</param>
            <param name="source">The data value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
            <para>The converter should know how to convert a <c>null</c> raw value, meaning that no
            value has been assigned to the property. The source value can be <c>null</c>.</para>
            <para>With the XML cache, raw values come from the XML cache and therefore are strings.</para>
            <para>With objects caches, raw values would come from the database and therefore be either
            ints, DateTimes, or strings.</para>
            <para>The converter should be prepared to handle both situations.</para>
            <para>When raw values are strings, the converter must handle empty strings, whitespace
            strings, and xml-whitespace strings appropriately, ie it should know whether to preserve
            whitespaces.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.ConvertSourceToObject(Umbraco.Core.Models.PublishedContent.PublishedPropertyType,System.Object,System.Boolean)">
            <summary>
            Converts a property Source value to an Object value.
            </summary>
            <param name="propertyType">The property type.</param>
            <param name="source">The source value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <returns>The result of the conversion.</returns>
            <remarks>The converter should know how to convert a <c>null</c> source value, or any source value
            indicating that no value has been assigned to the property. It is up to the converter to determine
            what to return in that case: either <c>null</c>, or the default value...</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverter.ConvertSourceToXPath(Umbraco.Core.Models.PublishedContent.PublishedPropertyType,System.Object,System.Boolean)">
            <summary>
            Converts a property Source value to an XPath value.
            </summary>
            <param name="propertyType">The property type.</param>
            <param name="source">The source value.</param>
            <param name="preview">A value indicating whether conversion should take place in preview mode.</param>
            <returns>The result of the conversion.</returns>
            <remarks>
            <para>The converter should know how to convert a <c>null</c> source value, or any source value
            indicating that no value has been assigned to the property. It is up to the converter to determine
            what to return in that case: either <c>null</c>, or the default value...</para>
            <para>If successful, the result should be either <c>null</c>, a string, or an <c>XPathNavigator</c>
            instance. Whether an xml-whitespace string should be returned as <c>null</c> or litterally, is
            up to the converter.</para>
            <para>The converter may want to return an XML fragment that represent a part of the content tree,
            but should pay attention not to create infinite loops that would kill XPath and XSLT.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValueConverters.JsonValueConverter.IsConverter(Umbraco.Core.Models.PublishedContent.PublishedPropertyType)">
            <summary>
            It is a converter for any value type that is "JSON"
            </summary>
            <param name="propertyType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.LabelValueConverter">
            <summary>
            We need this property converter so that we always force the value of a label to be a string
            </summary>
            <remarks>
            Without a property converter defined for the label type, the value will be converted with
            the `ConvertUsingDarkMagic` method which will try to parse the value into it's correct type, but this
            can cause issues if the string is detected as a number and then strips leading zeros. 
            Example: http://issues.umbraco.org/issue/U4-7929
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter">
            <summary>
            This ensures that the cropper config (pre-values/crops) are merged in with the front-end value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Publishing.UnPublishedStatusType">
            <summary>
            A status type of the result of unpublishing a content item
            </summary>
            <remarks>
            Anything less than 10 = Success!
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Publishing.UnPublishedStatusType.Success">
            <summary>
            The unpublishing was successful.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.UnPublishedStatusType.SuccessAlreadyUnPublished">
            <summary>
            The item was already unpublished
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.UnPublishedStatusType.FailedCancelledByEvent">
            <summary>
            The publish action has been cancelled by an event handler
            </summary>
        </member>
        <member name="T:Umbraco.Core.Publishing.UnPublishStatus">
            <summary>
            The result of unpublishing a content item
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.OperationStatus`2">
            <summary>
            The status returned by many of the service methods
            </summary>
        </member>
        <member name="M:Umbraco.Core.Publishing.UnPublishStatus.#ctor(Umbraco.Core.Models.IContent,Umbraco.Core.Events.EventMessages)">
            <summary>
            Creates a successful unpublish status
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeClaimsIdentityFactory.CreateAsync(Microsoft.AspNet.Identity.UserManager{Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Int32},Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Create a ClaimsIdentity from a user
            </summary>
            <param name="manager"/><param name="user"/><param name="authenticationType"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeCookieAuthenticationProvider.ValidateIdentity(Microsoft.Owin.Security.Cookies.CookieValidateIdentityContext)">
            <summary>
            Ensures that the culture is set correctly for the current back office user
            </summary>
            <param name="context"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeSignInManager.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sign in the user in using the user name and password
            </summary>
            <param name="userName"/><param name="password"/><param name="isPersistent"/><param name="shouldLockout"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeSignInManager.SignInAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean,System.Boolean)">
            <summary>
            Creates a user identity and then signs the identity using the AuthenticationManager
            </summary>
            <param name="user"></param>
            <param name="isPersistent"></param>
            <param name="rememberBrowser"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Security.BackOfficeUserManager">
            <summary>
            Default back office user manager
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.BackOfficeUserManager`1">
            <summary>
            Generic Back office user manager
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserManager`1.CheckPasswordAsync(`0,System.String)">
            <summary>
            Logic used to validate a username and password
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
            <remarks>
            By default this uses the standard ASP.Net Identity approach which is:
            * Get password store
            * Call VerifyPasswordAsync with the password store + user + password
            * Uses the PasswordHasher.VerifyHashedPassword to compare the stored password
            
            In some cases people want simple custom control over the username/password check, for simplicity
            sake, developers would like the users to simply validate against an LDAP directory but the user
            data remains stored inside of Umbraco. 
            See: http://issues.umbraco.org/issue/U4-7032 for the use cases.
            
            We've allowed this check to be overridden with a simple callback so that developers don't actually
            have to implement/override this class.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Security.BackOfficeUserManager`1.SupportsUserTwoFactor">
            <summary>
            Developers will need to override this to support custom 2 factor auth
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.BackOfficeUserManager`1.BackOfficeUserPasswordChecker">
            <summary>
            Gets/sets the default back office user password checker
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Umbraco.Core.Security.BackOfficeUserManager},Umbraco.Core.Services.IUserService,Umbraco.Core.Services.IExternalLoginService,Umbraco.Core.Security.MembershipProviderBase)">
            <summary>
            Creates a BackOfficeUserManager instance with all default options and the default BackOfficeUserManager 
            </summary>
            <param name="options"></param>
            <param name="userService"></param>
            <param name="externalLoginService"></param>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Umbraco.Core.Security.BackOfficeUserManager},Umbraco.Core.Security.BackOfficeUserStore,Umbraco.Core.Security.MembershipProviderBase)">
            <summary>
            Creates a BackOfficeUserManager instance with all default options and a custom BackOfficeUserManager instance
            </summary>
            <param name="options"></param>
            <param name="customUserStore"></param>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserManager.InitUserManager(Umbraco.Core.Security.BackOfficeUserManager,Umbraco.Core.Security.MembershipProviderBase,Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Umbraco.Core.Security.BackOfficeUserManager})">
            <summary>
            Initializes the user manager with the correct options
            </summary>
            <param name="manager"></param>
            <param name="membershipProvider"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Security.BackOfficeUserPasswordCheckerResult">
            <summary>
            The result returned from the IBackOfficeUserPasswordChecker
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Core.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.CreateAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Insert a new user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.UpdateAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Update a user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.DeleteAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Delete a user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.FindByIdAsync(System.Int32)">
            <summary>
            Finds a user
            </summary>
            <param name="userId"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.FindByNameAsync(System.String)">
            <summary>
            Find a user by name
            </summary>
            <param name="userName"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetPasswordHashAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Set the user password hash
            </summary>
            <param name="user"/><param name="passwordHash"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetPasswordHashAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Get the user password hash
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.HasPasswordAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns true if a user has a password set
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetEmailAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Set the user email
            </summary>
            <param name="user"/><param name="email"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetEmailAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Get the user email
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetEmailConfirmedAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns true if the user email is confirmed
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetEmailConfirmedAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean)">
            <summary>
            Sets whether the user email is confirmed
            </summary>
            <param name="user"/><param name="confirmed"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.FindByEmailAsync(System.String)">
            <summary>
            Returns the user associated with this email
            </summary>
            <param name="email"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.AddLoginAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Adds a user login with the specified provider and key
            </summary>
            <param name="user"/><param name="login"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.RemoveLoginAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Removes the user login with the specified combination if it exists
            </summary>
            <param name="user"/><param name="login"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetLoginsAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns the linked accounts for this user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.FindAsync(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Returns the user associated with this login
            </summary>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.AddToRoleAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Adds a user to a role (section)
            </summary>
            <param name="user"/><param name="roleName"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.RemoveFromRoleAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Removes the role (allowed section) for the user
            </summary>
            <param name="user"/><param name="roleName"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetRolesAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns the roles for this user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.IsInRoleAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Returns true if a user is in the role
            </summary>
            <param name="user"/><param name="roleName"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetSecurityStampAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.String)">
            <summary>
            Set the security stamp for the user
            </summary>
            <param name="user"/><param name="stamp"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetSecurityStampAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Get the user security stamp
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetTwoFactorEnabledAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean)">
            <summary>
            Sets whether two factor authentication is enabled for the user
            </summary>
            <param name="user"/><param name="enabled"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetTwoFactorEnabledAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns whether two factor authentication is enabled for the user
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetLockoutEndDateAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns the DateTimeOffset that represents the end of a user's lockout, any time in the past should be considered not locked out.
            </summary>
            <param name="user"/>
            <returns/>
            <remarks>
            Currently we do not suport a timed lock out, when they are locked out, an admin will  have to reset the status
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetLockoutEndDateAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.DateTimeOffset)">
            <summary>
            Locks a user out until the specified end date (set to a past date, to unlock a user)
            </summary>
            <param name="user"/><param name="lockoutEnd"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.IncrementAccessFailedCountAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Used to record when an attempt to access the user has failed
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.ResetAccessFailedCountAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Used to reset the access failed count, typically after the account is successfully accessed
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetAccessFailedCountAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns the current number of failed access attempts.  This number usually will be reset whenever the password is
                            verified or the account is locked out.
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.GetLockoutEnabledAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser)">
            <summary>
            Returns true
            </summary>
            <param name="user"/>
            <returns/>
        </member>
        <member name="M:Umbraco.Core.Security.BackOfficeUserStore.SetLockoutEnabledAsync(Umbraco.Core.Models.Identity.BackOfficeIdentityUser,System.Boolean)">
            <summary>
            Doesn't actually perform any function, users can always be locked out
            </summary>
            <param name="user"/><param name="enabled"/>
            <returns/>
        </member>
        <member name="T:Umbraco.Core.Security.IBackOfficeUserPasswordChecker">
            <summary>
            Used by the BackOfficeUserManager to check the username/password which allows for developers to more easily 
            set the logic for this procedure.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.MembershipPasswordHasher">
            <summary>
            A custom password hasher that conforms to the current password hashing done in Umbraco
            </summary>
        </member>
        <member name="T:Umbraco.Core.Serialization.NoTypeConverterJsonConverter`1">
            <summary>
            This is required if we want to force JSON.Net to not use .Net TypeConverters during serialization/deserialization
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            In some cases thsi is required if your model has an explicit type converter, see: http://stackoverflow.com/a/31328131/694494
            
            NOTE: I was going to use this for the ImageCropDataSetConverter to convert to String, which would have worked by putting this attribute:
            [JsonConverter(typeof(NoTypeConverterJsonConverter{ImageCropDataSet}))] on top of the ImageCropDataSet class, however it turns out we 
            don't require this because to convert to string, we just override ToString().
            I'll leave this class here for the future though.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ServiceProviderExtensions.CreateInstances``1(System.IServiceProvider,System.Collections.Generic.IEnumerable{System.Type},Umbraco.Core.Logging.ILogger,System.Boolean)">
            <summary>
            Used to create instances of the specified type based on the resolved/cached plugin types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProvider"></param>
            <param name="types"></param>
            <param name="logger"></param>
            <param name="throwException">set to true if an exception is to be thrown if there is an error during instantiation</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IO.UmbracoMediaFile.Initialize">
            <summary>
            Initialized values that don't require opening the file.
            </summary>
        </member>
        <member name="P:Umbraco.Core.IO.UmbracoMediaFile.Length">
            <summary>
            Get the length of the file in bytes
            </summary>
            <remarks>
            We are lazy loading this, don't go opening the file on ctor like we were doing.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Logging.ILogger">
            <summary>
            Interface for logging service.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.AppDomainTokenConverter">
            <summary>
            Allows for outputting a normalized appdomainappid token in a log format
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.LoggerExtensions">
            <summary>
            Allows for strongly typed log sources
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Error``1(Umbraco.Core.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Adds an error log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Warn``1(Umbraco.Core.Logging.ILogger,System.String,System.Func{System.Object}[])">
            <summary>
            Adds a warn log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="formatItems"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Info``1(Umbraco.Core.Logging.ILogger,System.String,System.Func{System.Object}[])">
            <summary>
            Traces a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <param name="generateMessageFormat">The generate message format.</param>
            <param name="formatItems">The format items.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Info``1(Umbraco.Core.Logging.ILogger,System.Func{System.String})">
            <summary>
            Traces a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <param name="generateMessage">The delegate to generate a message.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Debug``1(Umbraco.Core.Logging.ILogger,System.Func{System.String})">
            <summary>
            Debugs a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <param name="generateMessage">The delegate to generate a message.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerExtensions.Debug``1(Umbraco.Core.Logging.ILogger,System.String,System.Func{System.Object}[])">
            <summary>
            Debugs a message, only generating the message if debug is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <param name="generateMessageFormat">The generate message format.</param>
            <param name="formatItems">The format items.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggerResolver.SetLogger(Umbraco.Core.Logging.ILogger)">
            <summary>
            Method allowing to change the logger during startup
            </summary>
            <param name="profiler"></param>
        </member>
        <member name="P:Umbraco.Core.Logging.LoggerResolver.Logger">
            <summary>
            Gets the current logger
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.ProfilingLogger">
            <summary>
            Used to create DisposableTimer instances for debugging or tracing durations
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSevenThreeZero.MigrateStylesheetDataToFile">
            <summary>
            Ensures that any stylesheets that have properties defined at the db level have the correct new syntax 
            in their files before we remove the stylesheet db tables
            </summary>
            <remarks>
            Instead of modifying the files directly (since we cannot roll them back) we will create temporary migrated files. 
            These files will then be copied over once the entire migration is complete so that if any migration fails and the db changes are
            rolled back, the original files won't be affected.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Services.RepositoryService">
            <summary>
            Base service class
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IService">
            <summary>
            Marker interface for services, which is used to store difference services in a list or dictionary
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeServiceExtensions.GetAvailableCompositeContentTypes(Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.IContentTypeComposition[],System.String[],System.String[])">
            <summary>
            Returns the available composite content types for a given content type
            </summary>
            <param name="allContentTypes"></param>
            <param name="filterContentTypes">
            This is normally an empty list but if additional content type aliases are passed in, any content types containing those aliases will be filtered out
            along with any content types that have matching property types that are included in the filtered content types
            </param>
            <param name="ctService"></param>
            <param name="source"></param>
            <param name="filterPropertyTypes">
            This is normally an empty list but if additional property type aliases are passed in, any content types that have these aliases will be filtered out.
            This is required because in the case of creating/modifying a content type because new property types being added to it are not yet persisted so cannot
            be looked up via the db, they need to be passed in.
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeServiceExtensions.GetDirectOrIndirect(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Get those that we use directly
            </summary>
            <param name="ctype"></param>
            <returns></returns>
        </member>
        <member name="E:Umbraco.Core.Services.DomainService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.DomainService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DomainService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DomainService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IExternalLoginService">
            <summary>
            Used to store the external login info, this can be replaced with your own implementation
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.GetAll(System.Int32)">
            <summary>
            Returns all user logins assigned
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.Find(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Returns all logins matching the login info - generally there should only be one but in some cases 
            there might be more than one depending on if an adminstrator has been editing/removing members
            </summary>
            <param name="login"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.SaveUserLogins(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Identity.UserLoginInfo})">
            <summary>
            Save user logins
            </summary>
            <param name="userId"></param>
            <param name="logins"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IExternalLoginService.DeleteUserLogins(System.Int32)">
            <summary>
            Deletes all user logins - normally used when a member is deleted
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ExternalLoginService.GetAll(System.Int32)">
            <summary>
            Returns all user logins assigned
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ExternalLoginService.Find(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Returns all logins matching the login info - generally there should only be one but in some cases 
            there might be more than one depending on if an adminstrator has been editing/removing members
            </summary>
            <param name="login"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ExternalLoginService.SaveUserLogins(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Identity.UserLoginInfo})">
            <summary>
            Save user logins
            </summary>
            <param name="userId"></param>
            <param name="logins"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ExternalLoginService.DeleteUserLogins(System.Int32)">
            <summary>
            Deletes all user logins - normally used when a member is deleted
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IMigrationEntryService.CreateEntry(System.String,Semver.SemVersion)">
            <summary>
            Creates a migration entry, will throw an exception if it already exists
            </summary>
            <param name="migrationName"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMigrationEntryService.FindEntry(System.String,Semver.SemVersion)">
            <summary>
            Finds a migration by name and version, returns null if not found
            </summary>
            <param name="migrationName"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMigrationEntryService.GetAll(System.String)">
            <summary>
            Gets all entries for a given migration name
            </summary>
            <param name="migrationName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.GetAll">
            <summary>
            Gets all defined entries and associated rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.GetEntryForContent(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the entry defined for the content item's path
            </summary>
            <param name="content"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.GetEntryForContent(System.String)">
            <summary>
            Gets the entry defined for the content item based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.IsProtected(Umbraco.Core.Models.IContent)">
            <summary>
            Returns true if the content has an entry for it's path
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.IsProtected(System.String)">
            <summary>
            Returns true if the content has an entry based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.AddRule(Umbraco.Core.Models.IContent,System.String,System.String)">
            <summary>
            Adds a rule if the entry doesn't already exist
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.RemoveRule(Umbraco.Core.Models.IContent,System.String,System.String)">
            <summary>
            Removes a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.Save(Umbraco.Core.Models.PublicAccessEntry)">
            <summary>
            Saves the entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IPublicAccessService.Delete(Umbraco.Core.Models.PublicAccessEntry)">
            <summary>
            Deletes the entry and all associated rules
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.TouchServer(System.String,System.String,System.TimeSpan)">
            <summary>
            Touches a server to mark it as active; deactivate stale servers.
            </summary>
            <param name="serverAddress">The server url.</param>
            <param name="serverIdentity">The server unique identity.</param>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.DeactiveServer(System.String)">
            <summary>
            Deactivates a server.
            </summary>
            <param name="serverIdentity">The server unique identity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.DeactiveStaleServers(System.TimeSpan)">
            <summary>
            Deactivates stale servers.
            </summary>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.GetActiveServers">
            <summary>
            Return all active servers.
            </summary>
            <returns>All active servers.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IServerRegistrationService.GetCurrentServerRole">
            <summary>
            Gets the role of the current server.
            </summary>
            <returns>The role of the current server.</returns>
        </member>
        <member name="P:Umbraco.Core.Services.IServerRegistrationService.CurrentServerIdentity">
            <summary>
            Gets the current server identity.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ITaskService.Save(Umbraco.Core.Models.Task)">
            <summary>
            Saves a task
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MediaExtensions.GetUrl(Umbraco.Core.Models.IMedia,System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Hack: we need to put this in a real place, this is currently just used to render the urls for a media item in the back office
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.MediaExtensions.GetUrls(Umbraco.Core.Models.IMedia,Umbraco.Core.Configuration.UmbracoSettings.IContentSection,Umbraco.Core.Logging.ILogger)">
            <summary>
            Hack: we need to put this in a real place, this is currently just used to render the urls for a media item in the back office
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.MigrationEntryService">
            <summary>
            Manages migration entries in the database
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MigrationEntryService.CreateEntry(System.String,Semver.SemVersion)">
            <summary>
            Creates a migration entry, will throw an exception if it already exists
            </summary>
            <param name="migrationName"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MigrationEntryService.FindEntry(System.String,Semver.SemVersion)">
            <summary>
            Finds a migration by name and version, returns null if not found
            </summary>
            <param name="migrationName"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MigrationEntryService.GetAll(System.String)">
            <summary>
            Gets all entries for a given migration name
            </summary>
            <param name="migrationName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.MoveOperationStatusType">
            <summary>
            A status type of the result of moving an item
            </summary>
            <remarks>
            Anything less than 10 = Success!
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Services.MoveOperationStatusType.Success">
            <summary>
            The move was successful.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.MoveOperationStatusType.FailedParentNotFound">
            <summary>
            The parent being moved to doesn't exist
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.MoveOperationStatusType.FailedCancelledByEvent">
            <summary>
            The move action has been cancelled by an event handler
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.MoveOperationStatusType.FailedNotAllowedByPath">
            <summary>
            Trying to move an item to an invalid path (i.e. a child of itself)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.GetAll">
            <summary>
            Gets all defined entries and associated rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.GetEntryForContent(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the entry defined for the content item's path
            </summary>
            <param name="content"></param>
            <returns>Returns null if no entry is found</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.GetEntryForContent(System.String)">
            <summary>
            Gets the entry defined for the content item based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns>Returns null if no entry is found</returns>
            <remarks>
            NOTE: This method get's called *very* often! This will return the results from cache
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.IsProtected(Umbraco.Core.Models.IContent)">
            <summary>
            Returns true if the content has an entry for it's path
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.IsProtected(System.String)">
            <summary>
            Returns true if the content has an entry based on a content path
            </summary>
            <param name="contentPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.AddRule(Umbraco.Core.Models.IContent,System.String,System.String)">
            <summary>
            Adds a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.RemoveRule(Umbraco.Core.Models.IContent,System.String,System.String)">
            <summary>
            Removes a rule
            </summary>
            <param name="content"></param>
            <param name="ruleType"></param>
            <param name="ruleValue"></param>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.Save(Umbraco.Core.Models.PublicAccessEntry)">
            <summary>
            Saves the entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Umbraco.Core.Services.PublicAccessService.Delete(Umbraco.Core.Models.PublicAccessEntry)">
            <summary>
            Deletes the entry and all associated rules
            </summary>
            <param name="entry"></param>
        </member>
        <member name="E:Umbraco.Core.Services.PublicAccessService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PublicAccessService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PublicAccessService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.PublicAccessService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.PublicAccessServiceExtensions">
            <summary>
            Extension methods for the IPublicAccessService
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.OperationStatus">
            <summary>
            The default operation status
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.OperationStatusType">
            <summary>
            A status type of the result of saving an item
            </summary>
            <remarks>
            Anything less than 10 = Success!
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Services.OperationStatusType.Success">
            <summary>
            The saving was successful.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.OperationStatusType.FailedCancelledByEvent">
            <summary>
            The saving has been cancelled by a 3rd party add-in
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.OperationStatusType.FailedExceptionThrown">
            <summary>
            Failed, an exception was thrown/handled
            </summary>
        </member>
        <member name="F:Umbraco.Core.Services.OperationStatusType.NoOperation">
            <summary>
            When no operation is executed because it was not needed (i.e. deleting an item that doesn't exist)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.TaskService.Save(Umbraco.Core.Models.Task)">
            <summary>
            Saves a task
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:Umbraco.Core.Models.IFile">
            <summary>
            Defines a File
            </summary>
            <remarks>Used for Scripts, Stylesheets and Templates</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IFile.ResetOriginalPath">
            <summary>
            Called to re-set the OriginalPath to the Path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Name">
            <summary>
            Gets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Alias">
            <summary>
            Gets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Path">
            <summary>
            Gets or sets the Path to the File from the root of the file's associated IFileSystem
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.OriginalPath">
            <summary>
            Gets the original path of the file
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Content">
            <summary>
            Gets or sets the Content of a File
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.VirtualPath">
            <summary>
            Gets or sets the file's virtual path (i.e. the file path relative to the root of the website)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.DatabaseSchemaHelper.CreateDatabaseSchema(Umbraco.Core.ApplicationContext)">
            <summary>
            Creates the Umbraco db schema in the Database of the current Database.
            Safe method that is only able to create the schema in non-configured
            umbraco instances.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.DatabaseSchemaHelper.CreateDatabaseSchema(System.Boolean,Umbraco.Core.ApplicationContext)">
            <summary>
            Creates the Umbraco db schema in the Database of the current Database
            with the option to guard the db from having the schema created
            multiple times.
            </summary>
            <param name="guardConfiguration"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.GridEditor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.GridEditor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.SimpleGetRepository`3">
            <summary>
            Simple abstract ReadOnly repository used to simply have PerformGet and PeformGetAll with an underlying cache
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.ILocalizedTextService">
            <summary>
            The entry point to localize any key in the text storage source for a given culture 
            </summary>
            <remarks>
            This class is created to be as simple as possible so that it can be replaced very easily, 
            all other methods are extension methods that simply call the one underlying method in this class
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.Localize(System.String,System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Localize a key with variables
            </summary>
            <param name="key"></param>
            <param name="culture"></param>
            <param name="tokens">This can be null</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.GetAllStoredValues(System.Globalization.CultureInfo)">
            <summary>
            Returns all key/values in storage for the given culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.GetSupportedCultures">
            <summary>
            Returns a list of all currently supported cultures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.ConvertToSupportedCultureWithRegionCode(System.Globalization.CultureInfo)">
            <summary>
            Tries to resolve a full 4 letter culture from a 2 letter culture name
            </summary>
            <param name="currentCulture">
            The culture to determine if it is only a 2 letter culture, if so we'll try to convert it, otherwise it will just be returned
            </param>
            <returns></returns>
            <remarks>
            TODO: This is just a hack due to the way we store the language files, they should be stored with 4 letters since that 
            is what they reference but they are stored with 2, further more our user's languages are stored with 2. So this attempts
            to resolve the full culture if possible.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizedTextService.ConvertToRegionCodeFromSupportedCulture(System.Globalization.CultureInfo)">
            <summary>
            HAAAAAAAAAAACK! Used for backwards compat to convert a user's real culture code to a region code - normally this would be two letters
            TODO: REmove in v8
            </summary>
            <param name="currentCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextService.#ctor(System.Lazy{Umbraco.Core.Services.LocalizedTextServiceFileSources},Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes with a file sources instance
            </summary>
            <param name="fileSources"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextService.#ctor(System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.Lazy{System.Xml.Linq.XDocument}},Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes with an XML source
            </summary>
            <param name="source"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextService.#ctor(System.Collections.Generic.IDictionary{System.Globalization.CultureInfo,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}}},Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes with a source of a dictionary of culture -> areas -> sub dictionary of keys/values
            </summary>
            <param name="source"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextService.GetAllStoredValues(System.Globalization.CultureInfo)">
            <summary>
            Returns all key/values in storage for the given culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextService.GetSupportedCultures">
            <summary>
            Returns a list of all currently supported cultures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextService.ConvertToSupportedCultureWithRegionCode(System.Globalization.CultureInfo)">
            <summary>
            Tries to resolve a full 4 letter culture from a 2 letter culture name
            </summary>
            <param name="currentCulture">
            The culture to determine if it is only a 2 letter culture, if so we'll try to convert it, otherwise it will just be returned
            </param>
            <returns></returns>
            <remarks>
            TODO: This is just a hack due to the way we store the language files, they should be stored with 4 letters since that 
            is what they reference but they are stored with 2, further more our user's languages are stored with 2. So this attempts
            to resolve the full culture if possible.
            
            This only works when this service is constructed with the LocalizedTextServiceFileSources
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextService.ConvertToRegionCodeFromSupportedCulture(System.Globalization.CultureInfo)">
            <summary>
            HAAAAAAAAAAACK! Used for backwards compat to convert a user's real culture code to a region code - normally this would be two letters
            </summary>
            <param name="currentCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextService.ParseTokens(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Parses the tokens in the value
            </summary>
            <param name="value"></param>
            <param name="tokens"></param>
            <returns></returns>
            <remarks>
            This is based on how the legacy ui localized text worked, each token was just a sequential value delimited with a % symbol. 
            For example: hello %0%, you are %1% !
            
            Since we're going to continue using the same language files for now, the token system needs to remain the same. With our new service
            we support a dictionary which means in the future we can really have any sort of token system. 
            Currently though, the token key's will need to be an integer and sequential - though we aren't going to throw exceptions if that is not the case.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Logging.Logger">
            <summary>
             Used for logging
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.Logger.CreateWithDefaultLog4NetConfiguration">
            <summary>
            Creates a logger with the default log4net configuration discovered (i.e. from the web.config)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Logging.Logger.LoggerFor``1">
            <summary>
             Returns a logger for the type specified
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Logging.Logger.LoggerFor(System.Object)">
            <summary>
            Returns a logger for the object's type
            </summary>
            <param name="getTypeFromInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Logging.Logger.Info(System.Type,System.Func{System.String})">
            <summary>
            Traces if tracing is enabled.
            </summary>
            <param name="callingType"></param>
            <param name="generateMessage"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.Logger.Info(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Traces if tracing is enabled.
            </summary>
            <param name="type">The type for the logging namespace.</param>
            <param name="generateMessageFormat">The message format.</param>
            <param name="formatItems">The format items.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.Logger.Debug(System.Type,System.Func{System.String})">
            <summary>
            Debugs if tracing is enabled.
            </summary>
            <param name="callingType"></param>
            <param name="generateMessage"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.Logger.Debug(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Debugs if tracing is enabled.
            </summary>
            <param name="type">The type for the logging namespace.</param>
            <param name="generateMessageFormat">The message format.</param>
            <param name="formatItems">The format items.</param>
        </member>
        <member name="T:Umbraco.Core.Macros.XsltExtension">
            <summary>
            Encapsulates what an xslt extension object is when used for macros
            </summary>
        </member>
        <member name="T:Umbraco.Core.Macros.XsltExtensionAttribute">
            <summary>
            Allows App_Code XSLT extensions to be declared using the [XsltExtension] class attribute.
            </summary>
            <remarks>
            An optional XML namespace can be specified using [XsltExtension("MyNamespace")].
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Macros.XsltExtensionsResolver">
            <summary>
            Used to resolve all xslt extension plugins
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2">
            <summary>
            The base class for all lazy many-objects resolvers.
            </summary>
            <typeparam name="TResolver">The type of the concrete resolver class.</typeparam>
            <typeparam name="TResolved">The type of the resolved objects.</typeparam>
            <remarks>
            <para>This is a special case resolver for when types get lazily resolved in order to resolve the actual types. This is useful
            for when there is some processing overhead (i.e. Type finding in assemblies) to return the Types used to instantiate the instances. 
            In some these cases we don't want to have to type-find during application startup, only when we need to resolve the instances.</para>
            <para>Important notes about this resolver: it does not support Insert or Remove and therefore does not support any ordering unless 
            the types are marked with the WeightedPluginAttribute.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2">
            <summary>
            The base class for all many-objects resolvers.
            </summary>
            <typeparam name="TResolver">The type of the concrete resolver class.</typeparam>
            <typeparam name="TResolved">The type of the resolved objects.</typeparam>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,Umbraco.Core.ObjectResolution.ObjectLifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an empty list of objects,
            and an optional lifetime scope.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="scope">The lifetime scope of instantiated objects, default is per Application.</param>
            <remarks>If <paramref name="scope"/> is per HttpRequest then there must be a current HttpContext.</remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="scope"/> is per HttpRequest but the current HttpContext is null.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an empty list of objects,
            with creation of objects based on an HttpRequest lifetime scope.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="httpContext">The HttpContextBase corresponding to the HttpRequest.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="httpContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Collections.Generic.IEnumerable{System.Type},Umbraco.Core.ObjectResolution.ObjectLifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an initial list of object types,
            and an optional lifetime scope.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="value">The list of object types.</param>
            <param name="scope">The lifetime scope of instantiated objects, default is per Application.</param>
            <remarks>If <paramref name="scope"/> is per HttpRequest then there must be a current HttpContext.</remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="scope"/> is per HttpRequest but the current HttpContext is null.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.#ctor(System.Web.HttpContextBase,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an initial list of objects,
            with creation of objects based on an HttpRequest lifetime scope.
            </summary>
            <param name="httpContext">The HttpContextBase corresponding to the HttpRequest.</param>
            <param name="value">The list of object types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="httpContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.GetSortedValues">
            <summary>
            Gets the resolved object instances, sorted by weight.
            </summary>
            <returns>The sorted resolved object instances.</returns>
            <remarks>
            <para>The order is based upon the <c>WeightedPluginAttribute</c> and <c>DefaultPluginWeight</c>.</para>
            <para>Weights are sorted ascendingly (lowest weights come first).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.GetObjectWeight(System.Object)">
            <summary>
            Returns the weight of an object for user with GetSortedValues
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.CreateInstances">
            <summary>
            Creates the object instances for the types contained in the types collection.
            </summary>
            <returns>A list of objects of type <typeparamref name="TResolved"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.RemoveType(System.Type)">
            <summary>
            Removes a type.
            </summary>
            <param name="value">The type to remove.</param>
            <exception cref="T:System.InvalidOperationException">the resolver does not support removing types, or 
            the type is not a valid type for the resolver.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.RemoveType``1">
            <summary>
            Removes a type.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
            <exception cref="T:System.InvalidOperationException">the resolver does not support removing types, or 
            the type is not a valid type for the resolver.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.AddTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds types.
            </summary>
            <param name="types">The types to add.</param>
            <remarks>The types are appended at the end of the list.</remarks>
            <exception cref="T:System.InvalidOperationException">the resolver does not support adding types, or 
            a type is not a valid type for the resolver, or a type is already in the collection of types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.AddType(System.Type)">
            <summary>
            Adds a type.
            </summary>
            <param name="value">The type to add.</param>
            <remarks>The type is appended at the end of the list.</remarks>
            <exception cref="T:System.InvalidOperationException">the resolver does not support adding types, or 
            the type is not a valid type for the resolver, or the type is already in the collection of types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.AddType``1">
            <summary>
            Adds a type.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
            <remarks>The type is appended at the end of the list.</remarks>
            <exception cref="T:System.InvalidOperationException">the resolver does not support adding types, or 
            the type is not a valid type for the resolver, or the type is already in the collection of types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.Clear">
            <summary>
            Clears the list of types
            </summary>
            <exception cref="T:System.InvalidOperationException">the resolver does not support clearing types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.ResetCollections">
            <summary>
            WARNING! Do not use this unless you know what you are doing, clear all types registered and instances
            created. Typically only used if a resolver is no longer used in an application and memory is to be GC'd
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InsertType(System.Int32,System.Type)">
            <summary>
            Inserts a type at the specified index.
            </summary>
            <param name="index">The zero-based index at which the type should be inserted.</param>
            <param name="value">The type to insert.</param>
            <exception cref="T:System.InvalidOperationException">the resolver does not support inserting types, or 
            the type is not a valid type for the resolver, or the type is already in the collection of types.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InsertType(System.Type)">
            <summary>
            Inserts a type at the beginning of the list.
            </summary>
            <param name="value">The type to insert.</param>
            <exception cref="T:System.InvalidOperationException">the resolver does not support inserting types, or 
            the type is not a valid type for the resolver, or the type is already in the collection of types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InsertType``1(System.Int32)">
            <summary>
            Inserts a type at the specified index.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="index">The zero-based index at which the type should be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InsertType``1">
            <summary>
            Inserts a type at the beginning of the list.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InsertTypeBefore(System.Type,System.Type)">
            <summary>
            Inserts a type before a specified, already existing type.
            </summary>
            <param name="existingType">The existing type before which to insert.</param>
            <param name="value">The type to insert.</param>
            <exception cref="T:System.InvalidOperationException">the resolver does not support inserting types, or 
            one of the types is not a valid type for the resolver, or the existing type is not in the collection,
            or the new type is already in the collection of types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InsertTypeBefore``2">
            <summary>
            Inserts a type before a specified, already existing type.
            </summary>
            <typeparam name="TExisting">The existing type before which to insert.</typeparam>
            <typeparam name="T">The type to insert.</typeparam>
            <exception cref="T:System.InvalidOperationException">the resolver does not support inserting types, or 
            one of the types is not a valid type for the resolver, or the existing type is not in the collection,
            or the new type is already in the collection of types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.ContainsType(System.Type)">
            <summary>
            Returns a value indicating whether the specified type is already in the collection of types.
            </summary>
            <param name="value">The type to look for.</param>
            <returns>A value indicating whether the type is already in the collection of types.</returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.GetTypes">
            <summary>
            Gets the types in the collection of types.
            </summary>
            <returns>The types in the collection of types.</returns>
            <remarks>Returns an enumeration, the list cannot be modified.</remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.ContainsType``1">
            <summary>
            Returns a value indicating whether the specified type is already in the collection of types.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <returns>A value indicating whether the type is already in the collection of types.</returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.GetWriteLock">
            <summary>
            Returns a WriteLock to use when modifying collections
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureCorrectType(System.Type)">
            <summary>
            Ensures that a type is a valid type for the resolver.
            </summary>
            <param name="value">The type to test.</param>
            <exception cref="T:System.InvalidOperationException">the type is not a valid type for the resolver.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureSupportsRemove">
            <summary>
            Ensures that the resolver supports removing types.
            </summary>
            <exception cref="T:System.InvalidOperationException">The resolver does not support removing types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureSupportsClear">
            <summary>
            Ensures that the resolver supports clearing types.
            </summary>
            <exception cref="T:System.InvalidOperationException">The resolver does not support clearing types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureSupportsAdd">
            <summary>
            Ensures that the resolver supports adding types.
            </summary>
            <exception cref="T:System.InvalidOperationException">The resolver does not support adding types.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureSupportsInsert">
            <summary>
            Ensures that the resolver supports inserting types.
            </summary>
            <exception cref="T:System.InvalidOperationException">The resolver does not support inserting types.</exception>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.CanResolveBeforeFrozen">
            <summary>
            Gets or sets a value indicating whether the resolver can resolve objects before resolution is frozen.
            </summary>
            <remarks>This is false by default and is used for some special internal resolvers.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InstanceTypes">
            <summary>
            Gets the list of types to create instances from.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.CurrentHttpContext">
            <summary>
            Gets or sets the <see cref="T:System.Web.HttpContextBase"/> used to initialize this object, if any.
            </summary>
            <remarks>If not null, then <c>LifetimeScope</c> will be <c>ObjectLifetimeScope.HttpRequest</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.ServiceProvider">
            <summary>
            Returns the service provider used to instantiate objects
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.LifetimeScope">
            <summary>
            Gets or sets the lifetime scope of resolved objects.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.DefaultPluginWeight">
            <summary>
            Gets or sets the default type weight.
            </summary>
            <remarks>Determines the weight of types that do not have a <c>WeightedPluginAttribute</c> set on 
            them, when calling <c>GetSortedValues</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.Values">
            <summary>
            Gets the resolved object instances.
            </summary>
            <exception cref="T:System.InvalidOperationException"><c>CanResolveBeforeFrozen</c> is false, and resolution is not frozen.</exception>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.SupportsAdd">
            <summary>
            Gets a value indicating whether the resolver supports adding types.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.SupportsInsert">
            <summary>
            Gets a value indicating whether the resolver supports inserting types.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.SupportsClear">
            <summary>
            Gets a value indicating whether the resolver supports clearing types.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.SupportsRemove">
            <summary>
            Gets a value indicating whether the resolver supports removing types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,Umbraco.Core.ObjectResolution.ObjectLifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an empty list of objects,
            and an optional lifetime scope.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="scope">The lifetime scope of instantiated objects, default is per Application.</param>
            <remarks>If <paramref name="scope"/> is per HttpRequest then there must be a current HttpContext.</remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="scope"/> is per HttpRequest but the current HttpContext is null.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an empty list of objects,
            with creation of objects based on an HttpRequest lifetime scope.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="httpContext">The HttpContextBase corresponding to the HttpRequest.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="httpContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Collections.Generic.IEnumerable{System.Type},Umbraco.Core.ObjectResolution.ObjectLifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an initial list of object types,
            and an optional lifetime scope.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="value">The list of object types.</param>
            <param name="scope">The lifetime scope of instantiated objects, default is per Application.</param>
            <remarks>If <paramref name="scope"/> is per HttpRequest then there must be a current HttpContext.</remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="scope"/> is per HttpRequest but the current HttpContext is null.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddValidAndNoDuplicate(System.Collections.Generic.List{System.Type},System.Type)">
            <summary>
            Ensures that type is valid and not a duplicate
            then appends the type to the end of the list
            </summary>
            <param name="list"></param>
            <param name="type"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.RemoveType(System.Type)">
            <summary>
            Removes types from the list of types, once it has been lazily evaluated, and before actual objects are instanciated.
            </summary>
            <param name="value">The type to remove.</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddTypes(System.Collections.Generic.IEnumerable{System.Lazy{System.Type}})">
            <summary>
            Lazily adds types from lazy types.
            </summary>
            <param name="types">The lazy types, to add.</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddTypeListDelegate(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Lazily adds types from a function producing types.
            </summary>
            <param name="typeListProducer">The functions producing types, to add.</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddType(System.Lazy{System.Type})">
            <summary>
            Lazily adds a type from a lazy type.
            </summary>
            <param name="value">The lazy type, to add.</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddType(System.Type)">
            <summary>
            Lazily adds a type from an actual type.
            </summary>
            <param name="value">The actual type, to add.</param>
            <remarks>The type is converted to a lazy type.</remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.Clear">
            <summary>
            Clears all lazy types
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.HasResolvedTypes">
            <summary>
            Gets a value indicating whether the resolver has resolved types to create instances from.
            </summary>
            <remarks>To be used in unit tests.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.InstanceTypes">
            <summary>
            Gets the list of types to create instances from.
            </summary>
            <remarks>When called, will get the types from the lazy list.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.SupportsInsert">
            <summary>
            Gets a <c>false</c> value indicating that the resolver does NOT support inserting types.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Macros.XsltExtensionsResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="packageActions"></param>		
        </member>
        <member name="M:Umbraco.Core.Macros.XsltExtensionsResolver.EnsureCorrectType(System.Type)">
            <summary>
            We override this because really there's no limit to the type that can be used here
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Umbraco.Core.Macros.XsltExtensionsResolver.XsltExtensions">
            <summary>
            Returns the list of all xslt extensions
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.ManifestBuilder">
            <summary>
            This reads in the manifests and stores some definitions in memory so we can look them on the server side
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestBuilder.GridEditors">
            <summary>
            Returns all grid editors found in the manfifests
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestBuilder.PropertyEditors">
            <summary>
            Returns all property editors found in the manfifests
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.ManifestBuilder.ParameterEditors">
            <summary>
            Returns all parameter editors found in the manfifests and all property editors that are flagged to be parameter editors
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.ManifestParser">
            <summary>
            Parses the Main.js file and replaces all tokens accordingly.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.GetGridEditors(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Parse the grid editors from the json array
            </summary>
            <param name="jsonEditors"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.GetPropertyEditors(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Parse the property editors from the json array
            </summary>
            <param name="jsonEditors"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.GetParameterEditors(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Parse the property editors from the json array
            </summary>
            <param name="jsonEditors"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.GetManifests">
            <summary>
            Get all registered manifests
            </summary>
            <returns></returns>
            <remarks>
            This ensures that we only build and look for all manifests once per Web app (based on the IRuntimeCache)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.GetAllManifestFileContents(System.IO.DirectoryInfo)">
            <summary>
            Get the file contents from all declared manifest files
            </summary>
            <param name="currDir"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.FolderDepth(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Get the folder depth compared to the base folder
            </summary>
            <param name="baseDir"></param>
            <param name="currDir"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.CreateManifests(System.String[])">
            <summary>
            Creates a list of PropertyEditorManifest from the file contents of each manifest file
            </summary>
            <param name="manifestFileContents"></param>
            <returns></returns>
            <remarks>
            This ensures that comments are removed (but they have to be /* */ style comments
            and ensures that virtual paths are replaced with real ones
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.ReplaceVirtualPaths(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Replaces any virtual paths found in properties
            </summary>
            <param name="jarr"></param>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.ReplaceVirtualPaths(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces any virtual paths found in properties
            </summary>
            <param name="jToken"></param>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.ReplaceVirtualPaths(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Replaces any virtual paths found in properties
            </summary>
            <param name="jObj"></param>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.MergeJObjects(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Merges two json objects together
            </summary>
            <param name="receiver"></param>
            <param name="donor"></param>
            <param name="keepOriginal">set to true if we will keep the receiver value if the proeprty already exists</param>
            <remarks>
            taken from 
            http://stackoverflow.com/questions/4002508/does-c-sharp-have-a-library-for-parsing-multi-level-cascading-json/4002550#4002550
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Manifest.ManifestParser.MergeJArrays(Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Merges the donor array values into the receiver array
            </summary>
            <param name="receiver"></param>
            <param name="donor"></param>
        </member>
        <member name="T:Umbraco.Core.Manifest.ManifestValidatorConverter">
            <summary>
            Used when deserialing the validation collection, any serialized property editors are from a manifest and thus the
            validators are manifest validators.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.PackageManifest">
            <summary>
            Represents a manifest file for packages
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.JavaScriptInitialize">
            <summary>
            The json array used to initialize the application with the JS dependencies required
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.StylesheetInitialize">
            <summary>
            The json array used to initialize the application with the CSS dependencies required
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.PropertyEditors">
            <summary>
            The json array of property editors
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.ParameterEditors">
            <summary>
            The json array of parameter editors
            </summary>
        </member>
        <member name="P:Umbraco.Core.Manifest.PackageManifest.GridEditors">
            <summary>
            The json array of grid editors
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.ParameterEditorConverter">
            <summary>
            Used to convert a parameter editor manifest to a property editor object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.PreValueFieldConverter">
            <summary>
            Used to convert a pre-value field manifest to a real pre value field
            </summary>
        </member>
        <member name="T:Umbraco.Core.Manifest.PropertyEditorConverter">
            <summary>
            Used to convert a property editor manifest to a property editor object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.ImageHelper">
            <summary>
            A helper class used for imaging
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.ImageHelper.GetDimensions(System.IO.Stream)">
            <summary>
            Gets the dimensions of an image based on a stream
            </summary>
            <param name="imageStream"></param>
            <returns></returns>
            <remarks>
            First try with EXIF, this is because it is insanely faster and doesn't use any memory to read exif data than to load in the entire
            image via GDI. Otherwise loading an image into GDI consumes a crazy amount of memory on large images.
            
            Of course EXIF data might not exist in every file and can only exist in JPGs
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Media.ImageHelper.GenerateMediaThumbnails(Umbraco.Core.IO.IFileSystem,System.String,System.String,System.Drawing.Image,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates the thumbnails if the image is larger than all of the specified ones.
            </summary>
            <param name="fs"></param>
            <param name="fileName"></param>
            <param name="extension"></param>
            <param name="originalImage"></param>
            <param name="additionalThumbSizes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Media.ImageHelper.Resize(Umbraco.Core.IO.IFileSystem,System.String,System.String,System.Int32,System.String,System.Drawing.Image)">
            <summary>
            Performs an image resize
            </summary>
            <param name="fileSystem"></param>
            <param name="path"></param>
            <param name="extension"></param>
            <param name="maxWidthHeight"></param>
            <param name="fileNameAddition"></param>
            <param name="originalImage"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Media.MediaSubfolderCounter">
            <summary>
            Internal singleton to handle the numbering of subfolders within the Media-folder.
            When this class is initiated it will look for numbered subfolders and select the highest number,
            which will be the start point for the naming of the next subfolders. If no subfolders exists
            then the starting point will be 1000, ie. /media/1000/koala.jpg
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.MediaSubfolderCounter.Increment">
            <summary>
            Returns an increment of the numbered media subfolders.
            </summary>
            <returns>A <see cref="T:System.Int64"/> value</returns>
        </member>
        <member name="T:Umbraco.Core.ModelMapperHelper">
            <summary>
            Helper class for static model mapping with automapper
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentBase">
            <summary>
            Represents an abstract class for base Content properties and methods
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentBase">
            <summary>
            Defines the base for a Content object with properties that
            are shared between Content and Media.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.HasProperty(System.String)">
            <summary>
            Indicates whether the content object has a property with the supplied alias
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>True if Property with given alias exists, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.GetValue(System.String)">
            <summary>
            Gets the value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns><see cref="T:Umbraco.Core.Models.Property"/> Value as an <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.GetValue``1(System.String)">
            <summary>
            Gets the value of a Property
            </summary>
            <typeparam name="TPassType">Type of the value to return</typeparam>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns><see cref="T:Umbraco.Core.Models.Property"/> Value as a <see cref="!:TPassType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.SetValue(System.String,System.Object)">
            <summary>
            Sets the <see cref="T:System.Object"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.IsValid">
            <summary>
            Boolean indicating whether the content and its properties are valid
            </summary>
            <returns>True if content is valid otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.ChangeTrashedState(System.Boolean,System.Int32)">
            <summary>
            Changes the Trashed state of the content object
            </summary>
            <param name="isTrashed">Boolean indicating whether content is trashed (true) or not trashed (false)</param>
            <param name="parentId"> </param>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.ContentTypeId">
            <summary>
            Integer Id of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.Version">
            <summary>
            Gets the Guid Id of the Content's Version
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.Properties">
            <summary>
            List of properties, which make up all the data available for this Content object
            </summary>
            <remarks>Properties are loaded as part of the Content object graph</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.PropertyGroups">
            <summary>
            List of PropertyGroups available on this Content object
            </summary>
            <remarks>PropertyGroups are kind of lazy loaded as part of the object graph</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.PropertyTypes">
            <summary>
            List of PropertyTypes available on this Content object
            </summary>
            <remarks>PropertyTypes are kind of lazy loaded as part of the object graph</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Protected constructor for ContentBase (Base for Content and Media)
            </summary>
            <param name="name">Localized Name of the entity</param>
            <param name="parentId"></param>
            <param name="contentType"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.#ctor(System.String,Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Protected constructor for ContentBase (Base for Content and Media)
            </summary>
            <param name="name">Localized Name of the entity</param>
            <param name="parent"></param>
            <param name="contentType"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.HasProperty(System.String)">
            <summary>
            Indicates whether the content object has a property with the supplied alias
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>True if Property with given alias exists, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetValue(System.String)">
            <summary>
            Gets the value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns><see cref="T:Umbraco.Core.Models.Property"/> Value as an <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetValue``1(System.String)">
            <summary>
            Gets the value of a Property
            </summary>
            <typeparam name="TPassType">Type of the value to return</typeparam>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns><see cref="T:Umbraco.Core.Models.Property"/> Value as a <see cref="!:TPassType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetValue(System.String,System.Object)">
            <summary>
            Sets the <see cref="T:System.Object"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.String)">
            <summary>
            Sets the <see cref="T:System.String"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Int32)">
            <summary>
            Sets the <see cref="T:System.Int32"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Int64)">
            <summary>
            Sets the <see cref="T:System.Int64"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Decimal)">
            <summary>
            Sets the <see cref="T:System.Decimal"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Double)">
            <summary>
            Sets the <see cref="T:System.Double"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Boolean)">
            <summary>
            Sets the <see cref="T:System.Boolean"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.DateTime)">
            <summary>
            Sets the <see cref="T:System.DateTime"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Web.HttpPostedFile)">
            <summary>
            Sets the <see cref="T:System.Web.HttpPostedFile"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>        
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Web.HttpPostedFileBase)">
            <summary>
            Sets the <see cref="T:System.Web.HttpPostedFileBase"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Web.HttpPostedFileWrapper)">
            <summary>
            Sets the <see cref="T:System.Web.HttpPostedFileWrapper"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetValueOnProperty(System.String,System.Object)">
            <summary>
            Private method to set the value of a property
            </summary>
            <param name="propertyTypeAlias"></param>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsValid">
            <summary>
            Boolean indicating whether the content and its properties are valid
            </summary>
            <returns>True if content is valid otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.ResetDirtyProperties(System.Boolean)">
            <summary>
            We will override this method to ensure that when we reset the dirty properties that we 
            also reset the dirty changes made to the content's Properties (user defined)
            </summary>
            <param name="rememberPreviouslyChangedProperties"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsDirty">
            <summary>
            Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.WasDirty">
            <summary>
            Indicates whether the current entity was dirty.
            </summary>
            <returns>True if entity was dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsEntityDirty">
            <summary>
            Returns true if only the entity properties are dirty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.WasEntityDirty">
            <summary>
            Returns true if only the entity properties were dirty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current <see cref="T:Umbraco.Core.Models.IContent"/> entity is dirty.
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>
            True if any of the class properties are dirty or 
            True if any of the user defined PropertyType properties are dirty based on their alias, 
            otherwise False
            </returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.WasPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current entity was changed and the changes were committed
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>
            True if any of the class properties are dirty or 
            True if any of the user defined PropertyType properties are dirty based on their alias, 
            otherwise False
            </returns>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.ParentId">
            <summary>
            Gets or sets the Id of the Parent entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Name">
            <summary>
            Gets or sets the name of the entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.SortOrder">
            <summary>
            Gets or sets the sort order of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Level">
            <summary>
            Gets or sets the level of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Path">
            <summary>
            Gets or sets the path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.CreatorId">
            <summary>
            Profile of the user who created this Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Trashed">
            <summary>
            Boolean indicating whether this Content is Trashed or not.
            If Content is Trashed it will be located in the Recyclebin.
            </summary>
            <remarks>When content is trashed it should be unpublished</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Version">
            <summary>
            Guid Id of the curent Version
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.ContentTypeId">
            <summary>
            Integer Id of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Properties">
            <summary>
            Collection of properties, which make up all the data available for this Content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Umbraco#Core#Models#EntityBase#IUmbracoEntity#AdditionalData">
            <summary>
            Some entities may expose additional data that other's might not, this custom data will be available in this collection
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.PropertyGroups">
            <summary>
            List of PropertyGroups available on this Content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.PropertyTypes">
            <summary>
            List of PropertyTypes available on this Content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.LastInvalidProperties">
            <summary>
            Returns a collection of the result of the last validation process, this collection contains all invalid properties.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.JustPublished(Umbraco.Core.Models.IContent)">
            <summary>
            Returns true if this entity was just published as part of a recent save operation (i.e. it wasn't previously published)
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <remarks>
            This is helpful for determining if the published event will execute during the saved event for a content item.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.RequiresSaving(Umbraco.Core.Models.IContent)">
            <summary>
            Determines if the item should be persisted at all
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <remarks>
            In one particular case, a content item shouldn't be persisted:
            * The item exists and is published
            * A call to ContentService.Save is made
            * The item has not been modified whatsoever apart from changing it's published status from published to saved
            
            In this case, there is no reason to make any database changes at all
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.RequiresSaving(Umbraco.Core.Models.IContent,Umbraco.Core.Models.PublishedState)">
            <summary>
            Determines if the item should be persisted at all
            </summary>
            <param name="entity"></param>
            <param name="publishedState"></param>
            <returns></returns>
            <remarks>
            In one particular case, a content item shouldn't be persisted:
            * The item exists and is published
            * A call to ContentService.Save is made
            * The item has not been modified whatsoever apart from changing it's published status from published to saved
            
            In this case, there is no reason to make any database changes at all
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ShouldCreateNewVersion(Umbraco.Core.Models.IContent)">
            <summary>
            Determines if a new version should be created
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <remarks>
            A new version needs to be created when:
            * The publish status is changed
            * The language is changed
            * The item is already published and is being published again and any property value is changed (to enable a rollback)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetDirtyUserProperties(Umbraco.Core.Models.IContentBase)">
            <summary>
            Returns a list of all dirty user defined properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ShouldCreateNewVersion(Umbraco.Core.Models.IContent,Umbraco.Core.Models.PublishedState)">
            <summary>
            Determines if a new version should be created
            </summary>
            <param name="entity"></param>
            <param name="publishedState"></param>
            <returns></returns>
            <remarks>
            A new version needs to be created when:
            * The publish status is changed
            * The language is changed
            * The item is already published and is being published again and any property value is changed (to enable a rollback)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ShouldClearPublishedFlagForPreviousVersions(Umbraco.Core.Models.IContent)">
            <summary>
            Determines if the published db flag should be set to true for the current entity version and all other db
            versions should have their flag set to false.
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <remarks>
            This is determined by:
            * If a new version is being created and the entity is published
            * If the published state has changed and the entity is published OR the entity has been un-published.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ShouldClearPublishedFlagForPreviousVersions(Umbraco.Core.Models.IContent,Umbraco.Core.Models.PublishedState,System.Boolean)">
            <summary>
            Determines if the published db flag should be set to true for the current entity version and all other db
            versions should have their flag set to false.
            </summary>
            <param name="entity"></param>
            <param name="publishedState"></param>
            <param name="isCreatingNewVersion"></param>
            <returns></returns>
            <remarks>
            This is determined by:
            * If a new version is being created and the entity is published
            * If the published state has changed and the entity is published OR the entity has been un-published.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Ancestors(Umbraco.Core.Models.IContent)">
            <summary>
            Returns a list of the current contents ancestors, not including the content itself.
            </summary>
            <param name="content">Current content</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Children(Umbraco.Core.Models.IContent)">
            <summary>
            Returns a list of the current contents children.
            </summary>
            <param name="content">Current content</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Descendants(Umbraco.Core.Models.IContent)">
            <summary>
            Returns a list of the current contents descendants, not including the content itself.
            </summary>
            <param name="content">Current content</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Parent(Umbraco.Core.Models.IContent)">
            <summary>
            Returns the parent of the current content.
            </summary>
            <param name="content">Current content</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Ancestors(Umbraco.Core.Models.IMedia)">
            <summary>
            Returns a list of the current medias ancestors, not including the media itself.
            </summary>
            <param name="media">Current media</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Children(Umbraco.Core.Models.IMedia)">
            <summary>
            Returns a list of the current medias children.
            </summary>
            <param name="media">Current media</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Descendants(Umbraco.Core.Models.IMedia)">
            <summary>
            Returns a list of the current medias descendants, not including the media itself.
            </summary>
            <param name="media">Current media</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Parent(Umbraco.Core.Models.IMedia)">
            <summary>
            Returns the parent of the current media.
            </summary>
            <param name="media">Current media</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SanitizeEntityPropertiesForXmlStorage(Umbraco.Core.Models.IContentBase)">
            <summary>
            Removes characters that are not valide XML characters from all entity properties 
            of type string. See: http://stackoverflow.com/a/961504/5018
            </summary>
            <returns></returns>
            <remarks>
            If this is not done then the xml cache can get corrupt and it will throw YSODs upon reading it.
            </remarks>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.HasChildren(Umbraco.Core.Models.IContentBase,Umbraco.Core.Services.ServiceContext)">
            <summary>
            Checks if the IContentBase has children
            </summary>
            <param name="content"></param>
            <param name="services"></param>
            <returns></returns>
            <remarks>
            This is a bit of a hack because we need to type check!
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.Children(Umbraco.Core.Models.IContentBase,Umbraco.Core.Services.ServiceContext)">
            <summary>
            Returns the children for the content base item
            </summary>
            <param name="content"></param>
            <param name="services"></param>
            <returns></returns>
            <remarks>
            This is a bit of a hack because we need to type check!
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetNonGroupedProperties(Umbraco.Core.Models.IContentBase)">
            <summary>
            Returns properties that do not belong to a group
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetPropertiesForGroup(Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.PropertyGroup)">
            <summary>
            Returns the Property object for the given property group
            </summary>
            <param name="content"></param>
            <param name="propertyGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.PropertyValues(Umbraco.Core.Models.IContent,System.Object)">
            <summary>
            Set property values by alias with an annonymous object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,System.String,System.Web.HttpPostedFileBase)">
            <summary>
            Sets and uploads the file from a HttpPostedFileBase object as the property value
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/> to add property value to</param>
            <param name="propertyTypeAlias">Alias of the property to save the value on</param>
            <param name="value">The <see cref="T:System.Web.HttpPostedFileBase"/> containing the file that will be uploaded</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,System.String,System.Web.HttpPostedFile)">
            <summary>
            Sets and uploads the file from a HttpPostedFile object as the property value
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/> to add property value to</param>
            <param name="propertyTypeAlias">Alias of the property to save the value on</param>
            <param name="value">The <see cref="T:System.Web.HttpPostedFile"/> containing the file that will be uploaded</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,System.String,System.Web.HttpPostedFileWrapper)">
            <summary>
            Sets and uploads the file from a HttpPostedFileWrapper object as the property value
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/> to add property value to</param>
            <param name="propertyTypeAlias">Alias of the property to save the value on</param>
            <param name="value">The <see cref="T:System.Web.HttpPostedFileWrapper"/> containing the file that will be uploaded</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,System.String,System.String,System.IO.Stream)">
            <summary>
            Sets and uploads the file from a <see cref="T:System.IO.Stream"/> as the property value
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/> to add property value to</param>
            <param name="propertyTypeAlias">Alias of the property to save the value on</param>
            <param name="fileName">Name of the file</param>
            <param name="fileStream"><see cref="T:System.IO.Stream"/> to save to disk</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetCreatorProfile(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Creator of this media item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetCreatorProfile(Umbraco.Core.Models.IMedia,Umbraco.Core.Services.IUserService)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Creator of this media item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetCreatorProfile(Umbraco.Core.Models.IContentBase)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Creator of this content item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetCreatorProfile(Umbraco.Core.Models.IContentBase,Umbraco.Core.Services.IUserService)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Creator of this content item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetWriterProfile(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Writer of this content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetWriterProfile(Umbraco.Core.Models.IContent,Umbraco.Core.Services.IUserService)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Writer of this content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.HasPublishedVersion(Umbraco.Core.Models.IContent)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any published versions
            </summary>
            <param name="content"></param>
            <returns>True if the content has any published versiom otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetTags(Umbraco.Core.Models.IContentBase,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
            Sets tags for the property - will add tags to the tags table and set the property value to be the comma delimited value of the tags.
            </summary>
            <param name="content">The content item to assign the tags to</param>
            <param name="propertyTypeAlias">The property alias to assign the tags to</param>
            <param name="tags">The tags to assign</param>
            <param name="replaceTags">True to replace the tags on the current property with the tags specified or false to merge them with the currently assigned ones</param>
            <param name="tagGroup">The group/category to assign the tags, the default value is "default"</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetTags(Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.TagCacheStorageType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
            Sets tags for the property - will add tags to the tags table and set the property value to be the comma delimited value of the tags.
            </summary>
            <param name="content">The content item to assign the tags to</param>
            <param name="storageType">The tag storage type in cache (default is csv)</param>
            <param name="propertyTypeAlias">The property alias to assign the tags to</param>
            <param name="tags">The tags to assign</param>
            <param name="replaceTags">True to replace the tags on the current property with the tags specified or false to merge them with the currently assigned ones</param>
            <param name="tagGroup">The group/category to assign the tags, the default value is "default"</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.RemoveTags(Umbraco.Core.Models.IContentBase,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Remove any of the tags specified in the collection from the property if they are currently assigned.
            </summary>
            <param name="content"></param>
            <param name="propertyTypeAlias"></param>
            <param name="tags"></param>
            <param name="tagGroup">The group/category that the tags are currently assigned to, the default value is "default"</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToDeepXml(Umbraco.Core.Models.IContent,Umbraco.Core.Services.IPackagingService)">
            <summary>
            Creates the full xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object and all of it's descendants
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="packagingService"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IContent)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IContent,Umbraco.Core.Services.IPackagingService)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="packagingService"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IMedia)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IMedia,Umbraco.Core.Services.IPackagingService)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="packagingService"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToDeepXml(Umbraco.Core.Models.IMedia,Umbraco.Core.Services.IPackagingService)">
            <summary>
            Creates the full xml representation for the <see cref="T:Umbraco.Core.Models.IMedia"/> object and all of it's descendants
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to generate xml for</param>
            <param name="packagingService"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IContent,System.Boolean)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="isPreview">Boolean indicating whether the xml should be generated for preview</param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IContent,Umbraco.Core.Services.IPackagingService,System.Boolean)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="packagingService"></param>
            <param name="isPreview">Boolean indicating whether the xml should be generated for preview</param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IMember)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IMember"/> object
            </summary>
            <param name="member"><see cref="T:Umbraco.Core.Models.IMember"/> to generate xml for</param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IMember,Umbraco.Core.Services.IPackagingService)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IMember"/> object
            </summary>
            <param name="member"><see cref="T:Umbraco.Core.Models.IMember"/> to generate xml for</param>
            <param name="packagingService"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="T:Umbraco.Core.Enum`1">
            <summary>
            A very useful class for parsing, enumerating and querying Enum objects
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Taken from http://damieng.com/blog/2010/10/17/enums-better-syntax-improved-performance-and-tryparse-in-net-3-5
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Name">
            <summary>
            Name of the faulting macro. 
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Alias">
            <summary>
            Alias of the faulting macro. 
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.ItemKey">
            <summary>
            Filename, file path, fully qualified class name, or other key used by the macro engine to do it's processing of the faulting macro.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Exception">
            <summary>
            Exception raised.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Behaviour">
            <summary>
            Gets or sets the desired behaviour when a matching macro causes an error. See
            <see cref="T:Umbraco.Core.MacroErrorBehaviour"/> for definitions. By setting this in your event
            you can override the default behaviour defined in UmbracoSettings.config.
            </summary>
            <value>Macro error behaviour enum.</value>
        </member>
        <member name="T:Umbraco.Core.HashCodeCombiner">
            <summary>
            Used to create a hash code from multiple objects.
            </summary>
            <remarks>
            .Net has a class the same as this: System.Web.Util.HashCodeCombiner and of course it works for all sorts of things
            which we've not included here as we just need a quick easy class for this in order to create a unique
            hash of directories/files to see if they have changed.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.HashCodeCombiner.GetCombinedHashCode">
            <summary>
            Returns the hex code of the combined hash code
            </summary>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Core.IconPickerBehaviour.ShowDuplicates">
            <summary>
            Default umbraco behavior - show duplicates in files and sprites
            </summary>
        </member>
        <member name="F:Umbraco.Core.IconPickerBehaviour.HideSpriteDuplicates">
            <summary>
            If a file exists on disk with the same name as one in the sprite
            then the file on disk overrules the one in the sprite, the 
            sprite icon will not be shown
            </summary>
        </member>
        <member name="F:Umbraco.Core.IconPickerBehaviour.HideFileDuplicates">
            <summary>
            If a file exists on disk with the same name as one in the sprite
            then the file in the sprite overrules the one on disk, the file
            on disk will be shown
            </summary>
        </member>
        <member name="T:Umbraco.Core.IO.FileSystemWrapper">
            <summary>
            All custom file systems that are based upon another IFileSystem should inherit from FileSystemWrapper
            </summary>
            <remarks>
            An IFileSystem is generally used as a base file system, for example like a PhysicalFileSystem or an S3FileSystem.
            Then, other custom file systems are wrapped upon these files systems like MediaFileSystem, etc... All of the custom
            file systems must inherit from FileSystemWrapper.
            
            This abstract class just wraps the 'real' IFileSystem object passed in to its constructor.
            </remarks>
        </member>
        <member name="F:Umbraco.Core.MacroErrorBehaviour.Inline">
            <summary>
            Default umbraco behavior - show an inline error within the
            macro but allow the page to continue rendering.
            </summary>
        </member>
        <member name="F:Umbraco.Core.MacroErrorBehaviour.Silent">
            <summary>
            Silently eat the error and do not display the offending macro.
            </summary>
        </member>
        <member name="F:Umbraco.Core.MacroErrorBehaviour.Throw">
            <summary>
            Throw an exception which can be caught by the global error handler
            defined in Application_OnError. If no such error handler is defined
            then you'll see the Yellow Screen Of Death (YSOD) error page.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentPreviewEntity`1">
            <summary>
            Used content repository in order to add an entity to the persisted collection to be saved
            in a single transaction during saving an entity
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentXmlEntity`1">
            <summary>
            Used in content/media/member repositories in order to add this type of entity to the persisted collection to be saved
            in a single transaction during saving an entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentXmlEntity`1.HasIdentity">
            <summary>
            Special case, always return false, this will cause the repositories managing 
            this object to always do an 'insert' but these are special repositories that 
            do an InsertOrUpdate on insert since the data for this needs to be managed this way
            </summary>        
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeBase">
            <summary>
            Represents an abstract class for base ContentType properties and methods
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentTypeBase">
            <summary>
            Defines the base for a ContentType with properties that
            are shared between ContentTypes and MediaTypes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.RemovePropertyType(System.String)">
            <summary>
            Removes a PropertyType from the current ContentType
            </summary>
            <param name="propertyTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.PropertyType"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.RemovePropertyGroup(System.String)">
            <summary>
            Removes a PropertyGroup from the current ContentType
            </summary>
            <param name="propertyGroupName">Name of the <see cref="T:Umbraco.Core.Models.PropertyGroup"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.SetLazyParentId(System.Lazy{System.Int32})">
            <summary>
            Sets the ParentId from the lazy integer id
            </summary>
            <param name="id">Id of the Parent</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType)">
            <summary>
            Adds a PropertyType, which does not belong to a PropertyGroup.
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            This method will also check if a group already exists with the same name and link it to the parent.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.MovePropertyType(System.String,System.String)">
            <summary>
            Moves a PropertyType to a specified PropertyGroup
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to move</param>
            <param name="propertyGroupName">Name of the PropertyGroup to move the PropertyType to</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Alias">
            <summary>
            Gets or Sets the Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Description">
            <summary>
            Gets or Sets the Description for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Icon">
            <summary>
            Gets or Sets the Icon for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Thumbnail">
            <summary>
            Gets or Sets the Thumbnail for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.AllowedAsRoot">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is allowed at the root
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.IsContainer">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is a Container
            </summary>
            <remarks>
            ContentType Containers doesn't show children in the tree, but rather in grid-type view.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.AllowedContentTypes">
            <summary>
            Gets or Sets a list of integer Ids of the ContentTypes allowed under the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.PropertyGroups">
            <summary>
            Gets or Sets a collection of Property Groups
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.PropertyTypes">
            <summary>
            Gets all property types, across all property groups.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.NoGroupPropertyTypes">
            <summary>
            Gets or sets the property types that are not in a group.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            This method will also check if a group already exists with the same name and link it to the parent.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType)">
            <summary>
            Adds a PropertyType, which does not belong to a PropertyGroup.
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.MovePropertyType(System.String,System.String)">
            <summary>
            Moves a PropertyType to a specified PropertyGroup
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to move</param>
            <param name="propertyGroupName">Name of the PropertyGroup to move the PropertyType to</param>
            <returns></returns>
            <remarks>If <paramref name="propertyGroupName"/> is null then the property is moved back to 
            "generic properties" ie does not have a tab anymore.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.RemovePropertyType(System.String)">
            <summary>
            Removes a PropertyType from the current ContentType
            </summary>
            <param name="propertyTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.PropertyType"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.RemovePropertyGroup(System.String)">
            <summary>
            Removes a PropertyGroup from the current ContentType
            </summary>
            <param name="propertyGroupName">Name of the <see cref="T:Umbraco.Core.Models.PropertyGroup"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.SetLazyParentId(System.Lazy{System.Int32})">
            <summary>
            Sets the ParentId from the lazy integer id
            </summary>
            <param name="id">Id of the Parent</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.IsPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current <see cref="T:Umbraco.Core.Models.IContent"/> entity is dirty.
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>True if Property is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.IsDirty">
            <summary>
            Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.ResetDirtyProperties">
            <summary>
            Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
            <remarks>
            Please note that resetting the dirty properties could potentially
            obstruct the saving of a new or updated entity.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.ParentId">
            <summary>
            Gets or sets the Id of the Parent entity
            </summary>
            <remarks>Might not be necessary if handled as a relation?</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Name">
            <summary>
            Gets or sets the name of the current entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Level">
            <summary>
            Gets or sets the level of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Path">
            <summary>
            Gets of sets the path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Alias">
            <summary>
            The Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Description">
            <summary>
            Description for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.SortOrder">
            <summary>
            Gets or sets the sort order of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Icon">
            <summary>
            Name of the icon (sprite class) used to identify the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Thumbnail">
            <summary>
            Name of the thumbnail used to identify the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.CreatorId">
            <summary>
            Gets or sets the Id of the user who created this ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.AllowedAsRoot">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is allowed at the root
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.IsContainer">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is a Container
            </summary>
            <remarks>
            ContentType Containers doesn't show children in the tree, but rather in grid-type view.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Trashed">
            <summary>
            Boolean indicating whether this ContentType is Trashed or not.
            If ContentType is Trashed it will be located in the Recyclebin.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Umbraco#Core#Models#EntityBase#IUmbracoEntity#AdditionalData">
            <summary>
            Some entities may expose additional data that other's might not, this custom data will be available in this collection
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.AllowedContentTypes">
            <summary>
            Gets or sets a list of integer Ids for allowed ContentTypes
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.PropertyGroups">
            <summary>
            List of PropertyGroups available on this ContentType
            </summary>
            <remarks>
            A PropertyGroup corresponds to a Tab in the UI
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.PropertyTypes">
            <summary>
            Gets all property types, across all property groups.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.NoGroupPropertyTypes">
            <summary>
            Gets or sets the property types that are not in a group.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.HasPropertyTypeBeenRemoved">
            <summary>
            A boolean flag indicating if a property type has been removed from this instance.
            </summary>
            <remarks>
            This is currently (specifically) used in order to know that we need to refresh the content cache which 
            needs to occur when a property has been removed from a content type
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.PropertyTypeCollection">
            <summary>
            PropertyTypes that are not part of a PropertyGroup
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeCompositionBase">
            <summary>
            Represents an abstract class for composition specific ContentType properties and methods
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentTypeComposition">
            <summary>
            Defines the Composition of a ContentType
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.AddContentType(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Adds a new ContentType to the list of composite ContentTypes
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to add</param>
            <returns>True if ContentType was added, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.RemoveContentType(System.String)">
            <summary>
            Removes a ContentType with the supplied alias from the the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if ContentType was removed, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.ContentTypeCompositionExists(System.String)">
            <summary>
            Checks if a ContentType with the supplied alias exists in the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if ContentType with alias exists, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.CompositionAliases">
            <summary>
            Gets a list of ContentType aliases from the current composition 
            </summary>
            <returns>An enumerable list of string aliases</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.CompositionIds">
            <summary>
            Gets a list of ContentType Ids from the current composition 
            </summary>
            <returns>An enumerable list of integer ids</returns>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.ContentTypeComposition">
            <summary>
            Gets or sets the content types that compose this content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.CompositionPropertyGroups">
            <summary>
            Gets the property groups for the entire composition.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.CompositionPropertyTypes">
            <summary>
            Gets the property types for the entire composition.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddContentType(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Adds a content type to the composition.
            </summary>
            <param name="contentType">The content type to add.</param>
            <returns>True if the content type was added, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.RemoveContentType(System.String)">
            <summary>
            Removes a content type with a specified alias from the composition.
            </summary>
            <param name="alias">The alias of the content type to remove.</param>
            <returns>True if the content type was removed, otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.ContentTypeCompositionExists(System.String)">
            <summary>
            Checks if a ContentType with the supplied alias exists in the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.ContentType"/></param>
            <returns>True if ContentType with alias exists, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionAliases">
            <summary>
            Gets a list of ContentType aliases from the current composition 
            </summary>
            <returns>An enumerable list of string aliases</returns>
            <remarks>Does not contain the alias of the Current ContentType</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionIds">
            <summary>
            Gets a list of ContentType Ids from the current composition 
            </summary>
            <returns>An enumerable list of integer ids</returns>
            <remarks>Does not contain the Id of the Current ContentType</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.ContentTypeComposition">
            <summary>
            Gets or sets the content types that compose this content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionPropertyGroups">
            <summary>
            Gets the property groups for the entire composition.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionPropertyTypes">
            <summary>
            Gets the property types for the entire composition.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeExtensions.Descendants(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Get all descendant content types
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeExtensions.DescendantsAndSelf(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Get all descendant and self content types
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeSort">
            <summary>
            Represents a POCO for setting sort order on a ContentType reference
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.IValueObject">
            <summary>
            Marker interface for value object, eg. objects without
            the same kind of identity as an Entity (with its Id).
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeSort.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.Id">
            <summary>
            Gets or sets the Id of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.SortOrder">
            <summary>
            Gets or sets the Sort Order of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.Alias">
            <summary>
            Gets or sets the Alias of the ContentType
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.DeepCloneHelper.PropCache">
            <summary>
            Used to avoid constant reflection (perf)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.DeepCloneHelper.DeepCloneRefProperties(Umbraco.Core.Models.IDeepCloneable,Umbraco.Core.Models.IDeepCloneable)">
            <summary>
            Used to deep clone any reference properties on the object (should be done after a MemberwiseClone for which the outcome is 'output')
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>        
        </member>
        <member name="T:Umbraco.Core.Models.DeepCloneHelper.ClonePropertyInfo">
            <summary>
            Stores the metadata for the properties for a given type so we know how to create them
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityExtensions.IsNewEntity(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Returns true if this entity has just been created and persisted to the data store
            </summary>
            <param name="entity"></param>
            <returns></returns>
            <remarks>
            This is useful when handling events to determine if an entity is a brand new entity or was
            already existing.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.IMemberGroup">
            <summary>
            Represents a member type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMemberGroup.Name">
            <summary>
            The name of the member group
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMemberGroup.CreatorId">
            <summary>
            Profile of the user who created this Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMemberGroup.AdditionalData">
            <summary>
            Some entities may expose additional data that other's might not, this custom data will be available in this collection
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IPublishedProperty">
            <summary>
            Represents a property of an <c>IPublishedContent</c>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedProperty.PropertyTypeAlias">
            <summary>
            Gets the alias of the property.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedProperty.HasValue">
            <summary>
            Gets a value indicating whether the property has a value.
            </summary>
            <remarks>
            <para>This is somewhat implementation-dependent -- depending on whatever IPublishedCache considers
            a missing value.</para>
            <para>The XmlPublishedCache raw values are strings, and it will consider missing, null or empty (and
            that includes whitespace-only) strings as "no value".</para>
            <para>Other caches that get their raw value from the database would consider that a property has "no
            value" if it is missing, null, or an empty string (including whitespace-only).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedProperty.DataValue">
            <summary>
            Gets the data value of the property.
            </summary>
            <remarks>
            <para>The data value is whatever was passed to the property when it was instanciated, and it is
            somewhat implementation-dependent -- depending on how the IPublishedCache is implemented.</para>
            <para>The XmlPublishedCache raw values are strings exclusively since they come from the Xml cache.</para>
            <para>For other caches that get their raw value from the database, it would be either a string,
            an integer (Int32), or a date and time (DateTime).</para>
            <para>If you're using that value, you're probably wrong, unless you're doing some internal
            Umbraco stuff.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedProperty.Value">
            <summary>
            Gets the object value of the property.
            </summary>
            <remarks>
            <para>The value is what you want to use when rendering content in an MVC view ie in C#.</para>
            <para>It can be null, or any type of CLR object.</para>
            <para>It has been fully prepared and processed by the appropriate converter.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedProperty.XPathValue">
            <summary>
            Gets the XPath value of the property.
            </summary>
            <remarks>
            <para>The XPath value is what you want to use when navigating content via XPath eg in the XSLT engine.</para>
            <para>It must be either null, or a string, or an XPathNavigator.</para>
            <para>It has been fully prepared and processed by the appropriate converter.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.ParentId">
            <summary>
            Gets or sets the Parent Id of the Relation (Source)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.ChildId">
            <summary>
            Gets or sets the Child Id of the Relation (Destination)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.RelationType">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.IRelation.RelationType"/> for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.Comment">
            <summary>
            Gets or sets a comment for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelation.RelationTypeId">
            <summary>
            Gets the Id of the <see cref="P:Umbraco.Core.Models.IRelation.RelationType"/> that this Relation is based on.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.Name">
            <summary>
            Gets or sets the Name of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.Alias">
            <summary>
            Gets or sets the Alias of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.IsBidirectional">
            <summary>
            Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.ParentObjectType">
            <summary>
            Gets or sets the Parents object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IRelationType.ChildObjectType">
            <summary>
            Gets or sets the Childs object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Models.Membership.EntityPermissionSet" -->
        <member name="P:Umbraco.Core.Models.Membership.EntityPermissionSet.EntityId">
            <summary>
            The entity id with permissions assigned
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Umbraco.Core.Models.Membership.EntityPermissionSet.UserPermissionsSet" -->
        <member name="T:Umbraco.Core.Models.Membership.MembershipScenario">
            <summary>
            How membership is implemented in the current install.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.Membership.MembershipScenario.NativeUmbraco">
            <summary>
            The member is based on the native Umbraco members (IMember + Umbraco membership provider)
            </summary>
            <remarks>
            This supports custom member properties
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Models.Membership.MembershipScenario.CustomProviderWithUmbracoLink">
            <summary>
            The member is based on a custom member provider but it is linked to an IMember
            </summary>
            <remarks>
            This supports custom member properties (but that is not enabled yet)
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Models.Membership.MembershipScenario.StandaloneCustomProvider">
            <summary>
            The member is based purely on a custom member provider and is not linked to umbraco data
            </summary>
            <remarks>
            This does not support custom member properties.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.MemberGroup">
            <summary>
            Represents a member type
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MemberTypePropertyProfileAccess">
            <summary>
            Used to track the property types that are visible/editable on member profiles
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyBase">
            <summary>
            Provides a base class for <c>IPublishedProperty</c> implementations which converts and caches
            the value source to the actual value to use when rendering content.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactory">
            <summary>
            Implements a strongly typed content model factory
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.IPublishedContentModelFactory">
            <summary>
            Provides the model creation service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.IPublishedContentModelFactory.CreateModel(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Creates a strongly-typed model representing a published content.
            </summary>
            <param name="content">The original published content.</param>
            <returns>The strongly-typed model representing the published content, or the published content
            itself it the factory has no model for that content type.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactory"/> class with types.
            </summary>
            <param name="types">The model types.</param>
            <remarks>
            <para>Types must implement <c>IPublishedContent</c> and have a unique constructor that
            accepts one IPublishedContent as a parameter.</para>
            <para>To activate,</para>
            <code>
            var types = PluginManager.Current.ResolveTypes{PublishedContentModel}();
            var factory = new PublishedContentModelFactoryImpl(types);
            PublishedContentModelFactoryResolver.Current.SetFactory(factory);
            </code>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactoryResolver">
            <summary>
            Resolves the IPublishedContentModelFactory object.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactoryResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactoryResolver"/>.
            </summary>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactoryResolver.#ctor(Umbraco.Core.Models.PublishedContent.IPublishedContentModelFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactoryResolver"/> with a factory.
            </summary>
            <param name="factory">The factory.</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactoryResolver.SetFactory(Umbraco.Core.Models.PublishedContent.IPublishedContentModelFactory)">
            <summary>
            Sets the factory.
            </summary>
            <param name="factory">The factory.</param>
            <remarks>For developers, at application startup.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentModelFactoryResolver.Factory">
            <summary>
            Gets the factory.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PartialView">
            <summary>
            Represents a Partial View file
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.File">
            <summary>
            Represents an abstract file which provides basic functionality for a File with an Alias and Name
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.File.ResetOriginalPath">
            <summary>
            Called to re-set the OriginalPath to the Path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Name">
            <summary>
            Gets or sets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Alias">
            <summary>
            Gets or sets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Path">
            <summary>
            Gets or sets the Path to the File from the root of the file's associated IFileSystem
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.OriginalPath">
            <summary>
            Gets the original path of the file
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Content">
            <summary>
            Gets or sets the Content of a File
            </summary>
            <remarks>Marked as DoNotClone, because it should be lazy-reloaded from disk.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.File.VirtualPath">
            <summary>
            Gets or sets the file's virtual path (i.e. the file path relative to the root of the website)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TaggableObjectTypes">
            <summary>
            Enum representing the taggable object types
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TaggedEntity">
            <summary>
            Represents a tagged entity.
            </summary>
            <remarks>Note that it is the properties of an entity (like Content, Media, Members, etc.) that is tagged, 
            which is why this class is composed of a list of tagged properties and an Id reference to the actual entity.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedEntity.EntityId">
            <summary>
            Id of the entity, which is tagged
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedEntity.TaggedProperties">
            <summary>
            An enumerable list of tagged properties
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TaggedProperty">
            <summary>
            Represents a tagged property on an entity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedProperty.PropertyTypeId">
            <summary>
            Id of the PropertyType, which this tagged property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedProperty.PropertyTypeAlias">
            <summary>
            Alias of the PropertyType, which this tagged property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaggedProperty.Tags">
            <summary>
            An enumerable list of Tags for the property
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TemplateNode">
            <summary>
            Represents a template in a template tree
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TemplateNode.Template">
            <summary>
            The current template
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TemplateNode.Children">
            <summary>
            The children of the current template
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TemplateNode.Parent">
            <summary>
            The parent template to the current template
            </summary>
            <remarks>
            Will be null if there is no parent
            </remarks>
        </member>
        <member name="T:Umbraco.Core.MonitorLock">
            <summary>
            Provides an equivalent to the c# lock statement, to be used in a using block.
            </summary>
            <remarks>Ie replace <c>lock (o) {...}</c> by <c>using (new MonitorLock(o)) { ... }</c></remarks>
        </member>
        <member name="M:Umbraco.Core.MonitorLock.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.MonitorLock"/> class with an object to lock.
            </summary>
            <param name="locker">The object to lock.</param>
            <remarks>Should always be used within a using block.</remarks>
        </member>
        <member name="T:Umbraco.Core.Packaging.IPackageExtraction">
            <summary>
            Used to access an umbraco package file
            Remeber that filenames must be unique
            use "FindDubletFileNames" for sanitycheck
            </summary>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageExtraction.ReadTextFileFromArchive(System.String,System.String,System.String@)">
            <summary>
            Returns the content of the file with the given filename
            </summary>
            <param name="packageFilePath">Full path to the umbraco package file</param>
            <param name="fileToRead">filename of the file for wich to get the text content</param>
            <param name="directoryInPackage">this is the relative directory for the location of the file in the package
            I dont know why umbraco packages contains directories in the first place??</param>
            <returns>text content of the file</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageExtraction.CopyFileFromArchive(System.String,System.String,System.String)">
            <summary>
            Copies a file from package to given destination
            </summary>
            <param name="packageFilePath">Full path to the ubraco package file</param>
            <param name="fileInPackageName">filename of the file to copy</param>
            <param name="destinationfilePath">destination path (including destination filename)</param>
            <returns>True a file was overwritten</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageExtraction.CopyFilesFromArchive(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Copies a file from package to given destination
            </summary>
            <param name="packageFilePath">Full path to the ubraco package file</param>
            <param name="sourceDestination">Key: Source file in package. Value: Destination path inclusive file name</param>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageExtraction.FindMissingFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Check if given list of files can be found in the package
            </summary>
            <param name="packageFilePath">Full path to the umbraco package file</param>
            <param name="expectedFiles">a list of files you would like to find in the package</param>
            <returns>a subset if any of the files in "expectedFiles" that could not be found in the package</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageExtraction.FindDubletFileNames(System.String)">
            <summary>
            Sanitycheck - should return en empty collection if package is valid
            </summary>
            <param name="packageFilePath">Full path to the umbraco package file</param>
            <returns>list of files that are found more than ones (accross directories) in the package</returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.IPackageExtraction.ReadFilesFromArchive(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads the given files from archive and returns them as a collection of byte arrays
            </summary>
            <param name="packageFilePath"></param>
            <param name="filesToGet"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageInstallation.PackageSupportedCheck(System.Xml.Linq.XElement)">
            <summary>
            Temperary check to test that we support stylesheets
            </summary>
            <param name="rootElement"></param>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageBinaryInspector.ScanAssembliesForTypeReference``1(System.Collections.Generic.IEnumerable{System.Byte[]},System.String[]@)">
            <summary>
            Entry point to call from your code
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblys"></param>
            <param name="errorReport"></param>
            <returns></returns>
            <remarks>
            Will perform the assembly scan in a separate app domain
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageBinaryInspector.ScanAssembliesForTypeReference``1(System.String,System.String[]@)">
            <summary>
            Entry point to call from your code
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dllPath"></param>
            <param name="errorReport"></param>
            <returns></returns>
            <remarks>
            Will perform the assembly scan in a separate app domain
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageBinaryInspector.PerformScan``1(System.Collections.Generic.IEnumerable{System.Byte[]},System.String[]@)">
            <summary>
            Performs the assembly scanning
            </summary>
            <typeparam name="T"></typeparam>        
            <param name="assemblies"></param>
            <param name="errorReport"></param>
            <returns></returns>
            <remarks>
            This method is executed in a separate app domain
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageBinaryInspector.PerformScan``1(System.String,System.String[]@)">
            <summary>
            Performs the assembly scanning
            </summary>
            <typeparam name="T"></typeparam>        
            <param name="dllPath"></param>
            <param name="errorReport"></param>
            <returns></returns>
            <remarks>
            This method is executed in a separate app domain
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageBinaryInspector.GetLoadFromContractType``1">
            <summary>
            In order to compare types, the types must be in the same context, this method will return the type that
            we are checking against but from the Load context.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Packaging.PackageBinaryInspector.GetTempAppDomain">
            <summary>
            Create an app domain
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseModelDefinitions.DbIndexDefinition">
            <summary>
            Represents a database index definition retreived by querying the database
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.EntityNotFoundException">
            <summary>
            An exception used to indicate that an umbraco entity could not be found
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.TagMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Tag"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.TemplateMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Template"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.DataLossException">
            <summary>
            Used if a migration has executed but the whole process has failed and cannot be rolled back
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSevenThreeZero.MigrateAndRemoveTemplateMasterColumn">
            <summary>
            Remove the master column after we've migrated all of the values into the 'ParentId' and Path column of Umbraco node
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSeven.AssignMissingKeysAndIndexes">
            <summary>
            I'm not actually sure how this is possible but I've come across one install that was missing these PKs
            and it wasn't a MySQL install. 
            see: http://issues.umbraco.org/issue/U4-5707
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRecycleBinRepository`1.GetEntitiesInRecycleBin">
            <summary>
            Gets all entities in recycle bin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRecycleBinRepository`1.EmptyRecycleBin">
            <summary>
            Called to empty the recycle bin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.FileRepository`2.GetContentStream(System.String)">
            <summary>
            Gets a stream that is used to write to the file
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.FileRepository`2.FindAllFiles(System.String,System.String)">
            <summary>
            Returns all files in the file system
            </summary>
            <param name="path"></param>
            <param name="filter"></param>
            <returns>
            Returns a list of all files with their paths. For example:
            
            \hello.txt
            \folder1\test.txt
            \folder1\blah.csv
            \folder1\folder2\blahhhhh.svg
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.FileRepository`2.DisposeResources">
            <summary>
            Dispose any disposable properties
            </summary>
            <remarks>
            Dispose the unit of work
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.FileRepository`2.UnitOfWork">
            <summary>
            Returns the Unit of Work added to the repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.PartialViewRepository.GetContentStream(System.String)">
            <summary>
            Gets a stream that is used to write to the file
            </summary>
            <param name="content"></param>
            <returns></returns>
            <remarks>
            This ensures the stream includes a utf8 BOM
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.MicrosoftSqlSyntaxProviderBase`1">
            <summary>
            Abstract class for defining MS sql implementations
            </summary>
            <typeparam name="TSyntax"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderBase`1">
            <summary>
            Represents the Base Sql Syntax provider implementation.
            </summary>
            <remarks>
            All Sql Syntax provider implementations should derive from this abstract class.
            </remarks>
            <typeparam name="TSyntax"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider">
            <summary>
            Defines an SqlSyntaxProvider
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderBase`1.FormatDateTime(System.DateTime,System.Boolean)">
            <summary>
            This is used ONLY if we need to format datetime without using SQL parameters (i.e. during migrations)
            </summary>
            <param name="date"></param>
            <param name="includeTime"></param>
            <returns></returns>
            <remarks>
            MSSQL has a DateTime standard that is unambiguous and works on all servers:
            YYYYMMDD HH:mm:ss
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.DefaultPropertyValueConverterAttribute">
            <summary>
            Indicates that this is a default property value converter (shipped with Umbraco)
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.DefaultPropertyValueConverterAttribute.DefaultConvertersToShadow">
            <summary>
            A DefaultPropertyValueConverter can 'shadow' other default property value converters so that 
            a DefaultPropertyValueConverter can be more specific than another one.
            </summary>
            <remarks>
            An example where this is useful is that both the RelatedLiksEditorValueConverter and the JsonValueConverter
            will be returned as value converters for the Related Links Property editor, however the JsonValueConverter 
            is a very generic converter and the RelatedLiksEditorValueConverter is more specific than it, so the RelatedLiksEditorValueConverter
            can specify that it 'shadows' the JsonValueConverter.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IValueEditor">
            <summary>
            An interface that is shared between parameter and property value editors to access their views
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.SqlStringExtensions">
            <summary>
            String extension methods used specifically to translate into SQL
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType">
            <summary>
            Determines how to match a string property value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.ValuePropertyMatchType">
            <summary>
            Determine how to match a number or data value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ContentPreviewRepository`1">
            <summary>
            Private class to handle preview insert/update based on standard principles and units of work with transactions
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ContentXmlRepository`1">
            <summary>
            Internal class to handle content/published xml insert/update based on standard principles and units of work with transactions
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.GetByName(System.String)">
            <summary>
            Gets a member group by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.CreateIfNotExists(System.String)">
            <summary>
            Creates the new member group if it doesn't already exist
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.GetMemberGroupsForMember(System.Int32)">
            <summary>
            Returns the member groups for a given member
            </summary>
            <param name="memberId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberGroupRepository.GetMemberGroupsForMember(System.String)">
            <summary>
            Returns the member groups for a given member
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlServerVersionName">
            <summary>
            Represents the version name of SQL server (i.e. the year 2008, 2005, etc...)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderExtensions.GetQuotedColumn(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,System.String,System.String)">
            <summary>
            Returns the quotes tableName.columnName combo
            </summary>
            <param name="sql"></param>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderExtensions.GetDeleteSubquery(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,System.String,System.String,Umbraco.Core.Persistence.Sql)">
            <summary>
            This is used to generate a delete query that uses a sub-query to select the data, it is required because there's a very particular syntax that
            needs to be used to work for all servers: MySql, SQLCE and MSSQL
            </summary>
            <returns></returns>
            <remarks>
            See: http://issues.umbraco.org/issue/U4-3876
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyCacheValue">
            <summary>
            Specifies the different types of property cacheable values.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheValue.All">
            <summary>
            All of them.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheValue.Source">
            <summary>
            The source value ie the internal value that can be used to create both the
            object value and the xpath value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheValue.Object">
            <summary>
            The object value ie the strongly typed value of the property as seen when accessing content via C#.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheValue.XPath">
            <summary>
            The XPath value ie the value of the property as seen when accessing content via XPath.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyValueCacheAttribute">
            <summary>
            Indicates the cache level for a property cacheable value.
            </summary>
            <remarks>Use this attribute to mark property values converters.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueCacheAttribute.#ctor(Umbraco.Core.PropertyEditors.PropertyCacheValue,Umbraco.Core.PropertyEditors.PropertyCacheLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.PropertyValueCacheAttribute"/> class with a cacheable value and a cache level.
            </summary>
            <param name="value">The cacheable value.</param>
            <param name="level">The cache level.</param>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueCacheAttribute.Value">
            <summary>
            Gets or sets the cacheable value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueCacheAttribute.Level">
            <summary>
            Gets or sets the cache level;
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyValueTypeAttribute">
            <summary>
            Indicates the CLR type of property object values returned by a converter.
            </summary>
            <remarks>Use this attribute to mark property values converters.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.PropertyValueTypeAttribute"/> class with a type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueTypeAttribute.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyCacheLevel">
            <summary>
            Specifies the acceptable level of cache for a property value.
            </summary>
            <remarks>By default, <c>Request</c> is assumed.</remarks>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.Content">
            <summary>
            Indicates that the property value can be cached at the content level, ie it can be
            cached until the content itself is modified.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.ContentCache">
            <summary>
            Indicates that the property value can be cached at the content cache level, ie it can
            be cached until any content in the cache is modified.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.Request">
            <summary>
            Indicates that the property value can be cached at the request level, ie it can be
            cached for the duration of the current request.
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyCacheLevel.None">
            <summary>
            Indicates that the property value cannot be cached and has to be converted any time
            it is requested.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.SupportTagsAttribute">
            <summary>
            An interface that indicates that a property editor supports tags and will store it's published tags into the tag db table
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.SupportTagsAttribute.#ctor(System.Type)">
            <summary>
            Defines a tag property definition type to invoke at runtime to get the tags configuration for a property
            </summary>
            <param name="tagPropertyDefinitionType"></param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.SupportTagsAttribute.#ctor">
            <summary>
            Normal constructor specifying the default tags configuration for a property
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.SupportTagsAttribute.ValueType">
            <summary>
            Defines how the tag values will be extracted, default is FromDelimitedValue
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.SupportTagsAttribute.StorageType">
            <summary>
            Defines how to store the tags in cache (CSV or Json)
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.SupportTagsAttribute.Delimiter">
            <summary>
            Defines a custom delimiter, the default is a comma
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.SupportTagsAttribute.ReplaceTags">
            <summary>
            Determines whether or not to replace the tags with the new value or append them (true to replace, false to append), default is true
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.SupportTagsAttribute.TagGroup">
            <summary>
            The tag group to use when tagging, the default is 'default'
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.TagPropertyDefinition">
            <summary>
            Allows for dynamically changing how a property's data is tagged at runtime during property setting
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.TagPropertyDefinition.#ctor(Umbraco.Core.Models.Editors.ContentPropertyData,Umbraco.Core.PropertyEditors.SupportTagsAttribute)">
            <summary>
            Constructor specifies the defaults and sets the ContentPropertyData being used to set the tag values which
            can be used to dynamically adjust the tags definition for this property.
            </summary>
            <param name="propertySaving"></param>
            <param name="tagsAttribute"></param>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagPropertyDefinition.PropertySaving">
            <summary>
            The property data that will create the tag data
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagPropertyDefinition.TagsAttribute">
            <summary>
            The attribute that has specified this definition type
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagPropertyDefinition.StorageType">
            <summary>
            Defines how to store the tags in cache (CSV or Json)
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagPropertyDefinition.Delimiter">
            <summary>
            Defines a custom delimiter, the default is a comma
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagPropertyDefinition.ReplaceTags">
            <summary>
            Determines whether or not to replace the tags with the new value or append them (true to replace, false to append), default is true
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.TagPropertyDefinition.TagGroup">
            <summary>
            The tag group to use when tagging, the default is 'default'
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.TagValueType">
            <summary>
            Determines how the value for tags is extracted from the property
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.TagValueType.FromDelimitedValue">
            <summary>
            The list of tags will be extracted from the string value by a delimiter
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.TagValueType.CustomTagList">
            <summary>
            The list of tags will be supplied by the property editor's ConvertEditorToDb method result which will need to return an IEnumerable{string} value
            </summary>        
            <remarks>
            if the ConvertEditorToDb doesn't return an IEnumerable{string} then an exception will be thrown.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IPropertyValueConverterMeta">
            <summary>
            Provides published content properties converter meta data.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverterMeta.GetPropertyValueType(Umbraco.Core.Models.PublishedContent.PublishedPropertyType)">
            <summary>
            Gets the type of values returned by the converter.
            </summary>
            <param name="propertyType">The property type.</param>
            <returns>The CLR type of values returned by the converter.</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyValueConverterMeta.GetPropertyCacheLevel(Umbraco.Core.Models.PublishedContent.PublishedPropertyType,Umbraco.Core.PropertyEditors.PropertyCacheValue)">
            <summary>
            Gets the property cache level of a specified value.
            </summary>
            <param name="propertyType">The property type.</param>
            <param name="cacheValue">The property value.</param>
            <returns>The property cache level of the specified value.</returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.MustBeStringValueConverter">
            <summary>
            Ensures that no matter what is selected in (editor), the value results in a string.
            </summary>
            <remarks>
            <para>For more details see issues http://issues.umbraco.org/issue/U4-3776 (MNTP)
            and http://issues.umbraco.org/issue/U4-4160 (media picker).</para>
            <para>The cache level is set to .Content because the string is supposed to depend
            on the source value only, and not on any other content. It is NOT appropriate
            to use that converter for values whose .ToString() would depend on other content.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValueConverters.TinyMceValueConverter">
            <summary>
            Value converter for the RTE so that it always returns IHtmlString so that Html.Raw doesn't have to be used.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentOrderedSet`1">
            <summary>
            Represents an ordered set of <see cref="T:Umbraco.Core.Models.IPublishedContent"/>.
            </summary>
            <typeparam name="T">The type of content.</typeparam>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentSet`1">
            <summary>
            Represents a set of <see cref="T:Umbraco.Core.Models.IPublishedContent"/>.
            </summary>
            <typeparam name="T">The type of content.</typeparam>
            <remarks>
            <para>A <c>ContentSet{T}</c> is created from an <c>IEnumerable{T}</c> using the <c>ToContentSet</c>
            extension method.</para>
            <para>The content set source is enumerated only once. Same as what you get
            when you call ToList on an IEnumerable. Only, ToList enumerates its source when
            created, whereas a content set enumerates its source only when the content set itself
            is enumerated.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentSet`1.Count">
            <summary>
            Gets the number of items in the set.
            </summary>
            <returns>The number of items in the set.</returns>
            <remarks>Will cause the set to be enumerated if it hasn't been already.</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.DictionaryItem">
            <summary>
            Represents a Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.ParentId">
            <summary>
            Gets or Sets the Parent Id of the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.ItemKey">
            <summary>
            Gets or sets the Key for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.Translations">
            <summary>
            Gets or sets a list of translations for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.ParentId">
            <summary>
            Gets or Sets the Parent Id of the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.ItemKey">
            <summary>
            Gets or sets the Key for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.Translations">
            <summary>
            Gets or sets a list of translations for the Dictionary Item
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.DictionaryTranslation">
            <summary>
            Represents a translation for a <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryTranslation.Language">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.IDictionaryTranslation.Language"/> for the translation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryTranslation.Value">
            <summary>
            Gets or sets the translated text
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryTranslation.Language">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.DictionaryTranslation.Language"/> for the translation
            </summary>
            <remarks>
            Marked as DoNotClone - TODO: this member shouldn't really exist here in the first place, the DictionaryItem
            class will have a deep hierarchy of objects which all get deep cloned which we don't want. This should have simply
            just referenced a language ID not the actual language object. In v8 we need to fix this.
            We're going to have to do the same hacky stuff we had to do with the Template/File contents so that this is returned 
            on a callback.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryTranslation.Value">
            <summary>
            Gets or sets the translated text
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Editors.ContentPropertyData">
            <summary>
            Represents data that has been submitted to be saved for a content property
            </summary>
            <remarks>
            This object exists because we may need to save additional data for each property, more than just
            the string representation of the value being submitted. An example of this is uploaded files.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyData.Value">
            <summary>
            The value submitted for the property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Editors.ContentPropertyData.AdditionalData">
            <summary>
            A dictionary containing any additional objects that are related to this property when saving
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDataTypeDefinition.PropertyEditorAlias">
            <summary>
            The Property editor alias assigned to the data type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDataTypeDefinition.ControlId">
            <summary>
            Id of the DataType control
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDataTypeDefinition.DatabaseType">
            <summary>
            Gets or Sets the DatabaseType for which the DataType's value is saved as
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.IsoCode">
            <summary>
            Gets or sets the Iso Code for the Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.CultureName">
            <summary>
            Gets or sets the Culture Name for the Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.CultureInfo">
            <summary>
            Returns a <see cref="P:Umbraco.Core.Models.ILanguage.CultureInfo"/> object for the current Language
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMacro">
            <summary>
            Defines a Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Alias">
            <summary>
            Gets or sets the alias of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Name">
            <summary>
            Gets or sets the name of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.UseInEditor">
            <summary>
            Gets or sets a boolean indicating whether the Macro can be used in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheDuration">
            <summary>
            Gets or sets the Cache Duration for the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheByPage">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached by Page
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheByMember">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached Personally
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.DontRender">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be rendered in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.ControlType">
            <summary>
            Gets or sets the path to user control or the Control Type to render
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.ControlAssembly">
            <summary>
            Gets or sets the name of the assembly, which should be used by the Macro
            </summary>
            <remarks>Will usually only be filled if the ScriptFile is a Usercontrol</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.ScriptPath">
            <summary>
            Gets or set the path to the Python file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.XsltPath">
            <summary>
            Gets or sets the path to the Xslt file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Properties">
            <summary>
            Gets or sets a list of Macro Properties
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMacroProperty">
            <summary>
            Defines a Property for a Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.Alias">
            <summary>
            Gets or sets the Alias of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.Name">
            <summary>
            Gets or sets the Name of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.EditorAlias">
            <summary>
            Gets or sets the parameter editor alias
            </summary>        
        </member>
        <member name="T:Umbraco.Core.Models.IMacroPropertyType">
            <summary>
            Defines a PropertyType (plugin) for a Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroPropertyType.Alias">
            <summary>
            Gets the unique Alias of the Property Type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroPropertyType.RenderingAssembly">
            <summary>
            Gets the name of the Assembly used to render the Property Type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroPropertyType.RenderingType">
            <summary>
            Gets the name of the Type used to render the Property Type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroPropertyType.BaseType">
            <summary>
            Gets the Base Type for storing the PropertyType (Int32, String, Boolean)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ITag">
            <summary>
            Represents a Tag, which is composed of a Text, Group and NodeCount property.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Macro">
            <summary>
            Represents a Macro
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Macro.#ctor(System.Int32,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates an item with pre-filled properties
            </summary>
            <param name="id"></param>
            <param name="useInEditor"></param>
            <param name="cacheDuration"></param>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="controlType"></param>
            <param name="controlAssembly"></param>
            <param name="xsltPath"></param>
            <param name="cacheByPage"></param>
            <param name="cacheByMember"></param>
            <param name="dontRender"></param>
            <param name="scriptPath"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Macro.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates an instance for persisting a new item
            </summary>
            <param name="useInEditor"></param>
            <param name="cacheDuration"></param>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="controlType"></param>
            <param name="controlAssembly"></param>
            <param name="xsltPath"></param>
            <param name="cacheByPage"></param>
            <param name="cacheByMember"></param>
            <param name="dontRender"></param>
            <param name="scriptPath"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Macro.PropertyDataChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            When some data of a property has changed ensure our Properties flag is dirty
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.AddedProperties">
            <summary>
            Used internally to check if we need to add a section in the repository to the db
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.RemovedProperties">
            <summary>
            Used internally to check if we need to remove  a section in the repository to the db
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Alias">
            <summary>
            Gets or sets the alias of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Name">
            <summary>
            Gets or sets the name of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.UseInEditor">
            <summary>
            Gets or sets a boolean indicating whether the Macro can be used in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheDuration">
            <summary>
            Gets or sets the Cache Duration for the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheByPage">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached by Page
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheByMember">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached Personally
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.DontRender">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be rendered in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.ControlType">
            <summary>
            Gets or sets the path to user control or the Control Type to render
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.ControlAssembly">
            <summary>
            Gets or sets the name of the assembly, which should be used by the Macro
            </summary>
            <remarks>Will usually only be filled if the ControlType is a Usercontrol</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.ScriptPath">
            <summary>
            Gets or set the path to the Python file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.XsltPath">
            <summary>
            Gets or sets the path to the Xslt file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Properties">
            <summary>
            Gets or sets a list of Macro Properties
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentModelAttribute">
            <summary>
            Indicates that the class is a published content model for a specified content type.
            </summary>
            <remarks>By default, the name of the class is assumed to be the content type alias. The
            <c>PublishedContentModelAttribute</c> can be used to indicate a different alias.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentModelAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentModelAttribute"/> class with a content type alias.
            </summary>
            <param name="contentTypeAlias">The content type alias.</param>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedContentModelAttribute.ContentTypeAlias">
            <summary>
            Gets or sets the content type alias.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentExtensionsForModels">
            <summary>
            Provides strongly typed published content models services.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedContentExtensionsForModels.CreateModel(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Creates a strongly typed published content model for an internal published content.
            </summary>
            <param name="content">The internal published content.</param>
            <returns>The strongly typed published content model.</returns>
        </member>
        <member name="T:Umbraco.Core.Models.MacroProperty">
            <summary>
            Represents a Macro Property
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MacroProperty.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Ctor for creating a new property
            </summary>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="sortOrder"></param>
            <param name="editorAlias"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MacroProperty.#ctor(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Ctor for creating an existing property
            </summary>
            <param name="id"></param>
            <param name="alias"></param>
            <param name="name"></param>
            <param name="sortOrder"></param>
            <param name="editorAlias"></param>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Id">
            <summary>
            Gets or sets the Alias of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Alias">
            <summary>
            Gets or sets the Alias of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Name">
            <summary>
            Gets or sets the Name of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.EditorAlias">
            <summary>
            Gets or sets the Type for this Property
            </summary>
            <remarks>
            The MacroPropertyTypes acts as a plugin for Macros.
            All types was previously contained in the database, but has been ported to code.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.MacroPropertyCollection">
            <summary>
            A macro's property collection
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObservableDictionary`2">
            <summary>
            An ObservableDictionary 
            </summary>
            <remarks>
            Assumes that the key will not change and is unique for each element in the collection.
            Collection is not thread-safe, so calls should be made single-threaded.
            </remarks>
            <typeparam name="TValue">The type of elements contained in the BindableCollection</typeparam>
            <typeparam name="TKey">The type of the indexing key</typeparam>
        </member>
        <member name="M:Umbraco.Core.ObservableDictionary`2.#ctor(System.Func{`1,`0})">
            <summary>
            Create new ObservableDictionary
            </summary>
            <param name="keySelector">Selector function to create key from value</param>
        </member>
        <member name="M:Umbraco.Core.ObservableDictionary`2.Replace(`0,`1)">
            <summary>
            Replaces element at given key with new value.  New value must have same key.
            </summary>
            <param name="key">Key of element to replace</param>
            <param name="value">New value</param>
            
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns>False if key not found</returns>
        </member>
        <member name="M:Umbraco.Core.ObservableDictionary`2.ChangeKey(`0,`0)">
            <summary>
            Allows us to change the key of an item
            </summary>
            <param name="currentKey"></param>
            <param name="newKey"></param>
        </member>
        <member name="P:Umbraco.Core.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.  If setting a new value, new value must have same key.
            </summary>
            <param name="key">Key of element to replace</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.MacroPropertyCollection.UpdateProperty(System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Used to update an existing macro property
            </summary>
            <param name="name"></param>
            <param name="sortOrder"></param>
            <param name="editorAlias"></param>
            <param name="currentAlias">
            The existing property alias
            </param>
            <param name="newAlias"></param>        
        </member>
        <member name="T:Umbraco.Core.Models.MacroPropertyTypeBaseTypes">
            <summary>
            Enum for the three allowed BaseTypes
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MacroTypes">
            <summary>
            Enum for the various types of Macros
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedContentType">
            <summary>
            Represents an <see cref="T:Umbraco.Core.Models.IPublishedContent"/> type.
            </summary>
            <remarks>Instances of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentType"/> class are immutable, ie
            if the content type changes, then a new class needs to be created.</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType">
            <summary>
            Represents an <see cref="T:Umbraco.Core.Models.IPublishedProperty"/> type.
            </summary>
            <remarks>Instances of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> class are immutable, ie
            if the property type changes, then a new class needs to be created.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.#ctor(Umbraco.Core.Models.PublishedContent.PublishedContentType,Umbraco.Core.Models.PropertyType)">
            <summary>
            Initialize a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> class within a <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedContentType"/>,
            with a <see cref="T:Umbraco.Core.Models.PropertyType"/>.
            </summary>
            <param name="contentType">The published content type.</param>
            <param name="propertyType">The property type.</param>
            <remarks>The new published property type belongs to the published content type and corresponds to the property type.</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.#ctor(System.String,Umbraco.Core.Models.PublishedContent.PublishedPropertyType)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> class with an existing <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/>
            and a new property type alias.
            </summary>
            <param name="propertyTypeAlias">The new property type alias.</param>
            <param name="propertyType">The existing published property type.</param>
            <remarks>
            <para>The new published property type does not belong to a published content type.</para>
            <para>It is a copy of the initial published property type, with a different alias.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> class with a property type alias and a property editor alias.
            </summary>
            <param name="propertyTypeAlias">The property type alias.</param>
            <param name="propertyEditorAlias">The property editor alias.</param>
            <remarks>
            <para>The new published property type does not belong to a published content type.</para>
            <para>It is based upon the property editor, but has no datatype definition. This will work as long
            as the datatype definition is not required to process (eg to convert) the property values. For
            example, this may not work if the related IPropertyValueConverter requires the datatype definition
            to make decisions, fetch prevalues, etc.</para>
            <para>The value of <paramref name="propertyEditorAlias"/> is assumed to be valid.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.#ctor(System.String,Umbraco.Core.Models.IDataTypeDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> class with a property type alias and a datatype definition.
            </summary>
            <param name="propertyTypeAlias">The property type alias.</param>
            <param name="dataTypeDefinition">The datatype definition.</param>
            <remarks>
            <para>The new published property type does not belong to a published content type.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PublishedContent.PublishedPropertyType"/> class with a property type alias,
            a datatype definition identifier, and a property editor alias.
            </summary>
            <param name="propertyTypeAlias">The property type alias.</param>
            <param name="dataTypeDefinitionId">The datatype definition identifier.</param>
            <param name="propertyEditorAlias">The property editor alias.</param>
            <remarks>
            <para>The new published property type does not belong to a published content type.</para>
            <para>The values of <paramref name="dataTypeDefinitionId"/> and <paramref name="propertyEditorAlias"/> are
            assumed to be valid and consistent.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.Detached">
            <summary>
            Creates a detached clone of this published property type.
            </summary>
            <returns>A detached clone of this published property type.</returns>
            <remarks>
            <para>Only a published property type that has not already been detached or nested, can be detached.</para>
            <para>Use detached published property type when creating detached properties outside of a published content.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.Nested(Umbraco.Core.Models.PublishedContent.PublishedPropertyType)">
            <summary>
            Creates a nested clone of this published property type within a specified container published property type.
            </summary>
            <param name="containerType">The container published property type.</param>
            <returns>A nested clone of this published property type</returns>
            <remarks>
            <para>Only a published property type that has not already been detached or nested, can be nested.</para>
            <para>Use nested published property type when creating detached properties within a published content.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.ContentType">
            <summary>
            Gets or sets the published content type containing the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.PropertyTypeAlias">
            <summary>
            Gets or sets the alias uniquely identifying the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.DataTypeId">
            <summary>
            Gets or sets the identifier uniquely identifying the data type supporting the property type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PublishedContent.PublishedPropertyType.PropertyEditorAlias">
            <summary>
            Gets or sets the alias uniquely identifying the property editor for the property type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.EntityPermission">
            <summary>
            Represents a user -> entity permission
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.EntityPermission.AssignedPermissions">
            <summary>
            The assigned permissions for the user/entity combo
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IMembershipUser">
            <summary>
            Defines the base contract for <see cref="T:Umbraco.Core.Models.IMember"/> and <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IMembershipUser.RawPasswordValue">
            <summary>
            Gets or sets the raw password value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IMembershipUser.RawPasswordAnswerValue">
            <summary>
            Gets or sets the raw password answer value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IMembershipUser.FailedPasswordAttempts">
            <summary>
            Gets or sets the number of failed password attempts.
            This is the number of times the password was entered incorrectly upon login.
            </summary>
            <remarks>
            Alias: umbracoMemberFailedPasswordAttempts
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IMember.ContentTypeAlias">
            <summary>
            String alias of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMember.ContentType">
            <summary>
            Gets the ContentType used by this content object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMemberType">
            <summary>
            Defines a MemberType, which Member is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.MemberCanEditProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.MemberCanViewProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.SetMemberCanEditProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Core.Models.IMemberType.SetMemberCanViewProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="T:Umbraco.Core.Models.Member">
            <summary>
            Represents a Member object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(Umbraco.Core.Models.IMemberType)">
            <summary>
            Constructor for creating an empty Member object
            </summary>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Constructor for creating a Member object
            </summary>
            <param name="name">Name of the content</param>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Member.#ctor(System.String,System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Constructor for creating a Member object
            </summary>
            <param name="name"></param>
            <param name="email"></param>
            <param name="username"></param>
            <param name="rawPasswordValue">
            The password value passed in to this parameter should be the encoded/encrypted/hashed format of the member's password
            </param>
            <param name="contentType"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Member.AddingEntity">
            <summary>
            Method to call when Entity is being saved
            </summary>
            <remarks>Created date is set and a Unique key is assigned</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.Username">
            <summary>
            Gets or sets the Username
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.Email">
            <summary>
            Gets or sets the Email
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.RawPasswordValue">
            <summary>
            Gets or sets the raw password value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.Groups">
            <summary>
            Gets or sets the Groups that Member is part of
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.PasswordQuestion">
            <summary>
            Gets or sets the Password Question
            </summary>
            <remarks>
            Alias: umbracoMemberPasswordRetrievalQuestion
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.RawPasswordAnswerValue">
            <summary>
            Gets or sets the raw password answer value
            </summary>
            <remarks>
            For security reasons this value should be encrypted, the encryption process is handled by the memberhip provider
            Alias: umbracoMemberPasswordRetrievalAnswer
            
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.Comments">
            <summary>
            Gets or set the comments for the member
            </summary>
            <remarks>
            Alias: umbracoMemberComments
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.IsApproved">
            <summary>
            Gets or sets a boolean indicating whether the Member is approved
            </summary>
            <remarks>
            Alias: umbracoMemberApproved
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.IsLockedOut">
            <summary>
            Gets or sets a boolean indicating whether the Member is locked out
            </summary>
            <remarks>
            Alias: umbracoMemberLockedOut
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.LastLoginDate">
            <summary>
            Gets or sets the date for last login
            </summary>
            <remarks>
            Alias: umbracoMemberLastLogin
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.LastPasswordChangeDate">
            <summary>
            Gest or sets the date for last password change
            </summary>
            <remarks>
            Alias: umbracoMemberLastPasswordChangeDate
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.LastLockoutDate">
            <summary>
            Gets or sets the date for when Member was locked out
            </summary>
            <remarks>
            Alias: umbracoMemberLastLockoutDate
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.FailedPasswordAttempts">
            <summary>
            Gets or sets the number of failed password attempts.
            This is the number of times the password was entered incorrectly upon login.
            </summary>
            <remarks>
            Alias: umbracoMemberFailedPasswordAttempts
            Part of the standard properties collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.ContentTypeAlias">
            <summary>
            String alias of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Member.ProviderUserKey">
            <summary>
            User key from the Provider.
            </summary>
            <remarks>
            When using standard umbraco provider this key will 
            correspond to the guid UniqueId/Key.
            Otherwise it will the one available from the asp.net
            membership provider.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Member.ContentType">
            <summary>
            Gets the ContentType used by this content object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.MembershipUserExtensions.GetMembershipScenario(Umbraco.Core.Services.IMemberService)">
            <summary>
            Returns the currently configured membership scenario for members in umbraco
            </summary>
            <value></value>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.UmbracoMembershipUser`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Membership.UmbracoMembershipUser`1"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.UmbracoMembershipUser`1.#ctor(System.String,System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,Umbraco.Core.Models.Membership.IUserType,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Membership.UmbracoMembershipUser`1"/> class.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="name">The name.</param>
            <param name="providerUserKey">The provider user key.</param>
            <param name="email">The email.</param>
            <param name="passwordQuestion">The password question.</param>
            <param name="comment">The comment.</param>
            <param name="isApproved">if set to <c>true</c> [is approved].</param>
            <param name="isLockedOut">if set to <c>true</c> [is locked out].</param>
            <param name="creationDate">The creation date.</param>
            <param name="lastLoginDate">The last login date.</param>
            <param name="lastActivityDate">The last activity date.</param>
            <param name="lastPasswordChangedDate">The last password changed date.</param>
            <param name="lastLockoutDate">The last lockout date.</param>
            <param name="fullName">The full name.</param>
            <param name="language">The language.</param>
            <param name="userType">Type of the user.</param>
            <param name="user"></param>
        </member>
        <member name="T:Umbraco.Core.Models.PagedResult`1">
            <summary>
            Represents a paged result for a model collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Models.PagedResult`1.GetSkipSize">
            <summary>
            Calculates the skip size based on the paged parameters specified
            </summary>
            <remarks>
            Returns 0 if the page number or page size is zero
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PreValue">
            <summary>
            Represents a stored pre-value field value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PreValue.Value">
            <summary>
            The value stored for the pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PreValue.Id">
            <summary>
            The database id for the pre-value field value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PreValue.SortOrder">
            <summary>
            The sort order stored for the pre-value field value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MemberType">
            <summary>
            Represents the content type that a <see cref="T:Umbraco.Core.Models.Member"/> object is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.MemberCanEditProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.MemberCanViewProperty(System.String)">
            <summary>
            Gets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to check</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.SetMemberCanEditProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is editable by the Member.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="M:Umbraco.Core.Models.MemberType.SetMemberCanViewProperty(System.String,System.Boolean)">
            <summary>
            Sets a boolean indicating whether a Property is visible on the Members profile.
            </summary>
            <param name="propertyTypeAlias">PropertyType Alias of the Property to set</param>
            <param name="value">Boolean value, true or false</param>
        </member>
        <member name="P:Umbraco.Core.Models.MemberType.Alias">
            <summary>
            The Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MemberType.MemberTypePropertyTypes">
            <summary>
            Gets or Sets a Dictionary of Tuples (MemberCanEdit, VisibleOnProfile) by the PropertyTypes' alias.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PreValueCollection">
            <summary>
            Represents the pre-value data for a DataType
            </summary>
            <remarks>
            Due to the legacy nature of the data that can be stored for pre-values, we have this class which encapsulates the 2 different
            ways that pre-values are stored: A string array or a Dictionary.
            
            Most legacy property editors won't support the dictionary format but new property editors should always use the dictionary format.
            In order to get overrideable pre-values working we need a dictionary since we'll have to reference a pre-value by a key.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PreValueCollection.FormatAsDictionary">
            <summary>
            Regardless of how the pre-values are stored this will return as a dictionary, it will convert an array based to a dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.PreValueCollection.IsDictionaryBased">
            <summary>
            Check if it is a dictionary based collection
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyTags">
            <summary>
            A property extension class that allows us to enable tags for any given property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyTags.Behavior">
            <summary>
            The behavior of how to save the tags assigned - 
               Merge (keep existing and append new), 
               Remove (remove any of the tags in the Tags property that are currently assigned, 
               Replace (replace the currently assigned tags with the ones specified)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyTags.Enable">
            <summary>
            Flags the property to have tagging enabled
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyTags.Tags">
            <summary>
            The actual tags to associate - tag/group
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ServerRegistration">
            <summary>
            Represents a registered server in a multiple-servers environment.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ServerRegistration.#ctor">
            <summary>
            Initialiazes a new instance of the <see cref="T:Umbraco.Core.Models.ServerRegistration"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ServerRegistration.#ctor(System.Int32,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Initialiazes a new instance of the <see cref="T:Umbraco.Core.Models.ServerRegistration"/> class.
            </summary>
            <param name="id">The unique id of the server registration.</param>
            <param name="serverAddress">The server url.</param>
            <param name="serverIdentity">The unique server identity.</param>
            <param name="registered">The date and time the registration was created.</param>
            <param name="accessed">The date and time the registration was last accessed.</param>
            <param name="isActive">A value indicating whether the registration is active.</param>
            <param name="isMaster">A value indicating whether the registration is master.</param>
        </member>
        <member name="M:Umbraco.Core.Models.ServerRegistration.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initialiazes a new instance of the <see cref="T:Umbraco.Core.Models.ServerRegistration"/> class.
            </summary>
            <param name="serverAddress">The server url.</param>
            <param name="serverIdentity">The unique server identity.</param>
            <param name="registered">The date and time the registration was created.</param>
        </member>
        <member name="M:Umbraco.Core.Models.ServerRegistration.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.ServerAddress">
            <summary>
            Gets or sets the server url.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.ServerIdentity">
            <summary>
            Gets or sets the server unique identity.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.IsActive">
            <summary>
            Gets or sets a value indicating whether the server is active.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.IsMaster">
            <summary>
            Gets or sets a value indicating whether the server is master.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.Registered">
            <summary>
            Gets the date and time the registration was created.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ServerRegistration.Accessed">
            <summary>
            Gets the date and time the registration was last accessed.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ITemplate">
            <summary>
            Defines a Template File (Masterpage or Mvc View)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ITemplate.GetTypeOfRenderingEngine">
            <summary>
            Returns the <see cref="T:Umbraco.Core.RenderingEngine"/> that corresponds to the template file
            </summary>
            <returns><see cref="T:Umbraco.Core.RenderingEngine"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ITemplate.SetMasterTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Set the mastertemplate
            </summary>
            <param name="masterTemplate"></param>
        </member>
        <member name="P:Umbraco.Core.Models.ITemplate.Name">
            <summary>
            Gets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITemplate.Alias">
            <summary>
            Gets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITemplate.IsMasterTemplate">
            <summary>
            Returns true if the template is used as a layout for other templates (i.e. it has 'children')
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ITemplate.MasterTemplateAlias">
            <summary>
            returns the master template alias
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Language">
            <summary>
            Represents a Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Language.IsoCode">
            <summary>
            Gets or sets the Iso Code for the Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Language.CultureName">
            <summary>
            Gets or sets the Culture Name for the Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Language.CultureInfo">
            <summary>
            Returns a <see cref="P:Umbraco.Core.Models.Language.CultureInfo"/> object for the current Language
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Media">
            <summary>
            Represents a Media object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IMedia.ChangeContentType(Umbraco.Core.Models.IMediaType)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current content object
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IMedia.ChangeContentType(Umbraco.Core.Models.IMediaType,System.Boolean)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current content object and removes PropertyTypes,
            which are not part of the new ContentType.
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="P:Umbraco.Core.Models.IMedia.ContentType">
            <summary>
            Gets the ContentType used by this Media object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,Umbraco.Core.Models.IMedia,Umbraco.Core.Models.IMediaType)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">ame of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</param>
            <param name="contentType">MediaType for the current Media object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,Umbraco.Core.Models.IMedia,Umbraco.Core.Models.IMediaType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">ame of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</param>
            <param name="contentType">MediaType for the current Media object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,System.Int32,Umbraco.Core.Models.IMediaType)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">ame of the Media object</param>
            <param name="parentId">Id of the Parent IMedia</param>
            <param name="contentType">MediaType for the current Media object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,System.Int32,Umbraco.Core.Models.IMediaType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of the Parent IMedia</param>
            <param name="contentType">MediaType for the current Media object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.ChangeContentType(Umbraco.Core.Models.IMediaType)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current Media object
            </summary>
            <param name="contentType">New MediaType for this Media</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Media.ChangeContentType(Umbraco.Core.Models.IMediaType,System.Boolean)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current Media object and removes PropertyTypes,
            which are not part of the new MediaType.
            </summary>
            <param name="contentType">New MediaType for this Media</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.ChangeTrashedState(System.Boolean,System.Int32)">
            <summary>
            Changes the Trashed state of the content object
            </summary>
            <param name="isTrashed">Boolean indicating whether content is trashed (true) or not trashed (false)</param>
            <param name="parentId"> </param>
        </member>
        <member name="P:Umbraco.Core.Models.Media.ContentType">
            <summary>
            Gets the ContentType used by this Media object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MediaType">
            <summary>
            Represents the content type that a <see cref="T:Umbraco.Core.Models.Media"/> object is based on
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Models.IMediaType" -->
        <member name="M:Umbraco.Core.Models.IMediaType.DeepCloneWithResetIdentities(System.String)">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <param name="newAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.#ctor(System.Int32)">
            <summary>
            Constuctor for creating a MediaType with the parent's id.
            </summary>
            <remarks>Only use this for creating MediaTypes at the root (with ParentId -1).</remarks>
            <param name="parentId"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.#ctor(Umbraco.Core.Models.IMediaType)">
            <summary>
            Constuctor for creating a MediaType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
            <param name="parent"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.#ctor(Umbraco.Core.Models.IMediaType,System.String)">
            <summary>
            Constuctor for creating a MediaType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
            <param name="parent"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.DeepCloneWithResetIdentities(System.String)">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IProfile">
            <summary>
            Defines the the Profile interface
            </summary>
            <remarks>
            This interface is pretty useless but has been exposed publicly from 6.x so we're stuck with it. It would make more sense 
            if the Id was an int but since it's not people have to cast it to int all of the time!
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IUser">
            <summary>
            Defines the interface for a <see cref="T:Umbraco.Core.Models.Membership.User"/>
            </summary>
            <remarks>Will be left internal until a proper Membership implementation is part of the roadmap</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.UserType">
            <summary>
            Gets/sets the user type for the user
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.DefaultPermissions">
            <summary>
            The default permission set for the user
            </summary>
            <remarks>
            Currently in umbraco each permission is a single char but with an Enumerable{string} collection this allows for flexible changes to this in the future
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.ProfileData">
            <summary>
            Exposes the basic profile data
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUser.SecurityStamp">
            <summary>
            The security stamp used by ASP.Net identity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUserType.Alias">
            <summary>
            The user type alias
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUserType.Name">
            <summary>
            The user type name
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.IUserType.Permissions">
            <summary>
            The set of default permissions for the user type
            </summary>
            <remarks>
            By default each permission is simply a single char but we've made this an enumerable{string} to support a more flexible permissions structure in the future.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.User">
            <summary>
            Represents a backoffice user
            </summary>    
        </member>
        <member name="M:Umbraco.Core.Models.Membership.User.ResetDirtyProperties(System.Boolean)">
            <summary>
            Whenever resetting occurs, clear the remembered add/removed collections, even if 
            rememberPreviouslyChangedProperties is true, the AllowedSections property will still
            be flagged as dirty.
            </summary>
            <param name="rememberPreviouslyChangedProperties"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.User.SectionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the collection changed event in order for us to flag the AllowedSections property as changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.SecurityStamp">
            <summary>
            The security stamp used by ASP.Net identity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.AddedSections">
            <summary>
            Used internally to check if we need to add a section in the repository to the db
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.RemovedSections">
            <summary>
            Used internally to check if we need to remove  a section in the repository to the db
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.SessionTimeout">
            <summary>
            Gets or sets the session timeout.
            </summary>
            <value>
            The session timeout.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.StartContentId">
            <summary>
            Gets or sets the start content id.
            </summary>
            <value>
            The start content id.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.User.StartMediaId">
            <summary>
            Gets or sets the start media id.
            </summary>
            <value>
            The start media id.
            </value>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.User.UserProfile">
            <summary>
            Internal class used to wrap the user in a profile
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.UserGroup">
            <summary>
            Represents a Group for a Backoffice User
            </summary>
            <remarks>
            Should be internal until a proper user/membership implementation
            is part of the roadmap.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.UserType">
            <summary>
            Represents the Type for a Backoffice User
            </summary>    
        </member>
        <member name="P:Umbraco.Core.Models.Membership.UserType.Permissions">
            <summary>
            The set of default permissions for the user type
            </summary>
            <remarks>
            By default each permission is simply a single char but we've made this an enumerable{string} to support a more flexible permissions structure in the future.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyExtensions.ToXml(Umbraco.Core.Models.Property)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.Property"/> object
            </summary>
            <param name="property"><see cref="T:Umbraco.Core.Models.Property"/> to generate xml for</param>
            <returns>Xml of the property and its value</returns>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedItemType">
            <summary>
            The type of published content, ie whether it is a content or a media.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedItemType.Content">
            <summary>
            A content, ie what was formerly known as a document.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedItemType.Media">
            <summary>
            A media.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.PublishedItemType.Member">
            <summary>
            A member.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Relation">
            <summary>
            Represents a Relation between two items
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.ParentId">
            <summary>
            Gets or sets the Parent Id of the Relation (Source)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.ChildId">
            <summary>
            Gets or sets the Child Id of the Relation (Destination)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.RelationType">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.Relation.RelationType"/> for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.Comment">
            <summary>
            Gets or sets a comment for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.RelationTypeId">
            <summary>
            Gets the Id of the <see cref="P:Umbraco.Core.Models.Relation.RelationType"/> that this Relation is based on.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.RelationType">
            <summary>
            Represents a RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.Name">
            <summary>
            Gets or sets the Name of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.Alias">
            <summary>
            Gets or sets the Alias of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.IsBidirectional">
            <summary>
            Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.ParentObjectType">
            <summary>
            Gets or sets the Parents object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.ChildObjectType">
            <summary>
            Gets or sets the Childs object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Script">
            <summary>
            Represents a Script file
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Script.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, which in this case is a path/name.
            </summary>
            <remarks>
            Overrides the default Entity identity check.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Stylesheet">
            <summary>
            Represents a Stylesheet file
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.Property_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            If the property has changed then we need to update the content
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.AddProperty(Umbraco.Core.Models.StylesheetProperty)">
            <summary>
            Adds an Umbraco stylesheet property for use in the back office
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.RemoveProperty(System.String)">
            <summary>
            Removes an Umbraco stylesheet property
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Stylesheet.Content">
            <summary>
            Gets or sets the Content of a File
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Stylesheet.Properties">
            <summary>
            Returns a list of umbraco back office enabled stylesheet properties
            </summary>
            <remarks>
            An umbraco back office enabled stylesheet property has a special prefix, for example: 
            
            /** umb_name: MyPropertyName */ p { font-size: 1em; }
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Stylesheet.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, which in this case is a path/name.
            </summary>
            <remarks>
            Overrides the default Entity identity check.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.StylesheetProperty">
            <summary>
            Represents a Stylesheet Property
            </summary>
            <remarks>
            Properties are always formatted to have a single selector, so it can be used in the backoffice
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.StylesheetProperty.Name">
            <summary>
            The CSS rule name that can be used by Umbraco in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.StylesheetProperty.Alias">
            <summary>
            This is the CSS Selector
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.StylesheetProperty.Value">
            <summary>
            The CSS value for the selector
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Task">
            <summary>
            Represents a Task
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.Closed">
            <summary>
            Gets or sets a boolean indicating whether the task is closed
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.TaskType">
            <summary>
            Gets or sets the TaskType of the Task
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.EntityId">
            <summary>
            Gets or sets the Id of the entity, which this task is associated to
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.OwnerUserId">
            <summary>
            Gets or sets the Id of the user, who owns this task
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.AssigneeUserId">
            <summary>
            Gets or sets the Id of the user, who is assigned to this task
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.Comment">
            <summary>
            Gets or sets the Comment for the Task
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TaskType">
            <summary>
            Represents a Task Type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaskType.Alias">
            <summary>
            Gets or sets the Alias of the TaskType
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Template">
            <summary>
            Represents a Template file
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Template.IsMasterTemplate">
            <summary>
            Returns true if the template is used as a layout for other templates (i.e. it has 'children')
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.UmbracoObjectTypes">
            <summary>
            Enum used to represent the Umbraco Object Types and thier associated GUIDs
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Unknown">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.ContentItemType">
            <summary>
            Content Item Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.ROOT">
            <summary>
            Root
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Media">
            <summary>
            Media
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.MemberType">
            <summary>
            Member Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.MemberGroup">
            <summary>
            Member Group
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.ContentItem">
            <summary>
            Content Item
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.MediaType">
            <summary>
            "Media Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DocumentType">
            <summary>
            Document Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.RecycleBin">
            <summary>
            Recycle Bin
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Stylesheet">
            <summary>
            Stylesheet
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.Member">
            <summary>
            Member
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DataType">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DocumentTypeContainer">
            <summary>
            Document type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.MediaTypeContainer">
            <summary>
            Media type container
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.UmbracoObjectTypes.DataTypeContainer">
            <summary>
            Media type container
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.UmbracoObjectTypesExtensions">
            <summary>
            Extension methods for the UmbracoObjectTypes enum
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.UmbracoObjectTypesExtensions.GetUmbracoObjectType(System.String)">
            <summary>
            Get an UmbracoObjectTypes value from it's name
            </summary>
            <param name="name">Enum value name</param>
            <returns>an UmbracoObjectTypes Enum value</returns>
        </member>
        <member name="M:Umbraco.Core.Models.UmbracoObjectTypesExtensions.GetUmbracoObjectType(System.Guid)">
            <summary>
            Get an instance of an UmbracoObjectTypes enum value from it's GUID
            </summary>
            <param name="guid">Enum value GUID</param>
            <returns>an UmbracoObjectTypes Enum value</returns>
        </member>
        <member name="M:Umbraco.Core.Models.UmbracoObjectTypesExtensions.GetGuid(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Extension method for the UmbracoObjectTypes enum to return the enum GUID
            </summary>
            <param name="umbracoObjectType">UmbracoObjectTypes Enum value</param>
            <returns>a GUID value of the UmbracoObjectTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Models.UmbracoObjectTypesExtensions.GetName(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Extension method for the UmbracoObjectTypes enum to return the enum name
            </summary>
            <param name="umbracoObjectType">UmbracoObjectTypes value</param>
            <returns>The enum name of the UmbracoObjectTypes value</returns>
        </member>
        <member name="M:Umbraco.Core.Models.UmbracoObjectTypesExtensions.GetFriendlyName(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Extension method for the UmbracoObejctTypes enum to return the enum friendly name
            </summary>
            <param name="umbracoObjectType">UmbracoObjectTypes value</param>
            <returns>a string of the FriendlyName</returns>
        </member>
        <member name="M:Umbraco.Core.Models.UserExtensions.GetUserCulture(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Services.ILocalizedTextService)">
            <summary>
            Returns the culture info associated with this user, based on the language they're assigned to in the back office
            </summary>
            <param name="user"></param>
            <param name="textService"></param>
            <returns></returns>      
        </member>
        <member name="M:Umbraco.Core.Models.UserExtensions.HasPathAccess(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.IContent)">
            <summary>
            Checks if the user has access to the content item based on their start noe
            </summary>
            <param name="user"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.UserExtensions.HasPathAccess(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.IMedia)">
            <summary>
            Checks if the user has access to the media item based on their start noe
            </summary>
            <param name="user"></param>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.NetworkHelper">
            <summary>
            Currently just used to get the machine name in med trust and to format a machine name for use with file names
            </summary>
        </member>
        <member name="P:Umbraco.Core.NetworkHelper.FileSafeMachineName">
            <summary>
            Returns the machine name that is safe to use in file paths.
            </summary>
            <remarks>
            see: https://github.com/Shandem/ClientDependency/issues/4
            </remarks>
        </member>
        <member name="P:Umbraco.Core.NetworkHelper.MachineName">
            <summary>
            Returns the current machine name
            </summary>
            <remarks>
            Tries to resolve the machine name, if it cannot it uses the config section.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Validation.RequiredForPersistenceAttribute">
            <summary>
            A custom validation attribute which adds additional metadata to the property to indicate that 
            the value is required to be persisted.
            </summary>
            <remarks>
            In Umbraco, we persist content even if it is invalid, however there are some properties that are absolutely required
            in order to be persisted such as the Name of the content item. This attribute is re-usable to check for these types of
            properties over any sort of model.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.ApplicationEventsResolver">
            <summary>
            A resolver to return all IApplicationEvents objects
            </summary>
            <remarks>
            This is disposable because after the app has started it should be disposed to release any memory being occupied by instances.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="applicationEventHandlers"></param>
            <param name="serviceProvider"></param>		
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.InstantiateLegacyStartupHandlers">
            <summary>
            Create instances of all of the legacy startup handlers
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.DisposeResources">
            <summary>
            Clear out all of the instances, we don't want them hanging around and cluttering up memory
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.InstanceTypes">
            <summary>
            Override in order to only return types of IApplicationEventHandler and above, 
            do not include the legacy types of IApplicationStartupHandler
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.ApplicationEventHandlers">
            <summary>
            Gets the <see cref="T:Umbraco.Core.IApplicationEventHandler"/> implementations.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.ResolverCollection">
            <summary>
            Simply used to track all ManyObjectsResolverBase instances so that we can 
            reset them all at once really easily. 
            </summary>
            <remarks>
            Normally we'd use TypeFinding for this but because many of the resolvers are internal this won't work.
            We'd rather not keep a static list of them so we'll dynamically add to this list based on the base
            class of the ManyObjectsResolverBase.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ResolverCollection.ResetAll">
            <summary>
            Resets all resolvers
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ResolverCollection.Remove(Umbraco.Core.ObjectResolution.ResolverBase)">
            <summary>
            This is called when the static Reset method or a ResolverBase{T} is called.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ResolverCollection.Add(Umbraco.Core.ObjectResolution.ResolverBase,System.Action)">
            <summary>
            Adds a resolver to the collection
            </summary>
            <param name="resolver"></param>
            <param name="resetAction"></param>
            <remarks>
            This is called when the creation of a ResolverBase occurs
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ResolverCollection.Count">
            <summary>
            Returns the number of resolvers created
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy">
            <summary>
            Defines an interface which must be implemented by custom components responsible for detecting specific transient conditions.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as transient, otherwise false.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs">
            <summary>
            Contains information required for the <see cref="E:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.Retrying"/> event.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs.#ctor(System.Int32,System.TimeSpan,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs"/> class.
            </summary>
            <param name="currentRetryCount">The current retry attempt count.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs.CurrentRetryCount">
            <summary>
            Gets the current retry count.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs.Delay">
            <summary>
            Gets the delay indicating how long the current thread will be suspended for before the next iteration will be invoked.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs.LastException">
            <summary>
            Gets the exception which caused the retry conditions to occur.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException">
            <summary>
            The special type of exception that provides managed exit from a retry loop. The user code can use this
            exception to notify the retry policy that no further retry attempts are required.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException"/> class with a default error message.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException"/> class with a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryPolicy">
            <summary>
            Provides the base implementation of the retry mechanism for unreliable actions and transient conditions.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with the default <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with the default <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with the default <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> retry strategy.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,Umbraco.Core.Persistence.FaultHandling.RetryStrategy)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryStrategy">The retry strategy to use for this retry policy.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and default fixed time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and fixed time interval between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The interval between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and back-off parameters for calculating the exponential delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time.</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The time value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.#ctor(Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the RetryPolicy class with the specified number of retry attempts and parameters defining the progressive delay between retries.
            </summary>
            <param name="errorDetectionStrategy">The <see cref="T:Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy"/> that is responsible for detecting transient conditions.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.ExecuteAction(System.Action)">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <param name="action">A delegate representing the executable action which doesn't return any results.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type R.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)">
            <summary>
            Notifies the subscribers whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastError">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
        </member>
        <member name="E:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.Retrying">
            <summary>
            An instance of a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.RetryStrategy">
            <summary>
            Gets the retry strategy.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.ErrorDetectionStrategy">
            <summary>
            Gets the instance of the error detection strategy.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.TransientErrorIgnoreStrategy">
            <summary>
            Implements a strategy that ignores any transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.TransientErrorIgnoreStrategy.IsTransient(System.Exception)">
            <summary>
            Always return false.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns false.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.TransientErrorCatchAllStrategy">
            <summary>
            Implements a strategy that treats all exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryPolicy.TransientErrorCatchAllStrategy.IsTransient(System.Exception)">
            <summary>
            Always return true.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryPolicyFactory">
            <summary>
            Provides a factory class for instantiating application-specific retry policies.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ShouldRetry">
            <summary>
            Defines a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <returns>Returns a callback delegate that will be invoked whenever to retry should be attempt.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.RetryStrategy">
            <summary>
            Represents a retry strategy that determines how many times should be retried and the interval between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount">
            <summary>
            The default number of retry attempts.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientBackoff">
            <summary>
            The default amount of time used when calculating a random delta in the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultMaxBackoff">
            <summary>
            The default maximum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultMinBackoff">
            <summary>
            The default minimum amount of time used when calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval">
            <summary>
            The default amount of time defining an interval between retries.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryIncrement">
            <summary>
            The default amount of time defining a time increment between retry attempts in the progressive delay policy.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultFirstFastRetry">
            <summary>
            The default flag indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.NoRetry">
            <summary>
            Returns a default policy that does no retries, it just invokes action exactly once.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultFixed">
            <summary>
            Returns a default policy that implements a fixed retry interval configured with <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/> and <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultProgressive">
            <summary>
            Returns a default policy that implements a progressive retry interval configured with <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryInterval"/> and <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultRetryIncrement"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultExponential">
            <summary>
            Returns a default policy that implements a random exponential retry interval configured with <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientRetryCount"/>, <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultMinBackoff"/>, <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultMaxBackoff"/> and <see cref="F:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.DefaultClientBackoff"/> parameters.
            The default retry policy treats all caught exceptions as transient errors.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.RetryStrategy"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.FastFirstRetry">
            <summary>
            Gets or sets a value indicating whether or not the very first retry attempt will be made immediately
            whereas the subsequent retries will remain subject to retry interval.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.RetryStrategy.Name">
            <summary>
            Gets the name of the retry strategy.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff">
            <summary>
            A retry strategy with back-off parameters for calculating the exponential delay between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff"/> class. 
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff"/> class. 
            </summary>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff"/> class. 
            </summary>
            <param name="name">The name of the retry strategy.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value that will be used for calculating a random delta in the exponential delay between retries.</param>
            <param name="firstFastRetry">
            Indicates whether or not the very first retry attempt will be made immediately 
            whereas the subsequent retries will remain subject to retry interval.
            </param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval">
            <summary>
            A retry strategy with a specified number of retry attempts and a default fixed time interval between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class. 
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.#ctor(System.String,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental">
            <summary>
            A retry strategy with a specified number of retry attempts and an incremental time interval between retries.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> class. 
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> class. 
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.#ctor(System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental"/> class. 
            </summary>
            <param name="name">The retry strategy name.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
            <param name="firstFastRetry">a value indicating whether or not the very first retry attempt will be made immediately whereas the subsequent retries will remain subject to retry interval.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental.GetShouldRetry">
            <summary>
            Returns the corresponding ShouldRetry delegate.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.NetworkConnectivityErrorDetectionStrategy">
            <summary>
            Implements a strategy that detects network connectivity errors such as host not found.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.SqlAzureTransientErrorDetectionStrategy">
            <summary>
            Provides the transient error detection logic for transient faults that are specific to SQL Azure.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.Strategies.SqlAzureTransientErrorDetectionStrategy.IsTransient(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as transient, otherwise false.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.Strategies.SqlAzureTransientErrorDetectionStrategy.ProcessNetLibErrorCode">
            <summary>
            Error codes reported by the DBNETLIB module.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode">
            <summary>
            Defines the possible throttling modes in SQL Azure.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.NoThrottling">
            <summary>
            Corresponds to "No Throttling" throttling mode whereby all SQL statements can be processed.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.RejectUpdateInsert">
            <summary>
            Corresponds to "Reject Update / Insert" throttling mode whereby SQL statements such as INSERT, UPDATE, CREATE TABLE and CREATE INDEX are rejected.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.RejectAllWrites">
            <summary>
            Corresponds to "Reject All Writes" throttling mode whereby SQL statements such as INSERT, UPDATE, DELETE, CREATE, DROP are rejected.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.RejectAll">
            <summary>
            Corresponds to "Reject All" throttling mode whereby all SQL statements are rejected.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingMode.Unknown">
            <summary>
            Corresponds to an unknown throttling mode whereby throttling mode cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ThrottlingType">
            <summary>
            Defines the possible throttling types in SQL Azure.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingType.None">
            <summary>
            Indicates that no throttling was applied to a given resource.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingType.Soft">
            <summary>
            Corresponds to a Soft throttling type. Soft throttling is applied when machine resources such as, CPU, IO, storage, and worker threads exceed 
            predefined safety thresholds despite the load balancer’s best efforts. 
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingType.Hard">
            <summary>
            Corresponds to a Hard throttling type. Hard throttling is applied when the machine is out of resources, for example storage space.
            With hard throttling, no new connections are allowed to the databases hosted on the machine until resources are freed up.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingType.Unknown">
            <summary>
            Corresponds to an unknown throttling type in the event when the throttling type cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType">
            <summary>
            Defines the types of resources in SQL Azure which may be subject to throttling conditions.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.PhysicalDatabaseSpace">
            <summary>
            Corresponds to "Physical Database Space" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.PhysicalLogSpace">
            <summary>
            Corresponds to "Physical Log File Space" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.LogWriteIoDelay">
            <summary>
            Corresponds to "Transaction Log Write IO Delay" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.DataReadIoDelay">
            <summary>
            Corresponds to "Database Read IO Delay" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.Cpu">
            <summary>
            Corresponds to "CPU" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.DatabaseSize">
            <summary>
            Corresponds to "Database Size" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.WorkerThreads">
            <summary>
            Corresponds to "SQL Worker Thread Pool" resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.Internal">
            <summary>
            Corresponds to an internal resource which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType.Unknown">
            <summary>
            Corresponds to an unknown resource type in the event when the actual resource cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition">
            <summary>
            Implements an object holding the decoded reason code returned from SQL Azure when encountering throttling conditions.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.ThrottlingErrorNumber">
            <summary>
            Gets the error number that corresponds to throttling conditions reported by SQL Azure.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.throttledResources">
            <summary>
            Maintains a collection of key-value pairs where a key is resource type and a value is the type of throttling applied to the given resource type.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.sqlErrorCodeRegEx">
            <summary>
            Provides a compiled regular expression used for extracting the reason code from the error message.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.FromException(System.Data.SqlClient.SqlException)">
            <summary>
            Determines throttling conditions from the specified SQL exception.
            </summary>
            <param name="ex">The <see cref="T:System.Data.SqlClient.SqlException"/> object containing information relevant to an error returned by SQL Server when encountering throttling conditions.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure upon encountering throttling conditions.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.FromError(System.Data.SqlClient.SqlError)">
            <summary>
            Determines the throttling conditions from the specified SQL error.
            </summary>
            <param name="error">The <see cref="T:System.Data.SqlClient.SqlError"/> object containing information relevant to a warning or error returned by SQL Server.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure when encountering throttling conditions.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.FromReasonCode(System.Int32)">
            <summary>
            Determines the throttling conditions from the specified reason code.
            </summary>
            <param name="reasonCode">The reason code returned by SQL Azure which contains the throttling mode and the exceeded resource types.</param>
            <returns>An instance of the object holding the decoded reason codes returned from SQL Azure when encountering throttling conditions.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.ToString">
            <summary>
             Returns a textual representation the current ThrottlingCondition object including the information held with respect to throttled resources.
            </summary>
            <returns>A string that represents the current ThrottlingCondition object.</returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.Unknown">
            <summary>
            Gets an unknown throttling condition in the event the actual throttling condition cannot be determined.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.ThrottlingMode">
            <summary>
            Gets the value that reflects the throttling mode in SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.ThrottledResources">
            <summary>
            Gets a list of resources in SQL Azure that were subject to throttling conditions.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnDataSpace">
            <summary>
            Gets a value indicating whether physical data file space throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnLogSpace">
            <summary>
            Gets a value indicating whether physical log space throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnLogWrite">
            <summary>
            Gets a value indicating whether transaction activity throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnDataRead">
            <summary>
            Gets a value indicating whether data read activity throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnCpu">
            <summary>
            Gets a value indicating whether CPU throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnDatabaseSize">
            <summary>
            Gets a value indicating whether database size throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsThrottledOnWorkerThreads">
            <summary>
            Gets a value indicating whether concurrent requests throttling was reported by SQL Azure.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition.IsUnknown">
            <summary>
            Gets a value indicating whether throttling conditions were not determined with certainty.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSeven.AlterCmsMacroPropertyTable">
            <summary>
            We are removing the cmsMacroPropertyType which the cmsMacroProperty references and the cmsMacroProperty.macroPropertyType column
            needs to be changed to editorAlias, we'll do this by removing the constraint,changing the macroPropertyType to the new 
            editorAlias column (and maintaing data so we can reference it)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSeven.AddIndexToCmsMacroPropertyTable">
            <summary>
            Creats a unique index across two columns so we cannot have duplicate property aliases for one macro
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSeven.AddIndexToCmsMacroTable">
            <summary>
            Creates a unique index on the macro alias so we cannot have duplicates by alias
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSeven.AlterTagRelationsTable.PropertyTypeReferenceDto">
            <summary>
            A custom class to map to so that we can linq to it easily without dynamics
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Upgrades.TargetVersionSeven.UpdateControlIdToPropertyEditorAlias">
            <summary>
            Updates the data in the changed propertyEditorAlias column after it has been changed by ChangeControlIdColumn
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForEntityType(Umbraco.Core.Models.TaggableObjectTypes,System.String)">
            <summary>
            Returns all tags for an entity type (content/media/member)
            </summary>
            <param name="objectType">Entity type</param>
            <param name="group">Optional group</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForEntity(System.Int32,System.String)">
            <summary>
            Returns all tags that exist on the content item - Content/Media/Member
            </summary>
            <param name="contentId">The content item id to get tags for</param>
            <param name="group">Optional group</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForEntity(System.Guid,System.String)">
            <summary>
            Returns all tags that exist on the content item - Content/Media/Member
            </summary>
            <param name="contentId">The content item id to get tags for</param>
            <param name="group">Optional group</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForProperty(System.Int32,System.String,System.String)">
            <summary>
            Returns all tags that exist on the content item for the property specified - Content/Media/Member
            </summary>
            <param name="contentId">The content item id to get tags for</param>
            <param name="propertyTypeAlias">The property alias to get tags for</param>
            <param name="group">Optional group</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.GetTagsForProperty(System.Guid,System.String,System.String)">
            <summary>
            Returns all tags that exist on the content item for the property specified - Content/Media/Member
            </summary>
            <param name="contentId">The content item id to get tags for</param>
            <param name="propertyTypeAlias">The property alias to get tags for</param>
            <param name="group">Optional group</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.AssignTagsToProperty(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag},System.Boolean)">
            <summary>
            Assigns the given tags to a content item's property
            </summary>
            <param name="contentId"></param>
            <param name="propertyTypeId"></param>
            <param name="tags">The tags to assign</param>
            <param name="replaceTags">
            If set to true, this will replace all tags with the given tags, 
            if false this will append the tags that already exist for the content item
            </param>
            <returns></returns>
            <remarks>
            This can also be used to remove all tags from a property by specifying replaceTags = true and an empty tag list.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.RemoveTagsFromProperty(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag})">
            <summary>
            Removes any of the given tags from the property association
            </summary>
            <param name="contentId"></param>
            <param name="propertyTypeId"></param>
            <param name="tags">The tags to remove from the property</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.ClearTagsFromProperty(System.Int32,System.Int32)">
            <summary>
            Removes all tag associations from the property
            </summary>
            <param name="contentId"></param>
            <param name="propertyTypeId"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITagRepository.ClearTagsFromEntity(System.Int32)">
            <summary>
            Removes all tag associations from the entity
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TagRepository.AssignTagsToProperty(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag},System.Boolean)">
            <summary>
            Assigns the given tags to a content item's property
            </summary>
            <param name="contentId"></param>
            <param name="propertyTypeId"></param>
            <param name="tags">The tags to assign</param>
            <param name="replaceTags">
            If set to true, this will replace all tags with the given tags, 
            if false this will append the tags that already exist for the content item
            </param>
            <returns></returns>
            <remarks>
            This can also be used to remove all tags from a property by specifying replaceTags = true and an empty tag list.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TagRepository.RemoveTagsFromProperty(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag})">
            <summary>
            Removes any of the given tags from the property association
            </summary>
            <param name="contentId"></param>
            <param name="propertyTypeId"></param>
            <param name="tags">The tags to remove from the property</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TagRepository.GetTagSet(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITag})">
            <summary>
            This is a clever way to produce an SQL statement like this:
            
                (select 'Spacesdd' as Tag, 'default' as [Group] 
                union 
                select 'Cool' as Tag, 'default' as [Group]
                ) as TagSet
            
            This allows us to use the tags to be inserted as a temporary in memory table. 
            </summary>
            <param name="tagsToInsert"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.BackwardsCompatibleData">
            <summary>
            This is used purelty to attempt to maintain some backwards compatibility with new property editors that don't have a 
            legacy property editor predecessor when developers are using the legacy APIs
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.BackwardsCompatibleData.umbraco#interfaces#IDataValueSetter#SetValue(System.Object,System.String)">
            <summary>
            This is here for performance reasons since in some cases we will have already resolved the value from the db
            and want to just give this object the value so it doesn't go re-look it up from the database.
            </summary>
            <param name="val"></param>
            <param name="strDbType"></param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.BackwardsCompatibleData.LoadValueFromDatabase">
            <summary>
            In the case where the value is not set, this will go get it from the db ourselves - this shouldn't really ever be needed,
            the value should always be set with IDataValueSetter.SetValue
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.BackwardsCompatibleData.Value">
            <summary>
            This returns the value
            </summary>
            <remarks>
            There's code here to load the data from the db just like the legacy DefaultData does but in theory the value of this
            IData should always be set using the IDataValueSetter.SetValue which is done externally. Just in case there's some edge
            case out there that doesn't set this value, we'll go and get it based on the same logic in DefaultData.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.BackwardsCompatibleDataType">
            <summary>
            This is used purelty to attempt to maintain some backwards compatibility with new property editors that don't have a 
            legacy property editor predecessor when developers are using the legacy APIs
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.BackwardsCompatibleDataType.Create(System.String,System.Guid,System.Int32)">
            <summary>
            Creates a runtime instance
            </summary>
            <param name="propEdAlias"></param>
            <param name="legacyId"></param>
            <param name="dataTypeDefId"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.EmailValidator">
            <summary>
            A validator that validates an email address
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IParameterEditor.Alias">
            <summary>
            The id  of the property editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IParameterEditor.Name">
            <summary>
            The name of the property editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.IParameterEditor.Configuration">
            <summary>
            Allows a parameter editor to be re-used based on the configuration specified.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.LegacyParameterEditorAliasConverter">
            <summary>
            Used to map the legacy parameter editor aliases to the new ones, this is really just used during 
            installation but has been put in a separate class in case we need it for other purposes
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.LegacyParameterEditorAliasConverter._map">
            <summary>
            The map consists of a key which is always the legacy alias + new alias (trimmed))
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LegacyParameterEditorAliasConverter.CreateMap(System.String,System.String)">
            <summary>
            Creates a map for the specified legacy alias and property editor alias
            </summary>
            <param name="legacyAlias"></param>
            <param name="alias"></param>
            <returns>true if the map was created or false if it was already created</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LegacyParameterEditorAliasConverter.GetNewAliasFromLegacyAlias(System.String,System.Boolean)">
            <summary>
            Gets an alias based on the legacy alias
            </summary>
            <param name="legacyAlias"></param>
            <param name="throwIfNotFound">if set to true will throw an exception if the map isn't found</param>
            <returns>Returns the alias if found otherwise null if not found</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LegacyParameterEditorAliasConverter.GetLegacyAliasFromNewAlias(System.String,System.Boolean)">
            <summary>
            Gets a legacy Id based on the alias
            </summary>
            <param name="alias"></param>
            <param name="throwIfNotFound">if set to true will throw an exception if the map isn't found</param>
            <returns>Returns the legacy GUID of a property editor if found, otherwise returns null</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LegacyParameterEditorAliasConverter.CreateMappingsForCoreEditors">
            <summary>
            A method that should be called on startup to register the mappings for the internal core editors
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.LegacyPropertyEditorIdToAliasConverter">
            <summary>
            This is used to map old legacy property editor GUID's to the new Property Editor alias (string) format.
            </summary>
            <remarks>
            This can be used by developers on application startup to register a mapping from their old ids to their new aliases and vice-versa.
            </remarks>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.LegacyPropertyEditorIdToAliasConverter._map">
            <summary>
            The map consists of a key which is always the GUID (lowercase, no hyphens + alias (trimmed))
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LegacyPropertyEditorIdToAliasConverter.CreateMap(System.Guid,System.String)">
            <summary>
            Creates a map for the specified legacy id and property editor alias
            </summary>
            <param name="legacyId"></param>
            <param name="alias"></param>
            <returns>true if the map was created or false if it was already created</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LegacyPropertyEditorIdToAliasConverter.GetAliasFromLegacyId(System.Guid,System.Boolean)">
            <summary>
            Gets an alias based on the legacy ID
            </summary>
            <param name="legacyId"></param>
            <param name="throwIfNotFound">if set to true will throw an exception if the map isn't found</param>
            <returns>Returns the alias if found otherwise null if not found</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LegacyPropertyEditorIdToAliasConverter.GetLegacyIdFromAlias(System.String,Umbraco.Core.PropertyEditors.LegacyPropertyEditorIdToAliasConverter.NotFoundLegacyIdResponseBehavior)">
            <summary>
            Gets a legacy Id based on the alias
            </summary>
            <param name="alias"></param>
            <param name="notFoundBehavior"></param>
            <returns>Returns the legacy GUID of a property editor if found, otherwise returns null</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.LegacyPropertyEditorIdToAliasConverter.CreateMappingsForCoreEditors">
            <summary>
            A method that should be called on startup to register the mappings for the internal core editors
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MapperForAttribute">
            <summary>
            An attribute used to decorate mappers to be associated with entities
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MemberMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Member"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MemberTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.MemberType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PetaPocoMapper">
            <summary>
            Represents the PetaPocoMapper, which is the implementation of the IMapper interface.
            This is currently only used to ensure that nullable dates are not saved to the database.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute">
            <summary>
            Attribute that represents a db constraint
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute.Name">
            <summary>
            Gets or sets the name of the constraint
            </summary>
            <remarks>
            Overrides the default naming of a property constraint:
            DF_tableName_propertyName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute.Default">
            <summary>
            Gets or sets the Default value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute">
            <summary>
            Attribute that represents the usage of a special type
            </summary>
            <remarks>
            Should only be used when the .NET type can't be directly translated to a DbType.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute.DatabaseType">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypes"/> for this column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.LengthAttribute">
            <summary>
            Attribute that represents the length of a column
            </summary>
            <remarks>Used to define the length of fixed sized columns - typically used for nvarchar</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.LengthAttribute.Length">
            <summary>
            Gets or sets the length of a column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypes">
            <summary>
            Enum with the two special types that has to be supported because
            of the current umbraco db schema.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute">
            <summary>
            Attribute that represents a Foreign Key reference
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ReferencesAttribute">
            <summary>
            Attribute that represents a reference between two tables/DTOs
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ReferencesAttribute.Type">
            <summary>
            Gets or sets the Type of the referenced DTO/table
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute.Name">
            <summary>
            Gets or sets the name of the foreign key refence
            </summary>
            <remarks>
            Overrides the default naming of a foreign key reference:
            FK_thisTableName_refTableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute.Column">
            <summary>
            Gets or sets the name of the Column that this foreign key should reference.
            </summary>
            <remarks>PrimaryKey column is used by default</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute">
            <summary>
            Attribute that represents an Index
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.Name">
            <summary>
            Gets or sets the name of the Index
            </summary>
            <remarks>
            Overrides default naming of indexes: 
            IX_tableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.IndexType">
            <summary>
            Gets or sets the type of index to create
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.ForColumns">
            <summary>
            Gets or sets the column name(s) for the current index
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.IndexTypes">
            <summary>
            Enum for the 3 types of indexes that can be created
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettingAttribute">
            <summary>
            Attribute that represents the Null-setting of a column
            </summary>
            <remarks>
            This should only be used for Columns that can be Null.
            By convention the Columns will be "NOT NULL".
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettingAttribute.NullSetting">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettings"/> for a column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettings">
            <summary>
            Enum with the 2 possible Null settings: Null or Not Null
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute">
            <summary>
            Attribute that represents a Primary Key
            </summary>
            <remarks>
            By default, Clustered and AutoIncrement is set to true.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.Clustered">
            <summary>
            Gets or sets a boolean indicating whether the primary key is clustered.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.AutoIncrement">
            <summary>
            Gets or sets a boolean indicating whether the primary key is auto incremented.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.Name">
            <summary>
            Gets or sets the name of the PrimaryKey.
            </summary>
            <remarks>
            Overrides the default naming of a PrimaryKey constraint: 
            PK_tableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.OnColumns">
            <summary>
            Gets or sets the names of the columns for this PrimaryKey.
            </summary>
            <remarks>
            Should only be used if the PrimaryKey spans over multiple columns.
            Usage: [nodeId], [otherColumn]
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.IdentitySeed">
            <summary>
            Gets or sets the Identity Seed, which is used for Sql Ce databases.
            </summary>
            <remarks>
            We'll only look for changes to seeding and apply them if the configured database
            is an Sql Ce database.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.DefaultDatabaseFactory">
            <summary>
            The default implementation for the IDatabaseFactory
            </summary>
            <remarks>
            If we are running in an http context
            it will create one per context, otherwise it will be a global singleton object which is NOT thread safe
            since we need (at least) a new instance of the database object per thread.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.IDatabaseFactory">
            <summary>
            Used to create the UmbracoDatabase for use in the DatabaseContext
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.DefaultDatabaseFactory.#ctor(System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Constructor accepting custom connection string
            </summary>
            <param name="connectionStringName">Name of the connection string in web.config</param>
            <param name="logger"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.DefaultDatabaseFactory.#ctor(System.String,System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Constructor accepting custom connectino string and provider name
            </summary>
            <param name="connectionString">Connection String to use with Database</param>
            <param name="providerName">Database Provider for the Connection String</param>
            <param name="logger"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.ContentMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Content"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.ContentTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.ContentType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DataTypeDefinitionMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DataTypeDefinition"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DictionaryMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DictionaryItem"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DictionaryTranslationMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DictionaryTranslation"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.LanguageMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Language"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Mappers.MappingResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor accepting a list of BaseMapper types that are attributed with the MapperFor attribute
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="assignedMapperTypes"></param>
        </member>
        <member name="F:Umbraco.Core.Persistence.Mappers.MappingResolver._mapperCache">
            <summary>
            Caches the type -> mapper so that we don't have to type check each time we want one or lookup the attribute
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Mappers.MappingResolver.ResolveMapperByType(System.Type)">
            <summary>
            Return a mapper by type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Mappers.MappingResolver.TryGetMapperByAttribute(System.Type)">
            <summary>
            Check the entity type to see if it has a mapper attribute assigned and try to instantiate it
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MediaMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Media"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MediaTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.MediaType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PropertyGroupMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.PropertyGroup"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PropertyTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.PropertyType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.RelationMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Relation"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.RelationTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.RelationType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.UserTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Membership.UserType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.IMigrationExpression">
            <summary>
            Marker interface for migration expressions
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Initial.BaseDataCreation">
            <summary>
            Represents the initial data creation by running Insert for the base data.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.BaseDataCreation.InitializeBaseData(System.String)">
            <summary>
            Initialize the base data creation by inserting the data foundation for umbraco
            specific to a table
            </summary>
            <param name="tableName">Name of the table to create base data for</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation">
            <summary>
            Represents the initial database schema creation by running CreateTable for all DTOs against the db.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.#ctor(Umbraco.Core.Persistence.Database,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
            <param name="logger"></param>
            <param name="sqlSyntaxProvider"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.UninstallDatabaseSchema">
            <summary>
            Drops all Umbraco tables in the db
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.InitializeDatabaseSchema">
            <summary>
            Initialize the database by creating the umbraco db schema
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.ValidateSchema">
            <summary>
            Validates the schema of the current database
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.FireBeforeCreation(Umbraco.Core.Events.DatabaseCreationEventArgs)">
            <summary>
            Raises the <see cref="E:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.BeforeCreation"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.FireAfterCreation(Umbraco.Core.Events.DatabaseCreationEventArgs)">
            <summary>
            Raises the <see cref="E:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.AfterCreation"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.BeforeCreation">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.AfterCreation">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.DatabaseEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaResult.DetermineInstalledVersionByMigrations(Umbraco.Core.Services.IMigrationEntryService)">
            <summary>
            Checks in the db which version is installed based on the migrations that have been run
            </summary>
            <param name="migrationEntryService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaResult.DetermineInstalledVersion">
            <summary>
            Determines the version of the currently installed database by detecting the current database structure
            </summary>
            <returns>
            A <see cref="T:System.Version"/> with Major and Minor values for 
            non-empty database, otherwise "0.0.0" for empty databases.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaResult.GetSummary">
            <summary>
            Gets a summary of the schema validation result
            </summary>
            <returns>A string containing a human readable string with a summary message</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.MigrationAttribute">
            <summary>
            Represents the Migration attribute, which is used to mark classes as
            database migrations with Up/Down methods for pushing changes UP or pulling them DOWN.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationAttribute.MinimumCurrentVersion">
            <summary>
            Gets the minimum current version for which this migration is allowed to execute
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationAttribute.TargetVersion">
            <summary>
            Gets the target version of this migration.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationAttribute.SortOrder">
            <summary>
            Gets or sets the sort order, which is the order this migration will be run in.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationAttribute.ProductName">
            <summary>
            Gets or sets the name of the product, which this migration belongs to.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Umbraco.Core.Persistence.Migrations.MigrationExpressionBase.Name" -->
        <member name="T:Umbraco.Core.Persistence.Migrations.MigrationResolver">
            <summary>
            A resolver to return all IMigrations
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationResolver.#ctor(Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="migrations"></param>
            <remarks>
            Use transient objects as we don't want these as singletons and take up memory that is not required
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationResolver.Migrations">
            <summary>
            Gets the migrations
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.MigrationResolver.MigrationServiceProvider">
            <summary>
            This will ctor the IMigration instances
            </summary>
            <remarks>
            This is like a super crappy DI - in v8 we have real DI
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.MigrationRunner">
            <summary>
            Represents the Migration Runner, which is used to apply migrations to
            the umbraco database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationRunner.Execute(Umbraco.Core.Persistence.Database,System.Boolean)">
            <summary>
            Executes the migrations against the database.
            </summary>
            <param name="database">The PetaPoco Database, which the migrations will be run against</param>
            <param name="isUpgrade">Boolean indicating whether this is an upgrade or downgrade</param>
            <returns><c>True</c> if migrations were applied, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationRunner.Execute(Umbraco.Core.Persistence.Database,Umbraco.Core.Persistence.DatabaseProviders,System.Boolean)">
            <summary>
            Executes the migrations against the database.
            </summary>
            <param name="database">The PetaPoco Database, which the migrations will be run against</param>
            <param name="databaseProvider"></param>
            <param name="isUpgrade">Boolean indicating whether this is an upgrade or downgrade</param>
            <returns><c>True</c> if migrations were applied, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationRunner.OrderedUpgradeMigrations(System.Collections.Generic.IEnumerable{Umbraco.Core.Persistence.Migrations.IMigration})">
            <summary>
            Filters and orders migrations based on the migrations listed and the currently configured version and the target installation version
            </summary>
            <param name="foundMigrations"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationRunner.OrderedDowngradeMigrations(System.Collections.Generic.IEnumerable{Umbraco.Core.Persistence.Migrations.IMigration})">
            <summary>
            Filters and orders migrations based on the migrations listed and the currently configured version and the target installation version
            </summary>
            <param name="foundMigrations"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationRunner.FindMigrations">
            <summary>
            Find all migrations that are available through the <see cref="T:Umbraco.Core.Persistence.Migrations.MigrationResolver"/>
            </summary>
            <returns>An array of <see cref="T:Umbraco.Core.Persistence.Migrations.IMigration"/></returns>
        </member>
        <member name="E:Umbraco.Core.Persistence.Migrations.MigrationRunner.Migrating">
            <summary>
            Occurs before Migration
            </summary>
        </member>
        <member name="E:Umbraco.Core.Persistence.Migrations.MigrationRunner.Migrated">
            <summary>
            Occurs after Migration
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.PetaPocoCommandExtensions">
            <summary>
            Provides a set of extension methods adding retry capabilities into the standard <see cref="T:System.Data.IDbConnection"/> implementation, which is used in PetaPoco.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteNonQueryWithRetry(System.Data.IDbCommand)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the default retry policy when executing the command.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteNonQueryWithRetry(System.Data.IDbCommand,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the specified retry policy when executing the command.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="retryPolicy">The retry policy defining whether to retry a command if a connection fails while executing the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteNonQueryWithRetry(System.Data.IDbCommand,Umbraco.Core.Persistence.FaultHandling.RetryPolicy,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected. Uses the specified retry policy when executing the command.
            Uses a separate specified retry policy when establishing a connection.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="cmdRetryPolicy">The command retry policy defining whether to retry a command if it fails while executing.</param>
            <param name="conRetryPolicy">The connection retry policy defining whether to re-establish a connection if it drops while executing the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteReaderWithRetry(System.Data.IDbCommand)">
            <summary>
            Sends the specified command to the connection and builds a SqlDataReader object containing the results.
            Uses the default retry policy when executing the command.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <returns>A System.Data.IDataReader object.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteReaderWithRetry(System.Data.IDbCommand,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Sends the specified command to the connection and builds a SqlDataReader object containing the results.
            Uses the specified retry policy when executing the command.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="retryPolicy">The retry policy defining whether to retry a command if a connection fails while executing the command.</param>
            <returns>A System.Data.IDataReader object.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteReaderWithRetry(System.Data.IDbCommand,Umbraco.Core.Persistence.FaultHandling.RetryPolicy,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Sends the specified command to the connection and builds a SqlDataReader object containing the results.
            Uses the specified retry policy when executing the command. Uses a separate specified retry policy when
            establishing a connection.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="cmdRetryPolicy">The command retry policy defining whether to retry a command if it fails while executing.</param>
            <param name="conRetryPolicy">The connection retry policy defining whether to re-establish a connection if it drops while executing the command.</param>
            <returns>A System.Data.IDataReader object.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteReaderWithRetry(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Sends the specified command to the connection and builds a SqlDataReader object using one of the 
            CommandBehavior values. Uses the default retry policy when executing the command.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A System.Data.IDataReader object.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteReaderWithRetry(System.Data.IDbCommand,System.Data.CommandBehavior,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Sends the specified command to the connection and builds a SqlDataReader object using one of the
            CommandBehavior values. Uses the specified retry policy when executing the command.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <param name="retryPolicy">The retry policy defining whether to retry a command if a connection fails while executing the command.</param>
            <returns>A System.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteReaderWithRetry(System.Data.IDbCommand,System.Data.CommandBehavior,Umbraco.Core.Persistence.FaultHandling.RetryPolicy,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Sends the specified command to the connection and builds a SqlDataReader object using one of the
            CommandBehavior values. Uses the specified retry policy when executing the command.
            Uses a separate specified retry policy when establishing a connection.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="behavior">One of the System.Data.CommandBehavior values.</param>
            <param name="cmdRetryPolicy">The command retry policy defining whether to retry a command if it fails while executing.</param>
            <param name="conRetryPolicy">The connection retry policy defining whether to re-establish a connection if it drops while executing the command.</param>
            <returns>A System.Data.IDataReader object.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteScalarWithRetry(System.Data.IDbCommand)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            Uses the default retry policy when executing the command.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <returns> The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteScalarWithRetry(System.Data.IDbCommand,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            Uses the specified retry policy when executing the command.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="retryPolicy">The retry policy defining whether to retry a command if a connection fails while executing the command.</param>
            <returns> The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.ExecuteScalarWithRetry(System.Data.IDbCommand,Umbraco.Core.Persistence.FaultHandling.RetryPolicy,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            Uses the specified retry policy when executing the command. Uses a separate specified retry policy when establishing a connection.
            </summary>
            <param name="command">The command object that is required as per extension method declaration.</param>
            <param name="cmdRetryPolicy">The command retry policy defining whether to retry a command if it fails while executing.</param>
            <param name="conRetryPolicy">The connection retry policy defining whether to re-establish a connection if it drops while executing the command.</param>
            <returns> The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoCommandExtensions.EnsureValidConnection(System.Data.IDbCommand,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Ensure a valid connection in case a connection hasn't been opened by PetaPoco (which shouldn't be possible by the way).
            </summary>
            <param name="command"></param>
            <param name="retryPolicy"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.PetaPocoConnectionExtensions">
            <summary>
            Provides a set of extension methods adding retry capabilities into the standard <see cref="T:System.Data.IDbConnection"/> interface, which is used in PetaPoco.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoConnectionExtensions.OpenWithRetry(System.Data.IDbConnection)">
            <summary>
            Opens a database connection with the connection settings specified in the ConnectionString property of the connection object.
            Uses the default retry policy when opening the connection.
            </summary>
            <param name="connection">The connection object that is required as per extension method declaration.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoConnectionExtensions.OpenWithRetry(System.Data.IDbConnection,Umbraco.Core.Persistence.FaultHandling.RetryPolicy)">
            <summary>
            Opens a database connection with the connection settings specified in the ConnectionString property of the connection object.
            Uses the specified retry policy when opening the connection.
            </summary>
            <param name="connection">The connection object that is required as per extension method declaration.</param>
            <param name="retryPolicy">The retry policy defining whether to retry a request if the connection fails to be opened.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoExtensions.InsertOrUpdate``1(Umbraco.Core.Persistence.Database,``0)">
            <summary>
            Safely inserts a record, or updates if it exists, based on a unique constraint.
            </summary>
            <param name="db"></param>
            <param name="poco"></param>       
            <returns>The action that executed, either an insert or an update. If an insert occurred and a PK value got generated, the poco object
            passed in will contain the updated value.</returns>
            <remarks>
            <para>We cannot rely on database-specific options such as MySql ON DUPLICATE KEY UPDATE or MSSQL MERGE WHEN MATCHED because SQLCE
            does not support any of them. Ideally this should be achieved with proper transaction isolation levels but that would mean revisiting
            isolation levels globally. We want to keep it simple for the time being and manage it manually.</para>
            <para>We handle it by trying to update, then insert, etc. until something works, or we get bored.</para>
            <para>Note that with proper transactions, if T2 begins after T1 then we are sure that the database will contain T2's value
            once T1 and T2 have completed. Whereas here, it could contain T1's value.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoExtensions.InsertOrUpdate``1(Umbraco.Core.Persistence.Database,``0,System.String,System.Object)">
            <summary>
            Safely inserts a record, or updates if it exists, based on a unique constraint.
            </summary>
            <param name="db"></param>
            <param name="poco"></param>
            <param name="updateArgs"></param>      
            <param name="updateCommand">If the entity has a composite key they you need to specify the update command explicitly</param>
            <returns>The action that executed, either an insert or an update. If an insert occurred and a PK value got generated, the poco object
            passed in will contain the updated value.</returns>
            <remarks>
            <para>We cannot rely on database-specific options such as MySql ON DUPLICATE KEY UPDATE or MSSQL MERGE WHEN MATCHED because SQLCE
            does not support any of them. Ideally this should be achieved with proper transaction isolation levels but that would mean revisiting
            isolation levels globally. We want to keep it simple for the time being and manage it manually.</para>
            <para>We handle it by trying to update, then insert, etc. until something works, or we get bored.</para>
            <para>Note that with proper transactions, if T2 begins after T1 then we are sure that the database will contain T2's value
            once T1 and T2 have completed. Whereas here, it could contain T1's value.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoExtensions.EscapeAtSymbols(System.String)">
            <summary>
            This will escape single @ symbols for peta poco values so it doesn't think it's a parameter
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoExtensions.BulkInsertRecords``1(Umbraco.Core.Persistence.Database,System.Collections.Generic.IEnumerable{``0},Umbraco.Core.Persistence.Transaction,System.Boolean)">
            <summary>
            Performs the bulk insertion in the context of a current transaction with an optional parameter to complete the transaction
            when finished
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="collection"></param>
            <param name="tr"></param>
            <param name="commitTrans"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoExtensions.GenerateBulkInsertCommand``1(Umbraco.Core.Persistence.Database,System.Collections.Generic.IEnumerable{``0},System.Data.IDbConnection,System.String[]@)">
            <summary>
            Creates a bulk insert command
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="collection"></param>
            <param name="connection"></param>        
            <param name="sql"></param>
            <returns>Sql commands with populated command parameters required to execute the sql statement</returns>
            <remarks>
            The limits for number of parameters are 2100 (in sql server, I think there's many more allowed in mysql). So 
            we need to detect that many params and split somehow. 
            For some reason the 2100 limit is not actually allowed even though the exception from sql server mentions 2100 as a max, perhaps it is 2099 
            that is max. I've reduced it to 2000 anyways.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoExtensions.CreateDatabaseSchema(Umbraco.Core.Persistence.Database)">
            <summary>
            Creates the Umbraco db schema in the Database of the current Database.
            Safe method that is only able to create the schema in non-configured
            umbraco instances.
            </summary>
            <param name="db">Current PetaPoco <see cref="T:Umbraco.Core.Persistence.Database"/> object</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.PetaPocoExtensions.CreateDatabaseSchema(Umbraco.Core.Persistence.Database,System.Boolean)">
            <summary>
            Creates the Umbraco db schema in the Database of the current Database
            with the option to guard the db from having the schema created
            multiple times.
            </summary>
            <param name="db"></param>
            <param name="guardConfiguration"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.PetaPocoSqlExtensions">
            <summary>
            Extension methods adding strong types to PetaPoco's Sql Builder
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.BaseExpressionHelper">
            <summary>
            Logic that is shared with the expression helpers
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.QueryExtensions">
            <summary>
            SD: This is a horrible hack but unless we break compatibility with anyone who's actually implemented IQuery{T} there's not much we can do.
            The IQuery{T} interface is useless without having a GetWhereClauses method and cannot be used for tests.
            We have to wait till v8 to make this change I suppose.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.QueryExtensions.GetWhereClauses``1(Umbraco.Core.Persistence.Querying.IQuery{``0})">
            <summary>
            Returns all translated where clauses and their sql parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.IQuery`1">
            <summary>
            Represents a query for building Linq translatable SQL queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a where clause to the query
            </summary>
            <param name="predicate"></param>
            <returns>This instance so calls to this method are chainable</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.Query`1">
            <summary>
            Represents the Query Builder for building LINQ translatable queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.Query`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a where clause to the query
            </summary>
            <param name="predicate"></param>
            <returns>This instance so calls to this method are chainable</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Querying.Query`1.GetWhereClauses">
            <summary>
            Returns all translated where clauses and their sql parameters
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.Querying.Query`1.Builder">
            <summary>
            Helper method to be used instead of manually creating an instance
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.SqlTranslator`1">
            <summary>
            Represents the Sql Translator for translating a IQuery object to Sql
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ContentRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.VersionableRepositoryBase`2.PerformDeleteVersion(System.Int32,System.Guid)">
            <summary>
            Protected method to execute the delete statements for removing a single version for a TEntity item.
            </summary>
            <param name="id">Id of the <see cref="!:TEntity"/> to delete a version from</param>
            <param name="versionId">Guid id of the version to delete</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.VersionableRepositoryBase`2.Count(System.String)">
            <summary>
            Get the total count of entities
            </summary>
            <param name="contentTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.VersionableRepositoryBase`2.ClearEntityTags(Umbraco.Core.Models.IContentBase,Umbraco.Core.Persistence.Repositories.ITagRepository)">
            <summary>
            This removes associated tags from the entity - used generally when an entity is recycled
            </summary>
            <param name="entity"></param>
            <param name="tagRepo"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.VersionableRepositoryBase`2.UpdatePropertyTags(Umbraco.Core.Models.IContentBase,Umbraco.Core.Persistence.Repositories.ITagRepository)">
            <summary>
            Updates the tag repository with any tag enabled properties and their values
            </summary>
            <param name="entity"></param>
            <param name="tagRepo"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.VersionableRepositoryBase`2.GetPagedResultsByQuery``2(Umbraco.Core.Persistence.Querying.IQuery{`1},System.Int64,System.Int32,System.Int64@,System.Tuple{System.String,System.String},System.Func{Umbraco.Core.Persistence.Sql,System.Collections.Generic.IEnumerable{`1}},System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.Func{System.Tuple{System.String,System.Object[]}})">
            <summary>
            A helper method for inheritors to get the paged results by query in a way that minimizes queries
            </summary>
            <typeparam name="TDto">The type of the d.</typeparam>
            <typeparam name="TContentBase">The 'true' entity type (i.e. Content, Member, etc...)</typeparam>
            <param name="query">The query.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="totalRecords">The total records.</param>
            <param name="nodeIdSelect">The tablename + column name for the SELECT statement fragment to return the node id from the query</param>
            <param name="defaultFilter">A callback to create the default filter to be applied if there is one</param>
            <param name="processQuery">A callback to process the query result</param>
            <param name="orderBy">The order by column</param>
            <param name="orderDirection">The order direction.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">orderBy</exception>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.VersionableRepositoryBase`2.DeleteMediaFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes all media files passed in.
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.VersionableRepositoryBase`2.DocumentDefinition.#ctor(System.Int32,System.Guid,System.DateTime,System.DateTime,Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RecycleBinRepository`2.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by running single bulk-Delete queries
            against the Content- or Media's Recycle Bin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RecycleBinRepository`2.GetFilesInRecycleBinForUploadField">
            <summary>
            Gets a list of files, which are referenced on items in the Recycle Bin.
            The list is generated by the convention that a file is referenced by 
            the Upload data type or a property type with the alias 'umbracoFile'.
            </summary>
            <returns></returns>
            <remarks>
            This is purely for backwards compatibility
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2">
            <summary>
            Defines the implementation of a Repository, which allows getting versions of an <see cref="!:TEntity"/>
            </summary>
            <typeparam name="TEntity">Type of <see cref="T:Umbraco.Core.Models.EntityBase.IAggregateRoot"/> entity for which the repository is used</typeparam>
            <typeparam name="TId">Type of the Id used for this entity</typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.RebuildXmlStructures(System.Func{`1,System.Xml.Linq.XElement},System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Rebuilds the xml structures for all TEntity if no content type ids are specified, otherwise rebuilds the xml structures
            for only the content types specified
            </summary>
            <param name="serializer">The serializer to convert TEntity to Xml</param>
            <param name="groupSize">Structures will be rebuilt in chunks of this size</param>
            <param name="contentTypeIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.Count(System.String)">
            <summary>
            Get the total count of entities
            </summary>
            <param name="contentTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.GetAllVersions(System.Int32)">
            <summary>
            Gets a list of all versions for an <see cref="!:TEntity"/>.
            </summary>
            <param name="id">Id of the <see cref="!:TEntity"/> to retrieve versions from</param>
            <returns>An enumerable list of the same <see cref="!:TEntity"/> object with different versions</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="!:TEntity"/>.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="!:TEntity"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.DeleteVersion(System.Guid)">
            <summary>
            Deletes a specific version from an <see cref="!:TEntity"/> object.
            </summary>
            <param name="versionId">Id of the version to delete</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.DeleteVersions(System.Int32,System.DateTime)">
            <summary>
            Deletes versions from an <see cref="!:TEntity"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="!:TEntity"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.CountPublished">
            <summary>
            Get the count of published items
            </summary>
            <returns></returns>
            <remarks>
            We require this on the repo because the IQuery{IContent} cannot supply the 'newest' parameter
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Persistence.Repositories.IContentRepository.ReplaceContentPermissions(Umbraco.Core.Models.Membership.EntityPermissionSet)" -->
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.ClearPublished(Umbraco.Core.Models.IContent)">
            <summary>
            Clears the published flag for a content.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.GetByPublishedVersion(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent})">
            <summary>
            Gets all published Content by the specified query
            </summary>
            <param name="query">Query to execute against published versions</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.AssignEntityPermission(Umbraco.Core.Models.IContent,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns a single permission to the current content item for the specified user ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.GetPermissionsForEntity(System.Int32)">
            <summary>
            Gets the list of permissions for the content item
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.AddOrUpdateContentXml(Umbraco.Core.Models.IContent,System.Func{Umbraco.Core.Models.IContent,System.Xml.Linq.XElement})">
            <summary>
            Used to add/update published xml for the content item
            </summary>
            <param name="content"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.DeleteContentXml(Umbraco.Core.Models.IContent)">
            <summary>
            Used to remove the content xml for a content item
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.AddOrUpdatePreviewXml(Umbraco.Core.Models.IContent,System.Func{Umbraco.Core.Models.IContent,System.Xml.Linq.XElement})">
            <summary>
            Used to add/update preview xml for the content item
            </summary>
            <param name="content"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets paged content results
            </summary>
            <param name="query">Query to excute</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.AssignEntityPermission(Umbraco.Core.Models.IContent,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns a single permission to the current content item for the specified user ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="userIds"></param>        
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.AddOrUpdateContentXml(Umbraco.Core.Models.IContent,System.Func{Umbraco.Core.Models.IContent,System.Xml.Linq.XElement})">
            <summary>
            Adds/updates content/published xml
            </summary>
            <param name="content"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.DeleteContentXml(Umbraco.Core.Models.IContent)">
            <summary>
            Used to remove the content xml for a content item
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.AddOrUpdatePreviewXml(Umbraco.Core.Models.IContent,System.Func{Umbraco.Core.Models.IContent,System.Xml.Linq.XElement})">
            <summary>
            Adds/updates preview xml
            </summary>
            <param name="content"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent},System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets paged content results
            </summary>
            <param name="query">Query to excute</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.CreateContentFromDto(Umbraco.Core.Models.Rdbms.DocumentDto,Umbraco.Core.Models.IContentType,Umbraco.Core.Models.ITemplate,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Private method to create a content object from a DocumentDto, which is used by Get and GetByVersion.
            </summary>
            <param name="dto"></param>
            <param name="contentType"></param>
            <param name="template"></param>
            <param name="propCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.CreateContentFromDto(Umbraco.Core.Models.Rdbms.DocumentDto,System.Guid,Umbraco.Core.Persistence.Sql)">
            <summary>
            Private method to create a content object from a DocumentDto, which is used by Get and GetByVersion.
            </summary>
            <param name="dto"></param>
            <param name="versionId"></param>
            <param name="docSql"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ContentTypeBaseRepository`1">
            <summary>
            Represent an abstract Repository for ContentType based repositories
            </summary>
            <remarks>Exposes shared functionality</remarks>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeBaseRepository`1.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <summary>
            Returns the content type ids that match the query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeBaseRepository`1.AssignDataTypeFromPropertyEditor(Umbraco.Core.Models.PropertyType)">
            <summary>
            Try to set the data type id based on its ControlId
            </summary>
            <param name="propertyType"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeBaseRepository`1.Get(System.String)">
            <summary>
            Gets an Entity by alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeBaseRepository`1.Get(System.Guid)">
            <summary>
            Gets an Entity by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeBaseRepository`1.Umbraco#Core#Persistence#Repositories#IReadRepository{System#Guid@TEntity}#GetAll(System.Guid[])">
            <summary>
            Gets all entities of the spefified type
            </summary>
            <param name="ids"></param>
            <returns></returns>
            <remarks>
            Ensure explicit implementation, we don't want to have any accidental calls to this since it is essentially the same signature as the main GetAll when there are no parameters
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeBaseRepository`1.Exists(System.Guid)">
            <summary>
            Boolean indicating whether an Entity with the specified Id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ContentTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <summary>
            Gets all entities of the specified <see cref="T:Umbraco.Core.Models.PropertyType"/> query
            </summary>
            <param name="query"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepository.GetAllPropertyTypeAliases">
            <summary>
            Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepository.GetAllContentTypeAliases(System.Guid[])">
            <summary>
            Gets all content type aliases
            </summary>
            <param name="objectTypes">
            If this list is empty, it will return all content type aliases for media, members and content, otherwise
            it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepository.GetUniqueAlias(System.String)">
            <summary>
            Derives a unique alias from an existing alias.
            </summary>
            <param name="alias">The original alias.</param>
            <returns>The original alias with a number appended to it, so that it is unique.</returns>
            /// <remarks>Unique accross all content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <summary>
            Gets all entities of the specified <see cref="T:Umbraco.Core.Models.PropertyType"/> query
            </summary>
            <param name="query"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeRepository.GetAllPropertyTypeAliases">
            <summary>
            Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeRepository.GetAllContentTypeAliases(System.Guid[])">
            <summary>
            Gets all content type aliases
            </summary>
            <param name="objectTypes">
            If this list is empty, it will return all content type aliases for media, members and content, otherwise
            it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentTypeRepository.PersistDeletedItem(Umbraco.Core.Models.IContentType)">
            <summary>
            Deletes a content type
            </summary>
            <param name="entity"></param>
            <remarks>
            First checks for children and removes those first
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.DataTypeDefinitionRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.DataTypeDefinition"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.DataTypeDefinitionRepository.Delete(Umbraco.Core.Models.IDataTypeDefinition)">
            <summary>
            Override the delete method so that we can ensure that all related content type's are updated as part of the overall transaction
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.DataTypeDefinitionRepository.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.DataTypeDefinitionRepository.PreValueEntity">
            <summary>
            Private class to handle pre-value crud based on units of work with transactions
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.DataTypeDefinitionRepository.DataTypePreValueRepository">
            <summary>
            Private class to handle pre-value crud based on standard principles and units of work with transactions
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.DataTypeDefinitionRepository.PreValueConverter.ConvertToPreValuesCollection(System.Collections.Generic.IEnumerable{System.Tuple{Umbraco.Core.Models.PreValue,System.String,System.Int32}})">
            <summary>
            Converts the tuple to a pre-value collection
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.DictionaryRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.EntityRepository">
            <summary>
            Represents the EntityRepository used to query <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects.
            </summary>
            <remarks>
            This is limited to objects that are based in the umbracoNode-table.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.EntityRepository.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.EntityRepository.UnitOfWork">
            <summary>
            Returns the Unit of Work added to the repository
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.EntityRepository.UnitKey">
            <summary>
            Internal for testing purposes
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.EntityRepository.UmbracoEntityRelator">
            <summary>
            This is a special relator in that it is not returning a DTO but a real resolved entity and that it accepts
            a dynamic instance.
            </summary>
            <remarks>
            We're doing this because when we query the db, we want to use dynamic so that it returns all available fields not just the ones
                defined on the entity so we can them to additional data
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMediaRepository.AddOrUpdateContentXml(Umbraco.Core.Models.IMedia,System.Func{Umbraco.Core.Models.IMedia,System.Xml.Linq.XElement})">
            <summary>
            Used to add/update published xml for the media item
            </summary>
            <param name="content"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMediaRepository.AddOrUpdatePreviewXml(Umbraco.Core.Models.IMedia,System.Func{Umbraco.Core.Models.IMedia,System.Xml.Linq.XElement})">
            <summary>
            Used to add/update preview xml for the content item
            </summary>
            <param name="content"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMediaRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets paged media results
            </summary>
            <param name="query">Query to excute</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMediaTypeRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <summary>
            Gets all entities of the specified <see cref="T:Umbraco.Core.Models.PropertyType"/> query
            </summary>
            <param name="query"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMediaTypeRepository.GetUniqueAlias(System.String)">
            <summary>
            Derives a unique alias from an existing alias.
            </summary>
            <param name="alias">The original alias.</param>
            <returns>The original alias with a number appended to it, so that it is unique.</returns>
            <remarks>Unique accross all content, media and member types.</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.FindMembersInRole(System.String,System.String,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds members in a given role
            </summary>
            <param name="roleName"></param>
            <param name="usernameToMatch"></param>
            <param name="matchType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.GetByMemberGroup(System.String)">
            <summary>
            Get all members in a specific group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.Exists(System.String)">
            <summary>
            Checks if a member with the username exists
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.GetCountByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMember})">
            <summary>
            Gets the count of items based on a complex query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMember},System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets paged member results
            </summary>
            <param name="query"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.AddOrUpdateContentXml(Umbraco.Core.Models.IMember,System.Func{Umbraco.Core.Models.IMember,System.Xml.Linq.XElement})">
            <summary>
            Used to add/update published xml for the media item
            </summary>
            <param name="content"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMemberRepository.AddOrUpdatePreviewXml(Umbraco.Core.Models.IMember,System.Func{Umbraco.Core.Models.IMember,System.Xml.Linq.XElement})">
            <summary>
            Used to add/update preview xml for the content item
            </summary>
            <param name="content"></param>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITemplateRepository.GetTemplateNode(System.String)">
            <summary>
            Returns a template as a template node which can be traversed (parent, children)
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITemplateRepository.FindTemplateInTree(Umbraco.Core.Models.TemplateNode,System.String)">
            <summary>
            Given a template node in a tree, this will find the template node with the given alias if it is found in the hierarchy, otherwise null
            </summary>
            <param name="anyNode"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITemplateRepository.DetermineTemplateRenderingEngine(Umbraco.Core.Models.ITemplate)">
            <summary>
            This checks what the default rendering engine is set in config but then also ensures that there isn't already 
            a template that exists in the opposite rendering engine's template folder, then returns the appropriate 
            rendering engine to use.
            </summary> 
            <returns></returns>
            <remarks>
            The reason this is required is because for example, if you have a master page file already existing under ~/masterpages/Blah.aspx
            and then you go to create a template in the tree called Blah and the default rendering engine is MVC, it will create a Blah.cshtml 
            empty template in ~/Views. This means every page that is using Blah will go to MVC and render an empty page. 
            This is mostly related to installing packages since packages install file templates to the file system and then create the 
            templates in business logic. Without this, it could cause the wrong rendering engine to be used for a package.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ITemplateRepository.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetCountByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser})">
            <summary>
            Gets the count of items based on a complex query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.Exists(System.String)">
            <summary>
            Checks if a user with the username exists
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetUsersAssignedToSection(System.String)">
            <summary>
            This is useful when an entire section is removed from config
            </summary>
            <param name="sectionAlias"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser},System.Int32,System.Int32,System.Int32@,System.Linq.Expressions.Expression{System.Func{Umbraco.Core.Models.Membership.IUser,System.String}})">
            <summary>
            Gets paged member results
            </summary>
            <param name="query"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.GetUserPermissionsForEntities(System.Int32,System.Int32[])">
            <summary>
            Gets the user permissions for the specified entities
            </summary>
            <param name="userId"></param>
            <param name="entityIds"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.ReplaceUserPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Replaces the same permission set for a single user to any number of entities
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IUserRepository.AssignUserPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns the same permission set for a single user to any number of entities
            </summary>
            <param name="userId"></param>
            <param name="permission"></param>
            <param name="entityIds"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.LanguageRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Language"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.MediaRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MediaRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMedia},System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets paged media results
            </summary>
            <param name="query">Query to excute</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MediaRepository.CreateMediaFromDto(Umbraco.Core.Models.Rdbms.ContentVersionDto,Umbraco.Core.Models.IMediaType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Private method to create a media object from a ContentDto
            </summary>
            <param name="d"></param>
            <param name="contentType"></param>
            <param name="propCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MediaRepository.CreateMediaFromDto(Umbraco.Core.Models.Rdbms.ContentVersionDto,System.Guid,Umbraco.Core.Persistence.Sql)">
            <summary>
            Private method to create a media object from a ContentDto
            </summary>
            <param name="d"></param>
            <param name="versionId"></param>
            <param name="docSql"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MediaRepository.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.MediaTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMediaType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MediaTypeRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <summary>
            Gets all entities of the specified <see cref="T:Umbraco.Core.Models.PropertyType"/> query
            </summary>
            <param name="query"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="E:Umbraco.Core.Persistence.Repositories.MemberGroupRepository.SavingMemberGroup">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Persistence.Repositories.MemberGroupRepository.SavedMemberGroup">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.MemberRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMember"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberRepository.GetByMemberGroup(System.String)">
            <summary>
            Get all members in a specific group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IMember},System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets paged member results
            </summary>
            <param name="query">
            The where clause, if this is null all records are queried
            </param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="filter"></param>
            <returns></returns>
            <remarks>
            The query supplied will ONLY work with data specifically on the cmsMember table because we are using PetaPoco paging (SQL paging)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberRepository.CreateMemberFromDto(Umbraco.Core.Models.Rdbms.MemberDto,Umbraco.Core.Models.IMemberType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Private method to create a member object from a MemberDto
            </summary>
            <param name="dto"></param>
            <param name="contentType"></param>
            <param name="propCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberRepository.CreateMemberFromDto(Umbraco.Core.Models.Rdbms.MemberDto,System.Guid,Umbraco.Core.Persistence.Sql)">
            <summary>
            Private method to create a member object from a MemberDto
            </summary>
            <param name="dto"></param>
            <param name="versionId"></param>
            <param name="docSql"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberRepository.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.MemberTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMemberType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberTypeRepository.CreatePropertyType(System.String,Umbraco.Core.Models.DataTypeDatabaseType,System.String)">
            <summary>
            Override so we can specify explicit db type's on any property types that are built-in.
            </summary>
            <param name="propertyEditorAlias"></param>
            <param name="dbType"></param>
            <param name="propertyTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberTypeRepository.EnsureExplicitDataTypeForBuiltInProperties(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            Ensure that all the built-in membership provider properties have their correct data type
            and property editors assigned. This occurs prior to saving so that the correct values are persisted.
            </summary>
            <param name="memberType"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberTypeRepository.BuildFromDtos(System.Collections.Generic.List{Umbraco.Core.Models.Rdbms.MemberTypeReadOnlyDto})">
            <summary>
            Builds a collection of entities from a collection of Dtos
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberTypeRepository.GetDbTypeForBuiltInProperty(System.String,Umbraco.Core.Models.DataTypeDatabaseType,System.Collections.Generic.Dictionary{System.String,Umbraco.Core.Models.PropertyType})">
            <summary>
            If this is one of our internal properties - we will manually assign the data type since they must 
            always correspond to the correct db type no matter what the backing data type is assigned.
            </summary>
            <param name="propAlias"></param>
            <param name="dbType"></param>
            <param name="standardProps"></param>
            <returns>
            Successful attempt if it was a built in property
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.MemberTypeRepository.GetPropertyEditorForBuiltInProperty(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,Umbraco.Core.Models.PropertyType})">
            <summary>
            
            </summary>
            <param name="propAlias"></param>
            <param name="propertyEditor"></param>
            <param name="standardProps"></param>
            <returns>
            Successful attempt if it was a built in property
            </returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.PermissionRepository`1">
            <summary>
            A repository that exposes functionality to modify assigned permissions to a node
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.PermissionRepository`1.GetUserPermissionsForEntities(System.Int32,System.Int32[])">
            <summary>
            Returns permissions for a given user for any number of nodes
            </summary>
            <param name="userId"></param>
            <param name="entityIds"></param>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.PermissionRepository`1.GetPermissionsForEntity(System.Int32)">
            <summary>
            Returns permissions for all users for a given entity
            </summary>
            <param name="entityId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.PermissionRepository`1.ReplaceUserPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Assigns the same permission set for a single user to any number of entities
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
            <param name="entityIds"></param>
            <remarks>
            This will first clear the permissions for this user and entities and recreate them
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.PermissionRepository`1.AssignUserPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns one permission for a user to many entities
            </summary>
            <param name="userId"></param>
            <param name="permission"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.PermissionRepository`1.AssignEntityPermission(`0,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns one permission to an entity for multiple users
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.PermissionRepository`1.ReplaceEntityPermissions(Umbraco.Core.Models.Membership.EntityPermissionSet)">
            <summary>
            Assigns permissions to an entity for multiple users/permission entries
            </summary>
            <param name="permissionSet">
            </param>
            <remarks>
            This will first clear the permissions for this entity then re-create them
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.RelationRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Relation"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RelationRepository.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.RelationTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ScriptRepository">
            <summary>
            Represents the Script Repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.SimilarNodeNameComparer">
            <summary>
            Comparer that takes into account the duplicate index of a node name
            This is needed as a normal alphabetic sort would go Page (1), Page (10), Page (2) etc.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.StylesheetRepository">
            <summary>
            Represents the Stylesheet Repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.StylesheetRepository.GetStylesheetsAtPath(System.String)">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Stylesheet"/> that exist at the relative path specified. 
            </summary>
            <param name="rootPath">
            If null or not specified, will return the stylesheets at the root path relative to the IFileSystem
            </param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.TemplateRepository">
            <summary>
            Represents the Template Repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TemplateRepository.MapFromDto(Umbraco.Core.Models.Rdbms.TemplateDto,Umbraco.Core.Models.EntityBase.IUmbracoEntity[])">
            <summary>
            Maps from a dto to an ITemplate
            </summary>
            <param name="dto"></param>
            <param name="axisDefinitions">
            This is a collection of template definitions ... either all templates, or the collection of child templates and it's parent template
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TemplateRepository.GetTemplateNode(System.String)">
            <summary>
            Returns a template as a template node which can be traversed (parent, children)
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TemplateRepository.FindTemplateInTree(Umbraco.Core.Models.TemplateNode,System.String)">
            <summary>
            Given a template node in a tree, this will find the template node with the given alias if it is found in the hierarchy, otherwise null
            </summary>
            <param name="anyNode"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TemplateRepository.DetermineTemplateRenderingEngine(Umbraco.Core.Models.ITemplate)">
            <summary>
            This checks what the default rendering engine is set in config but then also ensures that there isn't already 
            a template that exists in the opposite rendering engine's template folder, then returns the appropriate 
            rendering engine to use.
            </summary> 
            <returns></returns>
            <remarks>
            The reason this is required is because for example, if you have a master page file already existing under ~/masterpages/Blah.aspx
            and then you go to create a template in the tree called Blah and the default rendering engine is MVC, it will create a Blah.cshtml 
            empty template in ~/Views. This means every page that is using Blah will go to MVC and render an empty page. 
            This is mostly related to installing packages since packages install file templates to the file system and then create the 
            templates in business logic. Without this, it could cause the wrong rendering engine to be used for a package.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TemplateRepository.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.TemplateRepository.EnsureValidAlias(Umbraco.Core.Models.ITemplate)">
            <summary>
            Ensures that there are not duplicate aliases and if so, changes it to be a numbered version and also verifies the length
            </summary>
            <param name="template"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.UserRepository">
            <summary>
            Represents the UserRepository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.UserRepository.GetPagedResultsByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.Membership.IUser},System.Int32,System.Int32,System.Int32@,System.Linq.Expressions.Expression{System.Func{Umbraco.Core.Models.Membership.IUser,System.String}})">
            <summary>
            Gets paged user results
            </summary>
            <param name="query">
            The where clause, if this is null all records are queried
            </param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <param name="orderBy"></param>
            <returns></returns>
            <remarks>
            The query supplied will ONLY work with data specifically on the umbracoUser table because we are using PetaPoco paging (SQL paging)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.UserRepository.GetUserPermissionsForEntities(System.Int32,System.Int32[])">
            <summary>
            Returns permissions for a given user for any number of nodes
            </summary>
            <param name="userId"></param>
            <param name="entityIds"></param>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.UserRepository.ReplaceUserPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Replaces the same permission set for a single user to any number of entities
            </summary>
            <param name="userId"></param>
            <param name="permissions"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.UserRepository.AssignUserPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns the same permission set for a single user to any number of entities
            </summary>
            <param name="userId"></param>
            <param name="permission"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.UserRepository.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.UserTypeRepository">
            <summary>
            Represents the UserTypeRepository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Membership.IUserType"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.RepositoryFactory">
            <summary>
            Used to instantiate each repository type
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.MySqlSyntaxProvider">
            <summary>
            Represents an SqlSyntaxProvider for MySql
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.MySqlSyntaxProvider.FormatDateTime(System.DateTime,System.Boolean)">
            <summary>
            This is used ONLY if we need to format datetime without using SQL parameters (i.e. during migrations)
            </summary>
            <param name="date"></param>
            <param name="includeTime"></param>
            <returns></returns>
            <remarks>
            MySQL has a DateTime standard that is unambiguous and works on all servers:
            YYYYMMDDHHMMSS
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider">
            <summary>
            Represents an SqlSyntaxProvider for Sql Ce
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider.TruncateTable">
            <summary>
            SqlCe doesn't support the Truncate Table syntax, so we just have to do a DELETE FROM which is slower but we have no choice.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider">
            <summary>
            Represents an SqlSyntaxProvider for Sql Server
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider.GetDefaultConstraintsPerColumn(Umbraco.Core.Persistence.Database)">
            <summary>
            SQL Server stores default values assigned to columns as constraints, it also stores them with named values, this is the only
            server type that does this, therefore this method doesn't exist on any other syntax provider
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider.VersionName">
            <summary>
            Gets/sets the version of the current SQL server instance
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderAttribute">
            <summary>
            Attribute for implementations of an ISqlSyntaxProvider
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderAttribute.ProviderName">
            <summary>
            Gets or sets the ProviderName that corresponds to the sql syntax in a provider.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxContext">
            <summary>
            Singleton to handle the configuration of a SqlSyntaxProvider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviders">
            <summary>
            Used to return the correct syntax provider for a given provider name
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviders.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider})">
            <summary>
            Constructor
            </summary>
            <param name="syntaxProviders"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviders.GetByProviderNameOrDefault(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/> by its attributed provider.
            </summary>
            <param name="providerName">ProviderName from the ConnectionString settings</param>
            <returns><see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/> that corresponds to the attributed provider or the default Sql Server Syntax Provider.</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.TransactionType">
            <summary>
            Enum for the 3 types of transactions
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UmbracoDatabase">
            <summary>
            Represents the Umbraco implementation of the PetaPoco Database object
            </summary>
            <remarks>
            Currently this object exists for 'future proofing' our implementation. By having our own inheritied implementation we
            can then override any additional execution (such as additional loggging, functionality, etc...) that we need to without breaking compatibility since we'll always be exposing
            this object instead of the base PetaPoco database object.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Database.MultiPocoFactory.CallDelegate(System.Int32,System.Data.IDataReader)">
            <summary>
            Calls the delegate at the specified index and returns its values
            </summary>
            <param name="index"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Database.MultiPocoFactory.CallCallback``1(System.Delegate,System.Data.IDataReader,System.Int32)">
            <summary>
            Calls the callback delegate and passes in the output of all delegates as the parameters
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="callback"></param>
            <param name="dr"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Database.ManagedCache">
            <summary>
            Container for a Memory cache object
            </summary>
            <remarks>
            Better to have one memory cache instance than many so it's memory management can be handled more effectively
            http://stackoverflow.com/questions/8463962/using-multiple-instances-of-memorycache
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Database.PocoData.PrintDebugCacheReport(System.Double@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Returns a report of the current cache being utilized by PetaPoco
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabase.EnableSqlCount">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UmbracoDatabase.DisableSqlCount">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.InstanceId">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.EnableSqlTrace">
            <summary>
            Generally used for testing, will output all SQL statements executed to the logger
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.SqlCount">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork">
            <summary>
            Represents the Unit of Work implementation for working with files
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWork">
            <summary>
            Defines a Unit Of Work
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.RegisterAdded(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be added through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.RegisterChanged(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be changed through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.RegisterRemoved(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be removed through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation">
            <summary>
            Provides a snapshot of an entity and the repository reference it belongs to.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation.Type">
            <summary>
            Gets or sets the type of operation.
            </summary>
            <value>The type of operation.</value>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWorkProvider">
            <summary>
            Represents a Unit of Work Provider for creating a <see cref="T:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkProvider">
            <summary>
            Defines a Unit of Work Provider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork">
            <summary>
            Defines a unit of work when working with a database object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider">
            <summary>
            Defines a Unit of Work Provider for working with an IDatabaseUnitOfWork
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork">
            <summary>
            Represents the Unit of Work implementation for PetaPoco
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.#ctor(Umbraco.Core.Persistence.UmbracoDatabase)">
            <summary>
            Creates a new unit of work instance
            </summary>
            <param name="database"></param>
            <remarks>
            This should normally not be used directly and should be created with the UnitOfWorkProvider
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterAdded(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be added through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterChanged(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be changed through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterRemoved(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be removed through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Commit">
            <summary>
            Commits all batched changes within the scope of a PetaPoco transaction <see cref="T:Umbraco.Core.Persistence.Transaction"/>
            </summary>
            <remarks>
            Unlike a typical unit of work, this UOW will let you commit more than once since a new transaction is creaed per
            Commit() call instead of having one Transaction per UOW. 
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Commit(System.Action{Umbraco.Core.Persistence.UmbracoDatabase})">
            <summary>
            Commits all batched changes within the scope of a PetaPoco transaction <see cref="T:Umbraco.Core.Persistence.Transaction"/>
            </summary>
            <param name="transactionCompleting">
            Allows you to set a callback which is executed before the transaction is committed, allow you to add additional SQL
            operations to the overall commit process after the queue has been processed.
            </param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.DisposeResources">
            <summary>
            Ensures disposable objects are disposed
            </summary>		
            <remarks>
            Ensures that the Transaction instance is disposed of
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.InstanceId">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation">
            <summary>
            Provides a snapshot of an entity and the repository reference it belongs to.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Type">
            <summary>
            Gets or sets the type of operation.
            </summary>
            <value>The type of operation.</value>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider">
            <summary>
            Represents a Unit of Work Provider for creating a <see cref="T:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Parameterless constructor uses defaults
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor(Umbraco.Core.Logging.ILogger,System.String,System.String)">
            <summary>
            Constructor accepting custom connectino string and provider name
            </summary>
            <param name="logger"></param>
            <param name="connectionString">Connection String to use with Database</param>
            <param name="providerName">Database Provider for the Connection String</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor(Umbraco.Core.Persistence.IDatabaseFactory)">
            <summary>
            Constructor accepting an IDatabaseFactory instance
            </summary>
            <param name="dbFactory"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.GetUnitOfWork">
            <summary>
            Creates a Unit of work with a new UmbracoDatabase instance for the work item/transaction.
            </summary>
            <returns></returns>
            <remarks>
            Each PetaPoco UOW uses it's own Database object, not the shared Database object that comes from
            the ApplicationContext.Current.DatabaseContext.Database. This is because each transaction should use it's own Database
            and we Dispose of this Database object when the UOW is disposed.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.CreateUnitOfWork(Umbraco.Core.Logging.ILogger)">
            <summary>
            Static helper method to return a new unit of work
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Profiling.IProfiler">
            <summary>
            Defines an object for use in the application to profile operations
            </summary>
        </member>
        <member name="M:Umbraco.Core.Profiling.IProfiler.Render">
            <summary>
            Render the UI to display the profiler 
            </summary>
            <returns></returns>
            <remarks>
            Generally used for HTML displays
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Profiling.IProfiler.Step(System.String)">
            <summary>
            Profile an operation
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>
            Use the 'using(' syntax
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Profiling.IProfiler.Start">
            <summary>
            Start the profiler
            </summary>
        </member>
        <member name="M:Umbraco.Core.Profiling.IProfiler.Stop(System.Boolean)">
            <summary>
            Start the profiler
            </summary>
            <remarks>
            set discardResults to false when you want to abandon all profiling, this is useful for 
            when someone is not authenticated or you want to clear the results based on some other mechanism.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Profiling.LogProfiler">
            <summary>
            A profiler that outputs its results to an ILogger
            </summary>
        </member>
        <member name="M:Umbraco.Core.Profiling.ProfilerExtensions.Step``1(Umbraco.Core.Profiling.IProfiler,System.String)">
            <summary>
            Writes out a step prefixed with the type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="profiler"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Profiling.ProfilerExtensions.Step(Umbraco.Core.Profiling.IProfiler,System.Type,System.String)">
            <summary>
            Writes out a step prefixed with the type
            </summary>
            <param name="profiler"></param>
            <param name="objectType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Profiling.ProfilerResolver">
            <summary>
            A resolver exposing the current profiler
            </summary>
        </member>
        <member name="M:Umbraco.Core.Profiling.ProfilerResolver.#ctor(Umbraco.Core.Profiling.IProfiler)">
            <summary>
            Constructor
            </summary>
            <param name="profiler"></param>
        </member>
        <member name="M:Umbraco.Core.Profiling.ProfilerResolver.SetProfiler(Umbraco.Core.Profiling.IProfiler)">
            <summary>
            Method allowing to change the profiler during startup
            </summary>
            <param name="profiler"></param>
        </member>
        <member name="P:Umbraco.Core.Profiling.ProfilerResolver.Profiler">
            <summary>
            Gets the current profiler
            </summary>
        </member>
        <member name="T:Umbraco.Core.Profiling.WebProfiler">
            <summary>
            A profiler used for web based activity based on the MiniProfiler framework
            </summary>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            Binds to application events to enable the MiniProfiler
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.UmbracoApplicationApplicationInit(System.Object,System.EventArgs)">
            <summary>
            Handle the Init event o fthe UmbracoApplication which allows us to subscribe to the HttpApplication events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.UmbracoApplicationEndRequest(System.Object,System.EventArgs)">
            <summary>
            Handle the begin request event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.UmbracoApplicationBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handle the end request event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.Render">
            <summary>
            Render the UI to display the profiler 
            </summary>
            <returns></returns>
            <remarks>
            Generally used for HTML displays
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.Step(System.String)">
            <summary>
            Profile a step
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>
            Use the 'using(' syntax
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.Start">
            <summary>
            Start the profiler
            </summary>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.Stop(System.Boolean)">
            <summary>
            Start the profiler
            </summary>
            <remarks>
            set discardResults to false when you want to abandon all profiling, this is useful for 
            when someone is not authenticated or you want to clear the results based on some other mechanism.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Profiling.WebProfiler.TryGetRequest(System.Object)">
            <summary>
            Gets the request object from the app instance if it is available
            </summary>
            <param name="sender">The application object</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.DelimitedManifestValueValidator">
            <summary>
            A validator that validates a delimited set of values against a common regex
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DelimitedManifestValueValidator.Validate(System.Object,System.String,Umbraco.Core.Models.PreValueCollection,Umbraco.Core.PropertyEditors.PropertyEditor)">
            <summary>
            Performs the validation
            </summary>
            <param name="value"></param>
            <param name="config">Can be a json formatted string containing properties: 'delimiter' and 'pattern'</param>
            <param name="preValues">The current pre-values stored for the data type</param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IntegerValidator">
            <summary>
            A validator that validates that the value is a valid integer
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ManifestPropertyValidator">
            <summary>
            Represents a validator found in a package manifest
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ManifestPropertyValidator.Validate(System.Object,Umbraco.Core.Models.PreValueCollection,Umbraco.Core.PropertyEditors.PropertyEditor)">
            <summary>
            Validates the object with the resolved ValueValidator found for this type
            </summary>
            <param name="value"></param>
            <param name="preValues">The current pre-values stored for the data type</param>
            <param name="editor">The property editor instance that we are validating for</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ManifestPropertyValidator.Type">
            <summary>
            The validator type name
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ManifestPropertyValidator.Config">
            <summary>
            The configuration defined for this validator in the manifest
            </summary>
            <remarks>
            This is NOT the pre-value for this data type
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ManifestPropertyValidator.ValidatorInstance">
            <summary>
            Gets the ValueValidator instance
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ParameterEditor">
            <summary>
            Basic definition of a macro parameter editor
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ParameterEditor.#ctor">
            <summary>
            The constructor will setup the property editor based on the attribute if one is found
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.ParameterEditor.ManifestDefinedParameterValueEditor">
            <summary>
            These are assigned by default normally based on parameter editor attributes or manifest definitions,
            developers have the chance to override CreateValueEditor if they don't want to use the pre-defined instance
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ParameterEditor.CreateValueEditor">
            <summary>
            Creates a value editor instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ParameterEditor.Alias">
            <summary>
            The id  of the property editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ParameterEditor.Name">
            <summary>
            The name of the property editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ParameterEditor.Configuration">
            <summary>
            Allows a parameter editor to be re-used based on the configuration specified.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ParameterEditorAttribute">
            <summary>
            An attribute used to define all of the basic properties of a parameter editor
            on the server side.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ParameterEditorResolver">
            <summary>
            A resolver to resolve all parameter editors
            </summary>
            <remarks>
            This resolver will contain any parameter editors defined in manifests as well as any property editors defined in manifests
            that have the IsParameterEditorFlag = true and any PropertyEditors found in c# that have this flag as well. 
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ParameterEditorResolver.GetByAlias(System.String)">
            <summary>
            Returns a property editor by alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ParameterEditorResolver.ParameterEditors">
            <summary>
            Returns the parameter editors
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ParameterValueEditor">
            <summary>
            Represents the value editor for the parameter editor during macro parameter editing
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ParameterValueEditor.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ParameterValueEditor.#ctor(System.String)">
            <summary>
            Creates a new editor with the specified view
            </summary>
            <param name="view"></param>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PreValueField">
            <summary>
            Defines a pre value editable field
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PreValueField.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PreValueField.#ctor(Umbraco.Core.PropertyEditors.IPropertyValidator[])">
            <summary>
            Constructor used to set validators instead of adding them later
            </summary>
            <param name="validators"></param>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueField.Name">
            <summary>
            The name to display for this pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueField.Description">
            <summary>
            The description to display for this pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueField.HideLabel">
            <summary>
            Specifies whether to hide the label for the pre-value
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueField.Key">
            <summary>
            The key to store the pre-value against
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueField.View">
            <summary>
            Defines the view to use for the editor, this can be one of 3 things:
            * the full virtual path or 
            * the relative path to the current Umbraco folder 
            * a simple view name which will map to the views/prevalueeditors/{view}.html
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueField.Validators">
            <summary>
            A collection of validators for the pre value field
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PreValueFieldAttribute">
            <summary>
            Allows for specifying an attribute on a property of a custm PreValueEditor to be included in the field list. OTherwise it can be attributed 
            on a custom implemention of a PreValueField to have the properties auto-filled.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PreValueFieldAttribute.#ctor(System.Type)">
            <summary>
            Used when specifying a PreValueFieldType
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueFieldAttribute.Description">
            <summary>
            The description to display for the pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueFieldAttribute.Key">
            <summary>
            The key to store the pre-value against in the databaes
            </summary>
            <remarks>
            If this is not specified and the attribute is being used at the property level then the property name will become the key
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueFieldAttribute.Name">
            <summary>
            The name (label) of the pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueFieldAttribute.View">
            <summary>
            The view to use to render the pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueFieldAttribute.HideLabel">
            <summary>
            Whether or not to hide the label for the pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueFieldAttribute.PreValueFieldType">
            <summary>
            This can be used when assigned to a property which will attempt to create the type
            of PreValueField declared and assign it to the fields. Any property declared on this
            attribute will get overwritten on the class that is instantiated.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PreValueEditor">
            <summary>
            Defines a pre-value editor
            </summary>
            <remarks>
            A pre-value editor is made up of multiple pre-value fields, each field defines a key that the value is stored against.
            Each field can have any editor and the value from each field can store any data such as a simple string or a json structure. 
            
            The Json serialization attributes are required for manifest property editors to work.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PreValueEditor.ConvertEditorToDb(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            A method to format the posted values from the editor to the values to be persisted
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue">
            The current value that has been persisted to the database for this pre-value editor. This value may be usesful for 
            how the value then get's deserialized again to be re-persisted. In most cases it will probably not be used.
            </param>
            <returns></returns>
            <remarks>
            By default this will just return the Posted editorValue.
            
            This can be overridden if perhaps you have a comma delimited string posted value but want to convert those to individual rows, or to convert
            a json structure to multiple rows.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PreValueEditor.ConvertDbToEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            This can be used to re-format the currently saved pre-values that will be passed to the editor,
            by default this returns the merged default and persisted pre-values.
            </summary>
            <param name="defaultPreVals">
            The default/static pre-vals for the property editor
            </param>
            <param name="persistedPreVals">
            The persisted pre-vals for the property editor
            </param>
            <returns></returns>
            <remarks>
            This is generally not going to be used by anything unless a property editor wants to change the merging
            functionality or needs to convert some legacy persisted data, or convert the string values to strongly typed values in json (i.e. booleans)
            
            IMPORTANT! When using this method the default pre values dictionary should not be modified which would change the property editor's global 
            singleton pre-values!
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PreValueEditor.Fields">
            <summary>
            A collection of pre-value fields to be edited
            </summary>
            <remarks>
            If fields are specified then the master View and Validators will be ignored
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyEditor">
            <summary>
            Basic definition of a property editor
            </summary>
            <remarks>
            The Json serialization attributes are required for manifest property editors to work
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditor.#ctor">
            <summary>
            The constructor will setup the property editor based on the attribute if one is found
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyEditor.ManifestDefinedPropertyValueEditor">
            <summary>
            These are assigned by default normally based on property editor attributes or manifest definitions,
            developers have the chance to override CreateValueEditor if they don't want to use the pre-defined instance
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.PropertyEditor.ManifestDefinedPreValueEditor">
            <summary>
            These are assigned by default normally based on property editor attributes or manifest definitions,
            developers have the chance to override CreatePreValueEditor if they don't want to use the pre-defined instance
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditor.CreateValueEditor">
            <summary>
            Creates a value editor instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditor.CreatePreValueEditor">
            <summary>
            Creates a pre value editor instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditor.DebuggerDisplay">
            <summary>
            Provides a summary of the PropertyEditor for use with the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/>.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditor.IsParameterEditor">
            <summary>
            Boolean flag determining if this can be used as a parameter editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditor.Alias">
            <summary>
            The id  of the property editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditor.Name">
            <summary>
            The name of the property editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditor.Icon">
            <summary>
            The icon of the property editor - if not set it uses a default icon
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditor.Group">
            <summary>
            The group of the property editor - if not set the editor will list as a generic editor
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyEditorAttribute">
            <summary>
            An attribute used to define all of the basic properties of a property editor
            on the server side.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditorAttribute.HideLabel">
            <summary>
            If this is is true than the editor will be displayed full width without a label
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditorAttribute.Icon">
            <summary>
            Optional, If this is set, datatypes using the editor will display this icon instead of the default system one.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditorAttribute.Group">
            <summary>
            Optional - if this is set, the datatype ui will display the editor in this group instead of the default one, by default an editor does not have a group.
            The group has no effect on how a property editor is stored or referenced.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyEditorResolver">
            <summary>
            A resolver to resolve all property editors
            </summary>
            <remarks>
            This resolver will contain any property editors defined in manifests as well!
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditorResolver.GetByAlias(System.String)">
            <summary>
            Returns a property editor by alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditorResolver.PropertyEditors">
            <summary>
            Returns the property editors
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyValueConvertersResolver">
            <summary>
            Resolves the IPropertyValueConverter objects.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConvertersResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.PropertyValueConvertersResolver"/> class with 
            an initial list of converter types.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="converters">The list of converter types</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueConvertersResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.PropertyValueConvertersResolver"/> class with 
            an initial list of converter types.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="converters">The list of converter types</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueConvertersResolver.Converters">
            <summary>
            Gets the converters.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueConvertersResolver.DefaultConverters">
            <summary>
            Caches and gets the default converters with their metadata
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.RegexValidator">
            <summary>
            A validator that validates that the value against a Regex expression
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.RegexValidator.#ctor">
            <summary>
            Normally used when configured as a ManifestValueValidator
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.RegexValidator.#ctor(System.String)">
            <summary>
            Normally used when configured as an IPropertyValidator
            </summary>
            <param name="regex"></param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.RegexValidator.Validate(System.Object,Umbraco.Core.Models.PreValueCollection,Umbraco.Core.PropertyEditors.PropertyEditor)">
            <summary>
            Used when configured as an IPropertyValidator
            </summary>
            <param name="value"></param>
            <param name="preValues"></param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.RequiredManifestValueValidator">
            <summary>
            A validator that validates that the value is not null or empty (if it is a string)
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.ValidatorsResolver">
            <summary>
            A resolver to resolve all registered validators
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.ValidatorsResolver.GetValidator(System.String)">
            <summary>
            Gets a validator by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.ValidatorsResolver.Validators">
            <summary>
            Returns the validators
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyValueEditor">
            <summary>
            Represents the value editor for the property editor during content editing
            </summary>
            <remarks>
            The Json serialization attributes are required for manifest property editors to work
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.#ctor">
            <summary>
            assign defaults
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.#ctor(System.String,Umbraco.Core.PropertyEditors.IPropertyValidator[])">
            <summary>
            Creates a new editor with the specified view
            </summary>
            <param name="view"></param>
            <param name="validators">Allows adding custom validators during construction instead of specifying them later</param>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.ConfigureForDisplay(Umbraco.Core.Models.PreValueCollection)">
            <summary>
            This is called to configure the editor for display with it's prevalues, useful when properties need to change dynamically
            depending on what is in the pre-values.
            </summary>
            <param name="preValues"></param>
            <remarks>
            This cannot be used to change the value being sent to the editor, ConfigureEditor will be called *after* ConvertDbToEditor, pre-values
            should not be used to modify values.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.GetDatabaseType">
            <summary>
            Returns the true DataTypeDatabaseType from the string representation ValueType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.TryConvertValueToCrlType(System.Object)">
            <summary>
            Used to try to convert the string value to the correct CLR type based on the DatabaseDataType specified for this value editor
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.ConvertEditorToDb(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            A method to deserialize the string value that has been saved in the content editor
            to an object to be stored in the database.
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue">
            The current value that has been persisted to the database for this editor. This value may be usesful for 
            how the value then get's deserialized again to be re-persisted. In most cases it will probably not be used.
            </param>
            <returns></returns>
            <remarks>
            By default this will attempt to automatically convert the string value to the value type supplied by ValueType.
            
            If overridden then the object returned must match the type supplied in the ValueType, otherwise persisting the 
            value to the DB will fail when it tries to validate the value type.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.ConvertDbToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Models.PropertyType,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            A method used to format the database value to a value that can be used by the editor
            </summary>
            <param name="property"></param>
            <param name="propertyType"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
            <remarks>
            The object returned will automatically be serialized into json notation. For most property editors
            the value returned is probably just a string but in some cases a json structure will be returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.ConvertDbToXml(Umbraco.Core.Models.Property,Umbraco.Core.Models.PropertyType,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Converts the property db value to an XML fragment
            </summary>
            <param name="property"></param>
            <param name="propertyType"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
            <remarks>
            By default this will just return the value of ConvertDbToString but ensure that if the db value type is nvarchar or text
            it is a CDATA fragment, otherwise it is just a text fragment.
            
            This method by default will only return XText or XCData which must be wrapped in an element!
            
            If the value is empty we will not return as CDATA since that will just take up more space in the file.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyValueEditor.ConvertDbToString(Umbraco.Core.Models.Property,Umbraco.Core.Models.PropertyType,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Converts the property value for use in the front-end cache
            </summary>
            <param name="property"></param>
            <param name="propertyType"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueEditor.View">
            <summary>
            Defines the view to use for the editor, this can be one of 3 things:
            * the full virtual path or 
            * the relative path to the current Umbraco folder 
            * a simple view name which will map to the views/propertyeditors/{view}/{view}.html
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueEditor.ValueType">
            <summary>
            The value type which reflects how it is validated and stored in the database
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueEditor.Validators">
            <summary>
            A collection of validators for the pre value editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueEditor.RequiredValidator">
            <summary>
            Returns the validator used for the required field validation which is specified on the PropertyType
            </summary>
            <remarks>
            This will become legacy as soon as we implement overridable pre-values.
            
            The default validator used is the RequiredValueValidator but this can be overridden by property editors
            if they need to do some custom validation, or if the value being validated is a json object.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueEditor.RegexValidator">
            <summary>
            Returns the validator used for the regular expression field validation which is specified on the PropertyType
            </summary>
            <remarks>
            This will become legacy as soon as we implement overridable pre-values.
            
            The default validator used is the RegexValueValidator but this can be overridden by property editors
            if they need to do some custom validation, or if the value being validated is a json object.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueEditor.HideLabel">
            <summary>
            If this is is true than the editor will be displayed full width without a label
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyValueEditor.IsReadOnly">
            <summary>
            Set this to true if the property editor is for display purposes only
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dictionary.ICultureDictionary">
            <summary>
            Represents a dictionary based on a specific culture
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dictionary.ICultureDictionary.GetChildren(System.String)">
            <summary>
            Returns the child dictionary entries for a given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Dictionary.ICultureDictionary.Item(System.String)">
            <summary>
            Returns the dictionary value based on the key supplied
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Dictionary.ICultureDictionary.Culture">
            <summary>
            Returns the current culture
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructor
            </summary>
            <param name="baseElement"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            When this constructor is used the BaseElement becomes equivalent to the strippedXml structure
            </summary>
            <param name="strippedXml"></param>
            <param name="rawXml"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.String,System.String)">
            <summary>
            When this constructor is used the BaseElement becomes equivalent to the strippedXml structure
            </summary>
            <param name="strippedXml"></param>
            <param name="rawXml"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Constructor
            </summary>
            <param name="xpni"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.ToXml">
            <summary>
            Returns the string representation of the BaseElement object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.ToRawXml">
            <summary>
            Returns the string representation of the RawXmlElement object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.CheckAttributeNameMatch(System.String,System.Xml.Linq.XElement)">
            <summary>
            Checks if the 'name' matches any attributes of xmlElement
            </summary>
            <param name="name">The name to match</param>
            <param name="xmlElement">The xml element to check against</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.CheckNodeNameMatch(System.String,System.Xml.Linq.XElement)">
            <summary>
            Checks if the 'name' matches any elements of xmlElement
            </summary>
            <param name="name">The name to match</param>
            <param name="xmlElement">The xml element to check against</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.XPath(System.String)">
            <summary>
            Executes an XPath expression over the BaseElement object
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.ToString">
            <summary>
            Return the string version of the BaseElement object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Dynamics.DynamicXml.BaseElement">
            <summary>
            Returns the XElement used to create the DynamicXml structure
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dynamics.DynamicXml.RawXmlElement">
            <summary>
            Returns the raw XElement used to create the DynamicXml structure if one was specified otherwise returns the 
            same value as BaseElement.
            </summary>
            <remarks>
            This is purely used for when an instance of DynamicXml is created with the overload that supports
            passing in both a raw xml version and a dash-stripped xml version. Otherwise this value is exactly the 
            same as BaseElement.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Dynamics.DynamicXml.InnerText">
            <summary>
            Returns the InnertText based on the BaseElement object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.ExtensionMethodFinder">
            <summary>
            Utility class for finding extension methods on a type to execute
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dynamics.ExtensionMethodFinder.MethodCache">
            <summary>
            The static cache for extension methods found that match the criteria that we are looking for
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dynamics.ExtensionMethodFinder.GetAllExtensionMethodsInAppDomain(Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Returns the enumerable of all extension method info's in the app domain = USE SPARINGLY!!!
            </summary>
            <returns></returns>
            <remarks>
            We cache this as a sliding 5 minute exiration, in unit tests there's over 1100 methods found, surely that will eat up a bit of memory so we want
            to make sure we give it back.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Dynamics.ExtensionMethodFinder.GetAllExtensionMethods(Umbraco.Core.Cache.IRuntimeCacheProvider,System.Type,System.String,System.Int32)">
            <summary>
            Returns all extension methods found matching the definition
            </summary>
            <param name="runtimeCache">
            The runtime cache is used to temporarily cache all extension methods found in the app domain so that
            while we search for individual extension methods, the process will be reasonably 'quick'. We then statically
            cache the MethodInfo's that we are looking for and then the runtime cache will expire and give back all that memory.
            </param>
            <param name="thisType"></param>
            <param name="name"></param>
            <param name="argumentCount">
            The arguments EXCLUDING the 'this' argument in an extension method
            </param>
            <returns></returns>
            <remarks>
            NOTE: This will be an intensive method to call! Results will be cached based on the key (args) of this method
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Dynamics.PropertyResultType">
            <summary>
            Currently just used for informational purposes as to where a PropertyResult object was created from.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dynamics.PropertyResultType.UserProperty">
            <summary>
            The property resolved was a normal document property
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dynamics.PropertyResultType.ReflectedProperty">
            <summary>
            The property resolved was a property defined as a member on the document object (IPublishedContent) itself
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dynamics.PropertyResultType.CustomProperty">
            <summary>
            The property was created manually for a custom purpose
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.FileSystemExtensions.OpenReadWithRetry(System.IO.FileInfo,System.Int32,System.Int32)">
            <summary>
            Attempts to open the file at <code>filePath</code> up to <code>maxRetries</code> times,
            with a thread sleep time of <code>sleepPerRetryInMilliseconds</code> between retries.
            </summary>
        </member>
        <member name="T:Umbraco.Core.IO.MediaFileSystem">
            <summary>
            A custom file system provider for media
            </summary>
        </member>
        <member name="T:Umbraco.Core.Macros.MacroTagParser">
            <summary>
            Parses the macro syntax in a string and renders out it's contents
            </summary>
        </member>
        <member name="M:Umbraco.Core.Macros.MacroTagParser.FormatRichTextPersistedDataForEditor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This formats the persisted string to something useful for the rte so that the macro renders properly since we 
            persist all macro formats like {?UMBRACO_MACRO macroAlias=\"myMacro\" /}
            </summary>
            <param name="persistedContent"></param>
            <param name="htmlAttributes">The html attributes to be added to the div</param>
            <returns></returns>
            <remarks>
            This converts the persisted macro format to this:
            
                {div class='umb-macro-holder'}
                    <!-- <?UMBRACO_MACRO macroAlias=\"myMacro\" /> -->
                    {ins}Macro alias: {strong}My Macro{/strong}{/ins}
                {/div}
            
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Macros.MacroTagParser.FormatRichTextContentForPersistence(System.String)">
            <summary>
            This formats the string content posted from a rich text editor that contains macro contents to be persisted.
            </summary>
            <returns></returns>
            <remarks>
            
            This is required because when editors are using the rte, the html that is contained in the editor might actually be displaying 
            the entire macro content, when the data is submitted the editor will clear most of this data out but we'll still need to parse it properly
            and ensure the correct sytnax is persisted to the db.
            
            When a macro is inserted into the rte editor, the html will be:
            
                {div class='umb-macro-holder'}
                    <!-- <?UMBRACO_MACRO macroAlias=\"myMacro\" /> -->
                    This could be some macro content
                {/div}
            
            What this method will do is remove the {div} and parse out the commented special macro syntax: {?UMBRACO_MACRO macroAlias=\"myMacro\" /}
            since this is exactly how we need to persist it to the db.
            
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Macros.MacroTagParser.ParseMacros(System.String,System.Action{System.String},System.Action{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            This will accept a text block and seach/parse it for macro markup.
            When either a text block or a a macro is found, it will call the callback method.
            </summary>
            <param name="text"> </param>
            <param name="textFoundCallback"></param>
            <param name="macroFoundCallback"></param>
            <returns></returns>
            <remarks>
            This method  simply parses the macro contents, it does not create a string or result, 
            this is up to the developer calling this method to implement this with the callbacks.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Mandate">
            <summary>
            Helper class for mandating values, for example on method parameters.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterNotNull``1(``0,System.String)">
            <summary>
            Mandates that the specified parameter is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterNotNullOrEmpty(System.String,System.String)">
            <summary>
            Mandates that the specified parameter is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null or whitespace.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Mandates that the specified sequence is not null and has at least one element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="paramName">Name of the param.</param>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterCondition(System.Boolean,System.String)">
            <summary>
            Mandates that the specified parameter matches the condition.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentException">If the condition is false.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterCondition(System.Boolean,System.String,System.String)">
            <summary>
            Mandates that the specified parameter matches the condition.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the param.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If the condition is false.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.That``1(System.Boolean)">
            <summary>
            Mandates that the specified condition is true, otherwise throws an exception specified in <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c>, throws exception <typeparamref name="TException"/>.</param>
            <exception cref="T:System.Exception">An exception of type <typeparamref name="TException"/> is raised if the condition is false.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.That``1(System.Boolean,System.Func{``0})">
            <summary>
            Mandates that the specified condition is true, otherwise throws an exception specified in <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c>, throws exception <typeparamref name="TException"/>.</param>
            <param name="defer">Deffered expression to call if the exception should be raised.</param>
            <exception cref="T:System.Exception">An exception of type <typeparamref name="TException"/> is raised if the condition is false.</exception>
        </member>
        <member name="T:Umbraco.Core.Models.Content">
            <summary>
            Represents a Content object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContent">
            <summary>
            Defines a Content object
            </summary>    
        </member>
        <member name="M:Umbraco.Core.Models.IContent.ChangeContentType(Umbraco.Core.Models.IContentType)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IContentType"/> for the current content object
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.ChangeContentType(Umbraco.Core.Models.IContentType,System.Boolean)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IContentType"/> for the current content object and removes PropertyTypes,
            which are not part of the new ContentType.
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.ChangePublishedState(Umbraco.Core.Models.PublishedState)">
            <summary>
            Changes the Published state of the content object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.DeepCloneWithResetIdentities">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Template">
            <summary>
            Gets or sets the template used by the Content.
            This is used to override the default one from the ContentType.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Published">
            <summary>
            Boolean indicating whether the Content is Published or not
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.ReleaseDate">
            <summary>
            Gets or Sets the date the Content should be released and thus be published
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.ExpireDate">
            <summary>
            Gets or Sets the date the Content should expire and thus be unpublished
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.WriterId">
            <summary>
            Id of the user who wrote/updated the Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.ContentType">
            <summary>
            Gets the ContentType used by this content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Status">
            <summary>
            Gets the current status of the Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.HasPublishedVersion">
            <summary>
            Gets a value indicating whether the content has a published version.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.PublishedVersionGuid">
            <summary>
            Gets the unique identifier of the published version, if any.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,Umbraco.Core.Models.IContent,Umbraco.Core.Models.IContentType)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</param>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,Umbraco.Core.Models.IContent,Umbraco.Core.Models.IContentType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentType)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangeContentType(Umbraco.Core.Models.IContentType)">
            <summary>
            Changes the <see cref="P:Umbraco.Core.Models.Content.ContentType"/> for the current content object
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangeContentType(Umbraco.Core.Models.IContentType,System.Boolean)">
            <summary>
            Changes the <see cref="P:Umbraco.Core.Models.Content.ContentType"/> for the current content object and removes PropertyTypes,
            which are not part of the new ContentType.
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangePublishedState(Umbraco.Core.Models.PublishedState)">
            <summary>
            Changes the Published state of the content object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangeTrashedState(System.Boolean,System.Int32)">
            <summary>
            Changes the Trashed state of the content object
            </summary>
            <param name="isTrashed">Boolean indicating whether content is trashed (true) or not trashed (false)</param>
            <param name="parentId"> </param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.UpdatingEntity">
            <summary>
            Method to call when Entity is being updated
            </summary>
            <remarks>Modified Date is set and a new Version guid is set</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Content.Clone">
            <summary>
            Creates a deep clone of the current entity with its identity and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Content.DeepCloneWithResetIdentities">
            <summary>
            Creates a deep clone of the current entity with its identity and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Template">
            <summary>
            Gets or sets the template used by the Content.
            This is used to override the default one from the ContentType.
            </summary>
            <remarks>
            If no template is explicitly set on the Content object, 
            the Default template from the ContentType will be returned.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Status">
            <summary>
            Gets the current status of the Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Published">
            <summary>
            Boolean indicating whether this Content is Published or not
            </summary>
            <remarks>
            Setting Published to true/false should be private or internal and should ONLY be used for wiring up the value
            from the db or modifying it based on changing the published state.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Language">
            <summary>
            Language of the data contained within this Content object.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.ReleaseDate">
            <summary>
            The date this Content should be released and thus be published
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.ExpireDate">
            <summary>
            The date this Content should expire and thus be unpublished
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.WriterId">
            <summary>
            Id of the user who wrote/updated this Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.NodeName">
            <summary>
            Name of the Node (non-localized).
            </summary>
            <remarks>
            This Property is kept internal until localization is introduced.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.PermissionsChanged">
            <summary>
            Used internally to track if permissions have been changed during the saving process for this entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.ContentType">
            <summary>
            Gets the ContentType used by this content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.PublishedVersionGuid">
            <summary>
            Gets or sets the unique identifier of the published version, if any.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.HasPublishedVersion">
            <summary>
            Gets a value indicating whether the content has a published version.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentStatus">
            <summary>
            Enum for the various statuses a Content object can have
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentType">
            <summary>
            Represents the content type that a <see cref="T:Umbraco.Core.Models.Content"/> object is based on
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentType">
            <summary>
            Defines a ContentType, which Content is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.SetDefaultTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Sets the default template for the ContentType
            </summary>
            <param name="template">Default <see cref="T:Umbraco.Core.Models.ITemplate"/></param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.RemoveTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Removes a template from the list of allowed templates
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to remove</param>
            <returns>True if template was removed, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.DeepCloneWithResetIdentities(System.String)">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <param name="newAlias"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.IContentType.DefaultTemplate">
            <summary>
            Gets the default Template of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentType.AllowedTemplates">
            <summary>
            Gets or Sets a list of Templates which are allowed for the ContentType
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.#ctor(System.Int32)">
            <summary>
            Constuctor for creating a ContentType with the parent's id.
            </summary>
            <remarks>Only use this for creating ContentTypes at the root (with ParentId -1).</remarks>
            <param name="parentId"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.#ctor(Umbraco.Core.Models.IContentType)">
            <summary>
            Constuctor for creating a ContentType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
            <param name="parent"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.#ctor(Umbraco.Core.Models.IContentType,System.String)">
            <summary>
            Constuctor for creating a ContentType with the parent as an inherited type.
            </summary>
            <remarks>Use this to ensure inheritance from parent.</remarks>
            <param name="parent"></param>
            <param name="alias"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.SetDefaultTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Sets the default template for the ContentType
            </summary>
            <param name="template">Default <see cref="T:Umbraco.Core.Models.ITemplate"/></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.RemoveTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Removes a template from the list of allowed templates
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to remove</param>
            <returns>True if template was removed, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.Clone(System.String)">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.DeepCloneWithResetIdentities(System.String)">
            <summary>
            Creates a deep clone of the current entity with its identity/alias and it's property identities reset
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.DefaultTemplate">
            <summary>
            Gets or sets the alias of the default Template.
            TODO: This should be ignored from cloning!!!!!!!!!!!!!!
             - but to do that we have to implement callback hacks, this needs to be fixed in v8, 
                we should not store direct entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.DefaultTemplateId">
            <summary>
            Internal property to store the Id of the default template
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.AllowedTemplates">
            <summary>
            Gets or Sets a list of Templates which are allowed for the ContentType
            TODO: This should be ignored from cloning!!!!!!!!!!!!!!
             - but to do that we have to implement callback hacks, this needs to be fixed in v8, 
                we should not store direct entity
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.DataTypeDatabaseType">
            <summary>
            Enum of the various DbTypes for which the Property values are stored
            </summary>
            <remarks>
            Object is added to support complex values from PropertyEditors, 
            but will be saved under the Ntext column.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.DataTypeDefinition">
            <summary>
            Definition of a DataType/PropertyEditor
            </summary>
            <remarks>
            The definition exists as a database reference between an actual DataType/PropertyEditor 
            (identified by its control id), its prevalues (configuration) and the named DataType in the backoffice UI.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.ParentId">
            <summary>
            Gets or sets the Id of the Parent entity
            </summary>
            <remarks>Might not be necessary if handled as a relation?</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Name">
            <summary>
            Gets or sets the name of the current entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.SortOrder">
            <summary>
            Gets or sets the sort order of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Level">
            <summary>
            Gets or sets the level of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Path">
            <summary>
            Gets or sets the path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.CreatorId">
            <summary>
            Id of the user who created this entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Trashed">
            <summary>
            Boolean indicating whether this entity is Trashed or not.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.ControlId">
            <summary>
            Id of the DataType control
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.DatabaseType">
            <summary>
            Gets or Sets the DatabaseType for which the DataType's value is saved as
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Umbraco#Core#Models#EntityBase#IUmbracoEntity#AdditionalData">
            <summary>
            Some entities may expose additional data that other's might not, this custom data will be available in this collection
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Property">
            <summary>
            A Property contains a single piece of data
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Property.IsValid">
            <summary>
            Boolean indicating whether the current value is valid
            </summary>
            <remarks>
            A valid value implies that it is ready for publishing.
            Invalid property values can be saved, but not published.
            </remarks>
            <returns>True is property value is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Property.IsValid(System.Object)">
            <summary>
            Boolean indicating whether the passed in value is valid
            </summary>
            <param name="value"></param>
            <returns>True is property value is valid, otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.Property.TagSupport">
            <summary>
            Returns the instance of the tag support, by default tags are not enabled
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.Alias">
            <summary>
            Returns the Alias of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyTypeId">
            <summary>
            Returns the Id of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.DataTypeDatabaseType">
            <summary>
            Returns the DatabaseType that the underlaying DataType is using to store its values
            </summary>
            <remarks>
            Only used internally when saving the property value.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyType">
            <summary>
            Returns the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.Version">
            <summary>
            Gets or Sets the version id for the Property
            </summary>
            <remarks>
            The version will be the same for all Property objects in a collection on a Content 
            object, so not sure how much this makes sense but adding it to align with:
            umbraco.interfaces.IProperty
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Property.Value">
            <summary>
            Gets or Sets the value of the Property
            </summary>
            <remarks>
            Setting the value will trigger a type validation. 
            The type of the value has to be valid in order to be saved.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyCollection">
            <summary>
            Represents a Collection of <see cref="T:Umbraco.Core.Models.Property"/> objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.#ctor(System.Func{Umbraco.Core.Models.Property,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyCollection"/> class with a delegate responsible for validating the addition of <see cref="T:Umbraco.Core.Models.Property"/> instances.
            </summary>
            <param name="validationCallback">The validation callback.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property})">
            <summary>
            Resets the collection to only contain the <see cref="T:Umbraco.Core.Models.Property"/> instances referenced in the <paramref name="properties"/> parameter, whilst maintaining
            any validation delegates such as <see cref="P:Umbraco.Core.Models.PropertyCollection.ValidateAdd"/>
            </summary>
            <param name="properties">The properties.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Umbraco.Core.Models.Property"/> whose alias matches the specified PropertyType.
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType.</param>
            <returns><c>true</c> if the collection contains the specified alias; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.EnsurePropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Ensures that the collection contains Properties for the passed in PropertyTypes
            </summary>
            <param name="propertyTypes">List of PropertyType</param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.EnsureCleanPropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Ensures that the collection is cleared from PropertyTypes not in the list of passed in PropertyTypes
            </summary>
            <param name="propertyTypes">List of PropertyType</param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.DeepClone">
            <summary>
            Create a deep clone of this property collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyCollection.Item(Umbraco.Core.Models.PropertyType)">
            <summary>
            Gets the element with the specified PropertyType.
            </summary>
            
            <returns>
            The element with the specified PropertyType. If an element with the specified PropertyType is not found, an exception is thrown.
            </returns>
            <param name="propertyType">The PropertyType of the element to get.</param><exception cref="T:System.ArgumentNullException"><paramref name="propertyType"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">An element with the specified key does not exist in the collection.</exception>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyGroup">
            <summary>
            A group of property types, which corresponds to the properties grouped under a Tab.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.Name">
            <summary>
            Gets or sets the Name of the Group, which corresponds to the Tab-name in the UI
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Group
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.PropertyTypes">
            <summary>
            Gets or sets a collection of PropertyTypes for this PropertyGroup
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyGroupCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Core.Models.PropertyGroup"/> objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyGroupCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyGroup})">
            <summary>
            Resets the collection to only contain the <see cref="T:Umbraco.Core.Models.PropertyGroup"/> instances referenced in the <paramref name="groups"/> parameter.
            </summary>
            <param name="groups">The property groups.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyGroupCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Umbraco.Core.Models.PropertyGroup"/> whose name matches the specified parameter.
            </summary>
            <param name="groupName">Name of the PropertyGroup.</param>
            <returns><c>true</c> if the collection contains the specified name; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyType">
            <summary>
            Defines the type of a <see cref="T:Umbraco.Core.Models.Property"/> object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.#ctor(System.String,Umbraco.Core.Models.DataTypeDatabaseType,System.Boolean)">
            <summary>
            Used internally to assign an explicity database type for this property type regardless of what the underlying data type/property editor is.
            </summary>
            <param name="propertyEditorAlias"></param>
            <param name="dataTypeDatabaseType"></param>
            <param name="isExplicitDbType"></param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.#ctor(System.String,Umbraco.Core.Models.DataTypeDatabaseType,System.Boolean,System.String)">
            <summary>
            Used internally to assign an explicity database type for this property type regardless of what the underlying data type/property editor is.
            </summary>
            <param name="propertyEditorAlias"></param>
            <param name="dataTypeDatabaseType"></param>
            <param name="isExplicitDbType"></param>
            <param name="propertyTypeAlias"></param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.CreatePropertyFromRawValue(System.Object,System.Guid,System.Int32)">
            <summary>
            Create a new Property object from a "raw" database value.
            </summary>
            <remarks>Can be used for the "old" values where no serialization type exists</remarks>
            <param name="value"></param>
            <param name="version"> </param>
            <param name="id"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.CreatePropertyFromRawValue(System.Object,System.String)">
            <summary>
            Create a new Property object from a "raw" database value.
            In some cases the value will need to be deserialized.
            </summary>
            <param name="value"></param>
            <param name="serializationType"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.CreatePropertyFromValue(System.Object)">
            <summary>
            Create a new Property object that conforms to the Type of the DataType
            and can be validated according to DataType validation / Mandatory-check.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.IsPropertyTypeValid(System.Object)">
            <summary>
            Validates the Value from a Property according to its type
            </summary>
            <param name="value"></param>
            <returns>True if valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.IsPropertyValueValid(System.Object)">
            <summary>
            Validates the Value from a Property according to the validation settings
            </summary>
            <param name="value"></param>
            <returns>True if valid, otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Name">
            <summary>
            Gets of Sets the Name of the PropertyType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Alias">
            <summary>
            Gets of Sets the Alias of the PropertyType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Description">
            <summary>
            Gets of Sets the Description for the PropertyType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.DataTypeDefinitionId">
            <summary>
            Gets of Sets the Id of the DataType (Definition), which the PropertyType is "wrapping"
            </summary>
            <remarks>This is actually the Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.DataTypeId">
            <summary>
            Gets of Sets the Id of the DataType control
            </summary>
            <remarks>This is the Id of the actual DataType control</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.DataTypeDatabaseType">
            <summary>
            Gets or Sets the DatabaseType for which the DataType's value is saved as
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.PropertyGroupId">
            <summary>
            Gets or sets the identifier of the PropertyGroup this PropertyType belongs to.
            </summary>
            <remarks>For generic properties, the value is <c>null</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Mandatory">
            <summary>
            Gets of Sets the Boolean indicating whether a value for this PropertyType is required
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.HelpText">
            <summary>
            Gets of Sets the Help text for the current PropertyType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.SortOrder">
            <summary>
            Gets of Sets the Sort order of the PropertyType, which is used for sorting within a group
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.ValidationRegExp">
            <summary>
            Gets or Sets the RegEx for validation of legacy DataTypes
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyTypeCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Core.Models.PropertyType"/> objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTypeCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Resets the collection to only contain the <see cref="T:Umbraco.Core.Models.PropertyType"/> instances referenced in the <paramref name="properties"/> parameter.
            </summary>
            <param name="properties">The properties.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTypeCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Umbraco.Core.Models.Property"/> whose alias matches the specified PropertyType.
            </summary>
            <param name="propertyAlias">Alias of the PropertyType.</param>
            <returns><c>true</c> if the collection contains the specified alias; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Rdbms.DomainDto.IsoCode">
            <summary>
            Used for a result on the query to get the associated language for a domain if there is one
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.WeightedPluginAttribute">
            <summary>
            Indicates the relative weight of a resolved object type.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.WeightedPluginAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.WeightedPluginAttribute"/> class with a weight.
            </summary>
            <param name="weight">The object type weight.</param>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.WeightedPluginAttribute.Weight">
            <summary>
            Gets or sets the weight of the object type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.IPropertyEditorValueConverter">
            <summary>
            Maps a property source value to a data object.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyEditorValueConverter.IsConverterFor(System.Guid,System.String,System.String)">
            <summary>
            Returns a value indicating whether this provider applies to the specified property.
            </summary>
            <param name="datatypeGuid">A Guid identifying the property datatype.</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <param name="propertyTypeAlias">The property alias.</param>
            <returns>True if this provider applies to the specified property.</returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyEditorValueConverter.ConvertPropertyValue(System.Object)">
            <summary>
            Attempts to convert a source value specified into a property model.
            </summary>
            <param name="sourceValue">The source value.</param>
            <returns>An <c>Attempt</c> representing the result of the conversion.</returns>
            <remarks>The source value is dependent on the content cache. With the Xml content cache it
            is always a string, but with other caches it may be an object (numeric, time...) matching
            what is in the database. Be prepared.</remarks>
        </member>
        <member name="T:Umbraco.Core.ActionsResolver">
            <summary>
            A resolver to return all IAction objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.ActionsResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="packageActions"></param>		
        </member>
        <member name="M:Umbraco.Core.ActionsResolver.GetAction``1">
            <summary>
            Gets an Action if it exists.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.ActionsResolver.Actions">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IPackageAction"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.CacheRefreshersResolver">
            <summary>
            A resolver to return all ICacheRefresher objects
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2">
            <summary>
            The base class for old legacy factories such as the DataTypeFactory or CacheResolverFactory.
            </summary>
            <typeparam name="TResolver">The type of the concrete resolver class.</typeparam>
            <typeparam name="TResolved">The type of the resolved objects.</typeparam>
            <remarks>
            This class contains basic functionality to mimic the functionality in these old factories since they all return 
            transient objects (though this should be changed) and the method GetById needs to lookup a type to an ID and since 
            these old classes don't contain metadata, the objects need to be instantiated first to get their metadata, we then store this
            for use in the GetById method.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2"/> class with an initial list of object types.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="value">A function returning the list of object types.</param>
            <remarks>
            We are creating Transient instances (new instances each time) because this is how the legacy code worked and
            I don't want to muck anything up by changing them to application based instances. 
            TODO: However, it would make much more sense to do this and would speed up the application plus this would make the GetById method much easier.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2.GetUniqueIdentifier(`1)">
            <summary>
            Returns the unique identifier of the type of a specified object.
            </summary>
            <param name="value">The object.</param>
            <returns>The unique identifier of the type of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2.GetById(System.Guid)">
            <summary>
            Returns a new instance for the type identified by its unique type identifier.
            </summary>
            <param name="id">The type identifier.</param>
            <returns>The value of the type uniquely identified by <paramref name="id"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2.EnsureIsInitialized">
            <summary>
            Populates the identifiers-to-types dictionnary.
            </summary>
            <remarks>
            <para>This allow us to instantiate a type by ID since these legacy types doesn't contain any metadata.</para>
            <para>We instanciate all types once to get their unique identifier, then build the dictionary so that
            when GetById is called, we can instanciate a single object.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CacheRefreshersResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="refreshers"></param>		
        </member>
        <member name="P:Umbraco.Core.CacheRefreshersResolver.CacheRefreshers">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.ICacheRefresher"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.GlobalSettings">
            <summary>
            The GlobalSettings Class contains general settings information for the entire Umbraco instance based on information from  web.config appsettings 
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.ResetInternal">
            <summary>
            Used in unit testing to reset all config items that were set with property setters (i.e. did not come from config)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.Reset">
            <summary>
            Resets settings that were set programmatically, to their initial values.
            </summary>
            <remarks>To be used in unit tests.</remarks>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.SaveSetting(System.String,System.String)">
            <summary>
            Saves a setting into the configuration file.
            </summary>
            <param name="key">Key of the setting to be saved.</param>
            <param name="value">Value of the setting to be saved.</param>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.RemoveSetting(System.String)">
            <summary>
            Removes a setting from the configuration file.
            </summary>
            <param name="key">Key of the setting to be removed.</param>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.RequestIsInUmbracoApplication(System.Web.HttpContext)">
            <summary>
            Requests the is in umbraco application directory structure.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.IsReservedPathOrUrl(System.String,System.Web.HttpContextBase,System.Web.Routing.RouteCollection)">
            <summary>
            Determines whether the current request is reserved based on the route table and 
            whether the specified URL is reserved or is inside a reserved path.
            </summary>
            <param name="url"></param>
            <param name="httpContext"></param>
            <param name="routes">The route collection to lookup the request in</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.IsReservedPathOrUrl(System.String)">
            <summary>
            Determines whether the specified URL is reserved or is inside a reserved path.
            </summary>
            <param name="url">The URL to check.</param>
            <returns>
            	<c>true</c> if the specified URL is reserved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ReservedUrls">
            <summary>
            Gets the reserved urls from web.config.
            </summary>
            <value>The reserved urls.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ReservedPaths">
            <summary>
            Gets the reserved paths from web.config
            </summary>
            <value>The reserved paths.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ContentXmlFile">
            <summary>
            Gets the name of the content XML file.
            </summary>
            <value>The content XML.</value>
            <remarks>
            Defaults to ~/App_Data/umbraco.config
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.StorageDirectory">
            <summary>
            Gets the path to the storage directory (/data by default).
            </summary>
            <value>The storage directory.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.Path">
            <summary>
            Gets the path to umbraco's root directory (/umbraco by default).
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UmbracoMvcArea">
            <summary>
            This returns the string of the MVC Area route.
            </summary>
            <remarks>
            THIS IS TEMPORARY AND SHOULD BE REMOVED WHEN WE MIGRATE/UPDATE THE CONFIG SETTINGS TO BE A REAL CONFIG SECTION
            AND SHOULD PROBABLY BE HANDLED IN A MORE ROBUST WAY.
            
            This will return the MVC area that we will route all custom routes through like surface controllers, etc...
            We will use the 'Path' (default ~/umbraco) to create it but since it cannot contain '/' and people may specify a path of ~/asdf/asdf/admin
            we will convert the '/' to '-' and use that as the path. its a bit lame but will work.
            
            We also make sure that the virtual directory (SystemDirectories.Root) is stripped off first, otherwise we'd end up with something
            like "MyVirtualDirectory-Umbraco" instead of just "Umbraco".
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ClientPath">
            <summary>
            Gets the path to umbraco's client directory (/umbraco_client by default).
            This is a relative path to the Umbraco Path as it always must exist beside the 'umbraco'
            folder since the CSS paths to images depend on it.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DbDsn">
            <summary>
            Gets the database connection string
            </summary>
            <value>The database connection string.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ConfigurationStatus">
            <summary>
            Gets or sets the configuration status. This will return the version number of the currently installed umbraco instance.
            </summary>
            <value>The configuration status.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UmbracoMembershipProviderLegacyEncoding">
            <summary>
            Gets or sets the Umbraco members membership providers' useLegacyEncoding state. This will return a boolean
            </summary>
            <value>The useLegacyEncoding status.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UmbracoUsersMembershipProviderLegacyEncoding">
            <summary>
            Gets or sets the Umbraco users membership providers' useLegacyEncoding state. This will return a boolean
            </summary>
            <value>The useLegacyEncoding status.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.FullpathToRoot">
            <summary>
            Gets the full path to root.
            </summary>
            <value>The fullpath to root.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DebugMode">
            <summary>
            Gets a value indicating whether umbraco is running in [debug mode].
            </summary>
            <value><c>true</c> if [debug mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.Configured">
            <summary>
            Gets a value indicating whether the current version of umbraco is configured.
            </summary>
            <value><c>true</c> if configured; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.TimeOutInMinutes">
            <summary>
            Gets the time out in minutes.
            </summary>
            <value>The time out in minutes.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UseDirectoryUrls">
            <summary>
            Gets a value indicating whether umbraco uses directory urls.
            </summary>
            <value><c>true</c> if umbraco uses directory urls; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionCheckPeriod">
            <summary>
            Returns a string value to determine if umbraco should skip version-checking.
            </summary>
            <value>The version check period in days (0 = never).</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DisableXsltExtensions">
            <summary>
            Returns a string value to determine if umbraco should disbable xslt extensions
            </summary>
            <value><c>"true"</c> if version xslt extensions are disabled, otherwise, <c>"false"</c></value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.EditXhtmlMode">
            <summary>
            Returns a string value to determine if umbraco should use Xhtml editing mode in the wysiwyg editor
            </summary>
            <value><c>"true"</c> if Xhtml mode is enable, otherwise, <c>"false"</c></value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DefaultUILanguage">
            <summary>
            Gets the default UI language.
            </summary>
            <value>The default UI language.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ProfileUrl">
            <summary>
            Gets the profile URL.
            </summary>
            <value>The profile URL.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.HideTopLevelNodeFromPath">
            <summary>
            Gets a value indicating whether umbraco should hide top level nodes from generated urls.
            </summary>
            <value>
            	<c>true</c> if umbraco hides top level nodes from urls; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.CurrentVersion">
            <summary>
            Gets the current version.
            </summary>
            <value>The current version.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionMajor">
            <summary>
            Gets the major version number.
            </summary>
            <value>The major version number.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionMinor">
            <summary>
            Gets the minor version number.
            </summary>
            <value>The minor version number.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionPatch">
            <summary>
            Gets the patch version number.
            </summary>
            <value>The patch version number.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionComment">
            <summary>
            Gets the version comment (like beta or RC).
            </summary>
            <value>The version comment.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UseSSL">
            <summary>
            Gets a value indicating whether umbraco should force a secure (https) connection to the backoffice.
            </summary>
            <value><c>true</c> if [use SSL]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.License">
            <summary>
            Gets the umbraco license.
            </summary>
            <value>The license.</value>
        </member>
        <member name="T:Umbraco.Core.CustomBooleanTypeConverter">
            <summary>
            Allows for converting string representations of 0 and 1 to boolean
            </summary>
        </member>
        <member name="T:Umbraco.Core.DataTypesResolver">
            <summary>
            A resolver to return all IDataType objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.DataTypesResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="dataTypes"></param>		
        </member>
        <member name="P:Umbraco.Core.DataTypesResolver.DataTypes">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.ICacheRefresher"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.DisposableTimer">
            <summary>
            Starts the timer and invokes a  callback upon disposal. Provides a simple way of timing an operation by wrapping it in a <code>using</code> (C#) statement.
            </summary>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.Start(System.Action{System.Int64})">
            <summary>
            Starts the timer and invokes the specified callback upon disposal.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.TraceDuration``1(System.String,System.String)">
            <summary>
            Adds a start and end log entry as Info and tracks how long it takes until disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.TraceDuration``1(System.String)">
            <summary>
            Adds a start and end log entry as Info and tracks how long it takes until disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.TraceDuration(System.Type,System.String,System.String)">
            <summary>
            Adds a start and end log entry as Info and tracks how long it takes until disposed.
            </summary>
            <param name="loggerType"></param>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DebugDuration``1(System.String,System.String)">
            <summary>
            Adds a start and end log entry as Debug and tracks how long it takes until disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DebugDuration``1(System.String)">
            <summary>
            Adds a start and end log entry as Debug and tracks how long it takes until disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DebugDuration(System.Type,System.String,System.String)">
            <summary>
            Adds a start and end log entry as Debug and tracks how long it takes until disposed.
            </summary>
            <param name="loggerType"></param>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Core.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="T:Umbraco.Core.ExpressionHelper">
            <summary>
            A set of helper methods for dealing with expressions
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="source">The source.</param>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="!:Expression&lt;Action&lt;T&gt;&gt;"/> provided it refers to a method call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="fromExpression"/> is null or cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="TReturn">The return type of the method.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethod(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to a method call.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="expression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="!:Expression&lt;Func&lt;T, TReturn&gt;&gt;"/> provided it refers to member access.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/> or null if <paramref name="fromExpression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMethodSignatureEqualTo(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Determines whether the MethodInfo is the same based on signature, not based on the equality operator or HashCode.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
              <c>true</c> if [is method signature equal to] [the specified left]; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This is useful for comparing Expression methods that may contain different generic types
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to member access.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetStaticMethodInfo(System.Delegate)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from a <see cref="T:System.Delegate"/>
            </summary>
            <param name="fromMethodGroup">From method group.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMethod(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a method.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is method; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMember(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a member.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is member; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsConstant(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a constant.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is constant; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetFirstValueFromArguments(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Gets the first value from the supplied arguments of an expression, for those arguments that can be cast to <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Does something 'x' amount of times
            </summary>
            <param name="n"></param>
            <param name="action"></param>
        </member>
        <member name="M:Umbraco.Core.IntExtensions.ToGuid(System.Int32)">
            <summary>
            Creates a Guid based on an integer value
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value to convert</param>
            <returns><see cref="T:System.Guid"/></returns>
        </member>
        <member name="T:Umbraco.Core.LambdaExpressionCacheKey">
            <summary>
            Represents a simple <see cref="T:System.Linq.Expressions.LambdaExpression"/> in a form which is suitable for using as a dictionary key
            by exposing the return type, argument types and expression string form in a single concatenated string.
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ArgTypes">
            <summary>
            The argument type names of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ReturnType">
            <summary>
            The return type of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ExpressionAsString">
            <summary>
            The original string representation of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Umbraco.Core.PackageActionsResolver">
            <summary>
            A resolver to return all IPackageAction objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.PackageActionsResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="packageActions"></param>		
        </member>
        <member name="P:Umbraco.Core.PackageActionsResolver.PackageActions">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IPackageAction"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.AsynchronousRollingFileAppender">
            <summary>
            Based on https://github.com/cjbhaines/Log4Net.Async
            which is based on code by Chris Haines http://cjbhaines.wordpress.com/2012/02/13/asynchronous-log4net-appenders/
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggingTaskExtension.LogErrors(System.Threading.Tasks.Task,System.Action{System.String,System.Exception})">
            <summary>
                This task shouldn't be waited on (as it's not guaranteed to run), and you shouldn't wait on the parent task either (because it might throw an 
                exception that doesn't get handled). If you want to be waiting on something, use LogErrorsWaitable instead.
            
                None of these methods are suitable for tasks that return a value. If you're wanting a result, you should probably be handling
                errors yourself.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggingTaskExtension.LogErrorsWaitable(System.Threading.Tasks.Task,System.Action{System.String,System.Exception})">
            <summary>
                This task can be waited on (as it's guaranteed to run), and you should wait on this rather than the parent task. Because it's
                guaranteed to run, it may be slower than using LogErrors, and you should consider using that method if you don't want to wait.
            
                None of these methods are suitable for tasks that return a value. If you're wanting a result, you should probably be handling
                errors yourself.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.LogHelper">
            <summary>
             Used for logging, ILogger should be used instead but this is available for static access to logging
            </summary>
             <remarks>
             this wraps ILogger 
             </remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Error``1(System.String,System.Exception)">
            <summary>
            Adds an error log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Warn``1(System.String,System.Func{System.Object}[])">
            <summary>
            Adds a warn log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <param name="formatItems"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Info``1(System.Func{System.String})">
            <summary>
            Traces a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessage">The delegate to generate a message.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Info(System.Type,System.Func{System.String})">
            <summary>
            Traces if tracing is enabled.
            </summary>
            <param name="callingType"></param>
            <param name="generateMessage"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Info(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Traces if tracing is enabled.
            </summary>
            <param name="type">The type for the logging namespace.</param>
            <param name="generateMessageFormat">The message format.</param>
            <param name="formatItems">The format items.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Info``1(System.String,System.Func{System.Object}[])">
            <summary>
            Traces a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessageFormat">The generate message format.</param>
            <param name="formatItems">The format items.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug``1(System.Func{System.String})">
            <summary>
            Debugs a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessage">The delegate to generate a message.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug(System.Type,System.Func{System.String})">
            <summary>
            Debugs if tracing is enabled.
            </summary>
            <param name="callingType"></param>
            <param name="generateMessage"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Debugs if tracing is enabled.
            </summary>
            <param name="type">The type for the logging namespace.</param>
            <param name="generateMessageFormat">The message format.</param>
            <param name="formatItems">The format items.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug``1(System.String,System.Func{System.Object}[])">
            <summary>
            Debugs a message, only generating the message if debug is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessageFormat">The generate message format.</param>
            <param name="formatItems">The format items.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug``1(System.String,System.Boolean,System.Func{System.Object}[])">
            <summary>
            Debugs a message and also writes to the TraceContext specified, useful for when you would like the debug
            output also displayed in the Http trace output.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessageFormat"></param>
            <param name="showHttpTrace"></param>
            <param name="formatItems"></param>
        </member>
        <member name="T:Umbraco.Core.Macros.MacroFieldEditorsResolver">
            <summary>
            A resolver to return all IMacroGuiRendering objects
            </summary>
            <remarks>
            Much of this classes methods are based on legacy code from umbraco.editorControls.macrocontainer.MacroControlFactory
            this code should probably be reviewed and cleaned up if necessary.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Macros.MacroFieldEditorsResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="macroEditors"></param>		
        </member>
        <member name="M:Umbraco.Core.Macros.MacroFieldEditorsResolver.GetValueFromMacroControl(System.Web.UI.Control)">
            <summary>
            Gets the value based on the type of control
            </summary>
            <param name="macroControl"></param>
            <returns></returns>
            <remarks>
            This is legacy code migrated from umbraco.editorControls.macrocontainer.MacroControlFactory
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Macros.MacroFieldEditorsResolver.GetMacroRenderControlByType(Umbraco.Core.Macros.PersistableMacroProperty,System.String)">
            <summary>
            Create an instance of a Macro control and return it.
            Because the macro control uses inline client script whichs is not generated after postback
            That's why we use the Page Picker instead of the content picker of the macro.
            </summary>
            <remarks>
            This is legacy code migrated from umbraco.editorControls.macrocontainer.MacroControlFactory
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Macros.MacroFieldEditorsResolver.MacroFieldEditors">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IMacroGuiRendering"/> implementations.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.MacroFieldEditorsResolver.MacroControlTypes">
            <remarks>
            This is legacy code migrated from umbraco.editorControls.macrocontainer.MacroControlFactory
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Macros.PersistableMacroProperty">
            <summary>
            NOTE: This is legacy code, might require a cleanup
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.Name">
            <summary>
            Macro Caption
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.Alias">
            <summary>
            Macro Alias
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.Value">
            <summary>
            Macro Value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.AssemblyName">
            <summary>
            AssemblyName of the Property of teh Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.TypeName">
            <summary>
            TypeName of the property of the macro
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.SafeCast``1(System.Object)">
            <summary>
            Provides a shortcut way of safely casting an input when you cannot guarantee the <typeparam name="T"></typeparam> is an instance type (i.e., when the C# AS keyword is not applicable)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertTo``1(System.Object)">
            <summary>
            Tries to convert the input object to the output type using TypeConverters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertTo(System.Object,System.Type)">
            <summary>
            Tries to convert the input object to the output type using TypeConverters. If the destination type is a superclass of the input type,
            if will use <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/>.
            </summary>
            <param name="input">The input.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToDictionary``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Converts an object into a dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TVal"> </typeparam>
            <param name="o"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToDictionary``1(System.Object,System.String[])">
            <summary>
            Turns object into dictionary
            </summary>
            <param name="o"></param>
            <param name="ignoreProperties">Properties to ignore</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertToXmlString(System.Object,System.Type)">
            <summary>
            Attempts to serialize the value to an XmlString using ToXmlString
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToXmlString(System.Object,System.Type)">
            <summary>
            Returns an XmlSerialized safe string representation for the value
            </summary>
            <param name="value"></param>
            <param name="type">The Type can only be a primitive type or Guid and byte[] otherwise an exception is thrown</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToXmlString``1(System.Object)">
            <summary>
            Returns an XmlSerialized safe string representation for the value and type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyEditorValueConvertersResolver">
            <summary>
            Manages the list of IPropertyEditorValueConverter's
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditorValueConvertersResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.PropertyEditorValueConvertersResolver"/> class with 
            an initial list of converter types.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="converters">The list of converter types</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditorValueConvertersResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.PropertyEditors.PropertyEditorValueConvertersResolver"/> class with 
            an initial list of converter types.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="converters">The list of converter types</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.PropertyEditorValueConvertersResolver.Converters">
            <summary>
            Gets the converteres.
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.ObjectLifetimeScope">
            <summary>
            Specifies the lifetime scope of resolved objects.
            </summary>
        </member>
        <member name="F:Umbraco.Core.ObjectResolution.ObjectLifetimeScope.HttpRequest">
            <summary>
            A per-request object instance is created.
            </summary>
        </member>
        <member name="F:Umbraco.Core.ObjectResolution.ObjectLifetimeScope.Application">
            <summary>
            A single application-wide object instance is created.
            </summary>
        </member>
        <member name="F:Umbraco.Core.ObjectResolution.ObjectLifetimeScope.Transient">
            <summary>
            A new object instance is created each time one is requested.
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.Resolution">
            <summary>
            Represents the status of objects resolution.
            </summary>
            <remarks>
            <para>Before resolution is frozen it is possible to access its configuration, but not to get values.</para>
            <para>Once resolution is frozen, it is not possible to access its configuration anymore, but it is possible to get values.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.Resolution.Freeze">
            <summary>
            Freezes resolution.
            </summary>
            <exception cref="T:System.InvalidOperationException">resolution is already frozen.</exception>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.Resolution.Reset">
            <summary>
            Resets resolution, ie unfreezes it and clears Frozen event.
            </summary>
            <remarks>To be used in unit tests.</remarks>
        </member>
        <member name="E:Umbraco.Core.ObjectResolution.Resolution.Frozen">
            <summary>
            Occurs when resolution is frozen.
            </summary>
            <remarks>Occurs only once, since resolution can be frozen only once.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.Resolution.IsFrozen">
            <summary>
            Gets or sets a value indicating whether resolution of objects is frozen.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.Resolution.Configuration">
            <summary>
            Returns a disposable object that represents safe access to unfrozen resolution configuration.
            </summary>
            <remarks>Should be used in a <c>using(Resolution.Configuration) { ... }</c>  mode.</remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.Resolution.DirtyBackdoorToConfiguration">
            <summary>
            Returns a disposable object that reprents dirty access to temporarily unfrozen resolution configuration.
            </summary>
            <remarks>
            <para>Should not be used.</para>
            <para>Should be used in a <c>using(Resolution.DirtyBackdoorToConfiguration) { ... }</c> mode.</para>
            <para>Because we just lift the frozen state, and we don't actually re-freeze, the <c>Frozen</c> event does not trigger.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Publishing.BasePublishingStrategy">
            <summary>
            Abstract class for the implementation of an <see cref="T:Umbraco.Core.Publishing.IPublishingStrategy"/>, which provides the events used for publishing/unpublishing.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Publishing.IPublishingStrategy">
            <summary>
            Defines the Publishing Strategy
            </summary>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Id of the User issueing the publish operation</param>
            <returns>True if the publish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.PublishWithChildren(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Publishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the publish operation</param>
            <returns>True if the publish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Unpublishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to unpublish</param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>True if the unpublish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.UnPublish(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Unpublishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>True if the unpublish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.PublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <remarks>
            This seperation of the OnPublished event is done to ensure that the Content
            has been properly updated (committed unit of work) and xml saved in the db.
            </remarks>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.PublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Boolean)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
            <param name="isAllRepublished">Boolean indicating whether its all content that is republished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.UnPublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.UnPublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent})">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.BasePublishingStrategy.PublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <remarks>
            This seperation of the OnPublished event is done to ensure that the Content
            has been properly updated (committed unit of work) and xml saved in the db.
            </remarks>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.BasePublishingStrategy.PublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Boolean)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
            <param name="isAllRepublished">Boolean indicating whether its all content that is republished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.BasePublishingStrategy.UnPublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.BasePublishingStrategy.UnPublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent})">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="T:Umbraco.Core.Publishing.PublishingStrategy">
            <summary>
            Currently acts as an interconnection between the new public api and the legacy api for publishing
            </summary>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.PublishInternal(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Id of the User issueing the publish operation</param>        
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Id of the User issueing the publish operation</param>
            <returns>True if the publish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.PublishWithChildrenInternal(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Publishes a list of content items
            </summary>
            <param name="content"></param>
            <param name="userId"></param>
            <param name="includeUnpublishedDocuments">
            By default this is set to true which means that it will publish any content item in the list that is completely unpublished and
            not visible on the front-end. If set to false, this will only publish content that is live on the front-end but has new versions
            that have yet to be published.
            </param>        
            <returns></returns>
            <remarks>
            
            This method becomes complex once we start to be able to cancel events or stop publishing a content item in any way because if a
            content item is not published then it's children shouldn't be published either. This rule will apply for the following conditions:
            * If a document fails to be published, do not proceed to publish it's children if:
            ** The document does not have a publish version
            ** The document does have a published version but the includeUnpublishedDocuments = false
            
            In order to do this, we will order the content by level and begin by publishing each item at that level, then proceed to the next
            level and so on. If we detect that the above rule applies when the document publishing is cancelled we'll add it to the list of 
            parentsIdsCancelled so that it's children don't get published.
            
            Its important to note that all 'root' documents included in the list *will* be published regardless of the rules mentioned
            above (unless it is invalid)!! By 'root' documents we are referring to documents in the list with the minimum value for their 'level'. 
            In most cases the 'root' documents will only be one document since under normal circumstance we only publish one document and 
            its children. The reason we have to do this is because if a user is publishing a document and it's children, it is implied that
            the user definitely wants to publish it even if it has never been published before.
            
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.CheckCancellingOfChildPublishing(Umbraco.Core.Models.IContent,System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Based on the information provider we'll check if we should cancel the publishing of this document's children
            </summary>
            <param name="content"></param>
            <param name="parentsIdsCancelled"></param>
            <param name="includeUnpublishedDocuments"></param>
            <remarks>
            See remarks on method: PublishWithChildrenInternal
            </remarks> 
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.PublishWithChildren(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Publishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the publish operation</param>
            <returns>True if the publish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Unpublishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to unpublish</param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>True if the unpublish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublishInternal(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Unpublishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>A list of publish statuses</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublish(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Unpublishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>True if the unpublish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.PublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <remarks>
            This seperation of the OnPublished event is done to ensure that the Content
            has been properly updated (committed unit of work) and xml saved in the db.
            </remarks>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.PublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Boolean)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
            <param name="isAllRepublished">Boolean indicating whether its all content that is republished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent})">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="E:Umbraco.Core.Publishing.PublishingStrategy.Publishing">
            <summary>
            Occurs before publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Publishing.PublishingStrategy.Published">
            <summary>
            Occurs after publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Publishing.PublishingStrategy.UnPublishing">
            <summary>
            Occurs before unpublish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Publishing.PublishingStrategy.UnPublished">
            <summary>
            Occurs after unpublish
            </summary>
        </member>
        <member name="T:Umbraco.Core.Publishing.PublishStatus">
            <summary>
            The result of publishing a content item
            </summary>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishStatus.#ctor(Umbraco.Core.Models.IContent,Umbraco.Core.Events.EventMessages)">
            <summary>
            Creates a successful publish status
            </summary>
        </member>
        <member name="P:Umbraco.Core.Publishing.PublishStatus.InvalidProperties">
            <summary>
            Gets sets the invalid properties if the status failed due to validation.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Publishing.PublishStatusType">
            <summary>
            A status type of the result of publishing a content item
            </summary>
            <remarks>
            Anything less than 10 = Success!
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Publishing.PublishStatusType.Success">
            <summary>
            The publishing was successful.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.PublishStatusType.SuccessAlreadyPublished">
            <summary>
            The item was already published
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.PublishStatusType.FailedPathNotPublished">
            <summary>
            The content could not be published because it's ancestor path isn't published
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.PublishStatusType.FailedHasExpired">
            <summary>
            The content item was scheduled to be un-published and it has expired so we cannot force it to be
            published again as part of a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.PublishStatusType.FailedAwaitingRelease">
            <summary>
            The content item is scheduled to be released in the future and therefore we cannot force it to 
            be published during a bulk publish operation.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.PublishStatusType.FailedIsTrashed">
            <summary>
            The content item is in the trash, it cannot be published
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.PublishStatusType.FailedCancelledByEvent">
            <summary>
            The publish action has been cancelled by an event handler
            </summary>
        </member>
        <member name="F:Umbraco.Core.Publishing.PublishStatusType.FailedContentInvalid">
            <summary>
            The content item contains invalid data (has not passed validation requirements)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.QueryableExtensions">
            <summary>
            Extension methods for IQueryable
            </summary>
            <remarks>
            NOTE: Ordering code taken from: http://stackoverflow.com/questions/41244/dynamic-linq-orderby-on-ienumerablet
            
            ANOTHER NOTE: We have a bastardized version of Dynamic Linq existing at Umbraco.Web.Dynamics however it's been hacked so not
            sure we can use it for anything other than DynamicNode.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Publishing.ScheduledPublisher">
            <summary>
            Used to perform scheduled publishing/unpublishing
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Section">
            <summary>
            Represents a section defined in the app.config file
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.AuthenticationExtensions">
            <summary>
            Extensions to create and renew and remove authentication tickets for the Umbraco back office
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.AuthenticateCurrentRequest(System.Web.HttpContextBase,System.Web.Security.FormsAuthenticationTicket,System.Boolean)">
            <summary>
            This will check the ticket to see if it is valid, if it is it will set the current thread's user and culture
            </summary>
            <param name="http"></param>
            <param name="ticket"></param>
            <param name="renewTicket">If true will attempt to renew the ticket</param>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.GetCurrentIdentity(System.Web.HttpContextBase,System.Boolean)">
            <summary>
            This will return the current back office identity. 
            </summary>
            <param name="http"></param>
            <param name="authenticateRequestIfNotFound"> 
            If set to true and a back office identity is not found and not authenticated, this will attempt to authenticate the 
            request just as is done in the Umbraco module and then set the current identity if it is valid.
            Just like in the UmbracoModule, if this is true then the user's culture will be assigned to the request.
            </param>
            <returns>
            Returns the current back office identity if an admin is authenticated otherwise null
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.GetCurrentIdentity(System.Web.HttpContext,System.Boolean)">
            <summary>
            This will return the current back office identity. 
            </summary>
            <param name="http"></param>
            <param name="authenticateRequestIfNotFound">
            If set to true and a back office identity is not found and not authenticated, this will attempt to authenticate the 
            request just as is done in the Umbraco module and then set the current identity if it is valid
            </param>
            <returns>
            Returns the current back office identity if an admin is authenticated otherwise null
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.UmbracoLogoutWebApi(System.Net.Http.HttpResponseMessage)">
            <summary>
            This clears the forms authentication cookie for webapi since cookies are handled differently
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.UmbracoLogout(System.Web.HttpContext)">
            <summary>
            This clears the forms authentication cookie
            </summary>
            <param name="http"></param>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.RenewUmbracoAuthTicket(System.Web.HttpContextBase)">
            <summary>
            This will force ticket renewal in the OWIN pipeline
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.RenewUmbracoAuthTicket(System.Web.HttpContext)">
            <summary>
            This will force ticket renewal in the OWIN pipeline
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.CreateUmbracoAuthTicket(System.Web.HttpContextBase,Umbraco.Core.Security.UserData)">
            <summary>
            Creates the umbraco authentication ticket
            </summary>
            <param name="http"></param>
            <param name="userdata"></param>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.GetRemainingAuthSeconds(System.Web.HttpContextBase)">
            <summary>
            returns the number of seconds the user has until their auth session times out
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.GetRemainingAuthSeconds(System.Web.Security.FormsAuthenticationTicket)">
            <summary>
            returns the number of seconds the user has until their auth session times out
            </summary>
            <param name="ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.GetUmbracoAuthTicket(System.Web.HttpContextBase)">
            <summary>
            Gets the umbraco auth ticket
            </summary>
            <param name="http"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.Logout(System.Web.HttpContextBase,System.String)">
            <summary>
            This clears the forms authentication cookie
            </summary>
            <param name="http"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:Umbraco.Core.Security.AuthenticationExtensions.CreateAuthTicketAndCookie(System.Web.HttpContextBase,System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a custom FormsAuthentication ticket with the data specified
            </summary>
            <param name="http">The HTTP.</param>
            <param name="username">The username.</param>
            <param name="userData">The user data.</param>
            <param name="loginTimeoutMins">The login timeout mins.</param>
            <param name="minutesPersisted">The minutes persisted.</param>
            <param name="cookieName">Name of the cookie.</param>
            <param name="cookieDomain">The cookie domain.</param>
        </member>
        <member name="T:Umbraco.Core.Security.IUsersMembershipProvider">
            <summary>
            A marker interface used internally to identify Umbraco built-in Users membership providers
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.MembershipProviderBase">
            <summary>
            A base membership provider class offering much of the underlying functionality for initializing and password encryption/hashing.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call 
            <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider 
            has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.OnValidatingPassword(System.Web.Security.ValidatePasswordEventArgs)">
            <summary>
            Override this method to ensure the password is valid before raising the event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">This property is ignore for this provider</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
            <remarks>
            Checks to ensure the AllowManuallyChangingPassword rule is adhered to
            </remarks>       
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.PerformChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">This property is ignore for this provider</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
            <remarks>
            Performs the basic validation before passing off to PerformChangePasswordQuestionAndAnswer
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.PerformChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
            <remarks>
            Ensures the ValidatingPassword event is executed before executing PerformCreateUser and performs basic membership provider validation of values.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.ValidateNewUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Performs the validation of the information for creating a new user
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="passwordQuestion"></param>
            <param name="passwordAnswer"></param>
            <param name="isApproved"></param>
            <param name="providerUserKey"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.GetPassword(System.String,System.String)">
            <summary>
            Gets the members password if password retreival is enabled
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.PerformGetPassword(System.String,System.String)">
            <summary>
            Gets the members password if password retreival is enabled
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.GetDefaultAppName">
            <summary>
            Gets the name of the default app.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.FormatPasswordForStorage(System.String,System.String)">
            <summary>
            If the password format is a hashed keyed algorithm then we will pre-pend the salt used to hash the password
            to the hashed password itself.
            </summary>
            <param name="pass"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.CheckPassword(System.String,System.String)">
            <summary>
            Checks the password.
            </summary>
            <param name="password">The password.</param>
            <param name="dbPassword">The dbPassword.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.EncryptOrHashNewPassword(System.String,System.String@)">
            <summary>
            Encrypt/hash a new password with a new salt
            </summary>
            <param name="newPassword"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.StoredPassword(System.String,System.String@)">
            <summary>
            Returns the hashed password without the salt if it is hashed
            </summary>
            <param name="storedString"></param>
            <param name="salt">returns the salt</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.LegacyEncodePassword(System.String)">
            <summary>
            Encodes the password.
            </summary>
            <param name="password">The password.</param>
            <returns>The encoded password.</returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.LegacyUnEncodePassword(System.String)">
            <summary>
            Unencode password.
            </summary>
            <param name="encodedPassword">The encoded password.</param>
            <returns>The unencoded password.</returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderBase.GetCurrentRequestIpAddress">
            <summary>
            Returns the current request IP address for logging if there is one
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.DefaultMinPasswordLength">
            <summary>
            Providers can override this setting, default is 7
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.DefaultMinNonAlphanumericChars">
            <summary>
            Providers can override this setting, default is 1
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.DefaultUseLegacyEncoding">
            <summary>
            Providers can override this setting, default is false to use better security
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.AllowManuallyChangingPassword">
            <summary>
            Providers can override this setting, by default this is false which means that the provider will 
            authenticate the username + password when ChangePassword is called. This property exists purely for
            backwards compatibility.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.EnablePasswordReset">
            <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider supports password reset; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.EnablePasswordRetrieval">
            <summary>
            Indicates whether the membership provider is configured to allow users to retrieve their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider is configured to support password retrieval; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <value></value>
            <returns>The number of invalid password or password-answer attempts allowed before the membership user is locked out.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value></value>
            <returns>The minimum number of special characters that must be present in a valid password.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
            <value></value>
            <returns>The minimum length required for a password. </returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
            <value></value>
            <returns>The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.PasswordFormat">
            <summary>
            Gets a value indicating the format for storing passwords in the membership data store.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Web.Security.MembershipPasswordFormat"></see> values indicating the format for storing passwords in the data store.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <value></value>
            <returns>A regular expression used to evaluate a password.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
            <value></value>
            <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
            <value></value>
            <returns>true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:Umbraco.Core.Security.MembershipProviderBase.ApplicationName">
            <summary>
            The name of the application using the custom membership provider.
            </summary>
            <value></value>
            <returns>The name of the application using the custom membership provider.</returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetMembersMembershipProvider">
            <summary>
            Method to get the Umbraco Members membership provider based on it's alias
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetUsersMembershipProvider">
            <summary>
            Method to get the Umbraco Users membership provider based on it's alias
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetCurrentUserOnline(System.Web.Security.MembershipProvider)">
            <summary>
            Returns the currently logged in MembershipUser and flags them as being online - use sparingly (i.e. login)
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetCurrentUser(System.Web.Security.MembershipProvider)">
            <summary>
            Returns the currently logged in MembershipUser
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.GetCurrentUserName(System.Web.Security.MembershipProvider)">
            <summary>
            Just returns the current user's login name (just a wrapper).
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.IsUmbracoUsersProvider(System.Web.Security.MembershipProvider)">
            <summary>
            Returns true if the provider specified is a built-in Umbraco users provider
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Security.MembershipProviderExtensions.IsUmbracoMembershipProvider(System.Web.Security.MembershipProvider)">
            <summary>
            Returns true if the provider specified is a built-in Umbraco membership provider
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Security.UmbracoBackOfficeIdentity">
            <summary>
            A custom user identity for the Umbraco backoffice
            </summary>
            <remarks>
            This inherits from FormsIdentity for backwards compatibility reasons since we still support the forms auth cookie, in v8 we can
            change over to 'pure' asp.net identity and just inherit from ClaimsIdentity.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.#ctor(Umbraco.Core.Security.UserData)">
            <summary>
            Create a back office identity based on user data
            </summary>
            <param name="userdata"></param>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.#ctor(System.Security.Claims.ClaimsIdentity,Umbraco.Core.Security.UserData)">
            <summary>
            Create a back office identity based on an existing claims identity
            </summary>
            <param name="claimsIdentity"></param>
            <param name="userdata"></param>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.#ctor(System.Web.Security.FormsAuthenticationTicket)">
            <summary>
            Create a new identity from a forms auth ticket
            </summary>
            <param name="ticket"></param>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.#ctor(Umbraco.Core.Security.UmbracoBackOfficeIdentity)">
            <summary>
            Used for cloning
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.AddExistingClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Used during ctor to add existing claims from an existing ClaimsIdentity
            </summary>
            <param name="claimsIdentity"></param>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.AddUserDataClaims">
            <summary>
            Adds claims based on the UserData data
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoBackOfficeIdentity.Clone">
            <summary>
            Gets a copy of the current <see cref="T:UmbracoBackOfficeIdentity"/> instance.
            </summary>
            <returns>
            A copy of the current <see cref="T:UmbracoBackOfficeIdentity"/> instance.
            </returns>
        </member>
        <member name="P:Umbraco.Core.Security.UmbracoBackOfficeIdentity.RequiredBackOfficeIdentityClaimTypes">
            <summary>
            Returns the required claim types for a back office identity
            </summary>
            <remarks>
            This does not incude the role claim type or allowed apps type since that is a collection and in theory could be empty
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Security.UmbracoBackOfficeIdentity.AuthenticationType">
            <summary>
            Gets the type of authenticated identity.
            </summary>
            <returns>
            The type of authenticated identity. This property always returns "UmbracoBackOffice".
            </returns>
        </member>
        <member name="T:Umbraco.Core.Security.UmbracoMembershipProviderBase">
            <summary>
            A base membership provider class for umbraco providers
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoMembershipProviderBase.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoMembershipProviderBase.CreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="memberTypeAlias">The member type alias to use when creating the member</param>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Security.UmbracoMembershipProviderBase.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <param name="memberTypeAlias">The member type alias to use when creating the member</param>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Security.IUmbracoMemberTypeMembershipProvider">
            <summary>
            An interface for exposing the content type properties for storing membership data in when
            a membership provider's data is backed by an Umbraco content type. 
            </summary>
        </member>
        <member name="T:Umbraco.Core.Security.UserData">
            <summary>
            Data structure used to store information in the authentication cookie
            </summary>
        </member>
        <member name="M:Umbraco.Core.Security.UserData.#ctor(System.String)">
            <summary>
            Use this constructor to create/assign new UserData to the ticket
            </summary>
            <param name="sessionId">
            The security stamp for the user
            </param>
        </member>
        <member name="P:Umbraco.Core.Security.UserData.SessionId">
            <summary>
            This is the 'security stamp' for validation
            </summary>        
        </member>
        <member name="M:Umbraco.Core.Serialization.AbstractSerializationService.FromStream(System.IO.Stream,System.Type,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter"/> with a matching <paramref name="intent"/> , and deserializes the <see cref="T:System.IO.Stream"/> <paramref name="input"/> to an object graph.
            </summary>
            <param name="input"> </param>
            <param name="outputType"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.AbstractSerializationService.ToStream(System.Object,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter"/> with a matching <paramref name="intent"/> , and serializes the <paramref name="input"/> object graph to an <see cref="T:Umbraco.Core.Serialization.IStreamedResult"/> .
            </summary>
            <param name="input"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="P:Umbraco.Core.Serialization.AbstractSerializationService.Formatters">
            <summary>
              A sequence of <see cref="T:Umbraco.Core.Serialization.IFormatter"/> registered with this serialization service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonNetSerializer.FromStream(System.IO.Stream,System.Type)">
            <summary>
            Deserialize input stream to object
            </summary>
            <param name="input"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.JsonNetSerializer.ToStream(System.Object)">
            <summary>
            Serialize object to streamed result
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Serialization.JsonToStringConverter">
            <summary>
            This is used in order to deserialize a json object on a property into a json string since the property's type is 'string'
            </summary>
        </member>
        <member name="M:Umbraco.Core.Serialization.SerializationService.FromStream(System.IO.Stream,System.Type,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter"/> with a matching <paramref name="intent"/> , and deserializes the <see cref="T:System.IO.Stream"/> <paramref name="input"/> to an object graph.
            </summary>
            <param name="input"> </param>
            <param name="outputType"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.SerializationService.ToStream(System.Object,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter"/> with a matching <paramref name="intent"/> , and serializes the <paramref name="input"/> object graph to an <see cref="T:Umbraco.Core.Serialization.IStreamedResult"/> .
            </summary>
            <param name="input"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="T:Umbraco.Core.Services.ContentService">
            <summary>
            Represents the Content Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IContentService">
            <summary>
            Defines the ContentService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.RebuildXmlStructures(System.Int32[])">
            <summary>
            Rebuilds all xml content in the cmsContentXml table for all documents
            </summary>
            <param name="contentTypeIds">
            Only rebuild the xml structures for the content type ids passed in, if none then rebuilds the structures
            for all content
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Services.IContentService.ReplaceContentPermissions(Umbraco.Core.Models.Membership.EntityPermissionSet)" -->
        <member name="M:Umbraco.Core.Services.IContentService.AssignContentPermission(Umbraco.Core.Models.IContent,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns a single permission to the current content item for the specified user ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPermissionsForEntity(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the list of permissions for the content item
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateContent(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IContent without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new content objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parentId">Id of Parent for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateContent(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IContent without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new content objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentOfContentType(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Content from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects versions by its Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetRootContent">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentForExpiration">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which has an expiration date greater then today
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentForRelease">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which has a release date greater then today
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentInRecycleBin">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Save(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects.
            </summary>        
            <param name="contents">Collection of <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteContentOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all content of specified type. All children of deleted content is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="contentTypeId">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional Id of the user issueing the delete operation</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IContent"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteVersion(System.Int32,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes a specific version from an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.MoveToRecycleBin(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object by moving it to the Recycle Bin
            </summary>
            <remarks>Move an item to the Recycle Bin will result in the item being unpublished</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Move(Umbraco.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IContent"/> object to a new location
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to move</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="userId">Optional Id of the User moving the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IContent"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Rollback(System.Int32,System.Guid,System.Int32)">
            <summary>
            Rollback an <see cref="T:Umbraco.Core.Models.IContent"/> object to a previous version.
            This will create a new version, which is a copy of all the old data.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/>being rolled back</param>
            <param name="versionId">Id of the version to rollback to</param>
            <param name="userId">Optional Id of the User issueing the rollback of the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetChildrenByName(System.Int32,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by its name or partial name
            </summary>
            <param name="parentId">Id of the Parent to retrieve Children from</param>
            <param name="name">Full or partial name of the children</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetDescendants(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetDescendants(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> item to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPublishedVersion(System.Int32)">
            <summary>
            Gets the published version of an <see cref="T:Umbraco.Core.Models.IContent"/> item
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve version from</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPublishedVersion(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the published version of a <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="content">The content item.</param>
            <returns>The published version, if any; otherwise, null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.HasPublishedVersion(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any published versions
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any published version otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.RePublishAll(System.Int32)">
            <summary>
            Re-Publishes all Content
            </summary>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.PublishWithStatus(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>The published status attempt</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.PublishWithChildren(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.PublishWithChildrenWithStatus(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="includeUnpublished"></param>
            <returns>The list of statuses for all published items</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SaveAndPublishWithStatus(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Delete(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            </summary>
            <remarks>
            This method will also delete associated media files, child content and possibly associated domains.
            </remarks>
            <remarks>Please note that this method will completely remove the Content from the database</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>        
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Copies an <see cref="T:Umbraco.Core.Models.IContent"/> object by creating a new Content object of the same type and copies all data from the current 
            to the new copy, which is returned. Recursively copies all children.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copies an <see cref="T:Umbraco.Core.Models.IContent"/> object by creating a new Content object of the same type and copies all data from the current 
            to the new copy which is returned.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="recursive">A value indicating whether to recursively copy children.</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.IsPublishable(Umbraco.Core.Models.IContent)">
            <summary>
            Checks if the passed in <see cref="T:Umbraco.Core.Models.IContent"/> can be published based on the anscestors publish state.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to check if anscestors are published</param>
            <returns>True if the Content can be published, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetAncestors(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which are ancestors of the current content.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetAncestors(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which are ancestors of the current content.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by updating the SortOrder according
            to the ordering of items in the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            Using this method will ensure that the Published-state is maintained upon sorting
            so the cache is updated accordingly - as needed.
            </remarks>
            <param name="items"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <returns>True if sorting succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetParent(System.Int32)">
            <summary>
            Gets the parent of the current content as an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetParent(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the parent of the current content as an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateContentWithIdentity(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates and saves an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IContent"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateContentWithIdentity(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates and saves an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IContent"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parentId">Id of Parent for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IContentServiceOperations">
            <summary>
            A temporary interface until we are in v8, this is used to return a different result for the same method and this interface gets implemented
            explicitly. These methods will replace the normal ones in IContentService in v8 and this will be removed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceOperations.Save(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceOperations.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects.
            </summary>        
            <param name="contents">Collection of <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>        
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceOperations.Delete(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            </summary>
            <remarks>
            This method will also delete associated media files, child content and possibly associated domains.
            </remarks>
            <remarks>Please note that this method will completely remove the Content from the database</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceOperations.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>The published status attempt</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceOperations.PublishWithChildren(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="includeUnpublished"></param>
            <returns>The list of statuses for all published items</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceOperations.SaveAndPublish(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceOperations.MoveToRecycleBin(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object by moving it to the Recycle Bin
            </summary>
            <remarks>Move an item to the Recycle Bin will result in the item being unpublished</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentServiceOperations.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.Services.ContentService.ReplaceContentPermissions(Umbraco.Core.Models.Membership.EntityPermissionSet)" -->
        <member name="M:Umbraco.Core.Services.ContentService.AssignContentPermission(Umbraco.Core.Models.IContent,System.Char,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Assigns a single permission to the current content item for the specified user ids
            </summary>
            <param name="entity"></param>
            <param name="permission"></param>
            <param name="userIds"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetPermissionsForEntity(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the list of permissions for the content item
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.CreateContent(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IContent without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new content objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parentId">Id of Parent for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.CreateContent(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IContent without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new content objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.CreateContentWithIdentity(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates and saves an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IContent"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parentId">Id of Parent for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.CreateContentWithIdentity(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates and saves an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IContent"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Content object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by Id
            </summary>
            <param name="ids">Ids of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetContentOfContentType(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Content from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetAncestors(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which are ancestors of the current content.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetAncestors(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which are ancestors of the current content.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <param name="pageIndex">Page index (zero based)</param>
            <param name="pageSize">Page size</param>
            <param name="totalChildren">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalChildren">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetChildrenByName(System.Int32,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by its name or partial name
            </summary>
            <param name="parentId">Id of the Parent to retrieve Children from</param>
            <param name="name">Full or partial name of the children</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetDescendants(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetDescendants(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> item to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetParent(System.Int32)">
            <summary>
            Gets the parent of the current content as an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetParent(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the parent of the current content as an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetPublishedVersion(System.Int32)">
            <summary>
            Gets the published version of an <see cref="T:Umbraco.Core.Models.IContent"/> item
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve version from</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetPublishedVersion(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the published version of a <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="content">The content item.</param>
            <returns>The published version, if any; otherwise, null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetRootContent">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetAllPublished">
            <summary>
            Gets all published content items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetContentForExpiration">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which has an expiration date less than or equal to today.
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetContentForRelease">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which has a release date less than or equal to today.
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetContentInRecycleBin">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.HasPublishedVersion(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any published versions
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any published version otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.IsPublishable(Umbraco.Core.Models.IContent)">
            <summary>
            Checks if the passed in <see cref="T:Umbraco.Core.Models.IContent"/> can be published based on the anscestors publish state.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to check if anscestors are published</param>
            <returns>True if the Content can be published, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.RePublishAll(System.Int32)">
            <summary>
            This will rebuild the xml structures for content in the database. 
            </summary>
            <param name="userId">This is not used for anything</param>
            <returns>True if publishing succeeded, otherwise False</returns>
            <remarks>
            This is used for when a document type alias or a document type property is changed, the xml will need to 
            be regenerated.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.RePublishAll(System.Int32[])">
            <summary>
            This will rebuild the xml structures for content in the database. 
            </summary>
            <param name="contentTypeIds">
            If specified will only rebuild the xml for the content type's specified, otherwise will update the structure
            for all published content.
            </param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Umbraco#Core#Services#IContentServiceOperations#PublishWithChildren(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="includeUnpublished"></param>
            <returns>The list of statuses for all published items</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Umbraco#Core#Services#IContentServiceOperations#SaveAndPublish(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Umbraco#Core#Services#IContentServiceOperations#MoveToRecycleBin(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object by moving it to the Recycle Bin
            </summary>
            <remarks>Move an item to the Recycle Bin will result in the item being unpublished</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Umbraco#Core#Services#IContentServiceOperations#UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.PublishWithStatus(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.PublishWithChildren(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.PublishWithChildrenWithStatus(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="includeUnpublished">set to true if you want to also publish children that are currently unpublished</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.SaveAndPublishWithStatus(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Save(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Umbraco#Core#Services#IContentServiceOperations#Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects.
            </summary>        
            <param name="contents">Collection of <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>        
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Umbraco#Core#Services#IContentServiceOperations#Delete(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            </summary>
            <remarks>
            This method will also delete associated media files, child content and possibly associated domains.
            </remarks>
            <remarks>Please note that this method will completely remove the Content from the database</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Umbraco#Core#Services#IContentServiceOperations#Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>The published status attempt</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Umbraco#Core#Services#IContentServiceOperations#Save(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects.
            </summary>
            <remarks>
            If the collection of content contains new objects that references eachother by Id or ParentId,
            then use the overload Save method with a collection of Lazy <see cref="T:Umbraco.Core.Models.IContent"/>.
            </remarks>
            <param name="contents">Collection of <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.DeleteContentOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all content of specified type. All children of deleted content is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="contentTypeId">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional Id of the user issueing the delete operation</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Delete(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object as well as all of its Children.
            </summary>
            <remarks>
            This method will also delete associated media files, child content and possibly associated domains.
            </remarks>
            <remarks>Please note that this method will completely remove the Content from the database</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IContent"/> object prior to a specific date.
            This method will never delete the latest version of a content item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.DeleteVersion(System.Int32,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            This method will never delete the latest version of a content item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.MoveToRecycleBin(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object by moving it to the Recycle Bin
            </summary>
            <remarks>Move an item to the Recycle Bin will result in the item being unpublished</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Move(Umbraco.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IContent"/> object to a new location by changing its parent id.
            </summary>
            <remarks>
            If the <see cref="T:Umbraco.Core.Models.IContent"/> object is already published it will be
            published after being moved to its new location. Otherwise it'll just
            be saved with a new parent id.
            </remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to move</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="userId">Optional Id of the User moving the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IContent"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Copies an <see cref="T:Umbraco.Core.Models.IContent"/> object by creating a new Content object of the same type and copies all data from the current 
            to the new copy which is returned. Recursively copies all children.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Copies an <see cref="T:Umbraco.Core.Models.IContent"/> object by creating a new Content object of the same type and copies all data from the current 
            to the new copy which is returned.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="recursive">A value indicating whether to recursively copy children.</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.SendToPublication(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Sends an <see cref="T:Umbraco.Core.Models.IContent"/> to Publication, which executes handlers and events for the 'Send to Publication' action.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to send to publication</param>
            <param name="userId">Optional Id of the User issueing the send to publication</param>
            <returns>True if sending publication was succesfull otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Rollback(System.Int32,System.Guid,System.Int32)">
            <summary>
            Rollback an <see cref="T:Umbraco.Core.Models.IContent"/> object to a previous version.
            This will create a new version, which is a copy of all the old data.
            </summary>
            <remarks>
            The way data is stored actually only allows us to rollback on properties
            and not data like Name and Alias of the Content.
            </remarks>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/>being rolled back</param>
            <param name="versionId">Id of the version to rollback to</param>
            <param name="userId">Optional Id of the User issueing the rollback of the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by updating the SortOrder according
            to the ordering of items in the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            Using this method will ensure that the Published-state is maintained upon sorting
            so the cache is updated accordingly - as needed.
            </remarks>
            <param name="items"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <returns>True if sorting succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.RebuildXmlStructures(System.Int32[])">
            <summary>
            Rebuilds all xml content in the cmsContentXml table for all documents
            </summary>
            <param name="contentTypeIds">
            Only rebuild the xml structures for the content type ids passed in, if none then rebuilds the structures
            for all content
            </param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetPublishedDescendants(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> descendants by the first Parent.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> item to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.PublishWithChildrenDo(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="includeUnpublished">If set to true, this will also publish descendants that are completely unpublished, normally this will only publish children that have previously been published</param>	    
            <returns>
            A list of publish statues. If the parent document is not valid or cannot be published because it's parent(s) is not published
            then the list will only contain one status item, otherwise it will contain status items for it and all of it's descendants that
            are to be published.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.UnPublishDo(Umbraco.Core.Models.IContent,System.Boolean,System.Int32)">
            <summary>
            UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="omitCacheRefresh">Optional boolean to avoid having the cache refreshed when calling this Unpublish method. By default this method will update the cache.</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.SaveAndPublishDo(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Save(Umbraco.Core.Models.IContent,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="changeState">Boolean indicating whether or not to change the Published state upon saving</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.IsPublishable(Umbraco.Core.Models.IContent,System.Boolean)">
            <summary>
            Checks if the passed in <see cref="T:Umbraco.Core.Models.IContent"/> can be published based on the anscestors publish state.
            </summary>
            <remarks>
            Check current is only used when falling back to checking the Parent of non-saved content, as
            non-saved content doesn't have a valid path yet.
            </remarks>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to check if anscestors are published</param>
            <param name="checkCurrent">Boolean indicating whether the passed in content should also be checked for published versions</param>
            <returns>True if the Content can be published, otherwise False</returns>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Publishing">
            <summary>
            Occurs before publish.
            </summary>
            <remarks>Proxy to the real event on the <see cref="T:Umbraco.Core.Publishing.PublishingStrategy"/></remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Published">
            <summary>
            Occurs after publish.
            </summary>
            <remarks>Proxy to the real event on the <see cref="T:Umbraco.Core.Publishing.PublishingStrategy"/></remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.UnPublishing">
            <summary>
            Occurs before unpublish.
            </summary>
            <remarks>Proxy to the real event on the <see cref="T:Umbraco.Core.Publishing.PublishingStrategy"/></remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.UnPublished">
            <summary>
            Occurs after unpublish.
            </summary>
            <remarks>Proxy to the real event on the <see cref="T:Umbraco.Core.Publishing.PublishingStrategy"/></remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.DeletingVersions">
            <summary>
            Occurs before Delete Versions
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.DeletedVersions">
            <summary>
            Occurs after Delete Versions
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Created">
            <summary>
            Occurs after Create
            </summary>
            <remarks>
            Please note that the Content object has been created, but might not have been saved
            so it does not have an identity yet (meaning no Id has been set).
            </remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Copying">
            <summary>
            Occurs before Copy
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Copied">
            <summary>
            Occurs after Copy
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Trashing">
            <summary>
            Occurs before Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Trashed">
            <summary>
            Occurs after Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Moving">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Moved">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.RollingBack">
            <summary>
            Occurs before Rollback
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.RolledBack">
            <summary>
            Occurs after Rollback
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.SendingToPublish">
            <summary>
            Occurs before Send to Publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.SentToPublish">
            <summary>
            Occurs after Send to Publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.EmptyingRecycleBin">
            <summary>
            Occurs before the Recycle Bin is emptied
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.EmptiedRecycleBin">
            <summary>
            Occurs after the Recycle Bin has been Emptied
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ContentServiceExtensions.RemoveContentPermissions(Umbraco.Core.Services.IContentService,System.Int32)">
            <summary>
            Remove all permissions for this user for all nodes
            </summary>
            <param name="contentService"></param>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentServiceExtensions.RecycleBinSmells(Umbraco.Core.Services.IContentService)">
            <summary>
            Returns true if there is any content in the recycle bin
            </summary>
            <param name="contentService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentServiceExtensions.RecycleBinSmells(Umbraco.Core.Services.IMediaService)">
            <summary>
            Returns true if there is any media in the recycle bin
            </summary>
            <param name="mediaService"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.ContentTypeService">
            <summary>
            Represents the ContentType Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeServiceBase.GetContentTypesForXmlUpdates(Umbraco.Core.Models.IContentTypeBase[])">
            <summary>
            This is called after an content type is saved and is used to update the content xml structures in the database
            if they are required to be updated.
            </summary>
            <param name="contentTypes"></param>
        </member>
        <member name="T:Umbraco.Core.Services.IContentTypeService">
            <summary>
            Defines the ContentTypeService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.ValidateComposition(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Validates the composition, if its invalid a list of property type aliases that were duplicated is returned
            </summary>
            <param name="compo"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllPropertyTypeAliases">
            <summary>
            Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllContentTypeAliases(System.Guid[])">
            <summary>
            Gets all content type aliases
            </summary>
            <param name="objectTypes">
            If this list is empty, it will return all content type aliases for media, members and content, otherwise
            it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Copy(Umbraco.Core.Models.IContentType,System.String,System.String,System.Int32)">
            <summary>
            Copies a content type as a child under the specified parent if specified (otherwise to the root)
            </summary>
            <param name="original">
            The content type to copy
            </param>
            <param name="alias">
            The new alias of the content type
            </param>
            <param name="name">
            The new name of the content type
            </param>
            <param name="parentId">
            The parent to copy the content type to, default is -1 (root)
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Copy(Umbraco.Core.Models.IContentType,System.String,System.String,Umbraco.Core.Models.IContentType)">
            <summary>
            Copies a content type as a child under the specified parent if specified (otherwise to the root)
            </summary>
            <param name="original">
            The content type to copy
            </param>
            <param name="alias">
            The new alias of the content type
            </param>
            <param name="name">
            The new name of the content type
            </param>
            <param name="parent">
            The parent to copy the content type to
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentType(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentType(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentType(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Key
            </summary>
            <param name="id">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllContentTypes(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllContentTypes(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentTypeChildren(System.Int32)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentTypeChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Save(Umbraco.Core.Models.IContentType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to save</param>
            <param name="userId">Optional Id of the User saving the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="contentTypes">Collection of <see cref="T:Umbraco.Core.Models.IContentType"/> to save</param>
            <param name="userId">Optional Id of the User saving the ContentTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Delete(Umbraco.Core.Models.IContentType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IContentType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IContentType"/></remarks>
            <param name="userId">Optional Id of the User deleting the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="contentTypes">Collection of <see cref="T:Umbraco.Core.Models.IContentType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IContentType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IContentType"/></remarks>
            <param name="userId">Optional Id of the User deleting the ContentTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetMediaType(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetMediaType(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetMediaType(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllMediaTypes(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllMediaTypes(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetMediaTypeChildren(System.Int32)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetMediaTypeChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Save(Umbraco.Core.Models.IMediaType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="mediaType"><see cref="T:Umbraco.Core.Models.IMediaType"/> to save</param>
            <param name="userId">Optional Id of the User saving the MediaType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMediaType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="mediaTypes">Collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> to save</param>
            <param name="userId">Optional Id of the User saving the MediaTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Delete(Umbraco.Core.Models.IMediaType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="mediaType"><see cref="T:Umbraco.Core.Models.IMediaType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMediaType"/> will delete all the <see cref="T:Umbraco.Core.Models.IMedia"/> objects based on this <see cref="T:Umbraco.Core.Models.IMediaType"/></remarks>
            <param name="userId">Optional Id of the User deleting the MediaType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMediaType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="mediaTypes">Collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMediaType"/> will delete all the <see cref="T:Umbraco.Core.Models.IMedia"/> objects based on this <see cref="T:Umbraco.Core.Models.IMediaType"/></remarks>
            <param name="userId">Optional Id of the User deleting the MediaTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetDtd">
            <summary>
            Generates the complete (simplified) XML DTD.
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentTypesDtd">
            <summary>
            Generates the complete XML DTD without the root.
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContentType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if the content type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.HasChildren(System.Guid)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContentType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if the content type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.MediaTypeHasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMediaType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>True if the media type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.MediaTypeHasChildren(System.Guid)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMediaType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>True if the media type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetAllPropertyTypeAliases">
            <summary>
            Gets all property type aliases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetAllContentTypeAliases(System.Guid[])">
            <summary>
            Gets all content type aliases
            </summary>
            <param name="objectTypes">
            If this list is empty, it will return all content type aliases for media, members and content, otherwise
            it will only return content type aliases for the object types specified
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Copy(Umbraco.Core.Models.IContentType,System.String,System.String,System.Int32)">
            <summary>
            Copies a content type as a child under the specified parent if specified (otherwise to the root)
            </summary>
            <param name="original">
            The content type to copy
            </param>
            <param name="alias">
            The new alias of the content type
            </param>
            <param name="name">
            The new name of the content type
            </param>
            <param name="parentId">
            The parent to copy the content type to, default is -1 (root)
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Copy(Umbraco.Core.Models.IContentType,System.String,System.String,Umbraco.Core.Models.IContentType)">
            <summary>
            Copies a content type as a child under the specified parent if specified (otherwise to the root)
            </summary>
            <param name="original">
            The content type to copy
            </param>
            <param name="alias">
            The new alias of the content type
            </param>
            <param name="name">
            The new name of the content type
            </param>
            <param name="parent">
            The parent to copy the content type to, default is null (root)
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentType(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentType(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentType(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Key
            </summary>
            <param name="id">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetAllContentTypes(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetAllContentTypes(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentTypeChildren(System.Int32)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentTypeChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContentType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if the content type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.HasChildren(System.Guid)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContentType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if the content type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.UpdateContentXmlStructure(Umbraco.Core.Models.IContentTypeBase[])">
            <summary>
            This is called after an IContentType is saved and is used to update the content xml structures in the database
            if they are required to be updated.
            </summary>
            <param name="contentTypes">A tuple of a content type and a boolean indicating if it is new (HasIdentity was false before committing)</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.ValidateComposition(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Validates the composition, if its invalid a list of property type aliases that were duplicated is returned
            </summary>
            <param name="compo"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Save(Umbraco.Core.Models.IContentType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to save</param>
            <param name="userId">Optional id of the user saving the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="contentTypes">Collection of <see cref="T:Umbraco.Core.Models.IContentType"/> to save</param>
            <param name="userId">Optional id of the user saving the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Delete(Umbraco.Core.Models.IContentType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to delete</param>
            <param name="userId">Optional id of the user issueing the delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IContentType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IContentType"/></remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IContentType"/> objects.
            </summary>
            <param name="contentTypes">Collection of <see cref="T:Umbraco.Core.Models.IContentType"/> to delete</param>
            <param name="userId">Optional id of the user issueing the delete</param>
            <remarks>
            Deleting a <see cref="T:Umbraco.Core.Models.IContentType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IContentType"/>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetMediaType(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetMediaType(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetMediaType(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetAllMediaTypes(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetAllMediaTypes(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetMediaTypeChildren(System.Int32)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetMediaTypeChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.MediaTypeHasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMediaType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>True if the media type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.MediaTypeHasChildren(System.Guid)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMediaType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>True if the media type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Save(Umbraco.Core.Models.IMediaType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="mediaType"><see cref="T:Umbraco.Core.Models.IMediaType"/> to save</param>
            <param name="userId">Optional Id of the user saving the MediaType</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMediaType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="mediaTypes">Collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> to save</param>
            <param name="userId">Optional Id of the user savging the MediaTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Delete(Umbraco.Core.Models.IMediaType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="mediaType"><see cref="T:Umbraco.Core.Models.IMediaType"/> to delete</param>
            <param name="userId">Optional Id of the user deleting the MediaType</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMediaType"/> will delete all the <see cref="T:Umbraco.Core.Models.IMedia"/> objects based on this <see cref="T:Umbraco.Core.Models.IMediaType"/></remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMediaType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="mediaTypes">Collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> to delete</param>
            <param name="userId"></param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMediaType"/> will delete all the <see cref="T:Umbraco.Core.Models.IMedia"/> objects based on this <see cref="T:Umbraco.Core.Models.IMediaType"/></remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetDtd">
            <summary>
            Generates the complete (simplified) XML DTD.
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentTypesDtd">
            <summary>
            Generates the complete XML DTD without the root.
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.DeletingContentType">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.DeletedContentType">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.DeletingMediaType">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.DeletedMediaType">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.SavingContentType">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.SavedContentType">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.SavingMediaType">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.SavedMediaType">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.MovingMediaType">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.MovedMediaType">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.MovingContentType">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.MovedContentType">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.DataTypeService">
            <summary>
            Represents the DataType Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IDataTypeService">
            <summary>
            Defines the DataType Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> 
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeDefinitionByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its Name
            </summary>
            <param name="name">Name of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeDefinitionById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeDefinitionById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its unique guid Id
            </summary>
            <param name="id">Unique guid Id of the DataType</param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetAllDataTypeDefinitions(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects or those with the ids passed in
            </summary>
            <param name="ids">Optional array of Ids</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Save(Umbraco.Core.Models.IDataTypeDefinition,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinition"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataTypeDefinition},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataTypeDefinition},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
            <param name="raiseEvents">Boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Delete(Umbraco.Core.Models.IDataTypeDefinition,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <remarks>
            Please note that deleting a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> will remove
            all the <see cref="T:Umbraco.Core.Models.PropertyType"/> data that references this <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>.
            </remarks>
            <param name="dataTypeDefinition"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to delete</param>
            <param name="userId">Id of the user issueing the deletion</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeById(System.Guid)">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IDataType"/> specified by it's unique ID
            </summary>
            <param name="id">Id of the DataType, which corresponds to the Guid Id of the control</param>
            <returns><see cref="T:umbraco.interfaces.IDataType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetAllDataTypes">
            <summary>
            Gets a complete list of all registered <see cref="T:umbraco.interfaces.IDataType"/>'s
            </summary>
            <returns>An enumerable list of <see cref="T:umbraco.interfaces.IDataType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeDefinitionByControlId(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its control Id
            </summary>
            <param name="id">Id of the DataType control</param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeDefinitionByPropertyEditorAlias(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its control Id
            </summary>
            <param name="propertyEditorAlias">Alias of the property editor</param>
            <returns>Collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects with a matching contorl id</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetPreValuesByDataTypeId(System.Int32)">
            <summary>
            Gets all values for an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to retrieve prevalues from</param>
            <returns>An enumerable list of string values</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetPreValuesCollectionByDataTypeId(System.Int32)">
            <summary>
            Gets a pre-value collection by data type id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.SavePreValues(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of PreValues for a given DataTypeDefinition
            </summary>
            <param name="dataTypeId">Id of the DataTypeDefinition to save PreValues for</param>
            <param name="values">List of string values to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.SavePreValues(System.Int32,System.Collections.Generic.IDictionary{System.String,Umbraco.Core.Models.PreValue})">
            <summary>
            Saves a list of PreValues for a given DataTypeDefinition
            </summary>
            <param name="dataTypeId">Id of the DataTypeDefinition to save PreValues for</param>
            <param name="values">List of key/value pairs to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.SavePreValues(Umbraco.Core.Models.IDataTypeDefinition,System.Collections.Generic.IDictionary{System.String,Umbraco.Core.Models.PreValue})">
            <summary>
            Saves a list of PreValues for a given DataTypeDefinition
            </summary>
            <param name="dataTypeDefinition">The DataTypeDefinition to save PreValues for</param>
            <param name="values">List of key/value pairs to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.SaveDataTypeAndPreValues(Umbraco.Core.Models.IDataTypeDefinition,System.Collections.Generic.IDictionary{System.String,Umbraco.Core.Models.PreValue},System.Int32)">
            <summary>
            Saves the data type and it's prevalues
            </summary>
            <param name="dataTypeDefinition"></param>
            <param name="values"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetPreValueAsString(System.Int32)">
            <summary>
            Gets a specific PreValue by its Id
            </summary>
            <param name="id">Id of the PreValue to retrieve the value from</param>
            <returns>PreValue as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeDefinitionByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its Name
            </summary>
            <param name="name">Name of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeDefinitionById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeDefinitionById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its unique guid Id
            </summary>
            <param name="id">Unique guid Id of the DataType</param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeDefinitionByControlId(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its control Id
            </summary>
            <param name="id">Id of the DataType control</param>
            <returns>Collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects with a matching contorl id</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeDefinitionByPropertyEditorAlias(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its control Id
            </summary>
            <param name="propertyEditorAlias">Alias of the property editor</param>
            <returns>Collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects with a matching contorl id</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetAllDataTypeDefinitions(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects or those with the ids passed in
            </summary>
            <param name="ids">Optional array of Ids</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetPreValuesByDataTypeId(System.Int32)">
            <summary>
            Gets all prevalues for an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to retrieve prevalues from</param>
            <returns>An enumerable list of string values</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetPreValuesCollectionByDataTypeId(System.Int32)">
            <summary>
            Returns the PreValueCollection for the specified data type
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetPreValueAsString(System.Int32)">
            <summary>
            Gets a specific PreValue by its Id
            </summary>
            <param name="id">Id of the PreValue to retrieve the value from</param>
            <returns>PreValue as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.Save(Umbraco.Core.Models.IDataTypeDefinition,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinition"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataTypeDefinition},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataTypeDefinition},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
            <param name="raiseEvents">Boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.SavePreValues(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of PreValues for a given DataTypeDefinition
            </summary>
            <param name="dataTypeId">Id of the DataTypeDefinition to save PreValues for</param>
            <param name="values">List of string values to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.SavePreValues(System.Int32,System.Collections.Generic.IDictionary{System.String,Umbraco.Core.Models.PreValue})">
            <summary>
            Saves/updates the pre-values
            </summary>
            <param name="dataTypeId"></param>
            <param name="values"></param>
            <remarks>
            We need to actually look up each pre-value and maintain it's id if possible - this is because of silly property editors
            like 'dropdown list publishing keys'
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.SavePreValues(Umbraco.Core.Models.IDataTypeDefinition,System.Collections.Generic.IDictionary{System.String,Umbraco.Core.Models.PreValue})">
            <summary>
            Saves/updates the pre-values
            </summary>
            <param name="dataTypeDefinition"></param>
            <param name="values"></param>
            <remarks>
            We need to actually look up each pre-value and maintain it's id if possible - this is because of silly property editors
            like 'dropdown list publishing keys'
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.SaveDataTypeAndPreValues(Umbraco.Core.Models.IDataTypeDefinition,System.Collections.Generic.IDictionary{System.String,Umbraco.Core.Models.PreValue},System.Int32)">
            <summary>
            This will save a data type and it's pre-values in one transaction
            </summary>
            <param name="dataTypeDefinition"></param>
            <param name="values"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.Delete(Umbraco.Core.Models.IDataTypeDefinition,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <remarks>
            Please note that deleting a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> will remove
            all the <see cref="T:Umbraco.Core.Models.PropertyType"/> data that references this <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>.
            </remarks>
            <param name="dataTypeDefinition"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to delete</param>
            <param name="userId">Optional Id of the user issueing the deletion</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeById(System.Guid)">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IDataType"/> specified by it's unique ID
            </summary>
            <param name="id">Id of the DataType, which corresponds to the Guid Id of the control</param>
            <returns><see cref="T:umbraco.interfaces.IDataType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetAllDataTypes">
            <summary>
            Gets a complete list of all registered <see cref="T:umbraco.interfaces.IDataType"/>'s
            </summary>
            <returns>An enumerable list of <see cref="T:umbraco.interfaces.IDataType"/> objects</returns>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Moving">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Moved">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetIdForKey(System.Guid,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Returns the integer id for a given GUID
            </summary>
            <param name="key"></param>
            <param name="umbracoObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetKeyForId(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Returns the GUID for a given integer id
            </summary>
            <param name="id"></param>
            <param name="umbracoObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetByKey(System.Guid,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id, and optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <param name="key">Unique Id of the object to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get(System.Int32,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id, and optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <param name="id">Id of the object to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetByKey(System.Guid,Umbraco.Core.Models.UmbracoObjectTypes,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id and UmbracoObjectType, and optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <param name="key">Unique Id of the object to retrieve</param>
            <param name="umbracoObjectType">UmbracoObjectType of the entity to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id and UmbracoObjectType, and optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <param name="id">Id of the object to retrieve</param>
            <param name="umbracoObjectType">UmbracoObjectType of the entity to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetByKey``1(System.Guid,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id and specified Type. Optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <typeparam name="T">Type of the model to retrieve. Must be based on an <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></typeparam>
            <param name="key">Unique Id of the object to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.Get``1(System.Int32,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id and specified Type. Optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <typeparam name="T">Type of the model to retrieve. Must be based on an <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></typeparam>
            <param name="id">Id of the object to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetParent(System.Int32)">
            <summary>
            Gets the parent of entity by its id
            </summary>
            <param name="id">Id of the entity to retrieve the Parent for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetParent(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the parent of entity by its id and UmbracoObjectType
            </summary>
            <param name="id">Id of the entity to retrieve the Parent for</param>
            <param name="umbracoObjectType">UmbracoObjectType of the parent to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of children by the parents Id
            </summary>
            <param name="parentId">Id of the parent to retrieve children for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetChildren(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets a collection of children by the parents Id and UmbracoObjectType
            </summary>
            <param name="parentId">Id of the parent to retrieve children for</param>
            <param name="umbracoObjectType">UmbracoObjectType of the children to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetDescendents(System.Int32)">
            <summary>
            Gets a collection of descendents by the parents Id
            </summary>
            <param name="id">Id of entity to retrieve descendents for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetDescendents(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets a collection of descendents by the parents Id
            </summary>
            <param name="id">Id of entity to retrieve descendents for</param>
            <param name="umbracoObjectType">UmbracoObjectType of the descendents to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetRootEntities(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets a collection of the entities at the root, which corresponds to the entities with a Parent Id of -1.
            </summary>
            <param name="umbracoObjectType">UmbracoObjectType of the root entities to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll``1(System.Int32[])">
            <summary>
            Gets a collection of all <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> of a given type.
            </summary>
            <typeparam name="T">Type of the entities to retrieve</typeparam>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <summary>
            Gets a collection of all <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> of a given type.
            </summary>
            <param name="umbracoObjectType">UmbracoObjectType of the entities to return</param>
            <param name="ids"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes,System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> of a given type.
            </summary>
            <param name="umbracoObjectType">UmbracoObjectType of the entities to return</param>
            <param name="keys"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetAll(System.Guid,System.Int32[])">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/>
            </summary>
            <param name="objectTypeId">Guid id of the UmbracoObjectType</param>
            <param name="ids"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetObjectType(System.Int32)">
            <summary>
            Gets the UmbracoObjectType from the integer id of an IUmbracoEntity.
            </summary>
            <param name="id">Id of the entity</param>
            <returns><see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetObjectType(Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Gets the UmbracoObjectType from an IUmbracoEntity.
            </summary>
            <param name="entity"><see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></param>
            <returns><see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetEntityType(System.Int32)">
            <summary>
            Gets the Type of an entity by its Id
            </summary>
            <param name="id">Id of the entity</param>
            <returns>Type of the entity</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IEntityService.GetEntityType(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the Type of an entity by its <see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/>
            </summary>
            <param name="umbracoObjectType"><see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/></param>
            <returns>Type of the entity</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetIdForKey(System.Guid,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Returns the integer id for a given GUID
            </summary>
            <param name="key"></param>
            <param name="umbracoObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetKeyForId(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Returns the GUID for a given integer id
            </summary>
            <param name="id"></param>
            <param name="umbracoObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.Get(System.Int32,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id, and optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <param name="id">Id of the object to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.Get(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id and UmbracoObjectType, and optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <param name="id">Id of the object to retrieve</param>
            <param name="umbracoObjectType">UmbracoObjectType of the entity to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.Get``1(System.Int32,System.Boolean)">
            <summary>
            Gets an UmbracoEntity by its Id and specified Type. Optionally loads the complete object graph.
            </summary>
            <returns>
            By default this will load the base type <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> with a minimum set of properties.
            </returns>
            <typeparam name="T">Type of the model to retrieve. Must be based on an <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></typeparam>
            <param name="id">Id of the object to retrieve</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c>.</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetParent(System.Int32)">
            <summary>
            Gets the parent of entity by its id
            </summary>
            <param name="id">Id of the entity to retrieve the Parent for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetParent(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the parent of entity by its id and UmbracoObjectType
            </summary>
            <param name="id">Id of the entity to retrieve the Parent for</param>
            <param name="umbracoObjectType">UmbracoObjectType of the parent to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of children by the parents Id
            </summary>
            <param name="parentId">Id of the parent to retrieve children for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetChildren(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets a collection of children by the parents Id and UmbracoObjectType
            </summary>
            <param name="parentId">Id of the parent to retrieve children for</param>
            <param name="umbracoObjectType">UmbracoObjectType of the children to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetDescendents(System.Int32)">
            <summary>
            Gets a collection of descendents by the parents Id
            </summary>
            <param name="id">Id of entity to retrieve descendents for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetDescendents(System.Int32,Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets a collection of descendents by the parents Id
            </summary>
            <param name="id">Id of entity to retrieve descendents for</param>
            <param name="umbracoObjectType">UmbracoObjectType of the descendents to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetRootEntities(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets a collection of the entities at the root, which corresponds to the entities with a Parent Id of -1.
            </summary>
            <param name="umbracoObjectType">UmbracoObjectType of the root entities to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetAll``1(System.Int32[])">
            <summary>
            Gets a collection of all <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> of a given type.
            </summary>
            <typeparam name="T">Type of the entities to retrieve</typeparam>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetAll(Umbraco.Core.Models.UmbracoObjectTypes,System.Int32[])">
            <summary>
            Gets a collection of all <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> of a given type.
            </summary>
            <param name="umbracoObjectType">UmbracoObjectType of the entities to return</param>
            <param name="ids"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetAll(System.Guid,System.Int32[])">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/>
            </summary>
            <param name="objectTypeId">Guid id of the UmbracoObjectType</param>
            <param name="ids"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetObjectType(System.Int32)">
            <summary>
            Gets the UmbracoObjectType from the integer id of an IUmbracoEntity.
            </summary>
            <param name="id">Id of the entity</param>
            <returns><see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetObjectType(System.Guid)">
            <summary>
            Gets the UmbracoObjectType from the integer id of an IUmbracoEntity.
            </summary>
            <param name="key">Unique Id of the entity</param>
            <returns><see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetObjectType(Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Gets the UmbracoObjectType from an IUmbracoEntity.
            </summary>
            <param name="entity"><see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></param>
            <returns><see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetEntityType(System.Int32)">
            <summary>
            Gets the Type of an entity by its Id
            </summary>
            <param name="id">Id of the entity</param>
            <returns>Type of the entity</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityService.GetEntityType(Umbraco.Core.Models.UmbracoObjectTypes)">
            <summary>
            Gets the Type of an entity by its <see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/>
            </summary>
            <param name="umbracoObjectType"><see cref="T:Umbraco.Core.Models.UmbracoObjectTypes"/></param>
            <returns>Type of the entity</returns>
        </member>
        <member name="T:Umbraco.Core.Services.EntityXmlSerializer">
            <summary>
            A helper class to serialize entities to XML
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Core.Services.IContentService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IUserService,Umbraco.Core.Models.IContent,System.Boolean)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IContent"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="contentService"></param>
            <param name="dataTypeService"></param>
            <param name="userService"></param>
            <param name="content">Content to export</param>
            <param name="deep">Optional parameter indicating whether to include descendents</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Content object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Core.Services.IMediaService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IUserService,Umbraco.Core.Models.IMedia,System.Boolean)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IMedia"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="mediaService"></param>
            <param name="dataTypeService"></param>
            <param name="userService"></param>
            <param name="media">Media to export</param>
            <param name="deep">Optional parameter indicating whether to include descendents</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Media object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Models.IMember)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IMember"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dataTypeService"></param>
            <param name="member">Member to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Member object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Models.IDataTypeDefinition)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dataTypeService"></param>
            <param name="dataTypeDefinition">IDataTypeDefinition type to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDataTypeDefinition object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Models.IContentType)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IContentType"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dataTypeService"></param>
            <param name="contentTypeService"></param>
            <param name="contentType">Content type to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IContentType object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityXmlSerializer.AddChildXml(Umbraco.Core.Services.IMediaService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IUserService,Umbraco.Core.Models.IMedia[],System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Xml.Linq.XElement)">
            <summary>
            Used by Media Export to recursively add children
            </summary>
            <param name="mediaService"></param>
            <param name="dataTypeService"></param>
            <param name="userService"></param>
            <param name="originalDescendants"></param>
            <param name="currentChildren"></param>
            <param name="currentXml"></param>
        </member>
        <member name="M:Umbraco.Core.Services.EntityXmlSerializer.Serialize(Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Models.IContentBase,System.String)">
            <summary>
            Part of the export of IContent and IMedia and IMember which is shared
            </summary>
            <param name="dataTypeService"></param>
            <param name="contentBase">Base Content or Media to export</param>
            <param name="nodeName">Name of the node</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.EntityXmlSerializer.AddChildXml(Umbraco.Core.Services.IContentService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IUserService,Umbraco.Core.Models.IContent[],System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Xml.Linq.XElement)">
            <summary>
            Used by Content Export to recursively add children
            </summary>
            <param name="contentService"></param>
            <param name="dataTypeService"></param>
            <param name="userService"></param>
            <param name="originalDescendants"></param>
            <param name="currentChildren"></param>
            <param name="currentXml"></param>
        </member>
        <member name="T:Umbraco.Core.Services.FileService">
            <summary>
            Represents the File Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IFile"/> objects like Scripts, Stylesheets and Templates
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IFileService">
            <summary>
            Defines the File Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IFile"/> objects like Scripts, Stylesheets and Templates
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetStylesheets(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetStylesheetByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Stylesheet"/> object by its name
            </summary>
            <param name="name">Name of the stylesheet incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Stylesheet"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveStylesheet(Umbraco.Core.Models.Stylesheet,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to save</param>
            <param name="userId">Optional id of the user saving the stylesheet</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteStylesheet(System.String,System.Int32)">
            <summary>
            Deletes a stylesheet by its name
            </summary>
            <param name="path">Name incl. extension of the Stylesheet to delete</param>
            <param name="userId">Optional id of the user deleting the stylesheet</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateStylesheet(Umbraco.Core.Models.Stylesheet)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to validate</param>
            <returns>True if Stylesheet is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetScripts(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Script"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Script"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetScriptByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Script"/> object by its name
            </summary>
            <param name="name">Name of the script incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Script"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveScript(Umbraco.Core.Models.Script,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to save</param>
            <param name="userId">Optional id of the user saving the script</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteScript(System.String,System.Int32)">
            <summary>
            Deletes a script by its name
            </summary>
            <param name="path">Name incl. extension of the Script to delete</param>
            <param name="userId">Optional id of the user deleting the script</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateScript(Umbraco.Core.Models.Script)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.CreateScriptFolder(System.String)">
            <summary>
            Creates a folder for scripts
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteScriptFolder(System.String)">
            <summary>
            Deletes a folder for scripts
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplates(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplates(System.Int32)">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplate(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its alias.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the alias, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplate(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its identifier.
            </summary>
            <param name="id">The identifer of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplate(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its guid identifier.
            </summary>
            <param name="id">The guid identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateDescendants(System.String)">
            <summary>
            Gets the template descendants
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateDescendants(System.Int32)">
            <summary>
            Gets the template descendants
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateChildren(System.String)">
            <summary>
            Gets the template children
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateChildren(System.Int32)">
            <summary>
            Gets the template children
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplateNode(System.String)">
            <summary>
            Returns a template as a template node which can be traversed (parent, children)
            </summary>
            <param name="alias"></param>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.FindTemplateInTree(Umbraco.Core.Models.TemplateNode,System.String)">
            <summary>
            Given a template node in a tree, this will find the template node with the given alias if it is found in the hierarchy, otherwise null
            </summary>
            <param name="anyNode"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveTemplate(Umbraco.Core.Models.ITemplate,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to save</param>
            <param name="userId">Optional id of the user saving the template</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.CreateTemplateForContentType(System.String,System.String,System.Int32)">
            <summary>
            Creates a template for a content type
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="contentTypeName"></param>
            <param name="userId"></param>
            <returns>
            The template created
            </returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteTemplate(System.String,System.Int32)">
            <summary>
            Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.ITemplate"/> to delete</param>
            <param name="userId">Optional id of the user deleting the template</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveTemplate(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.Template"/> objects
            </summary>
            <param name="templates">List of <see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId">Optional id of the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DetermineTemplateRenderingEngine(Umbraco.Core.Models.ITemplate)">
            <summary>
            This checks what the default rendering engine is set in config but then also ensures that there isn't already 
            a template that exists in the opposite rendering engine's template folder, then returns the appropriate 
            rendering engine to use.
            </summary> 
            <returns></returns>
            <remarks>
            The reason this is required is because for example, if you have a master page file already existing under ~/masterpages/Blah.aspx
            and then you go to create a template in the tree called Blah and the default rendering engine is MVC, it will create a Blah.cshtml 
            empty template in ~/Views. This means every page that is using Blah will go to MVC and render an empty page. 
            This is mostly related to installing packages since packages install file templates to the file system and then create the 
            templates in business logic. Without this, it could cause the wrong rendering engine to be used for a package.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetStylesheets(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetStylesheetByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Stylesheet"/> object by its name
            </summary>
            <param name="name">Name of the stylesheet incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Stylesheet"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.SaveStylesheet(Umbraco.Core.Models.Stylesheet,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.DeleteStylesheet(System.String,System.Int32)">
            <summary>
            Deletes a stylesheet by its name
            </summary>
            <param name="path">Name incl. extension of the Stylesheet to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.ValidateStylesheet(Umbraco.Core.Models.Stylesheet)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to validate</param>
            <returns>True if Stylesheet is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetScripts(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Script"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Script"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetScriptByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Script"/> object by its name
            </summary>
            <param name="name">Name of the script incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Script"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.SaveScript(Umbraco.Core.Models.Script,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.DeleteScript(System.String,System.Int32)">
            <summary>
            Deletes a script by its name
            </summary>
            <param name="path">Name incl. extension of the Script to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.ValidateScript(Umbraco.Core.Models.Script)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.CreateTemplateForContentType(System.String,System.String,System.Int32)">
            <summary>
            Creates a template for a content type
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="contentTypeName"></param>
            <param name="userId"></param>
            <returns>
            The template created
            </returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplates(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplates(System.Int32)">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplate(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its alias.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the alias, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplate(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its identifier.
            </summary>
            <param name="id">The identifer of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplate(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its guid identifier.
            </summary>
            <param name="id">The guid identifier of the template.</param>
            <returns>The <see cref="T:Umbraco.Core.Models.ITemplate"/> object matching the identifier, or null.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplateDescendants(System.Int32)">
            <summary>
            Gets the template descendants
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplateChildren(System.String)">
            <summary>
            Gets the template children
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplateChildren(System.Int32)">
            <summary>
            Gets the template children
            </summary>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplateNode(System.String)">
            <summary>
            Returns a template as a template node which can be traversed (parent, children)
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.FindTemplateInTree(Umbraco.Core.Models.TemplateNode,System.String)">
            <summary>
            Given a template node in a tree, this will find the template node with the given alias if it is found in the hierarchy, otherwise null
            </summary>
            <param name="anyNode"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.SaveTemplate(Umbraco.Core.Models.ITemplate,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Template"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.SaveTemplate(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.Template"/> objects
            </summary>
            <param name="templates">List of <see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId">Optional id of the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.DetermineTemplateRenderingEngine(Umbraco.Core.Models.ITemplate)">
            <summary>
            This checks what the default rendering engine is set in config but then also ensures that there isn't already 
            a template that exists in the opposite rendering engine's template folder, then returns the appropriate 
            rendering engine to use.
            </summary> 
            <returns></returns>
            <remarks>
            The reason this is required is because for example, if you have a master page file already existing under ~/masterpages/Blah.aspx
            and then you go to create a template in the tree called Blah and the default rendering engine is MVC, it will create a Blah.cshtml 
            empty template in ~/Views. This means every page that is using Blah will go to MVC and render an empty page. 
            This is mostly related to installing packages since packages install file templates to the file system and then create the 
            templates in business logic. Without this, it could cause the wrong rendering engine to be used for a package.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.DeleteTemplate(System.String,System.Int32)">
            <summary>
            Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.ITemplate"/> to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletingTemplate">
            <summary>
            Occurs before Delete
            </summary>        
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletedTemplate">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletingScript">
            <summary>
            Occurs before Delete
            </summary>        
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletedScript">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletingStylesheet">
            <summary>
            Occurs before Delete
            </summary>        
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletedStylesheet">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavingTemplate">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavedTemplate">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavingScript">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavedScript">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavingStylesheet">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavedStylesheet">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavingPartialView">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavedPartialView">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.CreatingPartialView">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.CreatedPartialView">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletingPartialView">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletedPartialView">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IApplicationTreeService.Intitialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ApplicationTree})">
            <summary>
            Initializes the service with any trees found in plugins
            </summary>
            <param name="allAvailableTrees">
            A collection of all available tree found in assemblies in the application
            </param>
            <remarks>
            This will update the trees.config with the found tree plugins that are not currently listed in the file when the first
            access is made to resolve the tree collection
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IApplicationTreeService.MakeNew(System.Boolean,System.Byte,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new application tree.
            </summary>
            <param name="initialize">if set to <c>true</c> [initialize].</param>
            <param name="sortOrder">The sort order.</param>
            <param name="applicationAlias">The application alias.</param>
            <param name="alias">The alias.</param>
            <param name="title">The title.</param>
            <param name="iconClosed">The icon closed.</param>
            <param name="iconOpened">The icon opened.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IApplicationTreeService.SaveTree(Umbraco.Core.Models.ApplicationTree)">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IApplicationTreeService.DeleteTree(Umbraco.Core.Models.ApplicationTree)">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IApplicationTreeService.GetByAlias(System.String)">
            <summary>
            Gets an ApplicationTree by it's tree alias.
            </summary>
            <param name="treeAlias">The tree alias.</param>
            <returns>An ApplicationTree instance</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IApplicationTreeService.GetAll">
            <summary>
            Gets all applicationTrees registered in umbraco from the umbracoAppTree table..
            </summary>
            <returns>Returns a ApplicationTree Array</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IApplicationTreeService.GetApplicationTrees(System.String)">
            <summary>
            Gets the application tree for the applcation with the specified alias
            </summary>
            <param name="applicationAlias">The application alias.</param>
            <returns>Returns a ApplicationTree Array</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IApplicationTreeService.GetApplicationTrees(System.String,System.Boolean)">
            <summary>
            Gets the application tree for the applcation with the specified alias
            </summary>
            <param name="applicationAlias">The application alias.</param>
            <param name="onlyInitialized"></param>
            <returns>Returns a ApplicationTree Array</returns>
        </member>
        <member name="T:Umbraco.Core.Services.ILocalizationService">
            <summary>
            Defines the Localization Service, which is an easy access to operations involving Languages and Dictionary
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.AddOrUpdateDictionaryValue(Umbraco.Core.Models.IDictionaryItem,Umbraco.Core.Models.ILanguage,System.String)">
            <summary>
            Adds or updates a translation for a dictionary item and language
            </summary>
            <param name="item"></param>
            <param name="language"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.CreateDictionaryItemWithIdentity(System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Creates and saves a new dictionary item and assigns a value to all languages if defaultValue is specified.
            </summary>
            <param name="key"></param>
            <param name="parentId"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Int32"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Guid"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemByKey(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemDescendants(System.Nullable{System.Guid})">
            <summary>
            Gets a list of descendants for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent, null will return all dictionary items</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetRootDictionaryItems">
            <summary>
            Gets the root/top <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.DictionaryItemExists(System.String)">
            <summary>
            Checks if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns>True if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Save(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to save</param>
            <param name="userId">Optional id of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Delete(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object and its related translations
            as well as its children.
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to delete</param>
            <param name="userId">Optional id of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ILanguage"/> by its id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.ILanguage"/></param>
            <returns><see cref="T:Umbraco.Core.Models.ILanguage"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageByCultureCode(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ILanguage"/> by its culture code
            </summary>
            <param name="cultureName">Culture Code - also refered to as the Friendly name</param>
            <returns><see cref="T:Umbraco.Core.Models.ILanguage"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageByIsoCode(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its iso code
            </summary>
            <param name="isoCode">Iso Code of the language (ie. en-US)</param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetAllLanguages">
            <summary>
            Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ILanguage"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Save(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ILanguage"/> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to save</param>
            <param name="userId">Optional id of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Delete(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.ILanguage"/> by removing it and its usages from the db
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to delete</param>
            <param name="userId">Optional id of the user deleting the language</param>
        </member>
        <member name="T:Umbraco.Core.Services.IMacroService">
            <summary>
            Defines the MacroService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.GetByAlias(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMacro"/> object by its alias
            </summary>
            <param name="alias">Alias to retrieve an <see cref="T:Umbraco.Core.Models.IMacro"/> for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMacro"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.Delete(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to delete</param>
            <param name="userId">Optional id of the user deleting the macro</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.Save(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to save</param>
            <param name="userId">Optional id of the user saving the macro</param>
        </member>
        <member name="T:Umbraco.Core.Services.IMediaServiceOperations">
            <summary>
            A temporary interface until we are in v8, this is used to return a different result for the same method and this interface gets implemented
            explicitly. These methods will replace the normal ones in IContentService in v8 and this will be removed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaServiceOperations.MoveToRecycleBin(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaServiceOperations.Delete(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <remarks>
            Please note that this method will completely remove the Media from the database,
            but current not from the file system.
            </remarks>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaServiceOperations.Save(Umbraco.Core.Models.IMedia,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaServiceOperations.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="T:Umbraco.Core.Services.IMediaService">
            <summary>
            Defines the Media Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.RebuildXmlStructures(System.Int32[])">
            <summary>
            Rebuilds all xml content in the cmsContentXml table for all media
            </summary>
            <param name="contentTypeIds">
            Only rebuild the xml structures for the content type ids passed in, if none then rebuilds the structures
            for all media
            </param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMedia(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMedia(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetDescendants(System.Int32)">
            <summary>
            Gets descendants of a <see cref="T:Umbraco.Core.Models.IMedia"/> object by its Id
            </summary>
            <param name="id">Id of the Parent to retrieve descendants from</param>
            <returns>An Enumerable flat list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaOfMediaType(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetRootMedia">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaInRecycleBin">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Move(Umbraco.Core.Models.IMedia,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IMedia"/> object to a new location
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to move</param>
            <param name="parentId">Id of the Media's new Parent</param>
            <param name="userId">Id of the User moving the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.MoveToRecycleBin(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IMedia"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteMediaOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeId">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional Id of the user deleting Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Delete(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <remarks>
            Please note that this method will completely remove the Media from the database,
            but current not from the file system.
            </remarks>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Save(Umbraco.Core.Models.IMedia,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Media from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMedia"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMedia"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/></param>
            <returns>True if the media has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IMedia"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteVersion(System.Int32,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IMedia"/> object.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaByPath(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object from the path stored in the 'umbracoFile' property.
            </summary>
            <param name="mediaPath">Path of the media item to retrieve (for example: /media/1024/koala_403x328.jpg)</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetAncestors(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetAncestors(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetDescendants(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets descendants of a <see cref="T:Umbraco.Core.Models.IMedia"/> object by its Id
            </summary>
            <param name="media">The Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object to retrieve descendants from</param>
            <returns>An Enumerable flat list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetParent(System.Int32)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetParent(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by updating the SortOrder according
            to the ordering of items in the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="items"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <returns>True if sorting succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMediaWithIdentity(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IMedia"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMediaWithIdentity(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IMedia"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IMemberService">
            <summary>
            Defines the MemberService, which is an easy access to operations involving (umbraco) members.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IMembershipMemberService">
            <summary>
            Defines part of the MemberService, which is specific to methods used by the membership provider.
            </summary>
            <remarks>
            Idea is to have this is an isolated interface so that it can be easily 'replaced' in the membership provider impl.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Services.IMembershipMemberService`1">
            <summary>
            Defines part of the UserService/MemberService, which is specific to methods used by the membership provider.
            The generic type is restricted to <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>. The implementation of this interface  uses
            either <see cref="T:Umbraco.Core.Models.IMember"/> for the MemberService or <see cref="T:Umbraco.Core.Models.Membership.IUser"/> for the UserService.
            </summary>
            <remarks>
            Idea is to have this is an isolated interface so that it can be easily 'replaced' in the membership provider impl.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetCount(Umbraco.Core.Models.Membership.MemberCountType)">
            <summary>
            Gets the total number of Members or Users based on the count type
            </summary>
            <remarks>
            The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Core.Models.Membership.MemberCountType"/> to count by</param>
            <returns><see cref="!:System.int"/> with number of Members or Users for passed in type</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetDefaultMemberType">
            <summary>
            Gets the default MemberType alias
            </summary>
            <remarks>By default we'll return the 'writer', but we need to check it exists. If it doesn't we'll 
            return the first type that is not an admin, otherwise if there's only one we will return that one.</remarks>
            <returns>Alias of the default MemberType</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.Exists(System.String)">
            <summary>
            Checks if a Member with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetByProviderKey(System.Object)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> by its provider key
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="id">Id to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetByEmail(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> by email
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="email">Email to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetByUsername(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> by username
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.Delete(`0)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="membershipUser"><see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.Save(`0,System.Boolean)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="entity"><see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to Save</param>
            <param name="raiseEvents">Optional parameter to raise events. 
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.Save(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Saves a list of <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="entities"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to save</param>
            <param name="raiseEvents">Optional parameter to raise events. 
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.FindByEmail(System.String,System.Int32,System.Int32,System.Int32@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> objects by a partial email string
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.FindByUsername(System.String,System.Int32,System.Int32,System.Int32@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> objects by a partial username
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipMemberService.CreateMemberWithIdentity(System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates and persists a new Member
            </summary>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="memberType"><see cref="T:Umbraco.Core.Models.IMemberType"/> which the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.RebuildXmlStructures(System.Int32[])">
            <summary>
            Rebuilds all xml content in the cmsContentXml table for all documents
            </summary>
            <param name="contentTypeIds">
            Only rebuild the xml structures for the content type ids passed in, if none then rebuilds the structures
            for all content
            </param>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetAll(System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String,System.String)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.IMember"/> objects
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.IMember"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> </remarks>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="orderBy"></param>
            <param name="orderDirection"></param>
            <param name="memberTypeAlias"></param>
            <param name="filter"></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.CreateMember(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.CreateMember(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned 
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.CreateMemberWithIdentity(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned 
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.SavePassword(Umbraco.Core.Models.IMember,System.String)">
            <summary>
            This is simply a helper method which essentially just wraps the MembershipProvider's ChangePassword method
            </summary>
            <remarks>This method exists so that Umbraco developers can use one entry point to create/update 
            Members if they choose to. </remarks>
            <param name="member">The Member to save the password for</param>
            <param name="password">The password to encrypt and save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.Count(System.String)">
            <summary>
            Gets the count of Members by an optional MemberType alias
            </summary>
            <remarks>If no alias is supplied then the count for all Member will be returned</remarks>
            <param name="memberTypeAlias">Optional alias for the MemberType when counting number of Members</param>
            <returns><see cref="!:System.int"/> with number of Members</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.Exists(System.Int32)">
            <summary>
            Checks if a Member with the id exists
            </summary>
            <param name="id">Id of the Member</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetByKey(System.Guid)">
            <summary>
            Gets a Member by the unique key
            </summary>
            <remarks>The guid key corresponds to the unique id in the database
            and the user id in the membership provider.</remarks>
            <param name="id"><see cref="T:System.Guid"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetById(System.Int32)">
            <summary>
            Gets a Member by its integer id
            </summary>
            <param name="id"><see cref="!:System.int"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByMemberType(System.String)">
            <summary>
            Gets all Members for the specified MemberType alias
            </summary>
            <param name="memberTypeAlias">Alias of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByMemberType(System.Int32)">
            <summary>
            Gets all Members for the MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByGroup(System.String)">
            <summary>
            Gets all Members within the specified MemberGroup name
            </summary>
            <param name="memberGroupName">Name of the MemberGroup</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetAllMembers(System.Int32[])">
            <summary>
            Gets all Members with the ids specified
            </summary>
            <remarks>If no Ids are specified all Members will be retrieved</remarks>
            <param name="ids">Optional list of Member Ids</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.DeleteMembersOfType(System.Int32)">
            <summary>
            Delete Members of the specified MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.FindMembersByDisplayName(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds Members based on their display name
            </summary>
            <param name="displayNameToMatch">Display name to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.String,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.string"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.Int32,Umbraco.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.int"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.Boolean)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.bool"/> Value to match</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberService.GetMembersByPropertyValue(System.String,System.DateTime,Umbraco.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.DateTime"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IMembershipUserService">
            <summary>
            Defines part of the UserService, which is specific to methods used by the membership provider.
            </summary>
            <remarks>
            Idea is to have this is an isolated interface so that it can be easily 'replaced' in the membership provider impl.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IMembershipUserService.CreateUserWithIdentity(System.String,System.String,Umbraco.Core.Models.Membership.IUserType)">
            <summary>
            Creates and persists a new User
            </summary>
            <remarks>The user will be saved in the database and returned with an Id.
            This method is convenient when you need to perform operations, which needs the
            Id of the user once its been created.</remarks>
            <param name="username">Username of the User to create</param>
            <param name="email">Email of the User to create</param>
            <param name="userType"><see cref="T:Umbraco.Core.Models.Membership.IUserType"/> which the User should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberTypeService.GetAll(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberTypeService.Get(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMemberType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMemberType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMemberType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberTypeService.Get(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMemberType"/> object by its Key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IMemberType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMemberType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberTypeService.Get(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMemberType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IMemberType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMemberType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberTypeService.Save(Umbraco.Core.Models.IMemberType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMemberType"/> object
            </summary>
            <param name="memberType"><see cref="T:Umbraco.Core.Models.IMemberType"/> to save</param>
            <param name="userId">Optional Id of the User saving the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMemberType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMemberType"/> objects
            </summary>
            <param name="memberTypes">Collection of <see cref="T:Umbraco.Core.Models.IMemberType"/> to save</param>
            <param name="userId">Optional Id of the User saving the ContentTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberTypeService.Delete(Umbraco.Core.Models.IMemberType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IMemberType"/> object
            </summary>
            <param name="memberType"><see cref="T:Umbraco.Core.Models.IMemberType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMemberType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IMemberType"/></remarks>
            <param name="userId">Optional Id of the User deleting the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMemberTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMemberType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IMemberType"/> objects
            </summary>
            <param name="memberTypes">Collection of <see cref="T:Umbraco.Core.Models.IMemberType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMemberType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IMemberType"/></remarks>
            <param name="userId">Optional Id of the User deleting the ContentTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.SendNotifications(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String,System.String,System.Web.HttpContextBase,System.Func{Umbraco.Core.Models.Membership.IUser,System.String[],System.String},System.Func{Umbraco.Core.Models.Membership.IUser,System.String[],System.String})">
            <summary>
            Sends the notifications for the specified user regarding the specified node and action.
            </summary>
            <param name="entity"></param>
            <param name="operatingUser"></param>
            <param name="action"></param>
            <param name="actionName"></param>
            <param name="http"></param>
            <param name="createSubject"></param>
            <param name="createBody"></param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.GetUserNotifications(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Gets the notifications for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.GetUserNotifications(Umbraco.Core.Models.Membership.IUser,System.String)">
            <summary>
            Gets the notifications for the user based on the specified node path
            </summary>
            <param name="user"></param>
            <param name="path"></param>
            <returns></returns>
            <remarks>
            Notifications are inherited from the parent so any child node will also have notifications assigned based on it's parent (ancestors)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.GetEntityNotifications(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Returns the notifications for an entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.DeleteNotifications(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.DeleteNotifications(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Deletes notifications by user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.DeleteNotifications(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Delete notifications by user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.INotificationService.CreateNotification(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.EntityBase.IEntity,System.String)">
            <summary>
            Creates a new notification
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="action">The action letter - note: this is a string for future compatibility</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Relation"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.Relation"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.Relation"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetRelationTypeById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.RelationType"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.RelationType"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.RelationType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetRelationTypeByAlias(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.RelationType"/> by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.RelationType"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.RelationType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetAllRelations(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.Relation"/> objects
            </summary>
            <param name="ids">Optional array of integer ids to return relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetAllRelationsByRelationType(Umbraco.Core.Models.RelationType)">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.Relation"/> objects by their <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetAllRelationsByRelationType(System.Int32)">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.Relation"/> objects by their <see cref="T:Umbraco.Core.Models.RelationType"/>'s Id
            </summary>
            <param name="relationTypeId">Id of the <see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetAllRelationTypes(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.Relation"/> objects
            </summary>
            <param name="ids">Optional array of integer ids to return relationtypes for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.RelationType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParentId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their parent Id
            </summary>
            <param name="id">Id of the parent to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParent(Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their parent entity
            </summary>
            <param name="parent">Parent Entity to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParent(Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their parent entity
            </summary>
            <param name="parent">Parent Entity to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByChildId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their child Id
            </summary>
            <param name="id">Id of the child to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByChild(Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their child Entity
            </summary>
            <param name="child">Child Entity to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByChild(Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their child Entity
            </summary>
            <param name="child">Child Entity to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByParentOrChildId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their child or parent Id.
            Using this method will get you all relations regards of it being a child or parent relation.
            </summary>
            <param name="id">Id of the child or parent to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByRelationTypeName(System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by the Name of the <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationTypeName">Name of the <see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByRelationTypeAlias(System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by the Alias of the <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetByRelationTypeId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationTypeId">Id of the <see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetChildEntityFromRelation(Umbraco.Core.Models.IRelation,System.Boolean)">
            <summary>
            Gets the Child object from a Relation as an <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/>
            </summary>
            <param name="relation">Relation to retrieve child object from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetParentEntityFromRelation(Umbraco.Core.Models.IRelation,System.Boolean)">
            <summary>
            Gets the Parent object from a Relation as an <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/>
            </summary>
            <param name="relation">Relation to retrieve parent object from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetEntitiesFromRelation(Umbraco.Core.Models.IRelation,System.Boolean)">
            <summary>
            Gets the Parent and Child objects from a Relation as a <see cref="T:System.Tuple"/>"/&gt; with <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/>.
            </summary>
            <param name="relation">Relation to retrieve parent and child object from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>Returns a Tuple with Parent (item1) and Child (item2)</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetChildEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation},System.Boolean)">
            <summary>
            Gets the Child objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve child objects from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetParentEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation},System.Boolean)">
            <summary>
            Gets the Parent objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve parent objects from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.GetEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation},System.Boolean)">
            <summary>
            Gets the Parent and Child objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve parent and child objects from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An enumerable list of <see cref="T:System.Tuple"/> with <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Relate(Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.IRelationType)">
            <summary>
            Relates two objects that are based on the <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> interface.
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationType">The type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Core.Models.Relation"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Relate(Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String)">
            <summary>
            Relates two objects that are based on the <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> interface.
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Core.Models.Relation"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.HasRelations(Umbraco.Core.Models.IRelationType)">
            <summary>
            Checks whether any relations exists for the passed in <see cref="T:Umbraco.Core.Models.RelationType"/>.
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.RelationType"/> to check for relations</param>
            <returns>Returns <c>True</c> if any relations exists for the given <see cref="T:Umbraco.Core.Models.RelationType"/>, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.IsRelated(System.Int32)">
            <summary>
            Checks whether any relations exists for the passed in Id.
            </summary>
            <param name="id">Id of an object to check relations for</param>
            <returns>Returns <c>True</c> if any relations exists with the given Id, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.AreRelated(System.Int32,System.Int32)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <returns>Returns <c>True</c> if any relations exists with the given Ids, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.AreRelated(Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.AreRelated(Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.AreRelated(System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Save(Umbraco.Core.Models.IRelation)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Relation"/>
            </summary>
            <param name="relation">Relation to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Save(Umbraco.Core.Models.IRelationType)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationType">RelationType to Save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Delete(Umbraco.Core.Models.IRelation)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.Relation"/>
            </summary>
            <param name="relation">Relation to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.Delete(Umbraco.Core.Models.IRelationType)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationType">RelationType to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.IRelationService.DeleteRelationsOfType(Umbraco.Core.Models.IRelationType)">
            <summary>
            Deletes all <see cref="T:Umbraco.Core.Models.Relation"/> objects based on the passed in <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.RelationType"/> to Delete Relations for</param>
        </member>
        <member name="M:Umbraco.Core.Services.ISectionService.Initialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Section})">
            <summary>
            Initializes the service with all available application plugins
            </summary>
            <param name="allAvailableSections">
            All application plugins found in assemblies
            </param>
            <remarks>
            This is used to populate the app.config file with any applications declared in plugins that don't exist in the file
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ISectionService.GetSections">
            <summary>
            The cache storage for all applications
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ISectionService.GetAllowedSections(System.Int32)">
            <summary>
            Get the user's allowed sections
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ISectionService.GetByAlias(System.String)">
            <summary>
            Gets the application by its alias.
            </summary>
            <param name="appAlias">The application alias.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ISectionService.MakeNew(System.String,System.String,System.String)">
            <summary>
            Creates a new applcation if no application with the specified alias is found.
            </summary>
            <param name="name">The application name.</param>
            <param name="alias">The application alias.</param>
            <param name="icon">The application icon, which has to be located in umbraco/images/tray folder.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ISectionService.MakeNew(System.String,System.String,System.String,System.Int32)">
            <summary>
            Makes the new.
            </summary>
            <param name="name">The name.</param>
            <param name="alias">The alias.</param>
            <param name="icon">The icon.</param>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ISectionService.DeleteSection(Umbraco.Core.Models.Section)">
            <summary>
            Deletes the section
            </summary>        
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ImportContent(System.Xml.Linq.XElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="parentId">Optional parent Id for the content being imported</param>
            <param name="userId">Optional Id of the user performing the import</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated content</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ImportContentTypes(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin)</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ImportContentTypes(System.Xml.Linq.XElement,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="importStructure">Boolean indicating whether or not to import the </param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin)</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ImportDataTypeDefinitions(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated DataTypeDefinitions</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ImportDictionaryItems(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Imports and saves the 'DictionaryItems' part of the package xml as a list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="dictionaryItemElementList">Xml to import</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumerable list of dictionary items</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ImportLanguages(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves the 'Languages' part of a package xml as a list of <see cref="T:Umbraco.Core.Models.ILanguage"/>
            </summary>
            <param name="languageElementList">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin)</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumerable list of generated languages</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ImportMacros(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves the 'Macros' part of a package xml as a list of <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.ImportTemplates(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin)</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated Templates</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(Umbraco.Core.Models.IContentType,System.Boolean)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IContentType"/> to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="contentType">ContentType to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ContentType item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(Umbraco.Core.Models.IContent,System.Boolean,System.Boolean)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IContent"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="content">Content to export</param>
            <param name="deep">Optional parameter indicating whether to include descendents</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Content object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(Umbraco.Core.Models.IMedia,System.Boolean,System.Boolean)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IMedia"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="media">Media to export</param>
            <param name="deep">Optional parameter indicating whether to include descendents</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Media object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ILanguage},System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.ILanguage"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="languages">List of Languages to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Language object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(Umbraco.Core.Models.ILanguage,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.ILanguage"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="language">Language to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Language object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDictionaryItem},System.Boolean,System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dictionaryItem">List of dictionary items to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDictionaryItem objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(Umbraco.Core.Models.IDictionaryItem,System.Boolean,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dictionaryItem">Dictionary Item to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDictionaryItem object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataTypeDefinition},System.Boolean)">
            <summary>
            Exports a list of Data Types
            </summary>
            <param name="dataTypeDefinitions">List of data types to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDataTypeDefinition objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(Umbraco.Core.Models.IDataTypeDefinition,System.Boolean)">
            <summary>
            Exports a single Data Type
            </summary>
            <param name="dataTypeDefinition">Data type to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDataTypeDefinition object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate},System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.ITemplate"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="templates">List of Templates to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ITemplate objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(Umbraco.Core.Models.ITemplate,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.ITemplate"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="template">Template to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ITemplate object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMacro},System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.IMacro"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="macros">Macros to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IMacro objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IPackagingService.Export(Umbraco.Core.Models.IMacro,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.IMacro"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="macro">Macro to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IMacro object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Services.ITagService" -->
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedContentByTagGroup(System.String)">
            <summary>
            Gets tagged Content by a specific 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Content, not the actual Content item.</remarks>
            <param name="tagGroup">Name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedContentByTag(System.String,System.String)">
            <summary>
            Gets tagged Content by a specific 'Tag' and optional 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Content, not the actual Content item.</remarks>
            <param name="tag">Tag</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedMediaByTagGroup(System.String)">
            <summary>
            Gets tagged Media by a specific 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Media, not the actual Media item.</remarks>
            <param name="tagGroup">Name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedMediaByTag(System.String,System.String)">
            <summary>
            Gets tagged Media by a specific 'Tag' and optional 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Media, not the actual Media item.</remarks>
            <param name="tag">Tag</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedMembersByTagGroup(System.String)">
            <summary>
            Gets tagged Members by a specific 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Member, not the actual Member item.</remarks>
            <param name="tagGroup">Name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTaggedMembersByTag(System.String,System.String)">
            <summary>
            Gets tagged Members by a specific 'Tag' and optional 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Member, not the actual Member item.</remarks>
            <param name="tag">Tag</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetAllTags(System.String)">
            <summary>
            Gets every tag stored in the database
            </summary>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetAllContentTags(System.String)">
            <summary>
            Gets all tags for content items
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetAllMediaTags(System.String)">
            <summary>
            Gets all tags for media items
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetAllMemberTags(System.String)">
            <summary>
            Gets all tags for member items
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTagsForProperty(System.Int32,System.String,System.String)">
            <summary>
            Gets all tags attached to a property by entity id
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="contentId">The content item id to get tags for</param>
            <param name="propertyTypeAlias">Property type alias</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTagsForEntity(System.Int32,System.String)">
            <summary>
            Gets all tags attached to an entity (content, media or member) by entity id
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="contentId">The content item id to get tags for</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTagsForProperty(System.Guid,System.String,System.String)">
            <summary>
            Gets all tags attached to a property by entity id
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="contentId">The content item id to get tags for</param>
            <param name="propertyTypeAlias">Property type alias</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ITagService.GetTagsForEntity(System.Guid,System.String)">
            <summary>
            Gets all tags attached to an entity (content, media or member) by entity id
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="contentId">The content item id to get tags for</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IUserService">
            <summary>
            Defines the UserService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> and eventually Users.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.SavePassword(Umbraco.Core.Models.Membership.IUser,System.String)">
            <summary>
            This is simply a helper method which essentially just wraps the MembershipProvider's ChangePassword method
            </summary>
            <remarks>
            This method exists so that Umbraco developers can use one entry point to create/update users if they choose to.
            </remarks>
            <param name="user">The user to save the password for</param>
            <param name="password">The password to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.Delete(Umbraco.Core.Models.Membership.IUser,System.Boolean)">
            <summary>
            Deletes or disables a User
            </summary>
            <param name="user"><see cref="T:Umbraco.Core.Models.Membership.IUser"/> to delete</param>
            <param name="deletePermanently"><c>True</c> to permanently delete the user, <c>False</c> to disable the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetProfileById(System.Int32)">
            <summary>
            Gets an IProfile by User Id.
            </summary>
            <param name="id">Id of the User to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetProfileByUserName(System.String)">
            <summary>
            Gets a profile by username
            </summary>
            <param name="username">Username</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserById(System.Int32)">
            <summary>
            Gets a user by Id
            </summary>
            <param name="id">Id of the user to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.DeleteSectionFromAllUsers(System.String)">
            <summary>
            Removes a specific section from all users
            </summary>
            <remarks>This is useful when an entire section is removed from config</remarks>
            <param name="sectionAlias">Alias of the section to remove</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.AddSectionToAllUsers(System.String,System.Int32[])">
            <summary>
            Add a specific section to all users or those specified as parameters
            </summary>
            <remarks>This is useful when a new section is created to allow specific users accessing it</remarks>
            <param name="sectionAlias">Alias of the section to add</param>
            <param name="userIds">Specifiying nothing will add the section to all user</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetPermissions(Umbraco.Core.Models.Membership.IUser,System.Int32[])">
            <summary>
            Get permissions set for a user and optional node ids
            </summary>
            <remarks>If no permissions are found for a particular entity then the user's default permissions will be applied</remarks>
            <param name="user">User to retrieve permissions for</param>
            <param name="nodeIds">Specifiying nothing will return all user permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.ReplaceUserPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Replaces the same permission set for a single user to any number of entities
            </summary>        
            <param name="userId">Id of the user</param>
            <param name="permissions">
            Permissions as enumerable list of <see cref="T:System.Char"/>, 
            if no permissions are specified then all permissions for this node are removed for this user
            </param>
            <param name="entityIds">Specify the nodes to replace permissions for. If nothing is specified all permissions are removed.</param>
            <remarks>If no 'entityIds' are specified all permissions will be removed for the specified user.</remarks>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.AssignUserPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns the same permission set for a single user to any number of entities
            </summary>
            <param name="userId">Id of the user</param>
            <param name="permission"></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetAllUserTypes(System.Int32[])">
            <summary>
            Gets all UserTypes or thosed specified as parameters
            </summary>
            <param name="ids">Optional Ids of UserTypes to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.IUserType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserTypeByAlias(System.String)">
            <summary>
            Gets a UserType by its Alias
            </summary>
            <param name="alias">Alias of the UserType to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserTypeById(System.Int32)">
            <summary>
            Gets a UserType by its Id
            </summary>
            <param name="id">Id of the UserType to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetUserTypeByName(System.String)">
            <summary>
            Gets a UserType by its Name
            </summary>
            <param name="name">Name of the UserType to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.SaveUserType(Umbraco.Core.Models.Membership.IUserType,System.Boolean)">
            <summary>
            Saves a UserType
            </summary>
            <param name="userType">UserType to save</param>
            <param name="raiseEvents">Optional parameter to raise events. 
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.DeleteUserType(Umbraco.Core.Models.Membership.IUserType)">
            <summary>
            Deletes a UserType
            </summary>
            <param name="userType">UserType to delete</param>
        </member>
        <member name="T:Umbraco.Core.Services.LocalizationService">
            <summary>
            Represents the Localization Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Language"/> and <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.AddOrUpdateDictionaryValue(Umbraco.Core.Models.IDictionaryItem,Umbraco.Core.Models.ILanguage,System.String)">
            <summary>
            Adds or updates a translation for a dictionary item and language
            </summary>
            <param name="item"></param>
            <param name="language"></param>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            This does not save the item, that needs to be done explicitly
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.CreateDictionaryItemWithIdentity(System.String,System.Nullable{System.Guid},System.String)">
            <summary>
            Creates and saves a new dictionary item and assigns a value to all languages if defaultValue is specified.
            </summary>
            <param name="key"></param>
            <param name="parentId"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Int32"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Guid"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.DictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemByKey(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemDescendants(System.Nullable{System.Guid})">
            <summary>
            Gets a list of descendants for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent, null will return all dictionary items</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetRootDictionaryItems">
            <summary>
            Gets the root/top <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.DictionaryItemExists(System.String)">
            <summary>
            Checks if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns>True if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.Save(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to save</param>
            <param name="userId">Optional id of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.Delete(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object and its related translations
            as well as its children.
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to delete</param>
            <param name="userId">Optional id of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetLanguageById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.Language"/></param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetLanguageByCultureCode(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its culture code
            </summary>
            <param name="cultureName">Culture Name - also refered to as the Friendly name</param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetLanguageByIsoCode(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its iso code
            </summary>
            <param name="isoCode">Iso Code of the language (ie. en-US)</param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetAllLanguages">
            <summary>
            Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ILanguage"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.Save(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ILanguage"/> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to save</param>
            <param name="userId">Optional id of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.Delete(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.ILanguage"/> by removing it (but not its usages) from the db
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to delete</param>
            <param name="userId">Optional id of the user deleting the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.EnsureDictionaryItemLanguageCallback(Umbraco.Core.Models.IDictionaryItem)">
            <summary>
            This is here to take care of a hack - the DictionaryTranslation model contains an ILanguage reference which we don't want but 
            we cannot remove it because it would be a large breaking change, so we need to make sure it's resolved lazily. This is because
            if developers have a lot of dictionary items and translations, the caching and cloning size gets much much larger because of 
            the large object graphs. So now we don't cache or clone the attached ILanguage
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.DeletingLanguage">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.DeletedLanguage">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.DeletingDictionaryItem">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.DeletedDictionaryItem">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.SavingDictionaryItem">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.SavedDictionaryItem">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.SavingLanguage">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.SavedLanguage">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.LocalizedTextServiceExtensions">
            <summary>
            Extension methods for ILocalizedTextService
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.Localize(Umbraco.Core.Services.ILocalizedTextService,System.String,System.String[])">
            <summary>
            Localize using the current thread culture
            </summary>
            <param name="manager"></param>
            <param name="key"></param>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.Localize(Umbraco.Core.Services.ILocalizedTextService,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Localize using the current thread culture
            </summary>
            <param name="manager"></param>
            <param name="key"></param>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.Localize(Umbraco.Core.Services.ILocalizedTextService,System.String,System.Globalization.CultureInfo,System.String[])">
            <summary>
            Localize a key without any variables
            </summary>
            <param name="manager"></param>
            <param name="key"></param>
            <param name="culture"></param>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.ConvertToDictionaryVars(System.String[])">
            <summary>
            Convert an array of strings to a dictionary of indicies -> values
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceExtensions.UmbracoDictionaryTranslate(Umbraco.Core.Services.ILocalizedTextService,System.String)">
            <summary>
            TODO: We need to refactor how we work with ICultureDictionary - this is supposed to be the 'fast' way to
            do readonly access to the Dictionary without using the ILocalizationService. See TODO Notes in `DefaultCultureDictionary`
            Also NOTE that the ICultureDictionary is based on the ILocalizationService not the ILocalizedTextService (which is used
            only for the localization files - not the dictionary)
            </summary>
            <param name="manager"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.LocalizedTextServiceFileSources">
            <summary>
            Exposes the XDocument sources from files for the default localization text service and ensure caching is taken care of
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceFileSources.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Cache.IRuntimeCacheProvider,System.IO.DirectoryInfo,System.Collections.Generic.IEnumerable{Umbraco.Core.Services.LocalizedTextServiceSupplementaryFileSource})">
            <summary>
            This is used to configure the file sources with the main file sources shipped with Umbraco and also including supplemental/plugin based
            localization files. The supplemental files will be loaded in and merged in after the primary files. 
            The supplemental files must be named with the 4 letter culture name with a hyphen such as : en-AU.xml
            </summary>
            <param name="logger"></param>
            <param name="cache"></param>
            <param name="fileSourceFolder"></param>
            <param name="supplementFileSources"></param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceFileSources.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Cache.IRuntimeCacheProvider,System.IO.DirectoryInfo)">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="cache"></param>
            <param name="fileSourceFolder"></param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizedTextServiceFileSources.GetXmlSources">
            <summary>
            returns all xml sources for all culture files found in the folder
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Services.MacroService">
            <summary>
            Represents the Macro Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.GetMacroType(Umbraco.Core.Models.IMacro)">
            <summary>
            Returns an enum <see cref="T:Umbraco.Core.Models.MacroTypes"/> based on the properties on the Macro
            </summary>
            <returns><see cref="T:Umbraco.Core.Models.MacroTypes"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.GetByAlias(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMacro"/> object by its alias
            </summary>
            <param name="alias">Alias to retrieve an <see cref="T:Umbraco.Core.Models.IMacro"/> for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMacro"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.Delete(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to delete</param>
            <param name="userId">Optional id of the user deleting the macro</param>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.Save(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to save</param>
            <param name="userId">Optional Id of the user deleting the macro</param>
        </member>
        <member name="E:Umbraco.Core.Services.MacroService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MacroService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MacroService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MacroService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.MediaService">
            <summary>
            Represents the Media Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.CreateMedia(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.CreateMedia(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            Note that using this method will simply return a new IMedia without any identity
            as it has not yet been persisted. It is intended as a shortcut to creating new media objects
            that does not invoke a save operation against the database.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.CreateMediaWithIdentity(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IMedia"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.CreateMediaWithIdentity(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media should based on.
            </summary>
            <remarks>
            This method returns an <see cref="T:Umbraco.Core.Models.IMedia"/> object that has been persisted to the database
            and therefor has an identity.
            </remarks>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="ids">Ids of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Media from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMedia"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetAncestors(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetAncestors(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which are ancestors of the current media.
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve ancestors for</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetPagedChildren(System.Int32,System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <param name="pageIndex">Page index (zero based)</param>
            <param name="pageSize">Page size</param>
            <param name="totalChildren">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetPagedDescendants(System.Int32,System.Int64,System.Int32,System.Int64@,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <param name="pageIndex">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalChildren">Total records query would return without paging</param>
            <param name="orderBy">Field to order by</param>
            <param name="orderDirection">Direction to order by</param>
            <param name="filter">Search text filter</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetDescendants(System.Int32)">
            <summary>
            Gets descendants of a <see cref="T:Umbraco.Core.Models.IMedia"/> object by its Id
            </summary>
            <param name="id">Id of the Parent to retrieve descendants from</param>
            <returns>An Enumerable flat list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetDescendants(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets descendants of a <see cref="T:Umbraco.Core.Models.IMedia"/> object by its Id
            </summary>
            <param name="media">The Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object to retrieve descendants from</param>
            <returns>An Enumerable flat list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetParent(System.Int32)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetParent(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets the parent of the current media as an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IMedia"/> to retrieve the parent from</param>
            <returns>Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetMediaOfMediaType(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetRootMedia">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetMediaInRecycleBin">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetMediaByPath(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object from the path stored in the 'umbracoFile' property.
            </summary>
            <param name="mediaPath">Path of the media item to retrieve (for example: /media/1024/koala_403x328.jpg)</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMedia"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/></param>
            <returns>True if the media has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Move(Umbraco.Core.Models.IMedia,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IMedia"/> object to a new location
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to move</param>
            <param name="parentId">Id of the Media's new Parent</param>
            <param name="userId">Id of the User moving the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.MoveToRecycleBin(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Umbraco#Core#Services#IMediaServiceOperations#Delete(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <remarks>
            Please note that this method will completely remove the Media from the database,
            but current not from the file system.
            </remarks>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Umbraco#Core#Services#IMediaServiceOperations#Save(Umbraco.Core.Models.IMedia,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Umbraco#Core#Services#IMediaServiceOperations#Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IMedia"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.DeleteMediaOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeId">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user deleting the media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Umbraco#Core#Services#IMediaServiceOperations#MoveToRecycleBin(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Delete(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object as well as all of its Children.
            </summary>
            <remarks>
            Please note that this method will completely remove the Media from the database,
            as well as associated media files from the file system.
            </remarks>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IMedia"/> object prior to a specific date.
            This method will never delete the latest version of a content item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.DeleteVersion(System.Int32,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IMedia"/> object.
            This method will never delete the latest version of a content item.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Save(Umbraco.Core.Models.IMedia,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Sort(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by updating the SortOrder according
            to the ordering of items in the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="items"></param>
            <param name="userId"></param>
            <param name="raiseEvents"></param>
            <returns>True if sorting succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.RebuildXmlStructures(System.Int32[])">
            <summary>
            Rebuilds all xml content in the cmsContentXml table for all media
            </summary>
            <param name="contentTypeIds">
            Only rebuild the xml structures for the content type ids passed in, if none then rebuilds the structures
            for all media
            </param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.UpdatePropertiesOnChildren(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.String,System.Int32,System.Boolean,System.Collections.Generic.ICollection{Umbraco.Core.Events.MoveEventInfo{Umbraco.Core.Models.IMedia}})">
            <summary>
            Updates the Path and Level on a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            based on the Parent's Path and Level. Also change the trashed state if relevant.
            </summary>
            <param name="children">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects to update</param>
            <param name="parentPath">Path of the Parent media</param>
            <param name="parentLevel">Level of the Parent media</param>
            <param name="parentTrashed">Indicates whether the Parent is trashed or not</param>
            <param name="eventInfo">Used to track the objects to be used in the move event</param>
            <returns>Collection of updated <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.DeletingVersions">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.DeletedVersions">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Created">
            <summary>
            Occurs after Create
            </summary>
            <remarks>
            Please note that the Media object has been created, but not saved
            so it does not have an identity yet (meaning no Id has been set).
            </remarks>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Trashing">
            <summary>
            Occurs before Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Trashed">
            <summary>
            Occurs after Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Moving">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Moved">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.EmptyingRecycleBin">
            <summary>
            Occurs before the Recycle Bin is emptied
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.EmptiedRecycleBin">
            <summary>
            Occurs after the Recycle Bin has been Emptied
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.MemberCountType">
            <summary>
            The types of members to count
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberGroupService.Deleting">
            <summary>
            Occurs before Delete of a member group
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberGroupService.Deleted">
            <summary>
            Occurs after Delete of a member group
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberGroupService.Saving">
            <summary>
            Occurs before Save of a member group
            </summary>     
            <remarks>
            We need to proxy these events because the events need to take place at the repo level
            </remarks>
        </member>
        <member name="E:Umbraco.Core.Services.MemberGroupService.Saved">
            <summary>
            Occurs after Save of a member group
            </summary>
            <remarks>
            We need to proxy these events because the events need to take place at the repo level
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Services.MemberService">
            <summary>
            Represents the MemberService.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetDefaultMemberType">
            <summary>
            Gets the default MemberType alias
            </summary>
            <remarks>By default we'll return the 'writer', but we need to check it exists. If it doesn't we'll 
            return the first type that is not an admin, otherwise if there's only one we will return that one.</remarks>
            <returns>Alias of the default MemberType</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.Exists(System.String)">
            <summary>
            Checks if a Member with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.SavePassword(Umbraco.Core.Models.IMember,System.String)">
            <summary>
            This is simply a helper method which essentially just wraps the MembershipProvider's ChangePassword method
            </summary>
            <remarks>This method exists so that Umbraco developers can use one entry point to create/update 
            Members if they choose to. </remarks>
            <param name="member">The Member to save the password for</param>
            <param name="password">The password to encrypt and save</param>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.Exists(System.Int32)">
            <summary>
            Checks if a Member with the id exists
            </summary>
            <param name="id">Id of the Member</param>
            <returns><c>True</c> if the Member exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetById(System.Int32)">
            <summary>
            Gets a Member by its integer id
            </summary>
            <param name="id"><see cref="!:System.int"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetByKey(System.Guid)">
            <summary>
            Gets a Member by the unique key
            </summary>
            <remarks>The guid key corresponds to the unique id in the database
            and the user id in the membership provider.</remarks>
            <param name="id"><see cref="T:System.Guid"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetMembersByMemberType(System.String)">
            <summary>
            Gets all Members for the specified MemberType alias
            </summary>
            <param name="memberTypeAlias">Alias of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetMembersByMemberType(System.Int32)">
            <summary>
            Gets all Members for the MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetMembersByGroup(System.String)">
            <summary>
            Gets all Members within the specified MemberGroup name
            </summary>
            <param name="memberGroupName">Name of the MemberGroup</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetAllMembers(System.Int32[])">
            <summary>
            Gets all Members with the ids specified
            </summary>
            <remarks>If no Ids are specified all Members will be retrieved</remarks>
            <param name="ids">Optional list of Member Ids</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.DeleteMembersOfType(System.Int32)">
            <summary>
            Delete Members of the specified MemberType id
            </summary>
            <param name="memberTypeId">Id of the MemberType</param>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.FindMembersByDisplayName(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds Members based on their display name
            </summary>
            <param name="displayNameToMatch">Display name to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.FindByEmail(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.IMember"/> objects by a partial email string
            </summary>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.FindByUsername(System.String,System.Int64,System.Int32,System.Int64@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.IMember"/> objects by a partial username
            </summary>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetMembersByPropertyValue(System.String,System.String,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.string"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetMembersByPropertyValue(System.String,System.Int32,Umbraco.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.int"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetMembersByPropertyValue(System.String,System.Boolean)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="!:System.bool"/> Value to match</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetMembersByPropertyValue(System.String,System.DateTime,Umbraco.Core.Persistence.Querying.ValuePropertyMatchType)">
            <summary>
            Gets a list of Members based on a property search
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to search for</param>
            <param name="value"><see cref="T:System.DateTime"/> Value to match</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.Exact"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.RebuildXmlStructures(System.Int32[])">
            <summary>
            Rebuilds all xml content in the cmsContentXml table for all members
            </summary>
            <param name="memberTypeIds">
            Only rebuild the xml structures for the content type ids passed in, if none then rebuilds the structures
            for all members = USE WITH CARE!
            </param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetCount(Umbraco.Core.Models.Membership.MemberCountType)">
            <summary>
            Gets the total number of Members based on the count type
            </summary>
            <remarks>
            The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Core.Models.Membership.MemberCountType"/> to count by</param>
            <returns><see cref="!:System.int"/> with number of Members for passed in type</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetAll(System.Int64,System.Int32,System.Int64@)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.IMember"/> objects
            </summary>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.Count(System.String)">
            <summary>
            Gets the count of Members by an optional MemberType alias
            </summary>
            <remarks>If no alias is supplied then the count for all Member will be returned</remarks>
            <param name="memberTypeAlias">Optional alias for the MemberType when counting number of Members</param>
            <returns><see cref="!:System.int"/> with number of Members</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.CreateMember(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.CreateMember(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMember"/> object without persisting it
            </summary>
            <remarks>This method is convenient for when you need to add properties to a new Member
            before persisting it in order to limit the amount of times its saved.
            Also note that the returned <see cref="T:Umbraco.Core.Models.IMember"/> will not have an Id until its saved.</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned 
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberTypeAlias">Alias of the MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.CreateMemberWithIdentity(System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned 
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned 
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.Umbraco#Core#Services#IMembershipMemberService{Umbraco#Core#Models#IMember}#CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.IMember"/>
            </summary>
            <remarks>An <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> can be of type <see cref="T:Umbraco.Core.Models.IMember"/> or <see cref="T:Umbraco.Core.Models.Membership.IUser"/></remarks>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.CreateMemberWithIdentity(System.String,System.String,System.String,System.String,Umbraco.Core.Models.IMemberType)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned 
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="name">Name of the Member to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetByProviderKey(System.Object)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMember"/> by its provider key
            </summary>
            <param name="id">Id to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetByEmail(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.IMember"/> by email
            </summary>
            <param name="email">Email to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.GetByUsername(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.IMember"/> by username
            </summary>
            <param name="username">Username to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.IMember"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.Delete(Umbraco.Core.Models.IMember)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMember"/>
            </summary>
            <param name="member"><see cref="T:Umbraco.Core.Models.IMember"/> to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.Save(Umbraco.Core.Models.IMember,System.Boolean)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IMember"/>
            </summary>
            <param name="entity"><see cref="T:Umbraco.Core.Models.IMember"/> to Save</param>
            <param name="raiseEvents">Optional parameter to raise events. 
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMember},System.Boolean)">
            <summary>
            Saves a list of <see cref="T:Umbraco.Core.Models.IMember"/> objects
            </summary>
            <param name="entities"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to save</param>
            <param name="raiseEvents">Optional parameter to raise events. 
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.MemberService.CreateGenericMembershipProviderMember(System.String,System.String,System.String,System.String)">
            <summary>
            A helper method that will create a basic/generic member for use with a generic membership provider
            </summary>
            <returns></returns>
        </member>
        <member name="E:Umbraco.Core.Services.MemberService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberService.Created">
            <summary>
            Occurs after Create
            </summary>
            <remarks>
            Please note that the Member object has been created, but might not have been saved
            so it does not have an identity yet (meaning no Id has been set).
            </remarks>
        </member>
        <member name="E:Umbraco.Core.Services.MemberService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MemberTypeService.Get(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMemberType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMemberType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMemberType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberTypeService.Get(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMemberType"/> object by its Key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IMemberType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMemberType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberTypeService.Get(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMemberType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IMemberType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMemberType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MemberTypeService.UpdateContentXmlStructure(Umbraco.Core.Models.IContentTypeBase[])">
            <summary>
            This is called after an IContentType is saved and is used to update the content xml structures in the database
            if they are required to be updated.
            </summary>
            <param name="contentTypes">A tuple of a content type and a boolean indicating if it is new (HasIdentity was false before committing)</param>
        </member>
        <member name="E:Umbraco.Core.Services.MemberTypeService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberTypeService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberTypeService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MemberTypeService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.SendNotifications(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String,System.String,System.Web.HttpContextBase,System.Func{Umbraco.Core.Models.Membership.IUser,System.String[],System.String},System.Func{Umbraco.Core.Models.Membership.IUser,System.String[],System.String})">
            <summary>
            Sends the notifications for the specified user regarding the specified node and action.
            </summary>
            <param name="entity"></param>
            <param name="operatingUser"></param>
            <param name="action"></param>
            <param name="actionName"></param>
            <param name="http"></param>
            <param name="createSubject"></param>
            <param name="createBody"></param>
            <remarks>
            Currently this will only work for Content entities!
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.GetUserNotifications(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Gets the notifications for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.GetUserNotifications(Umbraco.Core.Models.Membership.IUser,System.String)">
            <summary>
            Gets the notifications for the user based on the specified node path
            </summary>
            <param name="user"></param>
            <param name="path"></param>
            <returns></returns>
            <remarks>
            Notifications are inherited from the parent so any child node will also have notifications assigned based on it's parent (ancestors)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.GetEntityNotifications(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.DeleteNotifications(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Deletes notifications by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.DeleteNotifications(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Deletes notifications by user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.DeleteNotifications(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Delete notifications by user and entity
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.CreateNotification(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.EntityBase.IEntity,System.String)">
            <summary>
            Creates a new notification
            </summary>
            <param name="user"></param>
            <param name="entity"></param>
            <param name="action">The action letter - note: this is a string for future compatibility</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.SendNotification(Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Models.IContent,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.String,System.Web.HttpContextBase,System.Func{Umbraco.Core.Models.Membership.IUser,System.String[],System.String},System.Func{Umbraco.Core.Models.Membership.IUser,System.String[],System.String})">
            <summary>
            Sends the notification
            </summary>
            <param name="performingUser"></param>
            <param name="mailingUser"></param>
            <param name="content"></param>
            <param name="allVersions"></param>
            <param name="actionName">The action readable name - currently an action is just a single letter, this is the name associated with the letter </param>
            <param name="http"></param>
            <param name="createSubject">Callback to create the mail subject</param>
            <param name="createBody">Callback to create the mail body</param>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.ReplaceHtmlSymbols(System.String@)">
            <summary>
            Replaces the HTML symbols with the character equivalent.
            </summary>
            <param name="oldString">The old string.</param>
        </member>
        <member name="M:Umbraco.Core.Services.NotificationService.CompareText(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Compares the text.
            </summary>
            <param name="oldText">The old text.</param>
            <param name="newText">The new text.</param>
            <param name="displayInsertedText">if set to <c>true</c> [display inserted text].</param>
            <param name="displayDeletedText">if set to <c>true</c> [display deleted text].</param>
            <param name="insertedStyle">The inserted style.</param>
            <param name="deletedStyle">The deleted style.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Relation"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.Relation"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.Relation"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetRelationTypeById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.RelationType"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.RelationType"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.RelationType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetRelationTypeByAlias(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.RelationType"/> by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.RelationType"/></param>
            <returns>A <see cref="T:Umbraco.Core.Models.RelationType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetAllRelations(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.Relation"/> objects
            </summary>
            <param name="ids">Optional array of integer ids to return relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetAllRelationsByRelationType(Umbraco.Core.Models.RelationType)">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.Relation"/> objects by their <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetAllRelationsByRelationType(System.Int32)">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.Relation"/> objects by their <see cref="T:Umbraco.Core.Models.RelationType"/>'s Id
            </summary>
            <param name="relationTypeId">Id of the <see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetAllRelationTypes(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.Relation"/> objects
            </summary>
            <param name="ids">Optional array of integer ids to return relationtypes for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.RelationType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByParentId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their parent Id
            </summary>
            <param name="id">Id of the parent to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByParent(Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their parent entity
            </summary>
            <param name="parent">Parent Entity to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByParent(Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their parent entity
            </summary>
            <param name="parent">Parent Entity to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByChildId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their child Id
            </summary>
            <param name="id">Id of the child to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByChild(Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their child Entity
            </summary>
            <param name="child">Child Entity to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByChild(Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their child Entity
            </summary>
            <param name="child">Child Entity to retrieve relations for</param>
            <param name="relationTypeAlias">Alias of the type of relation to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByParentOrChildId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by their child or parent Id.
            Using this method will get you all relations regards of it being a child or parent relation.
            </summary>
            <param name="id">Id of the child or parent to retrieve relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByRelationTypeName(System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by the Name of the <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationTypeName">Name of the <see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByRelationTypeAlias(System.String)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by the Alias of the <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetByRelationTypeId(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.Relation"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationTypeId">Id of the <see cref="T:Umbraco.Core.Models.RelationType"/> to retrieve Relations for</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Relation"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetChildEntityFromRelation(Umbraco.Core.Models.IRelation,System.Boolean)">
            <summary>
            Gets the Child object from a Relation as an <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/>
            </summary>
            <param name="relation">Relation to retrieve child object from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetParentEntityFromRelation(Umbraco.Core.Models.IRelation,System.Boolean)">
            <summary>
            Gets the Parent object from a Relation as an <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/>
            </summary>
            <param name="relation">Relation to retrieve parent object from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetEntitiesFromRelation(Umbraco.Core.Models.IRelation,System.Boolean)">
            <summary>
            Gets the Parent and Child objects from a Relation as a <see cref="T:System.Tuple"/>"/&gt; with <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/>.
            </summary>
            <param name="relation">Relation to retrieve parent and child object from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>Returns a Tuple with Parent (item1) and Child (item2)</returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetChildEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation},System.Boolean)">
            <summary>
            Gets the Child objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve child objects from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetParentEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation},System.Boolean)">
            <summary>
            Gets the Parent objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve parent objects from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.GetEntitiesFromRelations(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IRelation},System.Boolean)">
            <summary>
            Gets the Parent and Child objects from a list of Relations as a list of <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> objects.
            </summary>
            <param name="relations">List of relations to retrieve parent and child objects from</param>
            <param name="loadBaseType">Optional bool to load the complete object graph when set to <c>False</c></param>
            <returns>An enumerable list of <see cref="T:System.Tuple"/> with <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.Relate(Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.IRelationType)">
            <summary>
            Relates two objects that are based on the <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> interface.
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationType">The type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Core.Models.Relation"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.Relate(Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String)">
            <summary>
            Relates two objects that are based on the <see cref="T:Umbraco.Core.Models.EntityBase.IUmbracoEntity"/> interface.
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>The created <see cref="T:Umbraco.Core.Models.Relation"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.HasRelations(Umbraco.Core.Models.IRelationType)">
            <summary>
            Checks whether any relations exists for the passed in <see cref="T:Umbraco.Core.Models.RelationType"/>.
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.RelationType"/> to check for relations</param>
            <returns>Returns <c>True</c> if any relations exists for the given <see cref="T:Umbraco.Core.Models.RelationType"/>, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.IsRelated(System.Int32)">
            <summary>
            Checks whether any relations exists for the passed in Id.
            </summary>
            <param name="id">Id of an object to check relations for</param>
            <returns>Returns <c>True</c> if any relations exists with the given Id, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.AreRelated(System.Int32,System.Int32)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <returns>Returns <c>True</c> if any relations exists with the given Ids, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.AreRelated(System.Int32,System.Int32,System.String)">
            <summary>
            Checks whether two items are related with a given relation type alias
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <param name="relationTypeAlias">Alias of the relation type</param>
            <returns>Returns <c>True</c> if any relations exists with the given Ids and relation type, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.AreRelated(System.Int32,System.Int32,Umbraco.Core.Models.IRelationType)">
            <summary>
            Checks whether two items are related with a given relation type
            </summary>
            <param name="parentId">Id of the Parent relation</param>
            <param name="childId">Id of the Child relation</param>
            <param name="relationTypeAlias">Type of relation</param>
            <returns>Returns <c>True</c> if any relations exists with the given Ids and relation type, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.AreRelated(Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.AreRelated(Umbraco.Core.Models.EntityBase.IUmbracoEntity,Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String)">
            <summary>
            Checks whether two items are related
            </summary>
            <param name="parent">Parent entity</param>
            <param name="child">Child entity</param>
            <param name="relationTypeAlias">Alias of the type of relation to create</param>
            <returns>Returns <c>True</c> if any relations exist between the entities, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.Save(Umbraco.Core.Models.IRelation)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Relation"/>
            </summary>
            <param name="relation">Relation to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.Save(Umbraco.Core.Models.IRelationType)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationType">RelationType to Save</param>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.Delete(Umbraco.Core.Models.IRelation)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.Relation"/>
            </summary>
            <param name="relation">Relation to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.Delete(Umbraco.Core.Models.IRelationType)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationType">RelationType to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.RelationService.DeleteRelationsOfType(Umbraco.Core.Models.IRelationType)">
            <summary>
            Deletes all <see cref="T:Umbraco.Core.Models.Relation"/> objects based on the passed in <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
            <param name="relationType"><see cref="T:Umbraco.Core.Models.RelationType"/> to Delete Relations for</param>
        </member>
        <member name="E:Umbraco.Core.Services.RelationService.DeletingRelation">
            <summary>
            Occurs before Deleting a Relation
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.RelationService.DeletedRelation">
            <summary>
            Occurs after a Relation is Deleted
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.RelationService.SavingRelation">
            <summary>
            Occurs before Saving a Relation
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.RelationService.SavedRelation">
            <summary>
            Occurs after a Relation is Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.RelationService.DeletingRelationType">
            <summary>
            Occurs before Deleting a RelationType
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.RelationService.DeletedRelationType">
            <summary>
            Occurs after a RelationType is Deleted
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.RelationService.SavingRelationType">
            <summary>
            Occurs before Saving a RelationType
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.RelationService.SavedRelationType">
            <summary>
            Occurs after a RelationType is Saved
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.SectionService.Initialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Section})">
            <summary>
            Initializes the service with all available application plugins
            </summary>
            <param name="allAvailableSections">
            All application plugins found in assemblies
            </param>
            <remarks>
            This is used to populate the app.config file with any applications declared in plugins that don't exist in the file
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.SectionService.GetSections">
            <summary>
            The cache storage for all applications
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.SectionService.GetAllowedSections(System.Int32)">
            <summary>
            Get the user's allowed sections
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.SectionService.GetByAlias(System.String)">
            <summary>
            Gets the application by its alias.
            </summary>
            <param name="appAlias">The application alias.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.SectionService.MakeNew(System.String,System.String,System.String)">
            <summary>
            Creates a new applcation if no application with the specified alias is found.
            </summary>
            <param name="name">The application name.</param>
            <param name="alias">The application alias.</param>
            <param name="icon">The application icon, which has to be located in umbraco/images/tray folder.</param>
        </member>
        <member name="M:Umbraco.Core.Services.SectionService.MakeNew(System.String,System.String,System.String,System.Int32)">
            <summary>
            Makes the new.
            </summary>
            <param name="name">The name.</param>
            <param name="alias">The alias.</param>
            <param name="icon">The icon.</param>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:Umbraco.Core.Services.SectionService.DeleteSection(Umbraco.Core.Models.Section)">
            <summary>
            Deletes the section
            </summary>        
        </member>
        <member name="P:Umbraco.Core.Services.SectionService.AppConfigFilePath">
            <summary>
            gets/sets the application.config file path
            </summary>
            <remarks>
            The setter is generally only going to be used in unit tests, otherwise it will attempt to resolve it using the IOHelper.MapPath
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Services.ServerRegistrationService">
            <summary>
            Manages server registrations in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ServerRegistrationService.#ctor(Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,Umbraco.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Services.ServerRegistrationService"/> class.
            </summary>
            <param name="uowProvider">A UnitOfWork provider.</param>
            <param name="repositoryFactory">A repository factory.</param>
            <param name="logger">A logger.</param>
            <param name="eventMessagesFactory"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ServerRegistrationService.TouchServer(System.String,System.String,System.TimeSpan)">
            <summary>
            Touches a server to mark it as active; deactivate stale servers.
            </summary>
            <param name="serverAddress">The server url.</param>
            <param name="serverIdentity">The server unique identity.</param>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ServerRegistrationService.DeactiveServer(System.String)">
            <summary>
            Deactivates a server.
            </summary>
            <param name="serverIdentity">The server unique identity.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ServerRegistrationService.DeactiveStaleServers(System.TimeSpan)">
            <summary>
            Deactivates stale servers.
            </summary>
            <param name="staleTimeout">The time after which a server is considered stale.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ServerRegistrationService.GetActiveServers">
            <summary>
            Return all active servers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ServerRegistrationService.GetCurrentServerRole">
            <summary>
            Gets the role of the current server.
            </summary>
            <returns>The role of the current server.</returns>
        </member>
        <member name="P:Umbraco.Core.Services.ServerRegistrationService.CurrentServerIdentity">
            <summary>
            Gets the local server identity.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.PackagingService">
            <summary>
            Represents the Packaging Service, which provides import/export functionality for the Core models of the API
            using xml representation. This is primarily used by the Package functionality.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.IContent,System.Boolean,System.Boolean)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IContent"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="content">Content to export</param>
            <param name="deep">Optional parameter indicating whether to include descendents</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Content object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportContent(System.Xml.Linq.XElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="parentId">Optional parent Id for the content being imported</param>
            <param name="userId">Optional Id of the user performing the import</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated content</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.IContentType,System.Boolean)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IContentType"/> to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="contentType">ContentType to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ContentType item.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportContentTypes(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportContentTypes(System.Xml.Linq.XElement,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="importStructure">Boolean indicating whether or not to import the </param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.FindContentTypeByAlias(System.String)">
            <summary>
            Used during Content import to ensure that the ContentType of a content item exists
            </summary>
            <param name="contentTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataTypeDefinition},System.Boolean)">
            <summary>
            Exports a list of Data Types
            </summary>
            <param name="dataTypeDefinitions">List of data types to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDataTypeDefinition objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.IDataTypeDefinition,System.Boolean)">
            <summary>
            Exports a single Data Type
            </summary>
            <param name="dataTypeDefinition">Data type to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDataTypeDefinition object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportDataTypeDefinitions(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional id of the user</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated DataTypeDefinitions</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDictionaryItem},System.Boolean,System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dictionaryItem">List of dictionary items to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDictionaryItem objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.IDictionaryItem,System.Boolean,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="dictionaryItem">Dictionary Item to export</param>
            <param name="includeChildren">Optional boolean indicating whether or not to include children</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IDictionaryItem object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportDictionaryItems(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Imports and saves the 'DictionaryItems' part of the package xml as a list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="dictionaryItemElementList">Xml to import</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumerable list of dictionary items</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ILanguage},System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.ILanguage"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="languages">List of Languages to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ILanguage objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.ILanguage,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.ILanguage"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="language">Language to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ILanguage object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportLanguages(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves the 'Languages' part of a package xml as a list of <see cref="T:Umbraco.Core.Models.ILanguage"/>
            </summary>
            <param name="languageElementList">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumerable list of generated languages</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportMacros(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves the 'Macros' part of a package xml as a list of <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMacro},System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.IMacro"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="macros">Macros to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IMacro objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.IMacro,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.IMacro"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="macro">Macro to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the IMacro object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.IMember)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IMedia"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="member">Member to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Member object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.IMedia,System.Boolean,System.Boolean)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IMedia"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="media">Media to export</param>
            <param name="deep">Optional parameter indicating whether to include descendents</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the Media object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.IMediaType)">
            <summary>
            Exports an <see cref="T:Umbraco.Core.Models.IMediaType"/> to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="mediaType">MediaType to export</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the MediaType item.</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportTemplates(System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional user id</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns>An enumrable list of generated Templates</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate},System.Boolean)">
            <summary>
            Exports a list of <see cref="T:Umbraco.Core.Models.ITemplate"/> items to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="templates">List of Templates to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ITemplate objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.Export(Umbraco.Core.Models.ITemplate,System.Boolean)">
            <summary>
            Exports a single <see cref="T:Umbraco.Core.Models.ITemplate"/> item to xml as an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="template">Template to export</param>
            <param name="raiseEvents">Optional parameter indicating whether or not to raise events</param>
            <returns><see cref="T:System.Xml.Linq.XElement"/> containing the xml representation of the ITemplate object</returns>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingContent">
            <summary>
            Occurs before Importing Content
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportedContent">
            <summary>
            Occurs after Content is Imported and Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportedContent">
            <summary>
            Occurs after Content is Exported to Xml
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportingMedia">
            <summary>
            Occurs before Exporting Media
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportedMedia">
            <summary>
            Occurs after Media is Exported to Xml
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingContentType">
            <summary>
            Occurs before Importing ContentType
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportedContentType">
            <summary>
            Occurs after ContentType is Imported and Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportingContentType">
            <summary>
            Occurs before Exporting ContentType
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportedContentType">
            <summary>
            Occurs after ContentType is Exported to Xml
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingDataType">
            <summary>
            Occurs before Importing DataType
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportedDataType">
            <summary>
            Occurs after DataType is Imported and Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportingDataType">
            <summary>
            Occurs before Exporting DataType
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportedDataType">
            <summary>
            Occurs after DataType is Exported to Xml
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingDictionaryItem">
            <summary>
            Occurs before Importing DictionaryItem
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportedDictionaryItem">
            <summary>
            Occurs after DictionaryItem is Imported and Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportingDictionaryItem">
            <summary>
            Occurs before Exporting DictionaryItem
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportedDictionaryItem">
            <summary>
            Occurs after DictionaryItem is Exported to Xml
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingMacro">
            <summary>
            Occurs before Importing Macro
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportedMacro">
            <summary>
            Occurs after Macro is Imported and Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportingMacro">
            <summary>
            Occurs before Exporting Macro
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportedMacro">
            <summary>
            Occurs after Macro is Exported to Xml
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingLanguage">
            <summary>
            Occurs before Importing Language
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportedLanguage">
            <summary>
            Occurs after Language is Imported and Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportingLanguage">
            <summary>
            Occurs before Exporting Language
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportedLanguage">
            <summary>
            Occurs after Language is Exported to Xml
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingTemplate">
            <summary>
            Occurs before Importing Template
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingStylesheets">
            <summary>
            Occurs before Importing Stylesheets
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportedTemplate">
            <summary>
            Occurs after Template is Imported and Saved
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportingTemplate">
            <summary>
            Occurs before Exporting Template
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ExportedTemplate">
            <summary>
            Occurs after Template is Exported to Xml
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportingPackage">
            <summary>
            Occurs before Importing umbraco package
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.PackagingService.ImportedPackage">
            <summary>
            Occurs after a apckage is imported
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.ServiceWithResultExtensions">
            <summary>
            These are used currently to return the temporary 'operation' interfaces for services
            which are used to return a status from operational methods so we can determine if things are
            cancelled, etc...
            
            These will be obsoleted in v8 since all real services methods will be changed to have the correct result.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.ServiceContext">
            <summary>
            The Umbraco ServiceContext, which provides access to the following services:
            <see cref="T:Umbraco.Core.Services.IContentService"/>, <see cref="T:Umbraco.Core.Services.IContentTypeService"/>, <see cref="T:Umbraco.Core.Services.IDataTypeService"/>,
            <see cref="T:Umbraco.Core.Services.IFileService"/>, <see cref="T:Umbraco.Core.Services.ILocalizationService"/> and <see cref="T:Umbraco.Core.Services.IMediaService"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ServiceContext.#ctor(Umbraco.Core.Services.IContentService,Umbraco.Core.Services.IMediaService,Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IFileService,Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Services.IPackagingService,Umbraco.Core.Services.IEntityService,Umbraco.Core.Services.IRelationService,Umbraco.Core.Services.IMemberGroupService,Umbraco.Core.Services.IMemberTypeService,Umbraco.Core.Services.IMemberService,Umbraco.Core.Services.IUserService,Umbraco.Core.Services.ISectionService,Umbraco.Core.Services.IApplicationTreeService,Umbraco.Core.Services.ITagService,Umbraco.Core.Services.INotificationService,Umbraco.Core.Services.ILocalizedTextService,Umbraco.Core.Services.IAuditService,Umbraco.Core.Services.IDomainService,Umbraco.Core.Services.ITaskService,Umbraco.Core.Services.IMacroService,Umbraco.Core.Services.IPublicAccessService,Umbraco.Core.Services.IExternalLoginService,Umbraco.Core.Services.IMigrationEntryService)">
            <summary>
            public ctor - will generally just be used for unit testing all items are optional and if not specified, the defaults will be used
            </summary>
            <param name="contentService"></param>
            <param name="mediaService"></param>
            <param name="contentTypeService"></param>
            <param name="dataTypeService"></param>
            <param name="fileService"></param>
            <param name="localizationService"></param>
            <param name="packagingService"></param>
            <param name="entityService"></param>
            <param name="relationService"></param>
            <param name="memberGroupService"></param>
            <param name="memberTypeService"></param>
            <param name="memberService"></param>
            <param name="userService"></param>
            <param name="sectionService"></param>
            <param name="treeService"></param>
            <param name="tagService"></param>
            <param name="notificationService"></param>
            <param name="localizedTextService"></param>
            <param name="auditService"></param>
            <param name="domainService"></param>
            <param name="taskService"></param>
            <param name="macroService"></param>
            <param name="publicAccessService"></param>
            <param name="externalLoginService"></param>
            <param name="migrationEntryService"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ServiceContext.#ctor(Umbraco.Core.Persistence.RepositoryFactory,Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkProvider,Umbraco.Core.Publishing.BasePublishingStrategy,Umbraco.Core.CacheHelper,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Creates a service context with a RepositoryFactory which is used to construct Services
            </summary>
            <param name="repositoryFactory"></param>
            <param name="dbUnitOfWorkProvider"></param>
            <param name="fileUnitOfWorkProvider"></param>
            <param name="publishingStrategy"></param>
            <param name="cache"></param>
            <param name="logger"></param>
            <param name="eventMessagesFactory"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ServiceContext.BuildServiceCache(Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkProvider,Umbraco.Core.Publishing.BasePublishingStrategy,Umbraco.Core.CacheHelper,Umbraco.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Builds the various services
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MigrationEntryService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMigrationEntryService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.PublicAccessService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IPublicAccessService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.TaskService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.ITaskService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.DomainService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IDomainService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.AuditService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IAuditService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.TextService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.ILocalizedTextService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.NotificationService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.INotificationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ServerRegistrationService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.ServerRegistrationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.TagService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.ITagService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MacroService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMacroService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.EntityService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IEntityService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.RelationService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IRelationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ContentService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IContentService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ContentTypeService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IContentTypeService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.DataTypeService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IDataTypeService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.FileService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IFileService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.LocalizationService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.ILocalizationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MediaService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMediaService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.PackagingService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.PackagingService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.UserService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.UserService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MemberService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.MemberService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.SectionService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.SectionService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ApplicationTreeService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.ApplicationTreeService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MemberTypeService">
            <summary>
            Gets the MemberTypeService
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MemberGroupService">
            <summary>
            Gets the MemberGroupService
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.TagExtractor">
            <summary>
            A simple utility class to extract the tag values from a property/property editor and set them on the content
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.TagExtractor.SetPropertyTags(Umbraco.Core.Models.Property,Umbraco.Core.Models.Editors.ContentPropertyData,System.Object,Umbraco.Core.PropertyEditors.SupportTagsAttribute)">
            <summary>
            Sets the tag values on the content property based on the property editor's tags attribute
            </summary>
            <param name="property"></param>
            <param name="propertyData"></param>
            <param name="convertedPropertyValue"></param>
            <param name="attribute"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.Services.TagService" -->
        <member name="M:Umbraco.Core.Services.TagService.GetTaggedContentByTagGroup(System.String)">
            <summary>
            Gets tagged Content by a specific 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Content, not the actual Content item.</remarks>
            <param name="tagGroup">Name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTaggedContentByTag(System.String,System.String)">
            <summary>
            Gets tagged Content by a specific 'Tag' and optional 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Content, not the actual Content item.</remarks>
            <param name="tag">Tag</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTaggedMediaByTagGroup(System.String)">
            <summary>
            Gets tagged Media by a specific 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Media, not the actual Media item.</remarks>
            <param name="tagGroup">Name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTaggedMediaByTag(System.String,System.String)">
            <summary>
            Gets tagged Media by a specific 'Tag' and optional 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Media, not the actual Media item.</remarks>
            <param name="tag">Tag</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTaggedMembersByTagGroup(System.String)">
            <summary>
            Gets tagged Members by a specific 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Member, not the actual Member item.</remarks>
            <param name="tagGroup">Name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTaggedMembersByTag(System.String,System.String)">
            <summary>
            Gets tagged Members by a specific 'Tag' and optional 'Tag Group'.
            </summary>
            <remarks>The <see cref="T:Umbraco.Core.Models.TaggedEntity"/> contains the Id and Tags of the Member, not the actual Member item.</remarks>
            <param name="tag">Tag</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.TaggedEntity"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetAllTags(System.String)">
            <summary>
            Gets every tag stored in the database
            </summary>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetAllContentTags(System.String)">
            <summary>
            Gets all tags for content items
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetAllMediaTags(System.String)">
            <summary>
            Gets all tags for media items
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetAllMemberTags(System.String)">
            <summary>
            Gets all tags for member items
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTagsForProperty(System.Int32,System.String,System.String)">
            <summary>
            Gets all tags attached to a property by entity id
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="contentId">The content item id to get tags for</param>
            <param name="propertyTypeAlias">Property type alias</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTagsForEntity(System.Int32,System.String)">
            <summary>
            Gets all tags attached to an entity (content, media or member) by entity id
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="contentId">The content item id to get tags for</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTagsForProperty(System.Guid,System.String,System.String)">
            <summary>
            Gets all tags attached to a property by entity id
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="contentId">The content item id to get tags for</param>
            <param name="propertyTypeAlias">Property type alias</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.TagService.GetTagsForEntity(System.Guid,System.String)">
            <summary>
            Gets all tags attached to an entity (content, media or member) by entity id
            </summary>
            <remarks>Use the optional tagGroup parameter to limit the 
            result to a specific 'Tag Group'.</remarks>
            <param name="contentId">The content item id to get tags for</param>
            <param name="tagGroup">Optional name of the 'Tag Group'</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITag"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.UserService">
            <summary>
            Represents the UserService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Membership.IProfile"/>, <see cref="T:Umbraco.Core.Models.Membership.IMembershipUser"/> and eventually Backoffice Users.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetDefaultMemberType">
            <summary>
            Gets the default MemberType alias
            </summary>
            <remarks>By default we'll return the 'writer', but we need to check it exists. If it doesn't we'll 
            return the first type that is not an admin, otherwise if there's only one we will return that one.</remarks>
            <returns>Alias of the default MemberType</returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.Exists(System.String)">
            <summary>
            Checks if a User with the username exists
            </summary>
            <param name="username">Username to check</param>
            <returns><c>True</c> if the User exists otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.CreateUserWithIdentity(System.String,System.String,Umbraco.Core.Models.Membership.IUserType)">
            <summary>
            Creates a new User
            </summary>
            <remarks>The user will be saved in the database and returned with an Id</remarks>
            <param name="username">Username of the user to create</param>
            <param name="email">Email of the user to create</param>
            <param name="userType"><see cref="T:Umbraco.Core.Models.Membership.IUserType"/> which the User should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.Umbraco#Core#Services#IMembershipMemberService{Umbraco#Core#Models#Membership#IUser}#CreateWithIdentity(System.String,System.String,System.String,System.String)">
            <summary>
            Creates and persists a new <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
            <param name="username">Username of the <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to create</param>
            <param name="email">Email of the <see cref="T:Umbraco.Core.Models.Membership.IUser"/> to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="memberTypeAlias">Alias of the Type</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.CreateUserWithIdentity(System.String,System.String,System.String,Umbraco.Core.Models.Membership.IUserType)">
            <summary>
            Creates and persists a Member
            </summary>
            <remarks>Using this method will persist the Member object before its returned 
            meaning that it will have an Id available (unlike the CreateMember method)</remarks>
            <param name="username">Username of the Member to create</param>
            <param name="email">Email of the Member to create</param>
            <param name="passwordValue">This value should be the encoded/encrypted/hashed value for the password that will be stored in the database</param>
            <param name="userType">MemberType the Member should be based on</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetById(System.Int32)">
            <summary>
            Gets a User by its integer id
            </summary>
            <param name="id"><see cref="!:System.int"/> Id</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetByProviderKey(System.Object)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.Membership.IUser"/> by its provider key
            </summary>
            <param name="id">Id to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetByEmail(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.Membership.IUser"/> by email
            </summary>
            <param name="email">Email to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetByUsername(System.String)">
            <summary>
            Get an <see cref="T:Umbraco.Core.Models.Membership.IUser"/> by username
            </summary>
            <param name="username">Username to use for retrieval</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.Delete(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
            <param name="membershipUser"><see cref="T:Umbraco.Core.Models.Membership.IUser"/> to Delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.SavePassword(Umbraco.Core.Models.Membership.IUser,System.String)">
            <summary>
            This is simply a helper method which essentially just wraps the MembershipProvider's ChangePassword method
            </summary>
            <remarks>
            This method exists so that Umbraco developers can use one entry point to create/update users if they choose to.
            </remarks>
            <param name="user">The user to save the password for</param>
            <param name="password">The password to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.Delete(Umbraco.Core.Models.Membership.IUser,System.Boolean)">
            <summary>
            Deletes or disables a User
            </summary>
            <param name="user"><see cref="T:Umbraco.Core.Models.Membership.IUser"/> to delete</param>
            <param name="deletePermanently"><c>True</c> to permanently delete the user, <c>False</c> to disable the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.Save(Umbraco.Core.Models.Membership.IUser,System.Boolean)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
            <param name="entity"><see cref="T:Umbraco.Core.Models.Membership.IUser"/> to Save</param>
            <param name="raiseEvents">Optional parameter to raise events. 
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Membership.IUser},System.Boolean)">
            <summary>
            Saves a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects
            </summary>
            <param name="entities"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to save</param>
            <param name="raiseEvents">Optional parameter to raise events. 
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.FindByEmail(System.String,System.Int32,System.Int32,System.Int32@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects by a partial email string
            </summary>
            <param name="emailStringToMatch">Partial email string to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.FindByUsername(System.String,System.Int32,System.Int32,System.Int32@,Umbraco.Core.Persistence.Querying.StringPropertyMatchType)">
            <summary>
            Finds a list of <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects by a partial username
            </summary>
            <param name="login">Partial username to match</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <param name="matchType">The type of match to make as <see cref="T:Umbraco.Core.Persistence.Querying.StringPropertyMatchType"/>. Default is <see cref="F:Umbraco.Core.Persistence.Querying.StringPropertyMatchType.StartsWith"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetCount(Umbraco.Core.Models.Membership.MemberCountType)">
            <summary>
            Gets the total number of Users based on the count type
            </summary>
            <remarks>
            The way the Online count is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
            <param name="countType"><see cref="T:Umbraco.Core.Models.Membership.MemberCountType"/> to count by</param>
            <returns><see cref="!:System.int"/> with number of Users for passed in type</returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a list of paged <see cref="T:Umbraco.Core.Models.Membership.IUser"/> objects
            </summary>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Size of the page</param>
            <param name="totalRecords">Total number of records found (out)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetProfileById(System.Int32)">
            <summary>
            Gets an IProfile by User Id.
            </summary>
            <param name="id">Id of the User to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetProfileByUserName(System.String)">
            <summary>
            Gets a profile by username
            </summary>
            <param name="username">Username</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetUserById(System.Int32)">
            <summary>
            Gets a user by Id
            </summary>
            <param name="id">Id of the user to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUser"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.ReplaceUserPermissions(System.Int32,System.Collections.Generic.IEnumerable{System.Char},System.Int32[])">
            <summary>
            Replaces the same permission set for a single user to any number of entities
            </summary>
            <remarks>If no 'entityIds' are specified all permissions will be removed for the specified user.</remarks>
            <param name="userId">Id of the user</param>
            <param name="permissions">Permissions as enumerable list of <see cref="T:System.Char"/></param>
            <param name="entityIds">Specify the nodes to replace permissions for. If nothing is specified all permissions are removed.</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.AssignUserPermission(System.Int32,System.Char,System.Int32[])">
            <summary>
            Assigns the same permission set for a single user to any number of entities
            </summary>
            <param name="userId">Id of the user</param>
            <param name="permission"></param>
            <param name="entityIds">Specify the nodes to replace permissions for</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetAllUserTypes(System.Int32[])">
            <summary>
            Gets all UserTypes or thosed specified as parameters
            </summary>
            <param name="ids">Optional Ids of UserTypes to retrieve</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.IUserType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetUserTypeByAlias(System.String)">
            <summary>
            Gets a UserType by its Alias
            </summary>
            <param name="alias">Alias of the UserType to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetUserTypeById(System.Int32)">
            <summary>
            Gets a UserType by its Id
            </summary>
            <param name="id">Id of the UserType to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetUserTypeByName(System.String)">
            <summary>
            Gets a UserType by its Name
            </summary>
            <param name="name">Name of the UserType to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IUserType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.SaveUserType(Umbraco.Core.Models.Membership.IUserType,System.Boolean)">
            <summary>
            Saves a UserType
            </summary>
            <param name="userType">UserType to save</param>
            <param name="raiseEvents">Optional parameter to raise events. 
            Default is <c>True</c> otherwise set to <c>False</c> to not raise events</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.DeleteUserType(Umbraco.Core.Models.Membership.IUserType)">
            <summary>
            Deletes a UserType
            </summary>
            <param name="userType">UserType to delete</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.DeleteSectionFromAllUsers(System.String)">
            <summary>
            Removes a specific section from all users
            </summary>
            <remarks>This is useful when an entire section is removed from config</remarks>
            <param name="sectionAlias">Alias of the section to remove</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.AddSectionToAllUsers(System.String,System.Int32[])">
            <summary>
            Add a specific section to all users or those specified as parameters
            </summary>
            <remarks>This is useful when a new section is created to allow specific users accessing it</remarks>
            <param name="sectionAlias">Alias of the section to add</param>
            <param name="userIds">Specifiying nothing will add the section to all user</param>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetPermissions(Umbraco.Core.Models.Membership.IUser,System.Int32[])">
            <summary>
            Get permissions set for a user and optional node ids
            </summary>
            <remarks>If no permissions are found for a particular entity then the user's default permissions will be applied</remarks>
            <param name="user">User to retrieve permissions for</param>
            <param name="nodeIds">Specifiying nothing will return all user permissions for all nodes</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Membership.EntityPermission"/></returns>
        </member>
        <member name="E:Umbraco.Core.Services.UserService.SavingUser">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.UserService.SavedUser">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.UserService.DeletingUser">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.UserService.DeletedUser">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.UserService.SavingUserType">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.UserService.SavedUserType">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.UserService.DeletingUserType">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.UserService.DeletedUserType">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.RemoveUserPermissions(Umbraco.Core.Services.IUserService,System.Int32,System.Int32[])">
            <summary>
            Remove all permissions for this user for all nodes specified
            </summary>
            <param name="userService"></param>
            <param name="userId"></param>
            <param name="entityIds"></param>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.RemoveUserPermissions(Umbraco.Core.Services.IUserService,System.Int32)">
            <summary>
            Remove all permissions for this user for all nodes
            </summary>
            <param name="userService"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.UserServiceExtensions.CreateUserMappingForCustomProvider(Umbraco.Core.Services.IUserService,System.Web.Security.MembershipUser)">
            <summary>
            Maps a custom provider's information to an umbraco user account
            </summary>
            <param name="userService"></param>
            <param name="member"></param>
            <remarks>
            To maintain compatibility we have to check the login name if the provider key lookup fails but otherwise
            we'll store the provider user key in the login column.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Strings.ContentBaseExtensions">
            <summary>
            Provides extension methods to IContentBase to get url segments.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.ContentBaseExtensions.GetUrlSegment(Umbraco.Core.Models.IContentBase)">
            <summary>
            Gets the default url segment for a specified content.
            </summary>
            <param name="content">The content.</param>
            <returns>The url segment.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.ContentBaseExtensions.GetUrlSegment(Umbraco.Core.Models.IContentBase,System.Globalization.CultureInfo)">
            <summary>
            Gets the url segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <returns>The url segment.</returns>
        </member>
        <member name="P:Umbraco.Core.Strings.ContentBaseExtensions.UrlSegmentProviders">
            <summary>
            Gets the url segment providers.
            </summary>
            <remarks>This is so that unit tests that do not initialize the resolver do not
            fail and fall back to defaults. When running the whole Umbraco, CoreBootManager
            does initialise the resolver.</remarks>
        </member>
        <member name="T:Umbraco.Core.Strings.Diff">
            <summary>    
            This Class implements the Difference Algorithm published in
            "An O(ND) Difference Algorithm and its Variations" by Eugene Myers
            Algorithmica Vol. 1 No. 2, 1986, p 251.  
            
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. See DiffText().     
            
            diff.cs: A port of the algorithm to C#
            Copyright (c) by Matthias Hertel, http://www.mathertel.de
            This work is licensed under a BSD style license. See http://www.mathertel.de/License.aspx    
            </summary>    
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffText(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines.
            </summary>
            <param name="textA">A-version of the text (usualy the old one)</param>
            <param name="textB">B-version of the text (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffText1(System.String,System.String)">
            <summary>
            Find the difference in 2 texts, comparing by textlines. 
            This method uses the DiffInt internally by 1st converting the string into char codes
            then uses the diff int method
            </summary>
            <param name="textA">A-version of the text (usualy the old one)</param>
            <param name="textB">B-version of the text (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffText(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find the difference in 2 text documents, comparing by textlines.
            The algorithm itself is comparing 2 arrays of numbers so when comparing 2 text documents
            each line is converted into a (hash) number. This hash-value is computed by storing all
            textlines into a common hashtable so i can find dublicates in there, and generating a 
            new number each time a new textline is inserted.
            </summary>
            <param name="textA">A-version of the text (usualy the old one)</param>
            <param name="textB">B-version of the text (usualy the new one)</param>
            <param name="trimSpace">When set to true, all leading and trailing whitespace characters are stripped out before the comparation is done.</param>
            <param name="ignoreSpace">When set to true, all whitespace characters are converted to a single space character before the comparation is done.</param>
            <param name="ignoreCase">When set to true, all characters are converted to their lowercase equivivalence before the comparation is done.</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffCharCodes(System.String,System.Boolean)">
            <summary>
            Diffs the char codes.
            </summary>
            <param name="aText">A text.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.Optimize(Umbraco.Core.Strings.Diff.DiffData)">
            <summary>
            If a sequence of modified lines starts with a line that contains the same content
            as the line that appends the changes, the difference sequence is modified so that the
            appended line and not the starting line is marked as modified.
            This leads to more readable diff sequences when comparing text files.
            </summary>
            <param name="data">A Diff data buffer containing the identified changes.</param>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffInt(System.Int32[],System.Int32[])">
            <summary>
            Find the difference in 2 arrays of integers.
            </summary>
            <param name="arrayA">A-version of the numbers (usualy the old one)</param>
            <param name="arrayB">B-version of the numbers (usualy the new one)</param>
            <returns>Returns a array of Items that describe the differences.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffCodes(System.String,System.Collections.IDictionary,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function converts all textlines of the text into unique numbers for every unique textline
            so further work can work only with simple numbers.
            </summary>
            <param name="aText">the input text</param>
            <param name="h">This extern initialized hashtable is used for storing all ever used textlines.</param>
            <param name="trimSpace">ignore leading and trailing space characters</param>
            <param name="ignoreSpace"></param>
            <param name="ignoreCase"></param>
            <returns>a array of integers.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.Sms(Umbraco.Core.Strings.Diff.DiffData,System.Int32,System.Int32,Umbraco.Core.Strings.Diff.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the algorithm to find the Shortest Middle Snake (SMS).
            </summary>
            <param name="dataA">sequence A</param>
            <param name="lowerA">lower bound of the actual range in DataA</param>
            <param name="upperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="dataB">sequence B</param>
            <param name="lowerB">lower bound of the actual range in DataB</param>
            <param name="upperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="downVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="upVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
            <returns>a MiddleSnakeData record containing x,y and u,v</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.Lcs(Umbraco.Core.Strings.Diff.DiffData,System.Int32,System.Int32,Umbraco.Core.Strings.Diff.DiffData,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            This is the divide-and-conquer implementation of the longes common-subsequence (LCS) 
            algorithm.
            The published algorithm passes recursively parts of the A and B sequences.
            To avoid copying these arrays the lower and upper bounds are passed while the sequences stay constant.
            </summary>
            <param name="dataA">sequence A</param>
            <param name="lowerA">lower bound of the actual range in DataA</param>
            <param name="upperA">upper bound of the actual range in DataA (exclusive)</param>
            <param name="dataB">sequence B</param>
            <param name="lowerB">lower bound of the actual range in DataB</param>
            <param name="upperB">upper bound of the actual range in DataB (exclusive)</param>
            <param name="downVector">a vector for the (0,0) to (x,y) search. Passed as a parameter for speed reasons.</param>
            <param name="upVector">a vector for the (u,v) to (N,M) search. Passed as a parameter for speed reasons.</param>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.CreateDiffs(Umbraco.Core.Strings.Diff.DiffData,Umbraco.Core.Strings.Diff.DiffData)">
            <summary>Scan the tables of which lines are inserted and deleted,
            producing an edit script in forward order.  
            </summary>
            dynamic array
        </member>
        <member name="T:Umbraco.Core.Strings.Diff.DiffData">
            <summary>Data on one input file being compared.  
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.DiffData.Length">
            <summary>Number of elements (lines).</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.DiffData.Data">
            <summary>Buffer of numbers that will be compared.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.DiffData.Modified">
            <summary>
            Array of booleans that flag for modified data.
            This is the result of the diff.
            This means deletedA in the first Data or inserted in the second Data.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.Diff.DiffData.#ctor(System.Int32[])">
            <summary>
            Initialize the Diff-Data buffer.
            </summary>
            <param name="initData">reference to the buffer</param>
        </member>
        <member name="T:Umbraco.Core.Strings.Diff.Item">
            <summary>details of one difference.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.Item.StartA">
            <summary>Start Line number in Data A.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.Item.StartB">
            <summary>Start Line number in Data B.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.Item.DeletedA">
            <summary>Number of changes in Data A.</summary>
        </member>
        <member name="F:Umbraco.Core.Strings.Diff.Item.InsertedB">
            <summary>Number of changes in Data B.</summary>
        </member>
        <member name="T:Umbraco.Core.Strings.Diff.Smsrd">
            <summary>
            Shortest Middle Snake Return Data
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.BatchedWebServiceServerMessenger">
            <summary>
            An <see cref="T:Umbraco.Core.Sync.IServerMessenger"/> that works by messaging servers via web services.
            </summary>
            <remarks>
            Abstract because it needs to be inherited by a class that will
            - implement ProcessBatch()
            - trigger FlushBatch() when appropriate
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.WebServiceServerMessenger">
            <summary>
            An <see cref="T:Umbraco.Core.Sync.IServerMessenger"/> that works by messaging servers via web services.
            </summary>
            <remarks>
            this messenger sends ALL instructions to ALL servers, including the local server.
            the CacheRefresher web service will run ALL instructions, so there may be duplicated,
            except for "bulk" refresh, where it excludes those coming from the local server
            </remarks>        
        </member>
        <member name="T:Umbraco.Core.Sync.ServerMessengerBase">
            <summary>
            Provides a base class for all <see cref="T:Umbraco.Core.Sync.IServerMessenger"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.IServerMessenger">
            <summary>
            Broadcasts distributed cache notifications to all servers of a load balanced environment.
            </summary>
            <remarks>Also ensures that the notification is processed on the local environment.</remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,System.Object)">
            <summary>
            Notifies the distributed cache, for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="payload">The notification content.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,System.String)">
            <summary>
            Notifies the distributed cache, for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="jsonPayload">The notification content.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh``1(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,System.Func{``0,System.Int32},``0[])">
            <summary>
            Notifies the distributed cache of specifieds item invalidation, for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <typeparam name="T">The type of the invalidated items.</typeparam>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The invalidated items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh``1(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,System.Func{``0,System.Guid},``0[])">
            <summary>
            Notifies the distributed cache of specifieds item invalidation, for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <typeparam name="T">The type of the invalidated items.</typeparam>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getGuidId">A function returning the unique identifier of items.</param>
            <param name="instances">The invalidated items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRemove``1(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,System.Func{``0,System.Int32},``0[])">
            <summary>
            Notifies all servers of specified items removal, for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <typeparam name="T">The type of the removed items.</typeparam>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="getNumericId">A function returning the unique identifier of items.</param>
            <param name="instances">The removed items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRemove(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,System.Int32[])">
            <summary>
            Notifies all servers of specified items removal, for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="numericIds">The unique identifiers of the removed items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,System.Int32[])">
            <summary>
            Notifies all servers of specified items invalidation, for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="numericIds">The unique identifiers of the invalidated items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefresh(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,System.Guid[])">
            <summary>
            Notifies all servers of specified items invalidation, for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
            <param name="guidIds">The unique identifiers of the invalidated items.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerMessenger.PerformRefreshAll(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher)">
            <summary>
            Notifies all servers of a global invalidation for a specified <see cref="T:umbraco.interfaces.ICacheRefresher"/>.
            </summary>
            <param name="servers">The servers that compose the load balanced environment.</param>
            <param name="refresher">The ICacheRefresher.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerMessengerBase.RequiresDistributed(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,Umbraco.Core.Sync.MessageType)">
            <summary>
            Determines whether to make distributed calls when messaging a cache refresher.
            </summary>
            <param name="servers">The registered servers.</param>
            <param name="refresher">The cache refresher.</param>
            <param name="messageType">The message type.</param>
            <returns>true if distributed calls are required; otherwise, false, all we have is the local server.</returns>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerMessengerBase.DeliverLocal(umbraco.interfaces.ICacheRefresher,Umbraco.Core.Sync.MessageType,System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Executes the non strongly typed <see cref="T:umbraco.interfaces.ICacheRefresher"/> on the local/current server
            </summary>
            <param name="refresher"></param>
            <param name="messageType"></param>
            <param name="ids"></param>
            <param name="json"></param>
            <remarks>
            Since this is only for non strongly typed <see cref="T:umbraco.interfaces.ICacheRefresher"/> it will throw for message types that by instance
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerMessengerBase.DeliverLocal``1(umbraco.interfaces.ICacheRefresher,Umbraco.Core.Sync.MessageType,System.Func{``0,System.Object},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Executes the strongly typed <see cref="T:Umbraco.Core.Cache.ICacheRefresher`1"/> on the local/current server
            </summary>
            <typeparam name="T"></typeparam>
            <param name="refresher"></param>
            <param name="messageType"></param>
            <param name="getId"></param>
            <param name="instances"></param>
            <remarks>
            Since this is only for strongly typed <see cref="T:Umbraco.Core.Cache.ICacheRefresher`1"/> it will throw for message types that are not by instance
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.WebServiceServerMessenger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.WebServiceServerMessenger"/> class.
            </summary>
            <remarks>Distribution is disabled.</remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.WebServiceServerMessenger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.WebServiceServerMessenger"/> class with a login and a password.
            </summary>
            <param name="login">The login.</param>
            <param name="password">The password.</param>
            <remarks>Distribution will be enabled based on the umbraco config setting.</remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.WebServiceServerMessenger.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.WebServiceServerMessenger"/> class with a login and a password
            and a value indicating whether distribution is enabled.
            </summary>
            <param name="login">The login.</param>
            <param name="password">The password.</param>
            <param name="distributedEnabled">A value indicating whether distribution is enabled.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.WebServiceServerMessenger.#ctor(System.Func{System.Tuple{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.WebServiceServerMessenger"/> with a function providing
            a login and a password.
            </summary>
            <param name="getLoginAndPassword">A function providing a login and a password.</param>
            <remarks>Distribution will be enabled based on the umbraco config setting.</remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.IServerRegistrar2">
            <summary>
            Provides server registrations to the distributed cache.
            </summary>
            <remarks>This interface exists because IServerRegistrar could not be modified
            for backward compatibility reasons - but IServerRegistrar is broken because it
            does not support server role management. So ppl should really implement
            IServerRegistrar2, and the two interfaces will get merged in v8.</remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.IServerRegistrar">
            <summary>
            Provides server registrations to the distributed cache.
            </summary>
            <remarks>You should implement IServerRegistrar2 instead.</remarks>
        </member>
        <member name="P:Umbraco.Core.Sync.IServerRegistrar.Registrations">
            <summary>
            Gets the server registrations.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerRegistrar2.GetCurrentServerRole">
            <summary>
            Gets the role of the current server in the application environment.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.IServerRegistrar2.GetCurrentServerUmbracoApplicationUrl">
            <summary>
            Gets the current umbraco application url.
            </summary>
            <remarks>
            <para>If the registrar does not provide the umbraco application url, should return null.</para>
            <para>Must return null, or a url that ends with SystemDirectories.Umbraco, and contains a scheme, eg "http://www.mysite.com/umbraco".</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.ServerRole">
            <summary>
            The role of a server in an application environment.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Sync.ServerRole.Unknown">
            <summary>
            The server role is unknown.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Sync.ServerRole.Single">
            <summary>
            The server is the single server of a single-server environment.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Sync.ServerRole.Slave">
            <summary>
            In a multi-servers environment, the server is a slave server.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Sync.ServerRole.Master">
            <summary>
            In a multi-servers environment, the server is the master server.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.DatabaseServerMessenger">
            <summary>
            An <see cref="T:Umbraco.Core.Sync.IServerMessenger"/> that works by storing messages in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.Boot">
            <summary>
            Boots the messenger.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            Callers MUST ensure thread-safety.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.Initialize">
            <summary>
            Initializes a server that has never synchronized before.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            Callers MUST ensure thread-safety.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.Sync">
            <summary>
            Synchronize the server (throttled).
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.ProcessDatabaseInstructions">
            <summary>
            Process instructions from the database.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.PruneOldInstructions">
            <summary>
            Remove old instructions from the database
            </summary>
            <remarks>
            Always leave the last (most recent) record in the db table, this is so that not all instructions are removed which would cause
            the site to cold boot if there's been no instruction activity for more than DaysToRetainInstructions.
            See: http://issues.umbraco.org/issue/U4-7643#comment=67-25085
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.EnsureInstructions">
            <summary>
            Ensure that the last instruction that was processed is still in the database.
            </summary>
            <remarks>If the last instruction is not in the database anymore, then the messenger
            should not try to process any instructions, because some instructions might be lost,
            and it should instead cold-boot.</remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.ReadLastSynced">
            <summary>
            Reads the last-synced id from file into memory.
            </summary>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessenger.SaveLastSynced(System.Int32)">
            <summary>
            Updates the in-memory last-synced id and persists it to file.
            </summary>
            <param name="id">The id.</param>
            <remarks>
            Thread safety: this is NOT thread safe. Because it is NOT meant to run multi-threaded.
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Sync.DatabaseServerMessenger.LocalIdentity">
            <summary>
            Gets the unique local identity of the executing AppDomain.
            </summary>
            <remarks>
            <para>It is not only about the "server" (machine name and appDomainappId), but also about
            an AppDomain, within a Process, on that server - because two AppDomains running at the same
            time on the same server (eg during a restart) are, practically, a LB setup.</para>
            <para>Practically, all we really need is the guid, the other infos are here for information
            and debugging purposes.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessenger.SyncFilePath">
            <summary>
            Gets the sync file path for the local server.
            </summary>
            <returns>The sync file path for the local server.</returns>
        </member>
        <member name="T:Umbraco.Core.Sync.DatabaseServerMessengerOptions">
            <summary>
            Provides options to the <see cref="T:Umbraco.Core.Sync.DatabaseServerMessenger"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerMessengerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.DatabaseServerMessengerOptions"/> with default values.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.MaxProcessingInstructionCount">
            <summary>
            The maximum number of instructions that can be processed at startup; otherwise the server cold-boots (rebuilds its caches).
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.InitializingCallbacks">
            <summary>
            A list of callbacks that will be invoked if the lastsynced.txt file does not exist.
            </summary>
            <remarks>
            These callbacks will typically be for eg rebuilding the xml cache file, or examine indexes, based on
            the data in the database to get this particular server node up to date.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.DaysToRetainInstructions">
            <summary>
            The number of days to keep instructions in the database; records older than this number will be pruned.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerMessengerOptions.ThrottleSeconds">
            <summary>
            The number of seconds to wait between each sync operations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.DatabaseServerRegistrarOptions">
            <summary>
            Provides options to the <see cref="T:Umbraco.Core.Sync.DatabaseServerRegistrar"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerRegistrarOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.DatabaseServerRegistrarOptions"/> class with default values.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerRegistrarOptions.RecurringSeconds">
            <summary>
            The amount of seconds to wait between calls to the database on the background thread
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerRegistrarOptions.StaleServerTimeout">
            <summary>
            The time span to wait before considering a server stale, after it has last been accessed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.RefreshType">
            <summary>
            Gets or sets the refresh action type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.RefresherId">
            <summary>
            Gets or sets the refresher unique identifier.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.GuidId">
            <summary>
            Gets or sets the Guid data value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.IntId">
            <summary>
            Gets or sets the int data value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.JsonIds">
            <summary>
            Gets or sets the ids data value.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.RefreshInstruction.JsonPayload">
            <summary>
            Gets or sets the payload data value.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.RefreshInstructionEnvelope">
            <summary>
            Used for any 'Batched' <see cref="T:Umbraco.Core.Sync.IServerMessenger"/> instances which specifies a set of <see cref="T:Umbraco.Core.Sync.RefreshInstruction"/> targeting a collection of 
            <see cref="T:Umbraco.Core.Sync.IServerAddress"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.ApplicationUrlHelper">
            <summary>
            A helper used to determine the current server umbraco application url.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.ApplicationUrlHelper.ApplicationUrlProvider">
            <summary>
            Gets or sets a custom provider for the umbraco application url.
            </summary>
            <remarks>
            <para>Receives the current request as a parameter, and it may be null. Must return a properly
            formatted url with scheme and umbraco dir and no trailing slash eg "http://www.mysite.com/umbraco",
            or <c>null</c>. To be used in auto-load-balancing scenarios where the application url is not
            in config files but is determined programmatically.</para>
            <para>Must be assigned before resolution is frozen.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Sync.RefreshMethodType">
            <summary>
            Describes <see cref="T:Umbraco.Core.Sync.RefreshInstruction"/> refresh action type.
            </summary>
        </member>
        <member name="T:Umbraco.Core.TopologicalSorter">
            <summary>
            Topological Sort algorithm for sorting items based on dependencies.
            Use the static method TopologicalSorter.GetSortedItems for a convenient 
            way of sorting a list of items with dependencies between them.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Strings.DefaultUrlSegmentProvider">
            <summary>
            Default implementation of IUrlSegmentProvider.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Strings.IUrlSegmentProvider">
            <summary>
            Provides url segments for content.
            </summary>
            <remarks>Url segments should comply with IETF RFCs regarding content, encoding, etc.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IUrlSegmentProvider.GetUrlSegment(Umbraco.Core.Models.IContentBase)">
            <summary>
            Gets the default url segment for a specified content.
            </summary>
            <param name="content">The content.</param>
            <returns>The url segment.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IUrlSegmentProvider.GetUrlSegment(Umbraco.Core.Models.IContentBase,System.Globalization.CultureInfo)">
            <summary>
            Gets the url segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <returns>The url segment.</returns>
            <remarks>This is for when Umbraco is capable of managing more than one url
            per content, in 1-to-1 multilingual configurations. Then there would be one
            url per culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultUrlSegmentProvider.GetUrlSegment(Umbraco.Core.Models.IContentBase)">
            <summary>
            Gets the default url segment for a specified content.
            </summary>
            <param name="content">The content.</param>
            <returns>The url segment.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultUrlSegmentProvider.GetUrlSegment(Umbraco.Core.Models.IContentBase,System.Globalization.CultureInfo)">
            <summary>
            Gets the url segment for a specified content and culture.
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture.</param>
            <returns>The url segment.</returns>
        </member>
        <member name="T:Umbraco.Core.Strings.UrlSegmentProviderResolver">
            <summary>
            Resolves IUrlSegmentProvider objects.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.UrlSegmentProviderResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Strings.UrlSegmentProviderResolver"/> class with an initial list of provider types.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="providerTypes">The list of provider types.</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.UrlSegmentProviderResolver.#ctor(System.IServiceProvider,Umbraco.Core.Logging.ILogger,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Strings.UrlSegmentProviderResolver"/> class with an initial list of provider types.
            </summary>
            <param name="serviceProvider"></param>
            <param name="logger"></param>
            <param name="providerTypes">The list of provider types.</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="P:Umbraco.Core.Strings.UrlSegmentProviderResolver.Providers">
            <summary>
            Gets the providers.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.DatabaseServerRegistrar">
            <summary>
            A registrar that stores registered server nodes in the database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerRegistrar.#ctor(System.Lazy{Umbraco.Core.Services.IServerRegistrationService},Umbraco.Core.Sync.DatabaseServerRegistrarOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.DatabaseServerRegistrar"/> class.
            </summary>
            <param name="registrationService">The registration service.</param>
            <param name="options">Some options.</param>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerRegistrar.GetCurrentServerRole">
            <summary>
            Gets the role of the current server in the application environment.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.DatabaseServerRegistrar.GetCurrentServerUmbracoApplicationUrl">
            <summary>
            Gets the current umbraco application url.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerRegistrar.Options">
            <summary>
            Gets or sets the registrar options.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Sync.DatabaseServerRegistrar.Registrations">
            <summary>
            Gets the registered servers.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.ServerSyncWebServiceClient">
            <summary>
            The client Soap service for making distrubuted cache calls between servers
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.#ctor">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BulkRefresh(Umbraco.Core.Sync.RefreshInstruction[],System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BeginBulkRefresh(Umbraco.Core.Sync.RefreshInstruction[],System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.EndBulkRefresh(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.RefreshAll(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BeginRefreshAll(System.Guid,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.EndRefreshAll(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.RefreshByJson(System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BeginRefreshByJson(System.Guid,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.EndRefreshByJson(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.RefreshByGuid(System.Guid,System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BeginRefreshByGuid(System.Guid,System.Guid,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.EndRefreshByGuid(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.RefreshById(System.Guid,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BeginRefreshById(System.Guid,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.EndRefreshById(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.RefreshByIds(System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BeginRefreshByIds(System.Guid,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.EndRefreshByIds(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.RemoveById(System.Guid,System.Int32,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BeginRemoveById(System.Guid,System.Int32,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.EndRemoveById(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.GetRefreshers(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.BeginGetRefreshers(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerSyncWebServiceClient.EndGetRefreshers(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Umbraco.Core.Sync.ConfigServerAddress">
            <summary>
            Provides the address of a server based on the Xml configuration.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.MessageType">
            <summary>
            The message type to be used for syncing across servers.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.ServerMessengerResolver">
            <summary>
            Resolves the IServerMessenger object.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerMessengerResolver.#ctor(Umbraco.Core.Sync.IServerMessenger)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.ServerMessengerResolver"/> class with a messenger.
            </summary>
            <param name="factory">An instance of a messenger.</param>
            <remarks>The resolver is created by the <c>CoreBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerMessengerResolver.SetServerMessenger(Umbraco.Core.Sync.IServerMessenger)">
            <summary>
            Sets the messenger.
            </summary>
            <param name="serverMessenger">The messenger.</param>
        </member>
        <member name="P:Umbraco.Core.Sync.ServerMessengerResolver.Messenger">
            <summary>
            Gets the messenger.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.ServerRegistrarResolver">
            <summary>
            Resolves the IServerRegistrar object.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerRegistrarResolver.#ctor(Umbraco.Core.Sync.IServerRegistrar)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Sync.ServerRegistrarResolver"/> class with a registrar.
            </summary>
            <param name="factory">An instance of a registrar.</param>
            <remarks>The resolver is created by the <c>CoreBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Core.Sync.ServerRegistrarResolver.SetServerRegistrar(Umbraco.Core.Sync.IServerRegistrar)">
            <summary>
            Sets the registrar.
            </summary>
            <param name="serverRegistrar">The registrar.</param>
            <remarks>For developers, at application startup.</remarks>
        </member>
        <member name="P:Umbraco.Core.Sync.ServerRegistrarResolver.Registrar">
            <summary>
            Gets the registrar.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Sync.ConfigServerRegistrar">
            <summary>
            Provides server registrations to the distributed cache by reading the legacy Xml configuration
            in umbracoSettings to get the list of (manually) configured server nodes.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Strings.Utf8ToAsciiConverter">
            <summary>
            Provides methods to convert Utf8 text to Ascii.
            </summary>
            <remarks>
            <para>Tries to match characters such as accented eg "é" to Ascii equivalent eg "e".</para>
            <para>Converts all "whitespace" characters to a single whitespace.</para>
            <para>Removes all non-Utf8 (unicode) characters, so in fact it can sort-of "convert" Unicode to Ascii.</para>
            <para>Replaces symbols with '?'.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.Utf8ToAsciiConverter.ToAsciiString(System.String)">
            <summary>
            Converts an Utf8 string into an Ascii string.
            </summary>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Utf8ToAsciiConverter.ToAsciiCharArray(System.String)">
            <summary>
            Converts an Utf8 string into an array of Ascii characters.
            </summary>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.Utf8ToAsciiConverter.ToAscii(System.Char[],System.Char[])">
            <summary>
            Converts an array of Utf8 characters into an array of Ascii characters.
            </summary>
            <param name="input">The input array.</param>
            <param name="output">The output array.</param>
            <returns>The number of characters in the output array.</returns>
            <remarks>The caller must ensure that the output array is big enough.</remarks>
            <exception cref="T:System.OverflowException">The output array is not big enough.</exception>
        </member>
        <member name="M:Umbraco.Core.Strings.Utf8ToAsciiConverter.ToAscii(System.Char[],System.Int32,System.Char[],System.Int32@)">
            <summary>
            Converts the character at position <paramref name="ipos"/> in input array of Utf8 characters <paramref name="input"/>
            and writes the converted value to output array of Ascii characters <paramref name="output"/> at position <paramref name="opos"/>,
            and increments that position accordingly.
            </summary>
            <param name="input">The input array.</param>
            <param name="ipos">The input position.</param>
            <param name="output">The output array.</param>
            <param name="opos">The output position.</param>
            <remarks>
            <para>Adapted from various sources on the 'net including <c>Lucene.Net.Analysis.ASCIIFoldingFilter</c>.</para>
            <para>Input should contain Utf8 characters exclusively and NOT Unicode.</para>
            <para>Removes controls, normalizes whitespaces, replaces symbols by '?'.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Strings.CleanStringType">
            <summary>
            Specifies the type of a clean string.
            </summary>
            <remarks>
            <para>Specifies its casing, and its encoding.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.CaseMask">
            <summary>
            Flag mask for casing.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.PascalCase">
            <summary>
            Pascal casing eg "PascalCase".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.CamelCase">
            <summary>
            Camel casing eg "camelCase".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Unchanged">
            <summary>
            Unchanged casing eg "UncHanGed".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.LowerCase">
            <summary>
            Lower casing eg "lowercase".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.UpperCase">
            <summary>
            Upper casing eg "UPPERCASE".
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.UmbracoCase">
            <summary>
            Umbraco "safe alias" case.
            </summary>
            <remarks>Uppercases the first char of each term except for the first
            char of the string, everything else including the first char of the
            string is unchanged.</remarks>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.CodeMask">
            <summary>
            Flag mask for encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Unicode">
            <summary>
            Unicode encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Utf8">
            <summary>
            Utf8 encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Ascii">
            <summary>
            Ascii encoding.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.RoleMask">
            <summary>
            Flag mask for role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.UrlSegment">
            <summary>
             Url role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.Alias">
            <summary>
            Alias role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.FileName">
            <summary>
            FileName role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.ConvertCase">
            <summary>
            ConvertCase role.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Strings.CleanStringType.UnderscoreAlias">
            <summary>
            UnderscoreAlias role.
            </summary>
            <remarks>This is Alias + leading underscore.</remarks>
        </member>
        <member name="T:Umbraco.Core.Strings.ShortStringHelperResolver">
            <summary>
            Resolves the IShortStringHelper object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.ShortStringHelperResolver.#ctor(Umbraco.Core.Strings.IShortStringHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Strings.ShortStringHelperResolver"/> class with an instance of a helper.
            </summary>
            <param name="helper">A instance of a helper.</param>
            <remarks>The resolver is created by the <c>CoreBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.ShortStringHelperResolver.SetHelper(Umbraco.Core.Strings.IShortStringHelper)">
            <summary>
            Sets the helper.
            </summary>
            <param name="helper">The helper.</param>
            <remarks>For developers, at application startup.</remarks>
        </member>
        <member name="P:Umbraco.Core.Strings.ShortStringHelperResolver.Helper">
            <summary>
            Gets the helper.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Strings.IShortStringHelper">
            <summary>
            Provides string functions for short strings such as aliases or url segments.
            </summary>
            <remarks>Not necessarily optimized to work on large bodies of text.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.Freeze">
            <summary>
            Freezes the helper so it can prevents its configuration from being modified.
            </summary>
            <remarks>Will be called by <c>ShortStringHelperResolver</c> when resolution freezes.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.GetShortStringServicesJavaScript(System.String)">
            <summary>
            Gets the JavaScript code defining client-side short string services.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForSafeAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>
            <para>The string will be cleaned in the context of the IShortStringHelper default culture.</para>
            <para>A safe alias is [a-z][a-zA-Z0-9_]* although legacy will also accept '-', and '_' at the beginning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForSafeAlias(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForUrlSegment(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an url segment.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe url segment.</returns>
            <remarks>The string will be cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForUrlSegment(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an url segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe url segment.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForSafeFileName(System.String)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but that issue is not documented.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanStringForSafeFileName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but that issue is not documented.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.SplitPascalCasing(System.String,System.Char)">
            <summary>
            Splits a pascal-cased string by inserting a separator in between each term.
            </summary>
            <param name="text">The text to split.</param>
            <param name="separator">The separator.</param>
            <returns>The splitted string.</returns>
            <remarks>Supports Utf8 and Ascii strings, not Unicode strings.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.ReplaceMany(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns a new string in which all occurences of specified strings are replaced by other specified strings.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="replacements">The replacements definition.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.ReplaceMany(System.String,System.Char[],System.Char)">
            <summary>
            Returns a new string in which all occurences of specified characters are replaced by a specified character.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="chars">The characters to replace.</param>
            <param name="replacement">The replacement character.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType)">
            <summary>
            Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char)">
            <summary>
            Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.IShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="T:Umbraco.Core.Strings.LegacyShortStringHelper">
            <summary>
            Legacy implementation of string functions for short strings such as aliases or url segments.
            </summary>
            <remarks>
            <para>Not necessarily optimized to work on large bodies of text.</para>
            <para>Can expose surprising or bogus behavior.</para>
            <para>Uses invariant culture everywhere.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.Freeze">
            <summary>
            Freezes the helper so it can prevents its configuration from being modified.
            </summary>
            <remarks>Will be called by <c>ShortStringHelperResolver</c> when resolution freezes.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.GetShortStringServicesJavaScript(System.String)">
            <summary>
            Gets the JavaScript code defining client-side short string services.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.CleanStringForSafeAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>The string will be cleaned in the context of invariant culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.CleanStringForSafeAlias(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
            <remarks>Legacy does not support culture contexts.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.CleanStringForUrlSegment(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an url segment, in the context of the invariant culture.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe url segment.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.CleanStringForUrlSegment(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used in an url segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe url segment.</returns>
            <remarks>Legacy does not support culture contexts.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.CleanStringForSafeFileName(System.String)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but that issue is not documented.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.CleanStringForSafeFileName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy does not support culture contexts.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.SplitPascalCasing(System.String,System.Char)">
            <summary>
            Splits a pascal-cased string by inserting a separator in between each term.
            </summary>
            <param name="text">The text to split.</param>
            <param name="separator">The separator.</param>
            <returns>The splitted string.</returns>
            <remarks>Probably only supports Ascii strings.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.LegacyCleanStringForUmbracoAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>The string will be cleaned in the context of invariant culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.LegacyConvertStringCase(System.String,Umbraco.Core.Strings.CleanStringType)">
            <summary>
            Filters a string to convert case, and more.
            </summary>
            <param name="phrase">the text to filter.</param>
            <param name="cases">The string case type.</param>
            <returns>The filtered text.</returns>
            <remarks>
            <para>This is the legacy method, so we can't really change it, although it has issues (see unit tests).</para>
            <para>It does more than "converting the case", and also remove spaces, etc.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.LegacyToUrlAlias(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts string to a URL alias.
            </summary>
            <param name="value">The value.</param>
            <param name="charReplacements">The char replacements.</param>
            <param name="replaceDoubleDashes">if set to <c>true</c> replace double dashes.</param>
            <param name="stripNonAscii">if set to <c>true</c> strip non ASCII.</param>
            <param name="urlEncode">if set to <c>true</c> URL encode.</param>
            <returns></returns>
            <remarks>
            This ensures that ONLY ascii chars are allowed and of those ascii chars, only digits and lowercase chars, all
            punctuation, etc... are stripped out, however this method allows you to pass in string's to replace with the
            specified replacement character before the string is converted to ascii and it has invalid characters stripped out.
            This allows you to replace strings like &amp; , etc.. with your replacement character before the automatic
            reduction.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.LegacyFormatUrl(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an url segment.
            </summary>
            <param name="url">The text to filter.</param>
            <returns>The safe url segment.</returns>
            <remarks>
            <para>Uses <c>UmbracoSettings.UrlReplaceCharacters</c>
             and <c>UmbracoSettings.RemoveDoubleDashesFromUrlReplacing</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.ReplaceMany(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns a new string in which all occurences of specified strings are replaced by other specified strings.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="replacements">The replacements definition.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.LegacyShortStringHelper.ReplaceMany(System.String,System.Char[],System.Char)">
            <summary>
            Returns a new string in which all occurences of specified characters are replaced by a specified character.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="chars">The characters to replace.</param>
            <param name="replacement">The replacement character.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="T:Umbraco.Core.Strings.StringAliasCaseTypeExtensions">
            <summary>
            Provides extension methods to StringAliasCaseType to facilitate migration to CleanStringType.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.StringAliasCaseTypeExtensions.ToCleanStringType(Umbraco.Core.StringAliasCaseType)">
            <summary>
            Gets the CleanStringType value corresponding to the StringAliasCaseType value.
            </summary>
            <param name="aliasCaseType">The value.</param>
            <returns>A CleanStringType value corresponding to the StringAliasCaseType value.</returns>
        </member>
        <member name="T:Umbraco.Core.Strings.DefaultShortStringHelper">
            <summary>
            New default implementation of string functions for short strings such as aliases or url segments.
            </summary>
            <remarks>
            <para>Not optimized to work on large bodies of text.</para>
            <para>Meant to replace <c>LegacyShortStringHelper</c> where/when backward compatibility is not an issue.</para>
            <para>NOTE: pre-filters run _before_ the string is re-encoded.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.Freeze">
            <summary>
            Freezes the helper so it can prevents its configuration from being modified.
            </summary>
            <remarks>Will be called by <c>ShortStringHelperResolver</c> when resolution freezes.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.ApplyUrlReplaceCharacters(System.String)">
            <summary>
            Returns a new string in which characters have been replaced according to the Umbraco settings UrlReplaceCharacters.
            </summary>
            <param name="s">The string to filter.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.WithDefaultCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets a default culture.
            </summary>
            <param name="culture">The default culture.</param>
            <returns>The short string helper.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.WithDefaultConfig">
            <summary>
            Sets the default configuration.
            </summary>
            <returns>The short string helper.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.GetShortStringServicesJavaScript(System.String)">
            <summary>
            Gets the JavaScript code defining client-side short string services.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForSafeAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>
            <para>The string will be cleaned in the context of the default culture.</para>
            <para>Safe aliases are Ascii only.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForSafeAlias(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
            <remarks>
            <para>Safe aliases are Ascii only.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForUrlSegment(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an url segment.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe url segment.</returns>
            <remarks>
            <para>The string will be cleaned in the context of the default culture.</para>
            <para>Url segments are Ascii only (no accents...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForUrlSegment(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an url segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe url segment.</returns>
            <remarks>
            <para>Url segments are Ascii only (no accents...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForSafeFileName(System.String)">
            <summary>
            Cleans a string, in the context of the default culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
            <remarks>Legacy says this was used to "overcome an issue when Umbraco is used in IE in an intranet environment" but that issue is not documented.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanStringForSafeFileName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType)">
            <summary>
            Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char)">
            <summary>
            Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.CleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.SplitPascalCasing(System.String,System.Char)">
            <summary>
            Splits a Pascal-cased string into a phrase separated by a separator.
            </summary>
            <param name="text">The text to split.</param>
            <param name="separator">The separator, which defaults to a whitespace.</param>
            <returns>The splitted text.</returns>
            <remarks>Supports Utf8 and Ascii strings, not Unicode strings.</remarks>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.ReplaceMany(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns a new string in which all occurences of specified strings are replaced by other specified strings.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="replacements">The replacements definition.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.Strings.DefaultShortStringHelper.ReplaceMany(System.String,System.Char[],System.Char)">
            <summary>
            Returns a new string in which all occurences of specified characters are replaced by a specified character.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="chars">The characters to replace.</param>
            <param name="replacement">The replacement character.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ApplicationTree.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ApplicationTree"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ApplicationTree.#ctor(System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.ApplicationTree"/> class.
            </summary>
            <param name="initialize">if set to <c>true</c> [initialize].</param>
            <param name="sortOrder">The sort order.</param>
            <param name="applicationAlias">The application alias.</param>
            <param name="alias">The tree alias.</param>
            <param name="title">The tree title.</param>
            <param name="iconClosed">The icon closed.</param>
            <param name="iconOpened">The icon opened.</param>
            <param name="type">The tree type.</param>
        </member>
        <member name="M:Umbraco.Core.Models.ApplicationTree.GetRuntimeType">
            <summary>
            Returns the CLR type based on it's assembly name stored in the config
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.ApplicationTree.Initialize">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Umbraco.Core.Models.ApplicationTree"/> should initialize.
            </summary>
            <value><c>true</c> if initialize; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Models.ApplicationTree.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
            <value>The sort order.</value>
        </member>
        <member name="P:Umbraco.Core.Models.ApplicationTree.ApplicationAlias">
            <summary>
            Gets the application alias.
            </summary>
            <value>The application alias.</value>
        </member>
        <member name="P:Umbraco.Core.Models.ApplicationTree.Alias">
            <summary>
            Gets the tree alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Umbraco.Core.Models.ApplicationTree.Title">
            <summary>
            Gets or sets the tree title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Umbraco.Core.Models.ApplicationTree.IconClosed">
            <summary>
            Gets or sets the icon closed.
            </summary>
            <value>The icon closed.</value>
        </member>
        <member name="P:Umbraco.Core.Models.ApplicationTree.IconOpened">
            <summary>
            Gets or sets the icon opened.
            </summary>
            <value>The icon opened.</value>
        </member>
        <member name="P:Umbraco.Core.Models.ApplicationTree.Type">
            <summary>
            Gets or sets the tree type assembly name.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.GetAppTrees">
            <summary>
            The main entry point to get application trees
            </summary>
            <remarks>
            This lazily on first access will scan for plugin trees and ensure the trees.config is up-to-date with the plugins. If plugins
            haven't changed on disk then the file will not be saved. The trees are all then loaded from this config file into cache and returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.Intitialize(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ApplicationTree})">
            <summary>
            Initializes the service with any trees found in plugins
            </summary>
            <param name="allAvailableTrees">
            A collection of all available tree found in assemblies in the application
            </param>
            <remarks>
            This will update the trees.config with the found tree plugins that are not currently listed in the file when the first
            access is made to resolve the tree collection
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.MakeNew(System.Boolean,System.Byte,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new application tree.
            </summary>
            <param name="initialize">if set to <c>true</c> [initialize].</param>
            <param name="sortOrder">The sort order.</param>
            <param name="applicationAlias">The application alias.</param>
            <param name="alias">The alias.</param>
            <param name="title">The title.</param>
            <param name="iconClosed">The icon closed.</param>
            <param name="iconOpened">The icon opened.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.SaveTree(Umbraco.Core.Models.ApplicationTree)">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.DeleteTree(Umbraco.Core.Models.ApplicationTree)">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.GetByAlias(System.String)">
            <summary>
            Gets an ApplicationTree by it's tree alias.
            </summary>
            <param name="treeAlias">The tree alias.</param>
            <returns>An ApplicationTree instance</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.GetAll">
            <summary>
            Gets all applicationTrees registered in umbraco from the umbracoAppTree table..
            </summary>
            <returns>Returns a ApplicationTree Array</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.GetApplicationTrees(System.String)">
            <summary>
            Gets the application tree for the applcation with the specified alias
            </summary>
            <param name="applicationAlias">The application alias.</param>
            <returns>Returns a ApplicationTree Array</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.GetApplicationTrees(System.String,System.Boolean)">
            <summary>
            Gets the application tree for the applcation with the specified alias
            </summary>
            <param name="applicationAlias">The application alias.</param>
            <param name="onlyInitialized"></param>
            <returns>Returns a ApplicationTree Array</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ApplicationTreeService.LoadXml(System.Func{System.Xml.Linq.XDocument,System.Boolean},System.Boolean)">
            <summary>
            Loads in the xml structure from disk if one is found, otherwise loads in an empty xml structure, calls the 
            callback with the xml document and saves the structure back to disk if saveAfterCallback is true.
            </summary>
            <param name="callback"></param>
            <param name="saveAfterCallbackIfChanges"></param>
        </member>
        <member name="P:Umbraco.Core.Services.ApplicationTreeService.TreeConfigFilePath">
            <summary>
            gets/sets the trees.config file path
            </summary>
            <remarks>
            The setter is generally only going to be used in unit tests, otherwise it will attempt to resolve it using the IOHelper.MapPath
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetMemberIgnoreCase(System.Type,System.Object,System.String)">
            <summary>
            Tries to return a value based on a property name for an object but ignores case sensitivity
            </summary>
            <param name="type"></param>
            <param name="target"></param>
            <param name="memberName"></param>
            <returns></returns>
            <remarks>
            Currenty this will only work for ProperCase and camelCase properties, see the TODO below to enable complete case insensitivity
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Checks if the type is an anonymous type
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            reference: http://jclaes.blogspot.com/2011/05/checking-for-anonymous-types.html
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.HasParameters(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Determines whether the specified type is enumerable.
            </summary>
            <param name="method">The type.</param>
            <param name="parameterTypes"></param>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsEnumerable(System.Type)">
            <returns>
              <c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsOfGenericType(System.Type,System.Type)">
            <summary>
            Determines whether [is of generic type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <param name="genericType">Type of the generic.</param>
            <returns>
              <c>true</c> if [is of generic type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.TryGetGenericArguments(System.Type,System.Type,System.Type[]@)">
            <summary>
            Will find the generic type of the 'type' parameter passed in that is equal to the 'genericType' parameter passed in
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="genericArgType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetAllProperties(System.Type)">
            <summary>
            Gets all properties in a flat hierarchy
            </summary>
            <remarks>Includes both Public and Non-Public properties</remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetPublicProperties(System.Type)">
            <summary>
            Returns all public properties including inherited properties even for interfaces
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            taken from http://stackoverflow.com/questions/358835/getproperties-to-return-all-properties-for-an-interface-inheritance-hierarchy
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsType``1(System.Type)">
            <summary>
            Determines whether the specified actual type is type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actualType">The actual type.</param>
            <returns>
              <c>true</c> if the specified actual type is type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetFullNameWithAssembly(System.Type)">
            <summary>
            Returns the full type name with the assembly but without all of the assembly specific version information.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            This method is like an 'inbetween' of Type.FullName and Type.AssemblyQualifiedName which returns the type and the assembly separated
            by a comma.
            </remarks>
            <example>
            The output of this class would be:
            
            Umbraco.Core.TypeExtensions, Umbraco.Core
            </example>
        </member>
        <member name="T:Umbraco.Core.ReadLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources. 
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ReadLock"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Core.TypeFinder">
            <summary>
            A utility class to find all classes of a certain type by reflection in the current bin folder
            of the web application.
            </summary>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetAllAssemblies">
            <summary>
            lazily load a reference to all assemblies and only local assemblies.
            This is a modified version of: http://www.dominicpettifer.co.uk/Blog/44/how-to-get-a-reference-to-all-assemblies-in-the--bin-folder
            </summary>
            <remarks>
            We do this because we cannot use AppDomain.Current.GetAssemblies() as this will return only assemblies that have been
            loaded in the CLR, not all assemblies.
            See these threads:
            http://issues.umbraco.org/issue/U5-198
            http://stackoverflow.com/questions/3552223/asp-net-appdomain-currentdomain-getassemblies-assemblies-missing-after-app
            http://stackoverflow.com/questions/2477787/difference-between-appdomain-getassemblies-and-buildmanager-getreferencedassembl
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetAssembliesWithKnownExclusions(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Return a list of found local Assemblies excluding the known assemblies we don't want to scan
            and exluding the ones passed in and excluding the exclusion list filter, the results of this are
            cached for perforance reasons.
            </summary>
            <param name="excludeFromResults"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetFilteredAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String[])">
            <summary>
            Return a distinct list of found local Assemblies and exluding the ones passed in and excluding the exclusion list filter
            </summary>
            <param name="excludeFromResults"></param>
            <param name="exclusionFilter"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Core.TypeFinder.KnownAssemblyExclusionFilter">
            <summary>
            this is our assembly filter to filter out known types that def dont contain types we'd like to find or plugins
            </summary>
            <remarks>
            NOTE the comma vs period... comma delimits the name in an Assembly FullName property so if it ends with comma then its an exact name match
            NOTE this means that "foo." will NOT exclude "foo.dll" but only "foo.*.dll"
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfTypeWithAttribute``2">
            <summary>
            Finds any classes derived from the type T that contain the attribute TAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfTypeWithAttribute``2(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds any classes derived from the type T that contain the attribute TAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfTypeWithAttribute``2(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds any classes derived from the type T that contain the attribute TAttribute
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfTypeWithAttribute``1(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds any classes derived from the assignTypeFrom Type that contain the attribute TAttribute
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="assignTypeFrom"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfType``1">
            <summary>
            Searches all filtered local assemblies specified for classes of the type passed in.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesWithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds the classes with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesWithAttribute(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds any classes with the attribute.
            </summary>
            <param name="attributeType">The attribute type </param>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesWithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds the classes with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesWithAttribute``1">
            <summary>
            Finds the classes with attribute in filtered local assemblies
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetClasses(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
            Finds types that are assignable from the assignTypeFrom parameter and will scan for these types in the assembly
            list passed in, however we will only scan assemblies that have a reference to the assignTypeFrom Type or any type
            deriving from the base type.
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <param name="additionalFilter">An additional filter to apply for what types will actually be included in the return value</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.TypeHelper">
            <summary>
            A utility class for type checking, this provides internal caching so that calls to these methods will be faster
            than doing a manual type check in c#
            </summary>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsOverride(System.Reflection.MethodInfo)">
            <summary>
            Checks if the method is actually overriding a base method
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.GetReferencedAssemblies(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Find all assembly references that are referencing the assignTypeFrom Type's assembly found in the assemblyList
            </summary>
            <param name="assignTypeFrom"></param>
            <param name="assemblies"></param>
            <returns></returns>
            <remarks>
            If the assembly of the assignTypeFrom Type is in the App_Code assembly, then we return nothing since things cannot
            reference that assembly, same with the global.asax assembly.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.HasReferenceToAssemblyWithName(System.Reflection.Assembly,System.String)">
            <summary>
            checks if the assembly has a reference with the same name as the expected assembly name.
            </summary>
            <param name="assembly"></param>
            <param name="expectedAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsNonStaticClass(System.Type)">
            <summary>
            Returns true if the type is a class and is not static
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsStaticClass(System.Type)">
            <summary>
            Returns true if the type is a static class
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            In IL a static class is abstract and sealed
            see: http://stackoverflow.com/questions/1175888/determine-if-a-type-is-static
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.GetLowestBaseType(System.Type[])">
            <summary>
            Finds a lowest base class amongst a collection of types
            </summary>
            <param name="types"></param>
            <returns></returns>
            <remarks>
            The term 'lowest' refers to the most base class of the type collection.
            If a base type is not found amongst the type collection then an invalid attempt is returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsTypeAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="contract">The type of the contract.</param>
            <param name="implementation">The implementation.</param>
            <returns>
            	<c>true</c> if [is type assignable from] [the specified contract]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsTypeAssignableFrom``1(System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsTypeAssignableFrom``1(System.Object)">
            <summary>
            Determines whether the object instance <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsValueType(System.Type)">
            <summary>
            A method to determine whether <paramref name="implementation"/> represents a value type.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsImplicitValueType(System.Type)">
            <summary>
            A method to determine whether <paramref name="implementation"/> is an implied value type (<see cref="P:System.Type.IsValueType"/>, <see cref="P:System.Type.IsEnum"/> or a string).
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.GetProperty(System.Type,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns (and caches) a PropertyInfo from a type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="mustRead"></param>
            <param name="mustWrite"></param>
            <param name="includeIndexed"></param>
            <param name="caseSensitive"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.CachedDiscoverableFields(System.Type)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.FieldInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.CachedDiscoverableProperties(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.PropertyInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <param name="mustRead">true if the properties discovered are readable</param>
            <param name="mustWrite">true if the properties discovered are writable</param>
            <param name="includeIndexed">true if the properties discovered are indexable</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.UmbracoApplicationBase">
            <summary>
            The abstract class for the Umbraco HttpApplication
            </summary>
            <remarks>
            This is exposed in the core so that we can have the IApplicationEventHandler in the core project so that 
            IApplicationEventHandler's can fire/execute outside of the web contenxt (i.e. in console applications)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.StartApplication(System.Object,System.EventArgs)">
            <summary>
            Boots up the Umbraco application
            </summary>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.Application_Start(System.Object,System.EventArgs)">
            <summary>
            Initializes the Umbraco application
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.Init">
            <summary>
            Override init and raise the event
            </summary>
            <remarks>
            DID YOU KNOW? The Global.asax Init call is the thing that initializes all of the httpmodules, ties up a bunch of stuff with IIS, etc...
            Therefore, since OWIN is an HttpModule when running in IIS/ASP.Net the OWIN startup is not executed until this method fires and by that
            time, Umbraco has performed it's bootup sequence.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationStarting(System.Object,System.EventArgs)">
            <summary>
            Developers can override this method to modify objects on startup
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationStarted(System.Object,System.EventArgs)">
            <summary>
            Developers can override this method to do anything they need to do once the application startup routine is completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationInit(System.Object,System.EventArgs)">
            <summary>
            Called to raise the ApplicationInit event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationError(System.Object,System.EventArgs)">
            <summary>
            A method that can be overridden to invoke code when the application has an error.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationEnd(System.Object,System.EventArgs)">
            <summary>
            A method that can be overridden to invoke code when the application shuts down.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Umbraco.Core.UmbracoApplicationBase.ApplicationInit">
            <summary>
            Called when the HttpApplication.Init() is fired, allows developers to subscribe to the HttpApplication events
            </summary>
        </member>
        <member name="T:Umbraco.Core.UpgradeableReadLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources. 
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.UpgradeableReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ReadLock"/> class.
            </summary>
            <param name="rwLock">The rw lock.</param>
        </member>
        <member name="T:Umbraco.Core.DelegateEqualityComparer`1">
            <summary>
            A custom equality comparer that excepts a delegate to do the comparison operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.DelegateEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param><param name="y">The second object of type <paramref name="T"/> to compare.</param>
        </member>
        <member name="M:Umbraco.Core.DelegateEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Umbraco.Core.EnumerableExtensions">
            <summary>
             Extensions for enumerable sources
            </summary>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>The distinct by.</summary>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TKey">Key type</typeparam>
            <returns>the unique list</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.Range``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Returns a sequence of length <paramref name="count"/> whose elements are the result of invoking <paramref name="factory"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.IfNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>The for each.</summary>
            <param name="items">The items.</param>
            <param name="func">The func.</param>
            <typeparam name="TItem">item type</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <returns>the Results</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>The for each.</summary>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">Item type</typeparam>
            <returns>list of TItem</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.FlattenList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>The flatten list.</summary>
            <param name="e">The items.</param>
            <param name="f">The select child.</param>
            <typeparam name="T">Item type</typeparam>
            <returns>list of TItem</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if all items in the other collection exist in this collection
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the source contains any of the items in the other list
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all matching items from an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all matching items from an <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence of values to ignore those which are null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll">The coll.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first item matching an expression in an enumerable.
            </summary>
            <typeparam name="T">The type of the enumerated objects.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1.</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first item matching an expression in an enumerable.
            </summary>
            <typeparam name="T">The type of the enumerated objects.</typeparam>
            <param name="items">The enumerable to search.</param>
            <param name="startIndex">The index to start at.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1.</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.UnsortedSequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if 2 lists have equal elements within them regardless of how they are sorted
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
            <remarks>
            The logic for this is taken from:
            http://stackoverflow.com/questions/4576723/test-whether-two-ienumerablet-have-the-same-values-with-the-same-frequencies
            
            There's a few answers, this one seems the best for it's simplicity and based on the comment of Eamon
            </remarks>
        </member>
        <member name="T:Umbraco.Core.IfExtensions">
            <summary>
            Extension methods for 'If' checking like checking If something is null or not null
            </summary>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfTrue(System.Boolean,System.Action)">
            <summary>The if true.</summary>
            <param name="predicate">The predicate.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNotNull``2(``1,System.Func{``1,``0},``0)">
            <summary>
            Checks if the item is not null, and if so returns an action on that item, or a default value
            </summary>
            <typeparam name="TResult">the result type</typeparam>
            <typeparam name="TItem">The type</typeparam>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNull``1(``0,System.Func{``0,``0})">
            <summary>
            Checks if the value is null, if it is it returns the value specified, otherwise returns the non-null value
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="item"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PluginManager">
            <summary>
            Used to resolve all plugin types and cache them and is also used to instantiate plugin types
            </summary>
            <remarks>
            
            This class should be used to resolve all plugin types, the TypeFinder should not be used directly!
            
            This class can expose extension methods to resolve custom plugins
            
            Before this class resolves any plugins it checks if the hash has changed for the DLLs in the /bin folder, if it hasn't
            it will use the cached resolved plugins that it has already found which means that no assembly scanning is necessary. This leads
            to much faster startup times.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PluginManager.#ctor(System.IServiceProvider,Umbraco.Core.Cache.IRuntimeCacheProvider,Umbraco.Core.Logging.ProfilingLogger,System.Boolean)">
            <summary>
            Creates a new PluginManager with an ApplicationContext instance which ensures that the plugin xml 
            file is cached temporarily until app startup completes.
            </summary>
            <param name="logger"></param>
            <param name="detectChanges"></param>
            <param name="serviceProvider"></param>
            <param name="runtimeCache"></param>
        </member>
        <member name="M:Umbraco.Core.PluginManager.WriteCachePluginsHash">
            <summary>
            Writes the assembly hash file
            </summary>
        </member>
        <member name="M:Umbraco.Core.PluginManager.GetFileHash(System.Collections.Generic.IEnumerable{System.Tuple{System.IO.FileSystemInfo,System.Boolean}},Umbraco.Core.Logging.ProfilingLogger)">
            <summary>
            Returns a unique hash for the combination of FileInfo objects passed in
            </summary>
            <param name="filesAndFolders">
            A collection of files and whether or not to use their file contents to determine the hash or the file's properties 
            (true will make a hash based on it's contents)
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ConvertPluginsHashFromHex(System.String)">
            <summary>
            Converts the hash value of current plugins to long from string
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.TryGetCachedPluginsFromFile``1(Umbraco.Core.PluginManager.TypeResolutionKind)">
            <summary>
            Attempts to resolve the list of plugin + assemblies found in the runtime for the base type 'T' passed in.
            If the cache file doesn't exist, fails to load, is corrupt or the type 'T' element is not found then 
            a false attempt is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ClearPluginCache">
            <summary>
            Removes cache files and internal cache as well
            </summary>
            <remarks>
            Generally only used for resetting cache, for example during the install process
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PluginManager.DetectLegacyPluginListFile">
            <summary>
            This will return true if the plugin list file is a legacy one
            </summary>
            <returns></returns>
            <remarks>
            This method exists purely due to an error in 4.11. We were writing the plugin list file without the 
            type resolution kind which will have caused some problems. Now we detect this legacy file and if it is detected
            we remove it so it can be recreated properly.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PluginManager.UpdateCachedPluginsFile``1(System.Collections.Generic.IEnumerable{System.Type},Umbraco.Core.PluginManager.TypeResolutionKind)">
             <summary>
             Adds/Updates the type list for the base type 'T' in the cached file
             </summary>
             <typeparam name="T"></typeparam>
             <param name="typesFound"></param>
            <param name="resolutionType"> </param>
            <remarks>
             THIS METHOD IS NOT THREAD SAFE
             </remarks>
             <example>
             <![CDATA[
             <plugins>
            		<baseType type="Test.Testing.Tester">
            			<add type="My.Assembly.MyTester" assembly="My.Assembly" />
            			<add type="Your.Assembly.YourTester" assembly="Your.Assembly" />
            		</baseType>
             </plugins>
             ]]>
             </example>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolvePropertyEditors">
            <summary>
            Returns all found property editors (based on the resolved Iparameter editors - this saves a scan)
            </summary>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveParameterEditors">
            <summary>
            Returns all found parameter editors (which includes property editors)
            </summary>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveApplicationStartupHandlers">
            <summary>
            Returns all available IApplicationStartupHandler objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveCacheRefreshers">
            <summary>
            Returns all classes of type ICacheRefresher
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolvePropertyEditorValueConverters">
            <summary>
            Returns all available IPropertyEditorValueConverter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveDataTypes">
            <summary>
            Returns all available IDataType in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveMacroRenderings">
            <summary>
            Returns all available IMacroGuiRendering in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolvePackageActions">
            <summary>
            Returns all available IPackageAction in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveActions">
            <summary>
            Returns all available IAction in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveAssignedMapperTypes">
            <summary>
            Returns all mapper types that have a MapperFor attribute defined
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveSqlSyntaxProviders">
            <summary>
            Returns all SqlSyntaxProviders with the SqlSyntaxProviderAttribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.FindAndCreateInstances``1(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Used to resolve and create instances of the specified type based on the resolved/cached plugin types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="throwException">set to true if an exception is to be thrown if there is an error during instantiation</param>
            <param name="cacheResult"></param>
            <param name="specificAssemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.CreateInstances``1(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Used to create instances of the specified type based on the resolved/cached plugin types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="types"></param>
            <param name="throwException">set to true if an exception is to be thrown if there is an error during instantiation</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.CreateInstance``1(System.Type,System.Boolean)">
            <summary>
            Used to create an instance of the specified type based on the resolved/cached plugin types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.LoadViaScanningAndUpdateCacheFile``1(Umbraco.Core.PluginManager.TypeList,Umbraco.Core.PluginManager.TypeResolutionKind,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            This method invokes the finder which scans the assemblies for the types and then loads the result into the type finder.
            Once the results are loaded, we update the cached type xml file
            </summary>
            <param name="typeList"></param>
            <param name="resolutionKind"> </param>
            <param name="finder"></param>
            <remarks>
            THIS METHODS IS NOT THREAD SAFE
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveTypes``1(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Generic method to find the specified type and cache the result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveTypesWithAttribute``2(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Generic method to find the specified type that has an attribute and cache the result
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveAttributedTypes``1(System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Generic method to find any type that has the specified attribute
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.GetTypeLists">
            <summary>
            Used for unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PluginManager.Current">
            <summary>
            We will ensure that no matter what, only one of these is created, this is to ensure that caching always takes place
            </summary>
            <remarks>
            The setter is generally only used for unit tests
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PluginManager.RequiresRescanning">
            <summary>
            Returns a bool if the assemblies in the /bin, app_code, global.asax, etc... have changed since they were last hashed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PluginManager.CachedAssembliesHash">
            <summary>
            Returns the currently cached hash value of the scanned assemblies in the /bin folder. Returns 0 
            if no cache is found.
            </summary>
            <value> </value>
        </member>
        <member name="P:Umbraco.Core.PluginManager.CurrentAssembliesHash">
            <summary>
            Returns the current assemblies hash based on creating a hash from the assemblies in the /bin
            </summary>
            <value> </value>
        </member>
        <member name="P:Umbraco.Core.PluginManager.AssembliesToScan">
            <summary>
            Gets/sets which assemblies to scan when type finding, generally used for unit testing, if not explicitly set
            this will search all assemblies known to have plugins and exclude ones known to not have them.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PluginManager.TypeResolutionKind">
            <summary>
            The type of resolution being invoked
            </summary>
        </member>
        <member name="M:Umbraco.Core.PluginManager.TypeList`1.IsTypeList``1(Umbraco.Core.PluginManager.TypeResolutionKind)">
            <summary>
            Returns true if the current TypeList is of the same lookup type
            </summary>
            <typeparam name="TLookup"></typeparam>
            <param name="resolutionType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PluginManager.CachedPluginNotFoundInFileException">
            <summary>
            This class is used simply to determine that a plugin was not found in the cache plugin list with the specified
            TypeResolutionKind.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.FileSystemProviderManager.GetUnderlyingFileSystemProvider(System.String)">
            <summary>
            Returns the underlying (non-typed) file system provider for the alias specified
            </summary>
            <param name="alias"></param>
            <returns></returns>
            <remarks>
            It is recommended to use the typed GetFileSystemProvider method instead to get a strongly typed provider instance.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.FileSystemProviderManager.GetFileSystemProvider``1">
            <summary>
            Returns the strongly typed file system provider
            </summary>
            <typeparam name="TProviderTypeFilter"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.IO.FileSystemProviderManager.ProviderConstructionInfo">
            <summary>
            used to cache the lookup of how to construct this object so we don't have to reflect each time.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.VerifyEditPath(System.String,System.String)">
            <summary>
            Verifies that the current filepath matches a directory where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDir">The valid directory.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.ValidateEditPath(System.String,System.String)">
            <summary>
            Validates that the current filepath matches a directory where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDir">The valid directory.</param>
            <returns>True, if the filepath is valid, else an exception is thrown.</returns>
            <exception cref="T:Umbraco.Core.IO.FileSecurityException">The filepath is invalid.</exception>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.VerifyEditPath(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verifies that the current filepath matches one of several directories where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDirs">The valid directories.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.ValidateEditPath(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates that the current filepath matches one of several directories where the user is allowed to edit a file.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validDirs">The valid directories.</param>
            <returns>True, if the filepath is valid, else an exception is thrown.</returns>
            <exception cref="T:Umbraco.Core.IO.FileSecurityException">The filepath is invalid.</exception>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.VerifyFileExtension(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Verifies that the current filepath has one of several authorized extensions.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validFileExtensions">The valid extensions.</param>
            <returns>A value indicating whether the filepath is valid.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.ValidateFileExtension(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Validates that the current filepath has one of several authorized extensions.
            </summary>
            <param name="filePath">The filepath to validate.</param>
            <param name="validFileExtensions">The valid extensions.</param>
            <returns>True, if the filepath is valid, else an exception is thrown.</returns>
            <exception cref="T:Umbraco.Core.IO.FileSecurityException">The filepath is invalid.</exception>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.GetRootDirectorySafe">
            <summary>
            Returns the path to the root of the application, by getting the path to where the assembly where this
            method is included is present, then traversing until it's past the /bin directory. Ie. this makes it work
            even if the assembly is in a /bin/debug or /bin/release folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.SetRootDirectory(System.String)">
            <summary>
            Allows you to overwrite RootDirectory, which would otherwise be resolved
            automatically upon application start.
            </summary>
            <remarks>The supplied path should be the absolute path to the root of the umbraco site.</remarks>
            <param name="rootPath"></param>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.SafeFileName(System.String)">
            <summary>
            Check to see if filename passed has any special chars in it and strips them to create a safe filename.  Used to overcome an issue when Umbraco is used in IE in an intranet environment.
            </summary>
            <param name="filePath">The filename passed to the file handler from the upload field.</param>
            <returns>A safe filename without any path specific chars.</returns>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetRelativePath(System.String)">
            <summary>
            Gets the relative path.
            </summary>
            <param name="fullPathOrUrl">The full path or url.</param>
            <returns>The path, relative to this filesystem's root.</returns>
            <remarks>
            <para>The relative path is relative to this filesystem's root, not starting with any
            directory separator. If input was recognized as a url (path), then output uses url (path) separator
            chars.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.IO.PhysicalFileSystem.GetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path">The full or relative path.</param>
            <returns>The full path.</returns>
            <remarks>
            <para>On the physical filesystem, the full path is the rooted (ie non-relative), safe (ie within this
            filesystem's root) path. All separators are converted to Path.DirectorySeparatorChar.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.IO.SystemDirectories.Root">
            <summary>
            Gets the root path of the application
            </summary>
        </member>
        <member name="T:Umbraco.Core.StringExtensions">
            <summary>
             String extension methods
            </summary>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.StripWhitespace(System.String)">
            <summary>
            Removes new lines and tabs
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.DetectIsJavaScriptPath(System.String)">
            <summary>
            Based on the input string, this will detect if the strnig is a JS path or a JS snippet.
            If a path cannot be determined, then it is assumed to be a snippet the original text is returned
            with an invalid attempt, otherwise a valid attempt is returned with the resolved path
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            This is only used for legacy purposes for the Action.JsSource stuff and shouldn't be needed in v8
            </remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.DetectIsJson(System.String)">
            <summary>
            This tries to detect a json string, this is not a fail safe way but it is quicker than doing 
            a try/catch when deserializing when it is not json.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ConvertToJsonIfPossible(System.String)">
            <summary>
            Returns a JObject/JArray instance if the string can be converted to json, otherwise returns the string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.CleanForXss(System.String,System.Char[])">
            <summary>
            Cleans string to aid in preventing xss attacks.
            </summary>
            <param name="input"></param>
            <param name="ignoreFromClean"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.GenerateStreamFromString(System.String)">
            <summary>
            Returns a stream from a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.StringExtensions.AppendQueryStringToUrl(System.String,System.String[])" -->
        <member name="M:Umbraco.Core.StringExtensions.EncryptWithMachineKey(System.String)">
            <summary>
            Encrypt the string using the MachineKey in medium trust
            </summary>
            <param name="value">The string value to be encrypted.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.DecryptWithMachineKey(System.String)">
            <summary>
            Decrypt the encrypted string using the Machine key in medium trust
            </summary>
            <param name="value">The string value to be decrypted</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.Trim(System.String,System.String)">
            <summary>
            Trims the specified value from a string; accepts a string input whereas the in-built implementation only accepts char or char[].
            </summary>
            <param name="value">The value.</param>
            <param name="forRemoving">For removing.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>Is null or white space.</summary>
            <param name="str">The str.</param>
            <returns>The is null or white space.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToDelimitedList(System.String,System.String)">
            <summary>The to delimited list.</summary>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>the list</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EnumTryParse``1(System.String,System.Boolean,``0@)">
            <summary>enum try parse.</summary>
            <param name="strType">The str type.</param>
            <param name="ignoreCase">The ignore case.</param>
            <param name="result">The result.</param>
            <typeparam name="T">The type</typeparam>
            <returns>The enum try parse.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EnumParse``1(System.String,System.Boolean)">
            <summary>
            Parse string to Enum
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <param name="strType">The string to parse</param>
            <param name="ignoreCase">The ignore case</param>
            <returns>The parsed enum</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.StripHtml(System.String)">
            <summary>
            Strips all html from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without any html tags.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EncodeAsGuid(System.String)">
            <summary>
            Encodes as GUID.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ConvertToHex(System.String)">
            <summary>
            Converts to hex.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlBase64(System.String)">
            <summary>
             Encodes a string to a safe URL base64 string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.FromUrlBase64(System.String)">
            <summary>
            Decodes a URL safe base64 string back
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.InvariantFormat(System.String,System.Object[])">
            <summary>
            formats the string with invariant culture
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToInvariantString(System.Int32)">
            <summary>
            Converts an integer to an invariant formatted string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.InvariantEquals(System.String,System.String)">
            <summary>
            Compares 2 strings with invariant culture and case ignored
            </summary>
            <param name="compare">The compare.</param>
            <param name="compareTo">The compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.IsGuid(System.String,System.Boolean)">
            <summary>
            Determines if the string is a Guid
            </summary>
            <param name="str"></param>
            <param name="withHyphens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ParseInto``1(System.String)">
            <summary>
            Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ParseInto(System.String,System.Type)">
            <summary>
            Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <param name="val"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToMd5(System.String)">
            <summary>
            Converts the string to MD5
            </summary>
            <param name="stringToConvert">referrs to itself</param>
            <returns>the md5 hashed string</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.UrlTokenDecode(System.String)">
            <summary>
            Decodes a string that was encoded with UrlTokenEncode
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.UrlTokenEncode(System.Byte[])">
            <summary>
            Encodes a string so that it is 'safe' for URLs, files, etc..
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.NormaliseDirectoryPath(System.String)">
            <summary>
            Ensures that the folder path endds with a DirectorySeperatorChar
            </summary>
            <param name="currentFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the specified text string.
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.StripNewLines(System.String)">
            <summary>
            Strips carrage returns and line feeds from the specified text.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstUpper(System.String)">
            <summary>
            Returns a copy of the string with the first character converted to uppercase.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstLower(System.String)">
            <summary>
            Returns a copy of the string with the first character converted to lowercase.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstUpper(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a copy of the string with the first character converted to uppercase using the casing rules of the specified culture.
            </summary>
            <param name="input">The string.</param>
            <param name="culture">The culture.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstLower(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a copy of the string with the first character converted to lowercase using the casing rules of the specified culture.
            </summary>
            <param name="input">The string.</param>
            <param name="culture">The culture.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstUpperInvariant(System.String)">
            <summary>
            Returns a copy of the string with the first character converted to uppercase using the casing rules of the invariant culture.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToFirstLowerInvariant(System.String)">
            <summary>
            Returns a copy of the string with the first character converted to lowercase using the casing rules of the invariant culture.
            </summary>
            <param name="input">The string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ReplaceMany(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns a new string in which all occurences of specified strings are replaced by other specified strings.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="replacements">The replacements definition.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ReplaceMany(System.String,System.Char[],System.Char)">
            <summary>
            Returns a new string in which all occurences of specified characters are replaced by a specified character.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="chars">The characters to replace.</param>
            <param name="replacement">The replacement character.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlAlias(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts string to a URL alias.
            </summary>
            <param name="value">The value.</param>
            <param name="charReplacements">The char replacements.</param>
            <param name="replaceDoubleDashes">if set to <c>true</c> replace double dashes.</param>
            <param name="stripNonAscii">if set to <c>true</c> strip non ASCII.</param>
            <param name="urlEncode">if set to <c>true</c> URL encode.</param>
            <returns></returns>
            <remarks>
            This ensures that ONLY ascii chars are allowed and of those ascii chars, only digits and lowercase chars, all
            punctuation, etc... are stripped out, however this method allows you to pass in string's to replace with the
            specified replacement character before the string is converted to ascii and it has invalid characters stripped out.
            This allows you to replace strings like &amp; , etc.. with your replacement character before the automatic
            reduction.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.FormatUrl(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an url segment.
            </summary>
            <param name="url">The text to filter.</param>
            <returns>The safe url segment.</returns>
            <remarks>
            <para>When using the legacy ShortStringHelper, uses <c>UmbracoSettings.UrlReplaceCharacters</c>
             and <c>UmbracoSettings.RemoveDoubleDashesFromUrlReplacing</c>.</para>
            <para>Other helpers may use different parameters.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAlias(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAlias(System.String,System.Boolean)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <param name="camel">A value indicating that we want to camel-case the alias.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAlias(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAliasWithForcingCheck(System.String)">
            <summary>
            Cleans (but only if required) a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <returns>The safe alias.</returns>
            <remarks>Checks <c>UmbracoSettings.ForceSafeAliases</c> to determine whether it should filter the text.</remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAliasWithForcingCheck(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans (but only if required) a string, in the context of a specified culture, to produce a string that can safely be used in an alias.
            </summary>
            <param name="alias">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe alias.</returns>
            <remarks>Checks <c>UmbracoSettings.ForceSafeAliases</c> to determine whether it should filter the text.</remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUmbracoAlias(System.String,Umbraco.Core.StringAliasCaseType,System.Boolean)">
            <summary>
            Cleans a string to produce a string that can safely be used in an alias.
            </summary>
            <param name="phrase">The text to filter.</param>
            <param name="caseType">The case type. THIS PARAMETER IS IGNORED.</param>
            <param name="removeSpaces">Indicates whether spaces should be removed. THIS PARAMETER IS IGNORED.</param>
            <returns>The safe alias.</returns>
            <remarks>CamelCase, and remove spaces, whatever the parameters.</remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlSegment(System.String)">
            <summary>
            Cleans a string to produce a string that can safely be used in an url segment.
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe url segment.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlSegment(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of a specified culture, to produce a string that can safely be used in an url segment.
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe url segment.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ConvertCase(System.String,Umbraco.Core.StringAliasCaseType)">
            <summary>
            Filters a string to convert case, and more.
            </summary>
            <param name="phrase">the text to filter.</param>
            <param name="cases">The string case type.</param>
            <returns>The filtered text.</returns>
            <remarks>
            <para>This is the legacy method, so we can't really change it, although it has issues (see unit tests).</para>
            <para>It does more than "converting the case", and also remove spaces, etc.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCleanString(System.String,Umbraco.Core.Strings.CleanStringType)">
            <summary>
            Cleans a string.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char)">
            <summary>
            Cleans a string, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <returns>The clean string.</returns>
            <remarks>The string is cleaned in the context of the IShortStringHelper default culture.</remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string in the context of a specified culture.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCleanString(System.String,Umbraco.Core.Strings.CleanStringType,System.Char,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string in the context of a specified culture, using a specified separator.
            </summary>
            <param name="text">The text to clean.</param>
            <param name="stringType">A flag indicating the target casing and encoding of the string. By default, 
            strings are cleaned up to camelCase and Ascii.</param>
            <param name="separator">The separator.</param>
            <param name="culture">The culture.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.SplitPascalCasing(System.String)">
            <summary>
            Splits a Pascal cased string into a phrase separated by spaces.
            </summary>
            <param name="phrase">The text to split.</param>
            <returns>The splitted text.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeFileName(System.String)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeFileName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Cleans a string, in the context of the invariant culture, to produce a string that can safely be used as a filename,
            both internally (on disk) and externally (as a url).
            </summary>
            <param name="text">The text to filter.</param>
            <param name="culture">The culture.</param>
            <returns>The safe filename.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            An extension method that returns a new string in which all occurrences of a 
            specified string in the current instance are replaced with another specified string.
            StringComparison specifies the type of search to use for the specified string.
            </summary>
            <param name="source">Current instance of the string</param>
            <param name="oldString">Specified string to replace</param>
            <param name="newString">Specified string to inject</param>
            <param name="stringComparison">String Comparison object to specify search type</param>
            <returns>Updated string</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToCSharpString(System.String)">
            <summary>
            Converts a literal string into a C# expression.
            </summary>
            <param name="s">Current instance of the string.</param>
            <returns>The string in a C# format.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToValidXmlString(System.String)">
            <summary>
            An extension method that returns a new string in which all occurrences of an 
            unicode characters that are invalid in XML files are replaced with an empty string. 
            </summary>
            <param name="text">Current instance of the string</param>
            <returns>Updated string</returns>
            
            <summary>
            removes any unusual unicode characters that can't be encoded into XML
            </summary>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToGuid(System.String)">
            <summary>
            Converts a string to a Guid - WARNING, depending on the string, this may not be unique
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.StringExtensions.ShortStringHelper">
            <summary>
            Gets the short string helper.
            </summary>
            <remarks>This is so that unit tests that do not initialize the resolver do not
            fail and fall back to defaults. When running the whole Umbraco, CoreBootManager
            does initialise the resolver.</remarks>
        </member>
        <member name="T:Umbraco.Core.UriExtensions">
            <summary>
            Provides extension methods to <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.IsBackOfficeRequest(System.Uri,System.String)">
            <summary>
            Checks if the current uri is a back office request
            </summary>
            <param name="url"></param>
            <param name="applicationPath">
            The current application path or VirtualPath
            </param>
            <returns></returns>
            <remarks>
            There are some special routes we need to check to properly determine this:
            
                If any route has an extension in the path like .aspx = back office
            
                These are def back office:
                    /Umbraco/RestServices   = back office
                    /Umbraco/BackOffice     = back office
                If it's not any of the above, and there's no extension then we cannot determine if it's back office or front-end
                so we can only assume that it is not back office. This will occur if people use an UmbracoApiController for the backoffice
                but do not inherit from UmbracoAuthorizedApiController and do not use [IsBackOffice] attribute.
            
                These are def front-end: 
                    /Umbraco/Surface        = front-end
                    /Umbraco/Api            = front-end
                But if we've got this far we'll just have to assume it's front-end anyways.
            
            </remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.IsInstallerRequest(System.Uri)">
            <summary>
            Checks if the current uri is an install request
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.IsDefaultBackOfficeRequest(System.Uri)">
            <summary>
            Checks if the uri is a request for the default back office page
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.IsClientSideRequest(System.Uri)">
            <summary>
            This is a performance tweak to check if this not an ASP.Net server file
            .Net will pass these requests through to the module when in integrated mode.
            We want to ignore all of these requests immediately.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.Rewrite(System.Uri,System.String)">
            <summary>
            Rewrites the path of uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="path">The new path, which must begin with a slash.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged, except for the fragment which is removed.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.Rewrite(System.Uri,System.String,System.String)">
            <summary>
            Rewrites the path and query of a uri.
            </summary>
            <param name="uri">The uri.</param>
            <param name="path">The new path, which must begin with a slash.</param>
            <param name="query">The new query, which must be empty or begin with a question mark.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged, except for the fragment which is removed.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.GetSafeAbsolutePath(System.Uri)">
            <summary>
            Gets the absolute path of the uri, even if the uri is relative.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Default uri.AbsolutePath does not support relative uris.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.GetAbsolutePathDecoded(System.Uri)">
            <summary>
            Gets the decoded, absolute path of the uri.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Only for absolute uris.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.GetSafeAbsolutePathDecoded(System.Uri)">
            <summary>
            Gets the decoded, absolute path of the uri, even if the uri is relative.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The absolute path of the uri.</returns>
            <remarks>Default uri.AbsolutePath does not support relative uris.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.EndPathWithSlash(System.Uri)">
            <summary>
            Rewrites the path of the uri so it ends with a slash.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.TrimPathEndSlash(System.Uri)">
            <summary>
            Rewrites the path of the uri so it does not end with a slash.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The rewritten uri.</returns>
            <remarks>Everything else remains unchanged.</remarks>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.MakeAbsolute(System.Uri,System.Uri)">
            <summary>
            Transforms a relative uri into an absolute uri.
            </summary>
            <param name="uri">The relative uri.</param>
            <param name="baseUri">The base absolute uri.</param>
            <returns>The absolute uri.</returns>
        </member>
        <member name="M:Umbraco.Core.UriExtensions.WithoutPort(System.Uri)">
            <summary>
            Removes the port from the uri.
            </summary>
            <param name="uri">The uri.</param>
            <returns>The same uri, without its port.</returns>
        </member>
        <member name="T:Umbraco.Core.SystemUtilities">
            <summary>
            Static helper methods for returning information about the current System
            </summary>
        </member>
        <member name="M:Umbraco.Core.SystemUtilities.GetCurrentTrustLevel">
            <summary>
            Get the current trust level of the hosted application
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.WriteLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources. 
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.WriteLock"/> class.
            </summary>
            <param name="rwLock">The rw lock.</param>
        </member>
        <member name="T:Umbraco.Core.XmlExtensions">
            <summary>
            Extension methods for xml objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SaveAsync(System.Xml.XmlDocument,System.String)">
            <summary>
            Saves the xml document async
            </summary>
            <param name="xdoc"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectNodes(System.Xml.XmlNode,System.String,System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPathVariable})">
            <summary>
            Selects a list of XmlNode matching an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The list of XmlNode matching the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectNodes(System.Xml.XmlNode,System.Xml.XPath.XPathExpression,System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPathVariable})">
            <summary>
            Selects a list of XmlNode matching an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The list of XmlNode matching the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectNodes(System.Xml.XmlNode,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects a list of XmlNode matching an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The list of XmlNode matching the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectNodes(System.Xml.XmlNode,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects a list of XmlNode matching an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The list of XmlNode matching the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectSingleNode(System.Xml.XmlNode,System.String,System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPathVariable})">
            <summary>
            Selects the first XmlNode that matches an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The first XmlNode that matches the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectSingleNode(System.Xml.XmlNode,System.Xml.XPath.XPathExpression,System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPathVariable})">
            <summary>
            Selects the first XmlNode that matches an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The first XmlNode that matches the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectSingleNode(System.Xml.XmlNode,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects the first XmlNode that matches an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The first XmlNode that matches the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.SelectSingleNode(System.Xml.XmlNode,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects the first XmlNode that matches an XPath expression.
            </summary>
            <param name="source">A source XmlNode.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>The first XmlNode that matches the XPath expression.</returns>
            <remarks>
            <para>If <param name="variables" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Converts from an XDocument to an XmlDocument
            </summary>
            <param name="xDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
            Converts from an XmlDocument to an XDocument
            </summary>
            <param name="xmlDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            Converts from an XmlElement to an XElement
            </summary>
            <param name="xmlElement"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.XmlHelper">
            <summary>
            The XmlHelper class contains general helper methods for working with xml in umbraco.
            </summary>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.IsXmlWhitespace(System.String)">
            <summary>
            Gets a value indicating whether a specified string contains only xml whitespace characters.
            </summary>
            <param name="s">The string.</param>
            <returns><c>true</c> if the string contains only xml whitespace characters.</returns>
            <remarks>As per XML 1.1 specs, space, \t, \r and \n.</remarks>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.CreateXPathDocument(System.String)">
            <summary>
            Creates a new <c>XPathDocument</c> from an xml string.
            </summary>
            <param name="xml">The xml string.</param>
            <returns>An <c>XPathDocument</c> created from the xml string.</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.TryCreateXPathDocument(System.String,System.Xml.XPath.XPathDocument@)">
            <summary>
            Tries to create a new <c>XPathDocument</c> from an xml string.
            </summary>
            <param name="xml">The xml string.</param>
            <param name="doc">The XPath document.</param>
            <returns>A value indicating whether it has been possible to create the document.</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.TryCreateXPathDocumentFromPropertyValue(System.Object,System.Xml.XPath.XPathDocument@)">
            <summary>
            Tries to create a new <c>XPathDocument</c> from a property value.
            </summary>
            <param name="value">The value of the property.</param>
            <param name="doc">The XPath document.</param>
            <returns>A value indicating whether it has been possible to create the document.</returns>
            <remarks>The value can be anything... Performance-wise, this is bad.</remarks>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.TryCreateXElementFromPropertyValue(System.Object,System.Xml.Linq.XElement@)">
            <summary>
            Tries to create a new <c>XElement</c> from a property value.
            </summary>
            <param name="value">The value of the property.</param>
            <param name="elt">The Xml element.</param>
            <returns>A value indicating whether it has been possible to create the element.</returns>
            <remarks>The value can be anything... Performance-wise, this is bad.</remarks>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.SortNodes(System.Xml.XmlNode,System.String,System.Func{System.Xml.XmlNode,System.Int32})">
            <summary>
            Sorts the children of a parentNode.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="childNodesXPath">An XPath expression to select children of <paramref name="parentNode"/> to sort.</param>
            <param name="orderBy">A function returning the value to order the nodes by.</param>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.SortNodesIfNeeded(System.Xml.XmlNode,System.String,System.Func{System.Xml.XmlNode,System.Int32})">
            <summary>
            Sorts the children of a parentNode if needed.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="childNodesXPath">An XPath expression to select children of <paramref name="parentNode"/> to sort.</param>
            <param name="orderBy">A function returning the value to order the nodes by.</param>
            <returns>A value indicating whether sorting was needed.</returns>
            <remarks>same as SortNodes but will do nothing if nodes are already sorted - should improve performances.</remarks>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.SortNode(System.Xml.XmlNode,System.String,System.Xml.XmlNode,System.Func{System.Xml.XmlNode,System.Int32})">
            <summary>
            Sorts a single child node of a parentNode.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="childNodesXPath">An XPath expression to select children of <paramref name="parentNode"/> to sort.</param>
            <param name="node">The child node to sort.</param>
            <param name="orderBy">A function returning the value to order the nodes by.</param>
            <returns>A value indicating whether sorting was needed.</returns>
            <remarks>Assuming all nodes but <paramref name="node"/> are sorted, this will move the node to 
            the right position without moving all the nodes (as SortNodes would do) - should improve perfs.</remarks>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.ImportXmlNodeFromText(System.String,System.Xml.XmlDocument@)">
            <summary>
            Imports a XML node from text.
            </summary>
            <param name="text">The text.</param>
            <param name="xmlDoc">The XML doc.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.OpenAsXmlDocument(System.String)">
            <summary>
            Opens a file as a XmlDocument.
            </summary>
            <param name="filePath">The relative file path. ei. /config/umbraco.config</param>
            <returns>Returns a XmlDocument class</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.AddAttribute(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            creates a XmlAttribute with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <returns>a XmlAttribute</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.AddTextNode(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates a text XmlNode with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The node name.</param>
            <param name="value">The node value.</param>
            <returns>a XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.AddCDataNode(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates a cdata XmlNode with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The node name.</param>
            <param name="value">The node value.</param>
            <returns>A XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.GetNodeValue(System.Xml.XmlNode)">
            <summary>
            Gets the value of a XmlNode
            </summary>
            <param name="n">The XmlNode.</param>
            <returns>the value as a string</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.CouldItBeXml(System.String)">
            <summary>
            Determines whether the specified string appears to be XML.
            </summary>
            <param name="xml">The XML string.</param>
            <returns>
            	<c>true</c> if the specified string appears to be XML; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.Split(System.String,System.String[],System.String,System.String)">
            <summary>
            Splits the specified delimited string into an XML document.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="rootName">Name of the root.</param>
            <param name="elementName">Name of the element.</param>
            <returns>Returns an <c>System.Xml.XmlDocument</c> representation of the delimited string data.</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.Split(System.Xml.XmlDocument,System.String,System.String[],System.String,System.String)">
            <summary>
            Splits the specified delimited string into an XML document.
            </summary>
            <param name="xml">The XML document.</param>
            <param name="data">The delimited string data.</param>
            <param name="separator">The separator.</param>
            <param name="rootName">Name of the root node.</param>
            <param name="elementName">Name of the element node.</param>
            <returns>Returns an <c>System.Xml.XmlDocument</c> representation of the delimited string data.</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.GetAttributesFromElement(System.String)">
            <summary>
            Return a dictionary of attributes found for a string based tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Xml.UmbracoXPathPathSyntaxParser">
            <summary>
            This is used to parse our customize Umbraco XPath expressions (i.e. that include special tokens like $site) into 
            a real XPath statement
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.UmbracoXPathPathSyntaxParser.ParseXPathQuery(System.String,System.Nullable{System.Int32},System.Func{System.Int32,System.Collections.Generic.IEnumerable{System.String}},System.Func{System.Int32,System.Boolean})">
            <summary>
            Parses custom umbraco xpath expression
            </summary>
            <param name="xpathExpression">The Xpath expression</param>
            <param name="nodeContextId">
            The current node id context of executing the query - null if there is no current node, in which case
            some of the parameters like $current, $parent, $site will be disabled
            </param>
            <param name="getPath">The callback to create the nodeId path, given a node Id</param>
            <param name="publishedContentExists">The callback to return whether a published node exists based on Id</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.MacroNavigator">
            <summary>
            Provides a cursor model for navigating {macro /} as if it were XML.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Xml.XPath.MacroNavigator.MacroParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.MacroNavigator"/> class with macro parameters.
            </summary>
            <param name="parameters">The macro parameters.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.#ctor(Umbraco.Core.Xml.XPath.MacroNavigator.MacroRoot,System.Xml.XmlNameTable,Umbraco.Core.Xml.XPath.MacroNavigator.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.MacroNavigator"/> class with a macro node,
            a name table and a state.
            </summary>
            <param name="macro">The macro node.</param>
            <param name="nameTable">The name table.</param>
            <param name="state">The state.</param>
            <remarks>Privately used for cloning a navigator.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.Clone">
            <summary>
            Creates a new XPathNavigator positioned at the same node as this XPathNavigator.
            </summary>
            <returns>A new XPathNavigator positioned at the same node as this XPathNavigator.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the current XPathNavigator is at the same position as the specified XPathNavigator.
            </summary>
            <param name="nav">The XPathNavigator to compare to this XPathNavigator.</param>
            <returns>true if the two XPathNavigator objects have the same position; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves the XPathNavigator to the same position as the specified XPathNavigator.
            </summary>
            <param name="nav">The XPathNavigator positioned on the node that you want to move to. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the same position as the specified XPathNavigator;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToFirstAttribute">
            <summary>
            Moves the XPathNavigator to the first attribute of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the first attribute of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToFirstChild">
            <summary>
            Moves the XPathNavigator to the first child node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the first child node of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the first namespace node that matches the XPathNamespaceScope specified.
            </summary>
            <param name="namespaceScope">An XPathNamespaceScope value describing the namespace scope. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the first namespace node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the next namespace node matching the XPathNamespaceScope specified.
            </summary>
            <param name="namespaceScope">An XPathNamespaceScope value describing the namespace scope. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the next namespace node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToId(System.String)">
            <summary>
            Moves to the node that has an attribute of type ID whose value matches the specified String.
            </summary>
            <param name="id">A String representing the ID value of the node to which you want to move.</param>
            <returns>true if the XPathNavigator is successful moving; otherwise, false.
            If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToNext">
            <summary>
            Moves the XPathNavigator to the next sibling node of the current node.
            </summary>
            <returns>true if the XPathNavigator is successful moving to the next sibling node;
            otherwise, false if there are no more siblings or if the XPathNavigator is currently
            positioned on an attribute node. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToPrevious">
            <summary>
            Moves the XPathNavigator to the previous sibling node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the previous sibling node;
            otherwise, false if there is no previous sibling node or if the XPathNavigator is currently
            positioned on an attribute node. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToNextAttribute">
            <summary>
            Moves the XPathNavigator to the next attribute.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the next attribute;
            false if there are no more attributes. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToParent">
            <summary>
            Moves the XPathNavigator to the parent node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the parent node of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.MacroNavigator.MoveToRoot">
            <summary>
            Moves the XPathNavigator to the root node that the current node belongs to.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element without an end element tag.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.LocalName">
            <summary>
            Gets the Name of the current node without any namespace prefix.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.BaseURI">
            <summary>
            Gets the base URI for the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.NameTable">
            <summary>
            Gets the XmlNameTable of the XPathNavigator.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.NodeType">
            <summary>
            Gets the XPathNodeType of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.MacroNavigator.Value">
            <summary>
            Gets the string value of the item.
            </summary>
            <remarks>Does not fully behave as per the specs, as we report empty value on root and macro elements, and we start
            reporting values only on parameter elements. This is because, otherwise, we would might dump the whole database
            and it probably does not make sense at Umbraco level.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.INavigableContentType">
            <summary>
            Represents the type of a content that can be navigated via XPath.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContentType.Name">
            <summary>
            Gets the name of the content type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContentType.FieldTypes">
            <summary>
            Gets the field types of the content type.
            </summary>
            <remarks>This includes the attributes and the properties.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.NavigableNavigator">
            <summary>
            Provides a cursor model for navigating Umbraco data as if it were XML.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.#ctor(Umbraco.Core.Xml.XPath.INavigableSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.NavigableNavigator"/> class with a content source.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.#ctor(Umbraco.Core.Xml.XPath.INavigableSource,Umbraco.Core.Xml.XPath.INavigableContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.NavigableNavigator"/> class with a content source,
            and an optional root content.
            </summary>
            <param name="source">The content source.</param>
            <param name="content">The root content.</param>
            <remarks>When no root content is supplied then the root of the source is used.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.#ctor(Umbraco.Core.Xml.XPath.INavigableSource,System.Xml.XmlNameTable,Umbraco.Core.Xml.XPath.NavigableNavigator.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPath.NavigableNavigator"/> class with a content source, a name table and a state.
            </summary>
            <param name="source">The content source.</param>
            <param name="nameTable">The name table.</param>
            <param name="state">The state.</param>
            <remarks>Privately used for cloning a navigator.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.Clone">
            <summary>
            Creates a new XPathNavigator positioned at the same node as this XPathNavigator.
            </summary>
            <returns>A new XPathNavigator positioned at the same node as this XPathNavigator.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.CloneWithNewRoot(System.String)">
            <summary>
            Creates a new XPathNavigator using the same source but positioned at a new root.
            </summary>
            <returns>A new XPathNavigator using the same source and positioned at a new root.</returns>
            <remarks>The new root can be above this navigator's root.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the current XPathNavigator is at the same position as the specified XPathNavigator.
            </summary>
            <param name="nav">The XPathNavigator to compare to this XPathNavigator.</param>
            <returns>true if the two XPathNavigator objects have the same position; otherwise, false.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves the XPathNavigator to the same position as the specified XPathNavigator.
            </summary>
            <param name="nav">The XPathNavigator positioned on the node that you want to move to. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the same position as the specified XPathNavigator;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToFirstAttribute">
            <summary>
            Moves the XPathNavigator to the first attribute of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the first attribute of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToFirstChild">
            <summary>
            Moves the XPathNavigator to the first child node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the first child node of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the first namespace node that matches the XPathNamespaceScope specified.
            </summary>
            <param name="namespaceScope">An XPathNamespaceScope value describing the namespace scope. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the first namespace node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the next namespace node matching the XPathNamespaceScope specified.
            </summary>
            <param name="namespaceScope">An XPathNamespaceScope value describing the namespace scope. </param>
            <returns>Returns true if the XPathNavigator is successful moving to the next namespace node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToId(System.String)">
            <summary>
            Moves to the node that has an attribute of type ID whose value matches the specified String.
            </summary>
            <param name="id">A String representing the ID value of the node to which you want to move.</param>
            <returns>true if the XPathNavigator is successful moving; otherwise, false.
            If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToNext">
            <summary>
            Moves the XPathNavigator to the next sibling node of the current node.
            </summary>
            <returns>true if the XPathNavigator is successful moving to the next sibling node;
            otherwise, false if there are no more siblings or if the XPathNavigator is currently
            positioned on an attribute node. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToPrevious">
            <summary>
            Moves the XPathNavigator to the previous sibling node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the previous sibling node;
            otherwise, false if there is no previous sibling node or if the XPathNavigator is currently
            positioned on an attribute node. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToNextAttribute">
            <summary>
            Moves the XPathNavigator to the next attribute.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the next attribute;
            false if there are no more attributes. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToParent">
            <summary>
            Moves the XPathNavigator to the parent node of the current node.
            </summary>
            <returns>Returns true if the XPathNavigator is successful moving to the parent node of the current node;
            otherwise, false. If false, the position of the XPathNavigator is unchanged.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.NavigableNavigator.MoveToRoot">
            <summary>
            Moves the XPathNavigator to the root node that the current node belongs to.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.UnderlyingObject">
            <summary>
            Gets the underlying content object.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element without an end element tag.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.LocalName">
            <summary>
            Gets the Name of the current node without any namespace prefix.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.BaseURI">
            <summary>
            Gets the base URI for the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.NameTable">
            <summary>
            Gets the XmlNameTable of the XPathNavigator.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.NodeType">
            <summary>
            Gets the XPathNodeType of the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.Prefix">
            <summary>
            Gets the namespace prefix associated with the current node.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.NavigableNavigator.Value">
            <summary>
            Gets the string value of the item.
            </summary>
            <remarks>Does not fully behave as per the specs, as we report empty value on content elements, and we start
            reporting values only on property elements. This is because, otherwise, we would dump the whole database
            and it probably does not make sense at Umbraco level.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.INavigableContent">
            <summary>
            Represents a content that can be navigated via XPath.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.INavigableContent.Value(System.Int32)">
            <summary>
            Gets the value of a field of the navigable content for XPath navigation use.
            </summary>
            <param name="index">The field index.</param>
            <returns>The value of the field for XPath navigation use.</returns>
            <remarks>
            <para>Fields are attributes or elements depending on their relative index value compared
            to source.LastAttributeIndex.</para>
            <para>For attributes, the value must be a string.</para>
            <para>For elements, the value should an <c>XPathNavigator</c> instance if the field is xml
            and has content (is not empty), <c>null</c> to indicate that the element is empty, or a string
            which can be empty, whitespace... depending on what the data type wants to expose.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContent.Id">
            <summary>
            Gets the unique identifier of the navigable content.
            </summary>
            <remarks>The root node identifier should be <c>-1</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContent.ParentId">
            <summary>
            Gets the unique identifier of parent of the navigable content.
            </summary>
            <remarks>The top-level content parent identifiers should be <c>-1</c> ie the identifier
            of the root node, whose parent identifier should in turn be <c>-1</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContent.Type">
            <summary>
            Gets the type of the navigable content.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableContent.ChildIds">
            <summary>
            Gets the unique identifiers of the children of the navigable content.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.INavigableFieldType">
            <summary>
            Represents the type of a field of a content that can be navigated via XPath.
            </summary>
            <remarks>A field can be an attribute or a property.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableFieldType.Name">
            <summary>
            Gets the name of the field type.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableFieldType.XmlStringConverter">
            <summary>
            Gets a method to convert the field value to a string.
            </summary>
            <remarks>This is for built-in properties, ie attributes. User-defined properties have their
            own way to convert their value for XPath.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.XPath.INavigableSource">
            <summary>
            Represents a source of content that can be navigated via XPath.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPath.INavigableSource.Get(System.Int32)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="id">The unique identifier.</param>
            <returns>The content identified by the unique identifier, or null.</returns>
            <remarks>When <c>id</c> is <c>-1</c> (root content) implementations should return <c>null</c>.</remarks>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableSource.LastAttributeIndex">
            <summary>
            Gets the index of the last attribute in the fields collections.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPath.INavigableSource.Root">
            <summary>
            Gets the content at the root of the source.
            </summary>
            <remarks>That content should have unique identifier <c>-1</c> and should not be gettable,
            ie Get(-1) should return null. Its <c>ParentId</c> should be <c>-1</c>. It should provide
            values for the attribute fields.</remarks>
        </member>
        <member name="T:Umbraco.Core.Xml.DynamicContext">
            <summary>
            Provides the evaluation context for fast execution and custom 
            variables resolution.
            </summary>
            <remarks>
            This class is responsible for resolving variables during dynamic expression execution.
            <para>Discussed in http://weblogs.asp.net/cazzu/archive/2003/10/07/30888.aspx</para>
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> 
            class with the specified <see cref="T:System.Xml.NameTable"/>.
            </summary>
            <param name="table">The NameTable to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.XmlNamespaceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
            <param name="context">A previously filled context with the namespaces to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.XmlNamespaceManager,System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
            <param name="context">A previously filled context with the namespaces to use.</param>
            <param name="table">The NameTable to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.CompareDocument(System.String,System.String)">
            <summary>
            Implementation equal to <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.LookupNamespace(System.String)">
            <summary>
            Same as <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.LookupPrefix(System.String)">
            <summary>
            Same as <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            Same as <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.Compile(System.String)">
            <summary>
            Shortcut method that compiles an expression using an empty navigator.
            </summary>
            <param name="xpath">The expression to compile</param>
            <returns>A compiled <see cref="T:System.Xml.XPath.XPathExpression"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.AddVariable(System.String,System.Object)">
            <summary>
            Adds the variable to the dynamic evaluation context.
            </summary>
            <param name="name">The name of the variable to add to the context.</param>
            <param name="value">The value of the variable to add to the context.</param>
            <remarks>
            Value type conversion for XPath evaluation is as follows:
            <list type="table">
            	<listheader>
            		<term>CLR Type</term>
            		<description>XPath type</description>
            	</listheader>
            	<item>
            		<term>System.String</term>
            		<description>XPathResultType.String</description>
            	</item>
            	<item>
            		<term>System.Double (or types that can be converted to)</term>
            		<description>XPathResultType.Number</description>
            	</item>
            	<item>
            		<term>System.Boolean</term>
            		<description>XPathResultType.Boolean</description>
            	</item>
            	<item>
            		<term>System.Xml.XPath.XPathNavigator</term>
            		<description>XPathResultType.Navigator</description>
            	</item>
            	<item>
            		<term>System.Xml.XPath.XPathNodeIterator</term>
            		<description>XPathResultType.NodeSet</description>
            	</item>
            	<item>
            		<term>Others</term>
            		<description>XPathResultType.Any</description>
            	</item>
            </list>
            <note type="note">See the topic "Compile, Select, Evaluate, and Matches with 
            XPath and XPathExpressions" in MSDN documentation for additional information.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            See <see cref="T:System.Xml.Xsl.XsltContext"/>. Not used in our implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.ResolveVariable(System.String,System.String)">
            <summary>
            Resolves the dynamic variables added to the context. See <see cref="T:System.Xml.Xsl.XsltContext"/>. 
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.DynamicContext.Whitespace">
            <summary>
            Same as <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Xml.DynamicContext.DynamicVariable">
            <summary>
            Represents a variable during dynamic expression execution.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.DynamicVariable.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="T:Umbraco.Core.Xml.XmlNamespaces">
            <summary>
            Provides public constants for wellknown XML namespaces.
            </summary>
            <remarks>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xml">
            <summary>
            The public XML 1.0 namespace. 
            </summary>
            <remarks>See http://www.w3.org/TR/2004/REC-xml-20040204/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.XmlNs">
            <summary>
            Public Xml Namespaces specification namespace. 
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.XmlNsPrefix">
            <summary>
            Public Xml Namespaces prefix. 
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xsi">
            <summary>
            XML Schema instance namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xsd">
            <summary>
            XML 1.0 Schema namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.CreateNodeList(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Creates an instance of a <see cref="T:System.Xml.XmlNodeList"/> that allows 
            enumerating <see cref="T:System.Xml.XmlNode"/> elements in the iterator.
            </summary>
            <param name="iterator">The result of a previous node selection 
            through an <see cref="T:System.Xml.XPath.XPathNavigator"/> query.</param>
            <returns>An initialized list ready to be enumerated.</returns>
            <remarks>The underlying XML store used to issue the query must be 
            an object inheriting <see cref="T:System.Xml.XmlNode"/>, such as 
            <see cref="T:System.Xml.XmlDocument"/>.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.ReadToEnd">
            <summary>
            Reads the entire iterator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.ReadTo(System.Int32)">
            <summary>
            Reads up to the specified index, or until the 
            iterator is consumed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.Done">
            <summary>
            Flags that the iterator has been consumed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.CurrentPosition">
            <summary>
            Current count of nodes in the iterator (read so far).
            </summary>
        </member>
        <member name="T:Umbraco.Core.Xml.XPathNavigatorExtensions">
            <summary>
            Provides extensions to XPathNavigator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XPathNavigatorExtensions.Select(System.Xml.XPath.XPathNavigator,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects a node set, using the specified XPath expression.
            </summary>
            <param name="navigator">A source XPathNavigator.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>An iterator over the nodes matching the specified expression.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.XPathNavigatorExtensions.Select(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Selects a node set, using the specified XPath expression.
            </summary>
            <param name="navigator">A source XPathNavigator.</param>
            <param name="expression">An XPath expression.</param>
            <param name="variables">A set of XPathVariables.</param>
            <returns>An iterator over the nodes matching the specified expression.</returns>
        </member>
        <member name="T:Umbraco.Core.Xml.XPathVariable">
            <summary>
            Represents a variable in an XPath query.
            </summary>
            <remarks>The name must be <c>foo</c> in the constructor and <c>$foo</c> in the XPath query.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XPathVariable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.XPathVariable"/> class with a name and a value.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Umbraco.Core.Xml.XPathVariable.Name">
            <summary>
            Gets or sets the name of the variable.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XPathVariable.Value">
            <summary>
            Gets or sets the value of the variable.
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UmbracoExamine</name>
    </assembly>
    <members>
        <member name="T:UmbracoExamine.BaseUmbracoIndexer">
            <summary>
            An abstract provider containing the basic functionality to be able to query against
            Umbraco data.
            </summary>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.#ctor(Examine.IIndexCriteria,System.IO.DirectoryInfo,UmbracoExamine.DataServices.IDataService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexerData"></param>
            <param name="indexPath"></param>
            <param name="dataService"></param>
            <param name="analyzer"></param>
        </member>
        <member name="F:UmbracoExamine.BaseUmbracoIndexer.DisableInitializationCheck">
            <summary>
            Used for unit tests
            </summary>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Setup the properties for the indexer from the provider settings
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="F:UmbracoExamine.BaseUmbracoIndexer._internalSearcherLocker">
            <summary>
            Used to aquire the internal searcher
            </summary>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.RebuildIndex">
            <summary>
            override to check if we can actually initialize. 
            </summary>
            <remarks>
            This check is required since the base examine lib will try to rebuild on startup
            </remarks>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.IndexAll(System.String)">
            <summary>
            override to check if we can actually initialize. 
            </summary>
            <remarks>
            This check is required since the base examine lib will try to rebuild on startup
            </remarks>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.DeleteFromIndex(System.String)">
            <summary>
            override to check if we can actually initialize. 
            </summary>
            <remarks>
            This check is required since the base examine lib will try to rebuild on startup
            </remarks>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.CanInitialize">
            <summary>
            Returns true if the Umbraco application is in a state that we can initialize the examine indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.ValidateDocument(System.Xml.Linq.XElement)">
            <summary>
            Ensures that the node being indexed is of a correct type and is a descendent of the parent id specified.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.PerformIndexRebuild">
            <summary>
            Reindexes all supported types
            </summary>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.PerformIndexAll(System.String)">
            <summary>
            Builds an xpath statement to query against Umbraco data for the index type specified, then
            initiates the re-indexing of the data matched.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.GetXDocument(System.String,System.String)">
            <summary>
            Returns an XDocument for the entire tree stored for the IndexType specified.
            </summary>
            <param name="xPath">The xpath to the node.</param>
            <param name="type">The type of data to request from the data service.</param>
            <returns>Either the Content or Media xml. If the type is not of those specified null is returned</returns>
        </member>
        <member name="M:UmbracoExamine.BaseUmbracoIndexer.AddNodesToIndex(System.String,System.String)">
            <summary>
            Adds all nodes with the given xPath root.
            </summary>
            <param name="xPath">The x path.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:UmbracoExamine.BaseUmbracoIndexer.EnableDefaultEventHandler">
            <summary>
            If true, the IndexingActionHandler will be run to keep the default index up to date.
            </summary>
        </member>
        <member name="P:UmbracoExamine.BaseUmbracoIndexer.SupportUnpublishedContent">
            <summary>
            Determines if the manager will call the indexing methods when content is saved or deleted as
            opposed to cache being updated.
            </summary>
        </member>
        <member name="P:UmbracoExamine.BaseUmbracoIndexer.DataService">
            <summary>
            The data service used for retreiving and submitting data to the cms
            </summary>
        </member>
        <member name="P:UmbracoExamine.BaseUmbracoIndexer.SupportedTypes">
            <summary>
            the supported indexable types
            </summary>
        </member>
        <member name="T:UmbracoExamine.Config.IndexSetExtensions">
            <summary>
            Extension methods for IndexSet
            </summary>
        </member>
        <member name="M:UmbracoExamine.Config.IndexSetExtensions.ToIndexCriteria(Examine.LuceneEngine.Config.IndexSet,UmbracoExamine.DataServices.IDataService)">
            <summary>
            Convert the indexset to indexerdata.
            This detects if there are no user/system fields specified and if not, uses the data service to look them 
            up and update the in memory IndexSet.
            </summary>
            <param name="set"></param>
            <param name="svc"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.IContentService.GetAllUserPropertyNames">
            <summary>
            Returns a list of ALL properties names for all nodes defined in the data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.IContentService.GetAllSystemPropertyNames">
            <summary>
            Returns a list of ALL system property names for all nodes defined in the data source
            </summary>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.DataServices.PropertyAliasDto">
            <summary>
            A Dto object for returning property aliases from PetaPoco
            </summary>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.StripHtml(System.String)">
            <summary>
            removes html markup from a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetPublishedContentByXPath(System.String)">
            <summary>
            Gets published content by xpath
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetLatestContentByXPath(System.String)">
            <summary>
            This is quite an intensive operation...
            get all root content, then get the XML structure for all children,
            then run xpath against the navigator that's created
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.IsProtected(System.Int32,System.String)">
            <summary>
            Check if the node is protected
            </summary>
            <param name="nodeId"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetAllUserPropertyNames">
            <summary>
            Returns a list of all of the user defined property names in Umbraco
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoContentService.GetAllSystemPropertyNames">
            <summary>
            Returns a list of all system field names in Umbraco
            </summary>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.DataServices.UmbracoMediaService">
            <summary>
            Data service used to query for media
            </summary>
        </member>
        <member name="M:UmbracoExamine.DataServices.UmbracoMediaService.GetLatestMediaByXpath(System.String)">
            <summary>
            This is quite an intensive operation...
            get all root media, then get the XML structure for all children,
            then run xpath against the navigator that's created
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.IndexTypes">
            <summary>
            The index types stored in the Lucene Index
            </summary>
        </member>
        <member name="F:UmbracoExamine.IndexTypes.Content">
            <summary>
            The content index type        
            </summary>
            <remarks>
            Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="F:UmbracoExamine.IndexTypes.Media">
            <summary>
            The media index type        
            </summary>
            <remarks>
            Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="F:UmbracoExamine.IndexTypes.Member">
            <summary>
            The member index type        
            </summary>
            <remarks>
            Is lower case because the Standard Analyzer requires lower case
            </remarks>
        </member>
        <member name="T:UmbracoExamine.LegacyLibrary">
            <summary>
            This is only used for backward compatibility to get access to the umbraco.library object but this needs to be done
            via reflection because of the circular reference we have between Umbraco.Web and UmbracoExamine. 
            </summary>
        </member>
        <member name="T:UmbracoExamine.LocalStorage.AzureLocalStorageDirectory">
            <summary>
            When running on Azure websites, we can use the local user's storage space
            </summary>
        </member>
        <member name="T:UmbracoExamine.LocalStorage.ILocalStorageDirectory">
            <summary>
            Used to resolve the local storage folder
            </summary>
        </member>
        <member name="T:UmbracoExamine.LocalStorage.CodeGenLocalStorageDirectory">
            <summary>
            Use the ASP.Net CodeGen folder to store the index files
            </summary>
            <remarks>
            This is the default implementation - but it comes with it's own limitations - the CodeGen folder is cleared whenever new
            DLLs are changed in the /bin folder (among other circumstances) which means the index would be re-synced (or rebuilt) there.
            </remarks>
        </member>
        <member name="T:UmbracoExamine.LocalStorage.LocalTempStorageDirectory">
            <summary>
            Used to read data from local temp storage and write to both local storage and main storage
            </summary>    
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.FileExists(System.String)">
            <summary>Returns true if a file with the given name exists. </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.FileModified(System.String)">
            <summary>Returns the time the named file was last modified. </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.TouchFile(System.String)">
            <summary>Set the modified time of an existing file to now. </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.DeleteFile(System.String)">
            <summary>Removes an existing file in the directory. </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.FileLength(System.String)">
            <summary>Returns the length of a file in the directory. </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.CreateOutput(System.String)">
            <summary>
            Creates a new, empty file in the directory with the given name.
            Returns a stream writing this file. 
            </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.OpenInput(System.String)">
            <summary>
            Returns a stream reading an existing file.
            </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.OpenInput(System.String,System.Int32)">
            <summary>
            Creates an IndexInput for the file with the given name. 
            </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.Sync(System.String)">
            <summary>
            Ensure that any writes to this file are moved to
                        stable storage.  Lucene uses this to properly commit
                        changes to the index, to prevent a machine/OS crash
                        from corrupting the index. 
            </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.GetLockID">
            <summary>
            Return a string identifier that uniquely differentiates
                        this Directory instance from other Directory instances.
                        This ID should be the same if two Directory instances
                        (even in different JVMs and/or on different machines)
                        are considered "the same index".  This is how locking
                        "scopes" to the right index.
            
            </summary>
        </member>
        <member name="P:UmbracoExamine.LocalStorage.LocalTempStorageDirectory.Enabled">
            <summary>
            If initialization fails, it will be disabled and then this will just wrap the 'real directory'
            </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.LocalTempStorageIndexer.TryCreateWriterWithRetry(Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer)">
            <summary>
            Attempts to create an index writer, it will retry on failure 5 times and on the last time will try to forcefully unlock the index files
            </summary>
            <param name="baseLuceneDirectory"></param>
            <param name="analyzer"></param>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.LocalStorage.MultiIndexLock">
            <summary>
            Lock that wraps multiple locks
            </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.MultiIndexLock.Obtain">
            <summary>
            Attempts to obtain exclusive access and immediately return
                        upon success or failure.
            </summary>
            <returns>
            true iff exclusive access is obtained
            </returns>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.MultiIndexLock.Release">
            <summary>
            Releases exclusive access. 
            </summary>
        </member>
        <member name="M:UmbracoExamine.LocalStorage.MultiIndexLock.IsLocked">
            <summary>
            Returns true if the resource is currently locked.  Note that one must
                        still call <see cref="M:Lucene.Net.Store.Lock.Obtain"/> before using the resource. 
            </summary>
        </member>
        <member name="T:UmbracoExamine.LocalStorage.MultiIndexLockFactory">
            <summary>
            Lock factory that wraps multiple factories
            </summary>
        </member>
        <member name="T:UmbracoExamine.UmbracoMemberIndexer">
            <summary>
            Custom indexer for members
            </summary>
        </member>
        <member name="T:UmbracoExamine.UmbracoContentIndexer">
            <summary>
            
            </summary>
        </member>
        <member name="F:UmbracoExamine.UmbracoContentIndexer.IndexPathFieldName">
            <summary>
            Used to store the path of a content object
            </summary>
        </member>
        <member name="F:UmbracoExamine.UmbracoContentIndexer.RawFieldPrefix">
            <summary>
            The prefix added to a field when it is duplicated in order to store the original raw value.
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.#ctor(Examine.IIndexCriteria,System.IO.DirectoryInfo,UmbracoExamine.DataServices.IDataService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexerData"></param>
            <param name="indexPath"></param>
            <param name="dataService"></param>
            <param name="analyzer"></param>
            <param name="async"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.#ctor(Examine.IIndexCriteria,Lucene.Net.Store.Directory,UmbracoExamine.DataServices.IDataService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexerData"></param>
            <param name="luceneDirectory"></param>
            <param name="dataService"></param>
            <param name="analyzer"></param>
            <param name="async"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.#ctor(Examine.IIndexCriteria,Lucene.Net.Store.Directory,UmbracoExamine.DataServices.IDataService,Umbraco.Core.Services.IContentService,Umbraco.Core.Services.IMediaService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IUserService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexerData"></param>
            <param name="luceneDirectory"></param>
            <param name="dataService"></param>
            <param name="contentService"></param>
            <param name="mediaService"></param>
            <param name="dataTypeService"></param>
            <param name="userService"></param>
            <param name="analyzer"></param>
            <param name="async"></param>
        </member>
        <member name="F:UmbracoExamine.UmbracoContentIndexer.IndexFieldPolicies">
            <summary>
            A type that defines the type of index for each Umbraco field (non user defined fields)
            Alot of standard umbraco fields shouldn't be tokenized or even indexed, just stored into lucene
            for retreival after searching.
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Set up all properties for the indexer based on configuration information specified. This will ensure that
            all of the folders required by the indexer are created and exist. This will also create an instruction
            file declaring the computer name that is part taking in the indexing. This file will then be used to
            determine the master indexer machine in a load balanced environment (if one exists).
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.
            </exception>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.OnDocumentWriting(Examine.LuceneEngine.DocumentWritingEventArgs)">
            <summary>
            This ensures that the special __Raw_ fields are indexed
            </summary>
            <param name="docArgs"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.ReIndexNode(System.Xml.Linq.XElement,System.String)">
            <summary>
            Overridden for logging
            </summary>
            <param name="node"></param>
            <param name="type"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.DeleteFromIndex(System.String)">
            <summary>
            Deletes a node from the index.                
            </summary>
            <remarks>
            When a content node is deleted, we also need to delete it's children from the index so we need to perform a 
            custom Lucene search to find all decendents and create Delete item queues for them too.
            </remarks>
            <param name="nodeId">ID of the node to delete</param>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.AddSingleNodeToIndex(System.Xml.Linq.XElement,System.String)">
            <summary>
            Overridden for logging.
            </summary>
            <param name="node"></param>
            <param name="type"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.RefreshIndexerDataFromDataService">
            <summary>
            Used to refresh the current IndexerData from the data in the DataService. This can be used
            if there are more properties added/removed from the database
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.OnGatheringNodeData(Examine.IndexingNodeDataEventArgs)">
            <summary>
            Override this method to strip all html from all user fields before raising the event, then after the event 
            ensure our special Path field is added to the collection
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.OnDuplicateFieldWarning(System.Int32,System.String,System.String)">
            <summary>
            Called when a duplicate field is detected in the dictionary that is getting indexed.
            </summary>
            <param name="nodeId"></param>
            <param name="indexSetName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.GetSpecialFieldsToIndex(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Overridden to add the path property to the special fields to index
            </summary>
            <param name="allValuesForIndexing"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.GetIndexerData(Examine.LuceneEngine.Config.IndexSet)">
            <summary>
            Creates an IIndexCriteria object based on the indexSet passed in and our DataService
            </summary>
            <param name="indexSet"></param>
            <returns></returns>
            <remarks>
            If we cannot initialize we will pass back empty indexer data since we cannot read from the database
            </remarks>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.GetPolicy(System.String)">
            <summary>
            return the index policy for the field name passed in, if not found, return normal
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.UmbracoContentIndexer.ValidateDocument(System.Xml.Linq.XElement)">
            <summary>
            Ensure that the content of this node is available for indexing (i.e. don't allow protected
            content to be indexed when this is disabled).
            <returns></returns>
            </summary>
        </member>
        <member name="P:UmbracoExamine.UmbracoContentIndexer.SupportProtectedContent">
            <summary>
            By default this is false, if set to true then the indexer will include indexing content that is flagged as publicly protected.
            This property is ignored if SupportUnpublishedContent is set to true.
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoMemberIndexer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoMemberIndexer.#ctor(Examine.IIndexCriteria,System.IO.DirectoryInfo,UmbracoExamine.DataServices.IDataService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexerData"></param>
            <param name="indexPath"></param>
            <param name="dataService"></param>
            <param name="analyzer"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoMemberIndexer.#ctor(Examine.IIndexCriteria,System.IO.DirectoryInfo,UmbracoExamine.DataServices.IDataService,Umbraco.Core.Services.IDataTypeService,Umbraco.Core.Services.IMemberService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexerData"></param>
            <param name="indexPath"></param>
            <param name="dataService"></param>
            <param name="dataTypeService"></param>
            <param name="memberService"></param>
            <param name="analyzer"></param>
            <param name="async"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoMemberIndexer.GetIndexerData(Examine.LuceneEngine.Config.IndexSet)">
            <summary>
            Ensures that the'_searchEmail' is added to the user fields so that it is indexed - without having to modify the config
            </summary>
            <param name="indexSet"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.UmbracoMemberIndexer.PerformIndexAll(System.String)">
            <summary>
            Reindex all members
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoMemberIndexer.OnGatheringNodeData(Examine.IndexingNodeDataEventArgs)">
            <summary>
            Add the special __key and _searchEmail fields
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:UmbracoExamine.UmbracoMemberIndexer.SupportedTypes">
            <summary>
            The supported types for this indexer
            </summary>
        </member>
        <member name="T:UmbracoExamine.ContentExtensions">
            <summary>
            Static methods to help query umbraco xml
            </summary>
        </member>
        <member name="M:UmbracoExamine.ContentExtensions.ToXDocument(umbraco.cms.businesslogic.Content,System.Boolean)">
            <summary>
            Converts a content node to XDocument
            </summary>
            <param name="node"></param>
            <param name="cacheOnly">true if data is going to be returned from cache</param>
            <returns></returns>
            <remarks>
            If the type of node is not a Document, the cacheOnly has no effect, it will use the API to return
            the xml. 
            </remarks>
        </member>
        <member name="M:UmbracoExamine.ContentExtensions.ToXDocument(umbraco.cms.businesslogic.Content)">
            <summary>
            Converts a content node to Xml
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:UmbracoExamine.UmbracoExamineSearcher">
            <summary>
            An Examine searcher which uses Lucene.Net as the 
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoExamineSearcher.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoExamineSearcher.#ctor(System.IO.DirectoryInfo,Lucene.Net.Analysis.Analyzer)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="indexPath"></param>
            <param name="analyzer"></param>
        </member>
        <member name="M:UmbracoExamine.UmbracoExamineSearcher.#ctor(Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer)">
            <summary>
            Constructor to allow for creating an indexer at runtime
            </summary>
            <param name="luceneDirectory"></param>
            <param name="analyzer"></param>
        </member>
        <member name="F:UmbracoExamine.UmbracoExamineSearcher.DisableInitializationCheck">
            <summary>
            Used for unit tests
            </summary>
        </member>
        <member name="M:UmbracoExamine.UmbracoExamineSearcher.CanInitialize">
            <summary>
            Returns true if the Umbraco application is in a state that we can initialize the examine indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.UmbracoExamineSearcher.CreateSearchCriteria(System.String,Examine.SearchCriteria.BooleanOperation)">
            <summary>
            Override in order to set the nodeTypeAlias field name of the underlying SearchCriteria to __NodeTypeAlias
            </summary>
            <param name="type"></param>
            <param name="defaultOperation"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.UmbracoExamineSearcher.GetSearchFields">
            <summary>
            Returns a list of fields to search on, this will also exclude the IndexPathFieldName and node type alias
            </summary>
            <returns></returns>
        </member>
        <member name="P:UmbracoExamine.UmbracoExamineSearcher.Name">
            <summary>
            we override name because we need to manually set it if !CanInitialize() 
            since we cannot call base.Initialize in that case.
            </summary>
        </member>
        <member name="T:UmbracoExamine.XsltExtensions">
            <summary>
            Methods to support Umbraco XSLT extensions.
            </summary>
            <remarks>
            XSLT extensions will ONLY work for provider that have a base class of BaseUmbracoIndexer
            </remarks>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.Search(System.String,System.Boolean,Examine.Providers.BaseSearchProvider,System.String)">
            <summary>
             Uses the provider specified to search, returning an XPathNodeIterator
            </summary>
            <param name="searchText"></param>
            <param name="useWildcards"></param>
            <param name="provider"></param>
            <param name="indexType"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.Search(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Uses the provider specified to search, returning an XPathNodeIterator
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <param name="providerName">Name of the provider.</param>
            <param name="indexType">Type of the index.</param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.Search(System.String,System.Boolean,System.String)">
            <summary>
            Uses the provider specified to search, returning an XPathNodeIterator
            </summary>
            <param name="searchText"></param>
            <param name="useWildcards"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.Search(System.String,System.Boolean)">
            <summary>
            Uses the default provider specified to search, returning an XPathNodeIterator
            </summary>
            <param name="searchText">The search query</param>
            <param name="useWildcards">Enable a wildcard search query</param>
            <returns>A node-set of the search results</returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.Search(System.String)">
            <summary>
            Uses the default provider specified to search, returning an XPathNodeIterator
            </summary>
            <param name="searchText">The search query</param>
            <returns>A node-set of the search results</returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchMediaOnly(System.String,System.Boolean,System.String)">
            <summary>
            Will perform a search against the media index type only
            </summary>
            <param name="searchText"></param>
            <param name="useWildcards"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchMediaOnly(System.String,System.Boolean)">
            <summary>
            Will perform a search against the media index type only
            </summary>
            <param name="searchText"></param>
            <param name="useWildcards"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchMediaOnly(System.String)">
            <summary>
            Will perform a search against the media index type only
            </summary>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchMemberOnly(System.String,System.Boolean,System.String)">
            <summary>
            Searches the member only.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchMemberOnly(System.String,System.Boolean)">
            <summary>
            Searches the member only.
            </summary>
            <param name="searchText">The search text.</param>
            <param name="useWildcards">if set to <c>true</c> [use wildcards].</param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchMemberOnly(System.String)">
            <summary>
            Searches the member only.
            </summary>
            <param name="searchText">The search text.</param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchContentOnly(System.String,System.Boolean,System.String)">
            <summary>
            Will perform a search against the content index type only
            </summary>
            <param name="searchText"></param>
            <param name="useWildcards"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchContentOnly(System.String,System.Boolean)">
            <summary>
            Will perform a search against the content index type only
            </summary>
            <param name="searchText"></param>
            <param name="useWildcards"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.SearchContentOnly(System.String)">
            <summary>
            Will perform a search against the content index type only
            </summary>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:UmbracoExamine.XsltExtensions.GetResultsAsXml(Examine.ISearchResults)">
            <summary>
            Gets the results as XML.
            </summary>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
    </members>
</doc>

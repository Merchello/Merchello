<?xml version="1.0"?>
<doc>
    <assembly>
        <name>umbraco</name>
    </assembly>
    <members>
        <member name="M:Umbraco.Web.ApplicationContextExtensions.RestartApplicationPool(Umbraco.Core.ApplicationContext,System.Web.HttpContextBase)">
            <summary>
            This will restart the application pool
            </summary>
            <param name="appContext"> </param>
            <param name="http"></param>
        </member>
        <member name="M:Umbraco.Web.Models.ContentExtensions.GetCulture(Umbraco.Core.Models.IContent,System.Uri)">
            <summary>
            Gets the culture that would be selected to render a specified content,
            within the context of a specified current request.
            </summary>
            <param name="content">The content.</param>
            <param name="current">The request Uri.</param>
            <returns>The culture that would be selected to render the content.</returns>
        </member>
        <member name="M:Umbraco.Web.Models.ContentExtensions.GetCulture(Umbraco.Web.UmbracoContext,Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Services.IContentService,System.Int32,System.String,System.Uri)">
            <summary>
            Gets the culture that would be selected to render a specified content,
            within the context of a specified current request.
            </summary>
            <param name="umbracoContext">An <see cref="T:Umbraco.Web.UmbracoContext"/> instance.</param>
            <param name="localizationService">An <see cref="T:Umbraco.Core.Services.ILocalizationService"/> implementation.</param>
            <param name="contentService">An <see cref="T:Umbraco.Core.Services.IContentService"/> implementation.</param>
            <param name="contentId">The content identifier.</param>
            <param name="contentPath">The content path.</param>
            <param name="current">The request Uri.</param>
            <returns>The culture that would be selected to render the content.</returns>
        </member>
        <member name="T:Umbraco.Web.Models.LegacyConvertedNode">
            <summary>
            A legacy INode that wraps IPublishedContent
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.LegacyConvertedNodeProperty">
            <summary>
            A legacy IProperty that wraps IPublishedProperty
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.DisableClientCacheAttribute">
            <summary>
            Will ensure that client-side cache does not occur by sending the correct response headers
            </summary>    
        </member>
        <member name="T:Umbraco.Web.Mvc.ReflectedFixedRazorViewEngine">
            <summary>
            This is here to support compatibility with both MVC4 and MVC5
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.ThreadingTaskImmutable">
            <summary>
            Wraps a Task within an object that gives access to its GetAwaiter method and Status
            property while ensuring that it cannot be modified in any way.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.ThreadingTaskImmutable.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.ThreadingTaskImmutable"/> class with a Task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.ThreadingTaskImmutable.GetAwaiter">
            <summary>
            Gets an awaiter used to await the task.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="P:Umbraco.Web.Scheduling.ThreadingTaskImmutable.Status">
            <summary>
            Gets the TaskStatus of the task.
            </summary>
            <returns>The current TaskStatus of the task.</returns>
        </member>
        <member name="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1">
            <summary>
            Manages a queue of tasks of type <typeparamref name="T"/> and runs them in the background.
            </summary>
            <typeparam name="T">The type of the managed tasks.</typeparam>
            <remarks>The task runner is web-aware and will ensure that it shuts down correctly when the AppDomain
            shuts down (ie is unloaded).</remarks>
        </member>
        <member name="T:Umbraco.Web.Scheduling.IBackgroundTaskRunner`1">
            <summary>
            Defines a service managing a queue of tasks of type <typeparamref name="T"/> and running them in the background.
            </summary>
            <typeparam name="T">The type of the managed tasks.</typeparam>
            <remarks>The interface is not complete and exists only to have the contravariance on T.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class.
            </summary>
            <param name="name">The name of the runner.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.#ctor(Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class with a set of options.
            </summary>
            <param name="options">The set of options.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.#ctor(System.String,Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class with a set of options.
            </summary>
            <param name="name">The name of the runner.</param>
            <param name="options">The set of options.</param>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.Add(`0)">
            <summary>
            Adds a task to the queue.
            </summary>
            <param name="task">The task to add.</param>
            <exception cref="T:System.InvalidOperationException">The task runner has completed.</exception>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.TryAdd(`0)">
            <summary>
            Tries to add a task to the queue.
            </summary>
            <param name="task">The task to add.</param>
            <returns>true if the task could be added to the queue; otherwise false.</returns>
            <remarks>Returns false if the runner is completed.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StartUp">
            <summary>
            Starts the tasks runner, if not already running.
            </summary>
            <remarks>Is invoked each time a task is added, to ensure it is going to be processed.</remarks>
            <exception cref="T:System.InvalidOperationException">The task runner has completed.</exception>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StartUpLocked">
            <summary>
            Starts the tasks runner, if not already running.
            </summary>
            <remarks>Must be invoked within lock(_locker) and with _isCompleted being false.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.Shutdown(System.Boolean,System.Boolean)">
            <summary>
            Shuts the taks runner down.
            </summary>
            <param name="force">True for force the runner to stop.</param>
            <param name="wait">True to wait until the runner has stopped.</param>
            <remarks>If <paramref name="force"/> is false, no more tasks can be queued but all queued tasks
            will run. If it is true, then only the current one (if any) will end and no other task will run.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.PumpIBackgroundTasks(System.Threading.Tasks.TaskFactory,System.Threading.CancellationToken)">
            <summary>
            Runs background tasks for as long as there are background tasks in the queue, with an asynchronous operation.
            </summary>
            <param name="factory">The supporting <see cref="T:System.Threading.Tasks.TaskFactory"/>.</param>
            <param name="token">A cancellation token.</param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.RunIBackgroundTaskAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Runs a background task asynchronously.
            </summary>
            <param name="bgTask">The background task.</param>
            <param name="token">A cancellation token.</param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.Stop(System.Boolean)">
            <summary>
            Requests a registered object to unregister.
            </summary>
            <param name="immediate">true to indicate the registered object should unregister from the hosting
            environment before returning; otherwise, false.</param>
            <remarks>
            <para>"When the application manager needs to stop a registered object, it will call the Stop method."</para>
            <para>The application manager will call the Stop method to ask a registered object to unregister. During
            processing of the Stop method, the registered object must call the HostingEnvironment.UnregisterObject method.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.TaskCount">
            <summary>
            Gets the number of tasks in the queue.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.IsRunning">
            <summary>
            Gets a value indicating whether a task is currently running.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.IsCompleted">
            <summary>
            Gets a value indicating whether the runner has completed and cannot accept tasks anymore.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.CurrentThreadingTask">
            <summary>
            Gets the running task as an immutable object.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no running task.</exception>
            <remarks>
            Unless the AutoStart option is true, there will be no running task until
            a background task is added to the queue. Unless the KeepAlive option is true, there
            will be no running task when the queue is empty.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.StoppedAwaitable">
            <summary>
            Gets an awaitable used to await the runner running operation.
            </summary>
            <returns>An awaitable instance.</returns>
            <remarks>Used to wait until the runner is no longer running (IsRunning == false),
            though the runner could be started again afterwards by adding tasks to it.</remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunner`1.TerminatedAwaitable">
            <summary>
            Gets an awaitable used to await the runner.
            </summary>
            <returns>An awaitable instance.</returns>
            <remarks>Used to wait until the runner is terminated.</remarks>
        </member>
        <member name="M:Umbraco.Web.BatchedServerMessenger.MessageSeversForIdsOrJson(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,Umbraco.Core.Sync.MessageType,System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            We need to check if distributed calls are enabled, if they are we also want to make sure 
            that the current server's cache is updated internally in real time instead of at the end of
            the call. This is because things like the URL cache, etc... might need to be updated during
            the request that is making these calls.
            </summary>
            <param name="servers"></param>
            <param name="refresher"></param>
            <param name="dispatchType"></param>
            <param name="ids"></param>
            <param name="jsonPayload"></param>
            <remarks>
            See: http://issues.umbraco.org/issue/U4-2633#comment=67-15604
            </remarks>
        </member>
        <member name="M:Umbraco.Web.BatchedServerMessenger.PerformDistributedCall(System.Collections.Generic.IEnumerable{Umbraco.Core.Sync.IServerAddress},umbraco.interfaces.ICacheRefresher,Umbraco.Core.Sync.MessageType,System.Collections.Generic.IEnumerable{System.Object},System.Type,System.String)">
            <summary>
            This adds the call to batched list
            </summary>
            <param name="servers"></param>
            <param name="refresher"></param>
            <param name="dispatchType"></param>
            <param name="ids"></param>
            <param name="idArrayType"></param>
            <param name="jsonPayload"></param>
        </member>
        <member name="T:Umbraco.Web.CacheHelperExtensions">
            <summary>
            Extension methods for the cache helper
            </summary>
        </member>
        <member name="M:Umbraco.Web.CacheHelperExtensions.CachedPartialView(Umbraco.Core.CacheHelper,System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Int32,System.String,System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Outputs and caches a partial view in MVC
            </summary>
            <param name="cacheHelper"></param>
            <param name="htmlHelper"></param>
            <param name="partialViewName"></param>
            <param name="model"></param>
            <param name="cachedSeconds"></param>
            <param name="cacheKey">used to cache the partial view, this key could change if it is cached by page or by member</param>
            <param name="viewData"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.CacheHelperExtensions.ClearPartialViewCache(Umbraco.Core.CacheHelper)">
            <summary>
            Clears the cache for partial views
            </summary>
            <param name="cacheHelper"></param>
        </member>
        <member name="T:Umbraco.Web.Cache.ApplicationCacheRefresher">
            <summary>
            Handles Application cache invalidation/refreshing
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.ApplicationTreeCacheRefresher">
            <summary>
            Handles Application tree cache invalidation/refreshing
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.ContentTypeCacheRefresher">
            <summary>
            A cache refresher to ensure content type cache is updated when content types change - this is applicable to content, media and member types
            </summary>
            <remarks>
            This is not intended to be used directly in your code
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.ContentTypeCacheRefresher.DeserializeFromJsonPayload(System.String)">
            <summary>
            Converts the json to a JsonPayload object
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.ContentTypeCacheRefresher.FromContentType(Umbraco.Core.Models.IContentTypeBase,System.Boolean)">
            <summary>
            Converts a content type to a jsonPayload object
            </summary>
            <param name="contentType"></param>
            <param name="isDeleted">if the item was deleted</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.ContentTypeCacheRefresher.SerializeToJsonPayload(System.Boolean,Umbraco.Core.Models.IContentTypeBase[])">
            <summary>
            Creates the custom Json payload used to refresh cache amongst the servers
            </summary>
            <param name="isDeleted">specify false if this is an update, otherwise true if it is a deletion</param>
            <param name="contentTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.ContentTypeCacheRefresher.Refresh(System.String)">
            <summary>
            Refreshes the cache using the custom jsonPayload provided
            </summary>
            <param name="jsonPayload"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.ContentTypeCacheRefresher.ClearContentTypeCache(Umbraco.Web.Cache.ContentTypeCacheRefresher.JsonPayload[])">
            <summary>
            This clears out all cache associated with a content type
            </summary>
            <param name="payloads"></param>
            <remarks>
            The cache that is required to be cleared when a content type is updated is as follows:
            - ApplicationCache (keys to clear):
            -- CacheKeys.PropertyTypeCacheKey + propertyType.Id (each property type assigned)
            -- CacheKeys.ContentTypePropertiesCacheKey + contentType.Id
            - ContentType.RemoveFromDataTypeCache (clears static object/dictionary cache)
            - InMemoryCacheProvider.Current.Clear();
            - RuntimeCacheProvider.Current.Clear(); 
            - RoutesCache.Clear();        
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.ContentTypeCacheRefresher.ClearContentTypeCache(Umbraco.Web.Cache.ContentTypeCacheRefresher.JsonPayload)">
            <summary>
            Clears cache for an individual IContentTypeBase object
            </summary>
            <param name="payload"></param>
            <remarks>
            See notes for the other overloaded ClearContentTypeCache for 
            full details on clearing cache.
            </remarks>
            <returns>
            Return true if the alias of the content type changed
            </returns>
        </member>
        <member name="M:Umbraco.Web.Cache.ContentTypeCacheRefresher.ClearContentTypeCache(System.Boolean,System.Int32[])">
            <summary>
            Clears the cache for any content type with the specified Ids
            </summary>
            <param name="isDeleted">true if the entity was deleted, false if it is just an update</param>
            <param name="ids"></param>
        </member>
        <member name="T:Umbraco.Web.Cache.DataTypeCacheRefresher">
            <summary>
            A cache refresher to ensure member cache is updated when members change
            </summary>    
        </member>
        <member name="M:Umbraco.Web.Cache.DataTypeCacheRefresher.DeserializeFromJsonPayload(System.String)">
            <summary>
            Converts the json to a JsonPayload object
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.DataTypeCacheRefresher.SerializeToJsonPayload(umbraco.cms.businesslogic.datatype.DataTypeDefinition[])">
            <summary>
            Creates the custom Json payload used to refresh cache amongst the servers
            </summary>
            <param name="dataTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.DataTypeCacheRefresher.SerializeToJsonPayload(Umbraco.Core.Models.IDataTypeDefinition[])">
            <summary>
            Creates the custom Json payload used to refresh cache amongst the servers
            </summary>
            <param name="dataTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.DataTypeCacheRefresher.FromDataTypeDefinition(umbraco.cms.businesslogic.datatype.DataTypeDefinition)">
            <summary>
            Converts a macro to a jsonPayload object
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.DataTypeCacheRefresher.FromDataTypeDefinition(Umbraco.Core.Models.IDataTypeDefinition)">
            <summary>
            Converts a macro to a jsonPayload object
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Cache.DictionaryCacheRefresher">
            <summary>
            A cache refresher to ensure the dictionary cache is refreshed when dictionary change
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.DistributedCache">
            <summary>
            DistributedCache is used to invalidate cache throughout the application which also takes in to account load balancing environments automatically
            </summary>
            <remarks>
            Distributing calls to all registered load balanced servers, ensuring that content are synced and cached on all servers.
            Dispatcher is exendable, so 3rd party services can easily be integrated into the workflow, using the interfaces.ICacheRefresher interface.
            
            Dispatcher can refresh/remove content, templates and macros.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Refresh``1(System.Guid,System.Func{``0,System.Int32},``0[])">
            <summary>
            Sends a request to all registered load-balanced servers to refresh node with the specified Id
            using the specified ICacheRefresher with the guid factoryGuid.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factoryGuid"></param>
            <param name="getNumericId">The callback method to retrieve the ID from an instance</param>
            <param name="instances">The instances containing Ids</param>
            <remarks>
            This method is much better for performance because it does not need to re-lookup an object instance
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Refresh(System.Guid,System.Int32)">
            <summary>
            Sends a request to all registered load-balanced servers to refresh node with the specified Id
            using the specified ICacheRefresher with the guid factoryGuid.
            </summary>
            <param name="factoryGuid">The unique identifier of the ICacheRefresher used to refresh the node.</param>
            <param name="id">The id of the node.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Refresh(System.Guid,System.Guid)">
            <summary>
            Sends a request to all registered load-balanced servers to refresh the node with the specified guid
            using the specified ICacheRefresher with the guid factoryGuid.
            </summary>
            <param name="factoryGuid">The unique identifier of the ICacheRefresher used to refresh the node.</param>
            <param name="id">The guid of the node.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.RefreshByJson(System.Guid,System.String)">
            <summary>
            Sends a request to all registered load-balanced servers to refresh data based on the custom json payload
            using the specified ICacheRefresher with the guid factoryGuid.
            </summary>
            <param name="factoryGuid"></param>
            <param name="jsonPayload"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.RefreshAll(System.Guid)">
            <summary>
            Sends a request to all registered load-balanced servers to refresh all nodes
            using the specified ICacheRefresher with the guid factoryGuid.
            </summary>
            <param name="factoryGuid">The unique identifier.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.RefreshAll(System.Guid,System.Boolean)">
            <summary>
            Sends a request to all registered load-balanced servers to refresh all nodes
            using the specified ICacheRefresher with the guid factoryGuid.
            </summary>
            <param name="factoryGuid">The unique identifier.</param>
            <param name="allServers">
            If true will send the request out to all registered LB servers, if false will only execute the current server
            </param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Remove(System.Guid,System.Int32)">
            <summary>
            Sends a request to all registered load-balanced servers to remove the node with the specified id
            using the specified ICacheRefresher with the guid factoryGuid.
            </summary>
            <param name="factoryGuid">The unique identifier.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCache.Remove``1(System.Guid,System.Func{``0,System.Int32},``0[])">
            <summary>
            Sends a request to all registered load-balanced servers to remove the node specified
            using the specified ICacheRefresher with the guid factoryGuid.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factoryGuid"></param>
            <param name="getNumericId"></param>
            <param name="instances"></param>
        </member>
        <member name="P:Umbraco.Web.Cache.DistributedCache.Instance">
            <summary>
            Singleton
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Cache.DistributedCacheExtensions">
            <summary>
            Extension methods for DistrubutedCache
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshTemplateCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Refreshes the cache amongst servers for a template
            </summary>
            <param name="dc"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveTemplateCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Removes the cache amongst servers for a template
            </summary>
            <param name="dc"></param>
            <param name="templateId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshDictionaryCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Refreshes the cache amongst servers for a dictionary item
            </summary>
            <param name="dc"></param>
            <param name="dictionaryItemId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveDictionaryCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Refreshes the cache amongst servers for a dictionary item
            </summary>
            <param name="dc"></param>
            <param name="dictionaryItemId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshDataTypeCache(Umbraco.Web.Cache.DistributedCache,umbraco.cms.businesslogic.datatype.DataTypeDefinition)">
            <summary>
            Refreshes the cache amongst servers for a data type
            </summary>
            <param name="dc"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveDataTypeCache(Umbraco.Web.Cache.DistributedCache,umbraco.cms.businesslogic.datatype.DataTypeDefinition)">
            <summary>
            Removes the cache amongst servers for a data type
            </summary>
            <param name="dc"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshDataTypeCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IDataTypeDefinition)">
            <summary>
            Refreshes the cache amongst servers for a data type
            </summary>
            <param name="dc"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveDataTypeCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IDataTypeDefinition)">
            <summary>
            Removes the cache amongst servers for a data type
            </summary>
            <param name="dc"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshAllPageCache(Umbraco.Web.Cache.DistributedCache)">
            <summary>
            Refreshes the cache amongst servers for all pages
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshPageCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Refreshes the cache amongst servers for a page
            </summary>
            <param name="dc"></param>
            <param name="documentId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshPageCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IContent[])">
            <summary>
            Refreshes page cache for all instances passed in
            </summary>
            <param name="dc"></param>
            <param name="content"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemovePageCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IContent[])">
            <summary>
            Removes the cache amongst servers for a page
            </summary>
            <param name="dc"></param>
            <param name="content"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemovePageCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Removes the cache amongst servers for a page
            </summary>
            <param name="dc"></param>
            <param name="documentId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshUnpublishedPageCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IContent[])">
            <summary>
            invokes the unpublished page cache refresher
            </summary>
            <param name="dc"></param>
            <param name="content"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveUnpublishedPageCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IContent[])">
            <summary>
            invokes the unpublished page cache refresher
            </summary>
            <param name="dc"></param>
            <param name="content"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveUnpublishedCachePermanently(Umbraco.Web.Cache.DistributedCache,System.Int32[])">
            <summary>
            invokes the unpublished page cache refresher to mark all ids for permanent removal
            </summary>
            <param name="dc"></param>
            <param name="contentIds"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMemberCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMember[])">
            <summary>
            Refreshes the cache among servers for a member
            </summary>
            <param name="dc"></param>
            <param name="members"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMemberCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMember[])">
            <summary>
            Removes the cache among servers for a member
            </summary>
            <param name="dc"></param>
            <param name="members"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMemberCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Refreshes the cache among servers for a member
            </summary>
            <param name="dc"></param>
            <param name="memberId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMemberCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Removes the cache among servers for a member
            </summary>
            <param name="dc"></param>
            <param name="memberId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMemberGroupCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Refreshes the cache among servers for a member group
            </summary>
            <param name="dc"></param>
            <param name="memberGroupId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMemberGroupCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Removes the cache among servers for a member group
            </summary>
            <param name="dc"></param>
            <param name="memberGroupId"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMediaCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMedia[])">
            <summary>
            Refreshes the cache amongst servers for media items
            </summary>
            <param name="dc"></param>
            <param name="media"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMediaCacheAfterMoving(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Events.MoveEventInfo{Umbraco.Core.Models.IMedia}[])">
            <summary>
            Refreshes the cache amongst servers for a media item after it's been moved
            </summary>
            <param name="dc"></param>
            <param name="media"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMediaCache(Umbraco.Web.Cache.DistributedCache,System.Int32)">
            <summary>
            Removes the cache amongst servers for a media item
            </summary>
            <param name="dc"></param>
            <param name="mediaId"></param>
            <remarks>
            Clearing by Id will never work for load balanced scenarios for media since we require a Path
            to clear all of the cache but the media item will be removed before the other servers can
            look it up. Only here for legacy purposes.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMediaCacheAfterRecycling(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Events.MoveEventInfo{Umbraco.Core.Models.IMedia}[])">
            <summary>
            Removes the cache among servers for media items when they are recycled
            </summary>
            <param name="dc"></param>
            <param name="media"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMediaCachePermanently(Umbraco.Web.Cache.DistributedCache,System.Int32[])">
            <summary>
            Removes the cache among servers for media items when they are permanently deleted
            </summary>
            <param name="dc"></param>
            <param name="mediaIds"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.ClearAllMacroCacheOnCurrentServer(Umbraco.Web.Cache.DistributedCache)">
            <summary>
            Clears the cache for all macros on the current server
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMacroCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMacro)">
            <summary>
            Refreshes the cache amongst servers for a macro item
            </summary>
            <param name="dc"></param>
            <param name="macro"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMacroCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMacro)">
            <summary>
            Removes the cache amongst servers for a macro item
            </summary>
            <param name="dc"></param>
            <param name="macro"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMacroCache(Umbraco.Web.Cache.DistributedCache,umbraco.cms.businesslogic.macro.Macro)">
            <summary>
            Refreshes the cache amongst servers for a macro item
            </summary>
            <param name="dc"></param>
            <param name="macro"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMacroCache(Umbraco.Web.Cache.DistributedCache,umbraco.cms.businesslogic.macro.Macro)">
            <summary>
            Removes the cache amongst servers for a macro item
            </summary>
            <param name="dc"></param>
            <param name="macro"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMacroCache(Umbraco.Web.Cache.DistributedCache,umbraco.macro)">
            <summary>
            Removes the cache amongst servers for a macro item
            </summary>
            <param name="dc"></param>
            <param name="macro"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshContentTypeCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IContentType)">
            <summary>
            Remove all cache for a given content type
            </summary>
            <param name="dc"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveContentTypeCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IContentType)">
            <summary>
            Remove all cache for a given content type
            </summary>
            <param name="dc"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMediaTypeCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMediaType)">
            <summary>
            Remove all cache for a given media type
            </summary>
            <param name="dc"></param>
            <param name="mediaType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMediaTypeCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMediaType)">
            <summary>
            Remove all cache for a given media type
            </summary>
            <param name="dc"></param>
            <param name="mediaType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RefreshMemberTypeCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMemberType)">
            <summary>
            Remove all cache for a given media type
            </summary>
            <param name="dc"></param>
            <param name="memberType"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.DistributedCacheExtensions.RemoveMemberTypeCache(Umbraco.Web.Cache.DistributedCache,Umbraco.Core.Models.IMemberType)">
            <summary>
            Remove all cache for a given media type
            </summary>
            <param name="dc"></param>
            <param name="memberType"></param>
        </member>
        <member name="T:Umbraco.Web.Cache.CacheRefresherEventHandler">
            <summary>
            Class which listens to events on business level objects in order to invalidate the cache amongst servers when data changes
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.UnPublishSingle(Umbraco.Core.Models.IContent)">
            <summary>
            Refreshes the xml cache for a single node by removing it
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.UpdateEntireCache">
            <summary>
            Refreshes the xml cache for all nodes
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.UpdateMultipleContentCache(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent})">
            <summary>
            Refreshes the xml cache for nodes in list
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.UpdateSingleContentCache(Umbraco.Core.Models.IContent)">
            <summary>
            Refreshes the xml cache for a single node
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.ContentServiceTrashed(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.MoveEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            Handles cache refreshing for when content is trashed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            This is for the unpublished page refresher - the entity will be unpublished before being moved to the trash
            and the unpublished event will take care of remove it from any published caches
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.ContentServiceCopied(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.CopyEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            Handles cache refreshing for when content is copied
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            When an entity is copied new permissions may be assigned to it based on it's parent, if that is the 
            case then we need to clear all user permissions cache.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.ContentServiceDeleted(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.DeleteEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            Handles cache refreshing for when content is deleted (not unpublished)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.ContentServiceSaved(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            Handles cache refreshing for when content is saved (not published)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            When an entity is saved we need to notify other servers about the change in order for the Examine indexes to 
            stay up-to-date for unpublished content.
            
            When an entity is created new permissions may be assigned to it based on it's parent, if that is the 
            case then we need to clear all user permissions cache.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.LocalizationServiceDeletedLanguage(Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Events.DeleteEventArgs{Umbraco.Core.Models.ILanguage})">
            <summary>
            Fires when a langauge is deleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.LocalizationServiceSavedLanguage(Umbraco.Core.Services.ILocalizationService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.ILanguage})">
            <summary>
            Fires when a langauge is saved
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.LanguageAfterSave(umbraco.cms.businesslogic.language.Language,umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Fires when a langauge is saved
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.LanguageNew(umbraco.cms.businesslogic.language.Language,umbraco.cms.businesslogic.NewEventArgs)">
            <summary>
            Fires when a langauge is created
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.LanguageAfterDelete(umbraco.cms.businesslogic.language.Language,umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Fires when a langauge is deleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.ContentTypeServiceDeletedMediaType(Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Events.DeleteEventArgs{Umbraco.Core.Models.IMediaType})">
            <summary>
            Fires when a media type is deleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.ContentTypeServiceDeletedContentType(Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Events.DeleteEventArgs{Umbraco.Core.Models.IContentType})">
            <summary>
            Fires when a content type is deleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.MemberTypeServiceDeleted(Umbraco.Core.Services.IMemberTypeService,Umbraco.Core.Events.DeleteEventArgs{Umbraco.Core.Models.IMemberType})">
            <summary>
            Fires when a member type is deleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.ContentTypeServiceSavedMediaType(Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IMediaType})">
            <summary>
            Fires when a media type is saved
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.ContentTypeServiceSavedContentType(Umbraco.Core.Services.IContentTypeService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IContentType})">
            <summary>
            Fires when a content type is saved
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.MemberTypeServiceSaved(Umbraco.Core.Services.IMemberTypeService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.IMemberType})">
            <summary>
            Fires when a member type is saved
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.FileServiceDeletedTemplate(Umbraco.Core.Services.IFileService,Umbraco.Core.Events.DeleteEventArgs{Umbraco.Core.Models.ITemplate})">
            <summary>
            Removes cache for template
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.FileServiceSavedTemplate(Umbraco.Core.Services.IFileService,Umbraco.Core.Events.SaveEventArgs{Umbraco.Core.Models.ITemplate})">
            <summary>
            Refresh cache for template
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.TemplateAfterDelete(umbraco.cms.businesslogic.template.Template,umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Removes cache for template
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.TemplateAfterSave(umbraco.cms.businesslogic.template.Template,umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Refresh cache for template
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.MacroAfterDelete(umbraco.cms.businesslogic.macro.Macro,umbraco.cms.businesslogic.DeleteEventArgs)">
            <summary>
            Flush macro from cache
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Cache.CacheRefresherEventHandler.MacroAfterSave(umbraco.cms.businesslogic.macro.Macro,umbraco.cms.businesslogic.SaveEventArgs)">
            <summary>
            Flush macro from cache
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Umbraco.Web.Cache.DomainCacheRefresher">
            <summary>
            A cache refresher to ensure language cache is refreshed when languages change
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.LanguageCacheRefresher">
            <summary>
            A cache refresher to ensure language cache is refreshed when languages change
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.MacroCacheRefresher">
            <summary>
            A cache refresher to ensure macro cache is updated when members change
            </summary>
            <remarks>
            This is not intended to be used directly in your code and it should be sealed but due to legacy code we cannot seal it.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.MacroCacheRefresher.DeserializeFromJsonPayload(System.String)">
            <summary>
            Converts the json to a JsonPayload object
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MacroCacheRefresher.SerializeToJsonPayload(umbraco.cms.businesslogic.macro.Macro[])">
            <summary>
            Creates the custom Json payload used to refresh cache amongst the servers
            </summary>
            <param name="macros"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MacroCacheRefresher.SerializeToJsonPayload(Umbraco.Core.Models.IMacro[])">
            <summary>
            Creates the custom Json payload used to refresh cache amongst the servers
            </summary>
            <param name="macros"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MacroCacheRefresher.SerializeToJsonPayload(umbraco.macro[])">
            <summary>
            Creates the custom Json payload used to refresh cache amongst the servers
            </summary>
            <param name="macros"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MacroCacheRefresher.FromMacro(Umbraco.Core.Models.IMacro)">
            <summary>
            Converts a macro to a jsonPayload object
            </summary>
            <param name="macro"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MacroCacheRefresher.FromMacro(umbraco.cms.businesslogic.macro.Macro)">
            <summary>
            Converts a macro to a jsonPayload object
            </summary>
            <param name="macro"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MacroCacheRefresher.FromMacro(umbraco.macro)">
            <summary>
            Converts a macro to a jsonPayload object
            </summary>
            <param name="macro"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Cache.MediaCacheRefresher">
            <summary>
            A cache refresher to ensure media cache is updated
            </summary>
            <remarks>
            This is not intended to be used directly in your code and it should be sealed but due to legacy code we cannot seal it.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.MediaCacheRefresher.DeserializeFromJsonPayload(System.String)">
            <summary>
            Converts the json to a JsonPayload object
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MediaCacheRefresher.SerializeToJsonPayload(Umbraco.Web.Cache.MediaCacheRefresher.OperationType,Umbraco.Core.Models.IMedia[])">
            <summary>
            Creates the custom Json payload used to refresh cache amongst the servers
            </summary>
            <param name="operation"></param>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MediaCacheRefresher.FromMedia(Umbraco.Core.Models.IMedia,Umbraco.Web.Cache.MediaCacheRefresher.OperationType)">
            <summary>
            Converts a macro to a jsonPayload object
            </summary>
            <param name="media"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Cache.MemberCacheRefresher">
            <summary>
            A cache refresher to ensure member cache is updated when members change
            </summary>
            <remarks>
            This is not intended to be used directly in your code and it should be sealed but due to legacy code we cannot seal it.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Cache.MemberGroupCacheRefresher.DeserializeFromJsonPayload(System.String)">
            <summary>
            Converts the json to a JsonPayload object
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MemberGroupCacheRefresher.SerializeToJsonPayload(Umbraco.Core.Models.IMemberGroup[])">
            <summary>
            Creates the custom Json payload used to refresh cache amongst the servers
            </summary>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.MemberGroupCacheRefresher.FromMemberGroup(Umbraco.Core.Models.IMemberGroup)">
            <summary>
            Converts a macro to a jsonPayload object
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Cache.PageCacheRefresher">
            <summary>
            PageCacheRefresher is the standard CacheRefresher used by Load-Balancing in Umbraco.
            </summary>
            <remarks>
            If Load balancing is enabled (by default disabled, is set in umbracoSettings.config) PageCacheRefresher will be called
            everytime content is added/updated/removed to ensure that the content cache is identical on all load balanced servers
            </remarks>    
        </member>
        <member name="M:Umbraco.Web.Cache.PageCacheRefresher.RefreshAll">
            <summary>
            Refreshes all nodes in umbraco.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.PageCacheRefresher.Refresh(System.Int32)">
            <summary>
            Refreshes the cache for the node with specified id
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Umbraco.Web.Cache.PageCacheRefresher.Remove(System.Int32)">
            <summary>
            Removes the node with the specified id from the cache
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="P:Umbraco.Web.Cache.PageCacheRefresher.UniqueIdentifier">
            <summary>
            Gets the unique identifier of the CacheRefresher.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Umbraco.Web.Cache.PageCacheRefresher.Name">
            <summary>
            Gets the name of the CacheRefresher
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Umbraco.Web.Cache.StylesheetCacheRefresher">
            <summary>
            A cache refresher to ensure stylesheet cache is refreshed when stylesheets change
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.StylesheetPropertyCacheRefresher">
            <summary>
            A cache refresher to ensure stylesheet property cache is refreshed when stylesheet properties change
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.TemplateCacheRefresher">
            <summary>
            A cache refresher to ensure template cache is updated when members change
            </summary>
            <remarks>
            This is not intended to be used directly in your code and it should be sealed but due to legacy code we cannot seal it.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Cache.UnpublishedPageCacheRefresher">
            <summary>
            A cache refresher used for non-published content, this is primarily to notify Examine indexes to update and to refresh the RuntimeCacheRefresher
            </summary>
        </member>
        <member name="M:Umbraco.Web.Cache.UnpublishedPageCacheRefresher.DeserializeFromJsonPayload(System.String)">
            <summary>
            Converts the json to a JsonPayload object
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Cache.UnpublishedPageCacheRefresher.Refresh(System.String)">
            <summary>
            Implement the IJsonCacheRefresher so that we can bulk delete the cache based on multiple IDs for when the recycle bin is emptied
            </summary>
            <param name="jsonPayload"></param>
        </member>
        <member name="T:Umbraco.Web.Cache.UserCacheRefresher">
            <summary>
            Handles User cache invalidation/refreshing
            </summary>
        </member>
        <member name="T:Umbraco.Web.Cache.UserPermissionsCacheRefresher">
            <summary>
            Used only to invalidate the user permissions cache
            </summary>
            <remarks>
            The UserCacheRefresher will also clear a user's permissions cache, this refresher is for invalidating only permissions
            for users/content, not the users themselves.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Cache.UserTypeCacheRefresher">
            <summary>
            Handles User type cache invalidation/refreshing
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.AuthenticationController">
            <summary>
            The API controller used for editing content
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.UmbracoApiController.TryGetHttpContext">
            <summary>
            Tries to retrieve the current HttpContext if one exists.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiController.ApplicationContext">
            <summary>
            Returns the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiController.Services">
            <summary>
            Returns a ServiceContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiController.DatabaseContext">
            <summary>
            Returns a DatabaseContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiController.Umbraco">
            <summary>
            Returns an UmbracoHelper object
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiController.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiController.Security">
            <summary>
            Returns the WebSecurity instance
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiController.Members">
            <summary>
            Returns the MemberHelper instance
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiController.InstanceId">
            <summary>
            Useful for debugging
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.GetRemainingTimeoutSeconds">
            <summary>
            This is a special method that will return the current users' remaining session seconds, the reason
            it is special is because this route is ignored in the UmbracoModule so that the auth ticket doesn't get
            updated with a new timeout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.IsAuthenticated">
            <summary>
            Checks if the current user's cookie is valid and if so returns OK or a 400 (BadRequest)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.GetCurrentUser">
            <summary>
            Returns the currently logged in Umbraco user
            </summary>
            <returns></returns>
            <remarks>
            We have the attribute [SetAngularAntiForgeryTokens] applied because this method is called initially to determine if the user
            is valid before the login screen is displayed. The Auth cookie can be persisted for up to a day but the csrf cookies are only session
            cookies which means that the auth cookie could be valid but the csrf cookies are no longer there, in that case we need to re-set the csrf cookies.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.PostLogin(Umbraco.Web.Models.LoginModel)">
            <summary>
            Logs a user in
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.AuthenticationController.PostLogout">
            <summary>
            Logs the current user out
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.SurfaceController">
            <summary>
            The base controller that all Presentation Add-in controllers should inherit from
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginController">
            <summary>
            A base class for all plugin controllers to inherit from
            </summary>
        </member>
        <member name="F:Umbraco.Web.Mvc.PluginController.MetadataStorage">
            <summary>
            stores the metadata about plugin controllers
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Default constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginController.GetMetadata(System.Type)">
            <summary>
            Returns the metadata for a PluginController
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.InstanceId">
            <summary>
            Useful for debugging
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.Umbraco">
            <summary>
            Returns an UmbracoHelper object
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.ApplicationContext">
            <summary>
            Returns the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.Services">
            <summary>
            Returns a ServiceContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.DatabaseContext">
            <summary>
            Returns a DatabaseContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginController.Metadata">
            <summary>
            Returns the metadata for this instance
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Default constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.#ctor">
            <summary>
            Empty constructor, uses Singleton to resolve the UmbracoContext
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Int32)">
            <summary>
            Redirects to the Umbraco page with the given id
            </summary>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Int32,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="pageId"></param>
            <param name="queryStringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(System.Int32,System.String)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="pageId"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Redirects to the Umbraco page with the given id
            </summary>
            <param name="publishedContent"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(Umbraco.Core.Models.IPublishedContent,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="publishedContent"></param>
            <param name="queryStringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToUmbracoPage(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Redirects to the Umbraco page with the given id and passes provided querystring
            </summary>
            <param name="publishedContent"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToCurrentUmbracoPage">
            <summary>
            Redirects to the currently rendered Umbraco page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToCurrentUmbracoPage(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to the currently rendered Umbraco page and passes provided querystring
            </summary>
            <param name="queryStringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToCurrentUmbracoPage(System.String)">
            <summary>
            Redirects to the currently rendered Umbraco page and passes provided querystring
            </summary>
            <param name="queryStringValues"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.RedirectToCurrentUmbracoUrl">
            <summary>
            Redirects to the currently rendered Umbraco URL
            </summary>
            <returns></returns>
            <remarks>
            this is useful if you need to redirect 
            to the current page but the current page is actually a rewritten URL normally done with something like 
            Server.Transfer.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.CurrentUmbracoPage">
            <summary>
            Returns the currently rendered Umbraco page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceController.TryGetRouteDefinitionFromAncestorViewContexts">
            <summary>
            we need to recursively find the route definition based on the parent view context
            </summary>
            <returns></returns>
            <remarks>
            We may have Child Actions within Child actions so we need to recursively look this up.
            see: http://issues.umbraco.org/issue/U4-1844
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Mvc.SurfaceController.Members">
            <summary>
            Returns the MemberHelper instance
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.SurfaceController.CurrentPage">
            <summary>
            Gets the current page.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentController">
            <summary>
            The API controller used for editing content
            </summary>
            <remarks>
            This controller is decorated with the UmbracoApplicationAuthorizeAttribute which means that any user requesting
            access to ALL of the methods on this controller will need access to the content application.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentControllerBase">
            <summary>
            An abstract base controller used for media/content (and probably members) to try to reduce code replication.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.UmbracoAuthorizedJsonController">
            <summary>
            An abstract API controller that only supports JSON and all requests must contain the correct csrf header
            </summary>
            <remarks>
            Inheriting from this controller means that ALL of your methods are JSON methods that are called by Angular, 
            methods that are not called by Angular or don't contain a valid csrf header will NOT work.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.UmbracoAuthorizedApiController">
            <summary>
            A base controller that ensures all requests are authorized - the user is logged in. 
            </summary>
            <remarks>
            This controller will also append a custom header to the response if the user is logged in using forms authentication 
            which indicates the seconds remaining before their timeout expires.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoAuthorizedApiController.UmbracoUser">
            <summary>
            Returns the currently logged in Umbraco User
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentControllerBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentControllerBase.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentControllerBase.MapPropertyValues``1(Umbraco.Web.Models.ContentEditing.ContentBaseItemSave{``0})">
            <summary>
            Maps the dto property values to the persisted model
            </summary>
            <typeparam name="TPersisted"></typeparam>
            <param name="contentItem"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentControllerBase.GetObjectFromRequest``1(System.Func{``0})">
            <summary>
            A helper method to attempt to get the instance from the request storage if it can be found there,
            otherwise gets it from the callback specified
            </summary>
            <typeparam name="TPersisted"></typeparam>
            <param name="getFromService"></param>
            <returns></returns>
            <remarks>
            This is useful for when filters have alraedy looked up a persisted entity and we don't want to have
            to look it up again.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentControllerBase.IsCreatingAction(Umbraco.Web.Models.ContentEditing.ContentSaveAction)">
            <summary>
            Returns true if the action passed in means we need to create something new
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetByIds(System.Int32[])">
            <summary>
            Return content for the specified ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetById(System.Int32)">
            <summary>
            Gets the content json for the content id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetEmpty(System.String,System.Int32)">
            <summary>
            Gets an empty content item for the 
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="parentId"></param>
            <returns>
            If this is a container type, we'll remove the umbContainerView tab for a new item since
            it cannot actually list children if it doesn't exist yet.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetNiceUrl(System.Int32)">
            <summary>
            Gets the Url for a given node ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.GetChildren(System.Int32,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Gets the children for the content id passed in
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostSave(Umbraco.Web.Models.ContentEditing.ContentItemSave)">
            <summary>
            Saves content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.UpdatePreviewContext(System.Int32)">
            <summary>
            Checks if the user is currently in preview mode and if so will update the preview content for this item
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.MapPropertyValues(Umbraco.Web.Models.ContentEditing.ContentItemSave)">
            <summary>
            Maps the dto property values to the persisted model
            </summary>
            <param name="contentItem"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostPublishById(System.Int32)">
            <summary>
            Publishes a document with a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            The CanAccessContentAuthorize attribute will deny access to this method if the current user
            does not have Publish access to this node.
            </remarks>
            
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.DeleteById(System.Int32)">
            <summary>
            Moves an item to the recycle bin, if it is already there then it will permanently delete it
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            The CanAccessContentAuthorize attribute will deny access to this method if the current user
            does not have Delete access to this node.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.EmptyRecycleBin">
            <summary>
            Empties the recycle bin
            </summary>
            <returns></returns>
            <remarks>
            attributed with EnsureUserPermissionForContent to verify the user has access to the recycle bin
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostSort(Umbraco.Web.Models.ContentEditing.ContentSortOrder)">
            <summary>
            Change the sort order for media
            </summary>
            <param name="sorted"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostMove(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Change the sort order for media
            </summary>
            <param name="move"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Copies a content item and places the copy as a child of a given parent Id
            </summary>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.PostUnPublish(System.Int32)">
            <summary>
            Unpublishes a node with a given Id and returns the unpublished entity
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.ValidateMoveOrCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Ensures the item can be moved/copied to the new location
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentController.CheckPermissions(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Services.IUserService,Umbraco.Core.Services.IContentService,System.Int32,System.Char[],Umbraco.Core.Models.IContent)">
            <summary>
            Performs a permissions check for the user to check if it has access to the node based on 
            start node and/or permissions for the node
            </summary>
            <param name="storage">The storage to add the content item to so it can be reused</param>
            <param name="user"></param>
            <param name="userService"></param>
            <param name="contentService"></param>
            <param name="nodeId">The content to lookup, if the contentItem is not specified</param>
            <param name="permissionsToCheck"></param>
            <param name="contentItem">Specifies the already resolved content item to check against</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentPostValidateAttribute">
            <summary>
            Checks if the user has access to post a content item based on whether it's being created or saved.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentTypeControllerBase">
            <summary>
            Am abstract API controller providing functionality used for dealing with content and media types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeControllerBase.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="T:Umbraco.Web.Editors.DashboardSecurity">
            <summary>
            A utility class for determine dashboard security
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.DataTypeController">
            <summary>
            The API controller used for editing data types
            </summary>
            <remarks>
            This controller is decorated with the UmbracoApplicationAuthorizeAttribute which means that any user requesting
            access to ALL of the methods on this controller will need access to the developer application.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetById(System.Int32)">
            <summary>
            Gets the content json for the content id
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            Permission is granted to this method if the user has access to any of these trees: DataTypes, Content or Media
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.DeleteById(System.Int32)">
            <summary>
            Deletes a data type wth a given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.GetPreValues(System.String,System.Int32)">
            <summary>
            Returns the pre-values for the specified property editor
            </summary>
            <param name="editorAlias"></param>
            <param name="dataTypeId">The data type id for the pre-values, -1 if it is a new data type</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.DataTypeController.PostSave(Umbraco.Web.Models.ContentEditing.DataTypeSave)">
            <summary>
            Saves the data type
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.DataTypeValidateAttribute">
            <summary>
            An action filter that wires up the persisted entity of the DataTypeSave model and validates the whole request
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.EntityControllerActionSelector">
            <summary>
            This allows for calling GetById/GetByIds with a GUID... so it will automatically route to GetByKey/GetByKeys
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.EntityControllerConfigurationAttribute">
            <summary>
            This get's applied to the EntityController in order to have a custom IHttpActionSelector assigned to it
            </summary>
            <remarks>
            NOTE: It is SOOOO important to remember that you cannot just assign this in the 'initialize' method of a webapi
            controller as it will assign it GLOBALLY which is what you def do not want to do.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.ImagesController">
            <summary>
            A controller used to return images for media
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ImagesController.GetBigThumbnail(System.Int32)">
            <summary>
            Gets the big thumbnail image for the media id
            </summary>
            <param name="mediaId"></param>
            <returns></returns>
            <remarks>
            If there is no media, image property or image file is found then this will return not found.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ImagesController.GetBigThumbnail(System.String)">
            <summary>
            Gets the big thumbnail image for the original image path
            </summary>
            <param name="originalImagePath"></param>
            <returns></returns>
            <remarks>
            If there is no original image is found then this will return not found.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ImagesController.GetResized(System.Int32,System.Int32)">
            <summary>
            Gets a resized image for the media id
            </summary>
            <param name="mediaId"></param>
            <param name="width"></param>
            <returns></returns>
            <remarks>
            If there is no media, image property or image file is found then this will return not found.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ImagesController.GetResized(System.String,System.Int32)">
            <summary>
            Gets a resized image for the image at the given path
            </summary>
            <param name="imagePath"></param>
            <param name="width"></param>
            <returns></returns>
            <remarks>
            If there is no media, image property or image file is found then this will return not found.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.ImagesController.GetResized(System.String,System.Int32,System.String)">
            <summary>
            Gets a resized image - if the requested max width is greater than the original image, only the original image will be returned.
            </summary>
            <param name="imagePath"></param>
            <param name="width"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.UserController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.UserController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.UserController.PostDisableUser(System.Int32)">
            <summary>
            Disables the user with the given user id
            </summary>
            <param name="userId"></param>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DataTypeBasic">
            <summary>
            The basic data type information
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.EntityBasic.Key">
            <summary>
            This is the unique Id stored in the database - but could also be the unique id for a custom membership provider
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.EntityBasic.Alias">
            <summary>
            This will only be populated for some entities like macros
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.EntityBasic.Path">
            <summary>
            The path of the entity
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.EntityBasic.AdditionalData">
            <summary>
            A collection of extra data that is available for this specific entity/entity type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeBasic.IsSystemDataType">
            <summary>
            Whether or not this is a system data type, in which case it cannot be deleted
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberBasic">
            <summary>
            Used for basic member information
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemBasic`2">
            <summary>
            A model representing a basic content item with properties
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemBasic">
            <summary>
            A model representing a basic content item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemBasic`2.PersistedContent">
            <summary>
            The real persisted content object
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemBasic`2.ContentDto">
            <summary>
            The DTO object used to gather all required content data including data type information etc... for use with validation
            </summary>
            <remarks>
            We basically use this object to hydrate all required data from the database into one object so we can validate everything we need
            instead of having to look up all the data individually.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberListDisplay">
            <summary>
            A model representing a member list to be displayed in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.TabbedContentItem`2.Tabs">
            <summary>
            Defines the tabs containing display properties
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.TabbedContentItem`2.Properties">
            <summary>
            Override the properties property to ensure we don't serialize this
            and to simply return the properties based on the properties in the tabs collection
            </summary>
            <remarks>
            This property cannot be set
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.INotificationModel.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.IErrorModel.Errors">
            <summary>
            This is used for validation of a content item.
            </summary>
            <remarks>
            A content item can be invalid but still be saved. This occurs when there's property validation errors, we will
            still save the item but it cannot be published. So we need a way of returning validation errors as well as the
            updated model.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase`2.ContentTypeName">
            <summary>
            The name of the content type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase`2.IsContainer">
            <summary>
            Indicates if the content is configured as a list view container
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase`2.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase`2.Errors">
            <summary>
            This is used for validation of a content item.
            </summary>
            <remarks>
            A content item can be invalid but still be saved. This occurs when there's property validation errors, we will
            still save the item but it cannot be published. So we need a way of returning validation errors as well as the
            updated model.
            
            NOTE: The ProperCase is important because when we return ModeState normally it will always be proper case.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.TemplateQueryController">
            <summary>
            The API controller used for building content queries within the template
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateQueryController.GetContentTypes">
            <summary>
            Gets a list of all content types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateQueryController.GetAllowedProperties">
            <summary>
            Returns a collection of allowed properties.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.TemplateQueryController.GetFilterConditions">
            <summary>
            Returns a collection of constraint conditions that can be used in the query
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentBaseItemSave`1">
            <summary>
            A model representing a content base item to be saved
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentBaseItemSave`1.Action">
            <summary>
            The action to perform when saving this content item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MediaItemSave">
            <summary>
            A model representing a media item to be saved
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.DetachedContent.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IPublishedProperty})">
            <summary>
            Initialized a new instance of the <see cref="T:Umbraco.Web.Models.DetachedContent"/> class with properties.
            </summary>
            <param name="properties">The properties</param>
            <remarks>Properties must be detached or nested properties ie their property type must be detached or nested.
            Such a detached content can be part of a published property value.</remarks>
        </member>
        <member name="T:Umbraco.Web.Install.InstallException">
            <summary>
            Used for steps to be able to return a json structure back to the UI
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.InstallStatusTracker">
            <summary>
            An internal in-memory status tracker for the current installation
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Models.InstallSetupStep`1">
            <summary>
            Model to give to the front-end to collect the information for each step
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStep.ViewModel">
            <summary>
            The view model used to render the view, by default is null but can be populated
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStep.ServerOrder">
            <summary>
            Defines what order this step needs to execute on the server side since the 
            steps might be shown out of order on the front-end
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStep.StepType">
            <summary>
            Defines the step model type on the server side so we can bind it
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.Models.InstallSetupStep`1.Execute(`0)">
            <summary>
            The step execution method
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Models.InstallSetupStep`1.RequiresExecution(`0)">
            <summary>
            Determines if this step needs to execute based on the current state of the application and/or install process
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStep`1.StepType">
            <summary>
            Defines the step model type on the server side so we can bind it
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.InstallSteps.UpgradeStep">
            <summary>
            This step is purely here to show the button to commence the upgrade
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.InstallSteps.NewInstallStep">
            <summary>
            This is the first UI step for a brand new install
            </summary>
            <remarks>
            By default this will show the user view which is the most basic information to configure a new install, but if an install get's interupted because of an 
            error, etc... and the end-user refreshes the installer then we cannot show the user screen because they've already entered that information so instead we'll    
            display a simple continue installation view.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Install.InstallSteps.NewInstallStep.ViewModel">
            <summary>
            Return a custom view model for this step
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Controllers.InstallPackageController">
            <summary>
            A  controller for the installation process regarding packages
            </summary>
            <remarks>
            Currently this is used for web services however we should/could eventually migrate the whole installer to MVC as it
            is a bit of a mess currently.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallPackageController.Index">
            <summary>
            Empty action, useful for retrieving the base url for this controller
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallPackageController.DownloadPackageFiles(Umbraco.Web.Install.Models.InstallPackageModel)">
            <summary>
            Connects to the repo, downloads the package and creates the manifest
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallPackageController.InstallPackageFiles(Umbraco.Web.Install.Models.InstallPackageModel)">
            <summary>
            Installs the files in the package
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallPackageController.RestartAppPool">
            <summary>
            Ensures the app pool is restarted
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallPackageController.CheckAppPoolRestart">
            <summary>
            Checks if the app pool has completed restarted
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallPackageController.InstallBusinessLogic(Umbraco.Web.Install.Models.InstallPackageModel)">
            <summary>
            Installs the business logic portion of the package after app restart
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallPackageController.CleanupInstallation(Umbraco.Web.Install.Models.InstallPackageModel)">
            <summary>
            Cleans up the package installation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Install.Models.InstallProgressResultModel">
            <summary>
            Returned to the UI for each installation step that is completed
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallProgressResultModel.View">
            <summary>
            The UI view to show when this step executes, by default no views are shown for the completion of a step unless explicitly specified.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallProgressResultModel.ViewModel">
            <summary>
            The view model to return to the UI if this step is returning a view (optional)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Models.InstallSetup">
            <summary>
            Model containing all the install steps for setting up the UI
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Models.InstallSetupResult">
            <summary>
            The object returned from each installation step
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupResult.SavedStepData">
            <summary>
            Data that is persisted to the installation file which can be used from other installation steps
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupResult.View">
            <summary>
            The UI view to show when this step executes, by default no views are shown for the completion of a step unless explicitly specified.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupResult.ViewModel">
            <summary>
            The view model to return to the UI if this step is returning a view (optional)
            </summary>
        </member>
        <member name="P:Umbraco.Web.Install.Models.InstallSetupStepAttribute.PerformsAppRestart">
            <summary>
            A flag to notify the installer that this step performs an app pool restart, this can be handy to know since if the current
            step is performing a restart, we cannot 'look ahead' to see if the next step can execute since we won't know until the app pool
            is restarted.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.UmbracoInstallArea">
            <summary>
            An area registration for back office components
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.UmbracoInstallArea.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            Create the routes for the area
            </summary>
            <param name="context"></param>
            <remarks>
            By using the context to register the routes it means that the area is already applied to them all 
            and that the namespaces searched for the controllers are ONLY the ones specified.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallApiController.GetSetup">
            <summary>
            Gets the install setup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallApiController.PostPerformInstall(Umbraco.Web.Install.Models.InstallInstructions)">
            <summary>
            Does the install
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallApiController.IterateNextRequiredStep(Umbraco.Web.Install.Models.InstallSetupStep,System.Collections.Generic.Queue{Umbraco.Web.Install.Models.InstallTrackingItem},System.Guid,Umbraco.Web.Install.Models.InstallInstructions)">
            <summary>
            We'll peek ahead and check if it's RequiresExecution is returning true. If it
            is not, we'll dequeue that step and peek ahead again (recurse)
            </summary>
            <param name="current"></param>
            <param name="queue"></param>
            <param name="installId"></param>
            <param name="installModel"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.Controllers.InstallApiController.StepRequiresExecution(Umbraco.Web.Install.Models.InstallSetupStep,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Check if the step requires execution
            </summary>
            <param name="step"></param>
            <param name="instruction"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Install.Controllers.InstallApiController.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.Controllers.InstallController">
            <summary>
            The MVC Installation controller
            </summary>
            <remarks>
            NOTE: All views must have their full paths as we do not have a custom view engine for the installation views!
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Install.InstallAuthorizeAttribute">
            <summary>
            Ensures authorization occurs for the installer if it has already completed. If install has not yet occured
            then the authorization is successful
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.InstallAuthorizeAttribute.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Install.InstallAuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
            <summary>
            Ensures that the user must be logged in or that the application is not configured just yet.
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.InstallAuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Override to redirect instead of throwing an exception
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.EntityTypeSearchResult">
            <summary>
            Represents a search result by entity type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ListViewAwareContentItemDisplayBase`2">
            <summary>
            An abstract model representing a content item that can be contained in a list view
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TPersisted"></typeparam>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ListViewAwareContentItemDisplayBase`2.IsChildOfListView">
            <summary>
            Property indicating if this item is part of a list view parent
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ListViewAwareContentItemDisplayBase`2.TreeNodeUrl">
            <summary>
            Property for the entity's individual tree node URL
            </summary>
            <remarks>
            This is required if the item is a child of a list view since the tree won't actually be loaded, 
            so the app will need to go fetch the individual tree node in order to be able to load it's action list (menu)
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.PropertyTypeValidation">
            <summary>
            An object representing the property type validation settings
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PartialViewMacroModelExtensions">
            <summary>
            Extension methods for the PartialViewMacroModel object
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.PartialViewMacroModelExtensions.GetParameterValue``1(Umbraco.Web.Models.PartialViewMacroModel,System.String,``0)">
            <summary>
            Attempt to get a Macro parameter from a PartialViewMacroModel and return a default value otherwise
            </summary>
            <param name="partialViewMacroModel"></param>
            <param name="parameterAlias"></param>
            <param name="defaultValue"></param>
            <returns>Parameter value if available, the default value that was passed otherwise.</returns>       
        </member>
        <member name="M:Umbraco.Web.Models.PartialViewMacroModelExtensions.GetParameterValue``1(Umbraco.Web.Models.PartialViewMacroModel,System.String)">
            <summary> 
            Attempt to get a Macro parameter from a PartialViewMacroModel
            </summary>
            <param name="partialViewMacroModel"></param>
            <param name="parameterAlias"></param>
            <returns>Parameter value if available, the default value for the type otherwise.</returns>       
        </member>
        <member name="T:Umbraco.Web.Models.PostRedirectModel">
            <summary>
            A base model containing a value to indicate to Umbraco where to redirect to after Posting if 
            a developer doesn't want the controller to redirect to the current Umbraco page - which is the default.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PostRedirectModel.RedirectUrl">
            <summary>
            The path to redirect to when update is successful, if not specified then the user will be
            redirected to the current Umbraco page
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.PublishedProperty.GetDetached(Umbraco.Core.Models.PublishedContent.PublishedPropertyType,System.Object,System.Boolean)">
            <summary>
            Creates a detached published property.
            </summary>
            <param name="propertyType">A published property type.</param>
            <param name="value">The property data raw value.</param>
            <param name="isPreviewing">A value indicating whether to evaluate the property value in previewing context.</param>
            <returns>A detached published property holding the value.</returns>
        </member>
        <member name="M:Umbraco.Web.Models.PublishedProperty.MapProperties(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.PublishedPropertyType},System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property},System.Func{Umbraco.Core.Models.PublishedContent.PublishedPropertyType,System.Object,Umbraco.Core.Models.IPublishedProperty})">
            <summary>
            Maps a collection of Property to a collection of IPublishedProperty for a specified collection of PublishedPropertyType.
            </summary>
            <param name="propertyTypes">The published property types.</param>
            <param name="properties">The properties.</param>
            <param name="map">A mapping function.</param>
            <returns>A collection of IPublishedProperty corresponding to the collection of PublishedPropertyType
            and taking values from the collection of Property.</returns>
            <remarks>Ensures that all conversions took place correctly.</remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.AdminTokenAuthorizeAttribute">
            <summary>
            Used for authorizing scheduled tasks
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.AdminTokenAuthorizeAttribute.#ctor(Umbraco.Core.ApplicationContext)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="appContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.AdminTokenAuthorizeAttribute.GetAuthHeaderTokenVal(Umbraco.Core.ApplicationContext)">
            <summary>
            Used to return the value that needs to go in the Authorization header
            </summary>
            <param name="appContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.AdminTokenAuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
            <summary>
            Ensures that the user must be in the Administrator or the Install role
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.RedirectToUmbracoUrlResult">
            <summary>
            Redirects to the current URL rendering an Umbraco page including it's query strings
            </summary>
            <remarks>
            This is useful if you need to redirect 
            to the current page but the current page is actually a rewritten URL normally done with something like 
            Server.Transfer. It is also handy if you want to persist the query strings.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoUrlResult.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>		
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.GridPropertyEditor.CreateValueEditor">
            <summary>
            Overridden to ensure that the value is validated
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueConverters.MacroContainerValueConverter">
            <summary>
            Ensures macro syntax is parsed for the macro container which will work when getting the field
            values in any way (i.e. dynamically, using Field(), or IPublishedContent)
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TagsDataController">
            <summary>
            A controller used for type-ahead values for tags
            </summary>
            <remarks>
            DO NOT inherit from UmbracoAuthorizedJsonController since we don't want to use the angularized
            json formatter as it causes probs.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.MemberPublishedContent">
            <summary>
            Exposes a member object as IPublishedContent
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PublishedContentBase">
            <summary>
            Provide an abstract base class for <c>IPublishedContent</c> implementations.
            </summary>
            <remarks>This base class does which (a) consitently resolves and caches the Url, (b) provides an implementation
            for this[alias], and (c) provides basic content set management.</remarks>
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContentBase.GetProperty(System.String)">
            <summary>
            Gets a property identified by its alias.
            </summary>
            <param name="alias">The property alias.</param>
            <returns>The property identified by the alias.</returns>
            <remarks>
            <para>If no property with the specified alias exists, returns <c>null</c>.</para>
            <para>The returned property may have no value (ie <c>HasValue</c> is <c>false</c>).</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.PublishedContentBase.GetProperty(System.String,System.Boolean)">
            <summary>
            Gets a property identified by its alias.
            </summary>
            <param name="alias">The property alias.</param>
            <param name="recurse">A value indicating whether to navigate the tree upwards until a property with a value is found.</param>
            <returns>The property identified by the alias.</returns>
            <remarks>
            <para>Navigate the tree upwards and look for a property with that alias and with a value (ie <c>HasValue</c> is <c>true</c>).
            If found, return the property. If no property with that alias is found, having a value or not, return <c>null</c>. Otherwise
            return the first property that was found with the alias but had no value (ie <c>HasValue</c> is <c>false</c>).</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Url">
            <summary>
            Gets the url of the content.
            </summary>
            <remarks>
            If this content is Content, the url that is returned is the one computed by the NiceUrlProvider, otherwise if 
            this content is Media, the url returned is the value found in the 'umbracoFile' property.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Parent">
            <summary>
            Gets the parent of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Children">
            <summary>
            Gets the children of the content.
            </summary>
            <remarks>Children are sorted by their sortOrder.</remarks>
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Properties">
            <summary>
            Gets the properties of the content.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PublishedContentBase.Item(System.String)">
            <summary>
            Gets the value of a property identified by its alias.
            </summary>
            <param name="alias">The property alias.</param>
            <returns>The value of the property identified by the alias.</returns>
            <remarks>
            <para>If <c>GetProperty(alias)</c> is <c>null</c> then returns <c>null</c> else return <c>GetProperty(alias).Value</c>.</para>
            <para>So if the property has no value, returns the default value for that property type.</para>
            <para>This one is defined here really because we cannot define index extension methods, but all it should do is:
            <code>var p = GetProperty(alias); return p == null ? null : p.Value;</code> and nothing else.</para>
            <para>The recursive syntax (eg "_title") is _not_ supported here.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.RawValueProperty">
            <summary>
            A published property base that uses a raw object value
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.RawValueProperty.DataValue">
            <summary>
            Gets the raw value of the property.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.RenderModel">
            <summary>
            Represents the model for the current rendering page in Umbraco
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.RenderModel.#ctor(Umbraco.Core.Models.IPublishedContent,System.Globalization.CultureInfo)">
            <summary>
            Constructor specifying both the IPublishedContent and the CultureInfo
            </summary>
            <param name="content"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Umbraco.Web.Models.RenderModel.#ctor(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Constructor to set the IPublishedContent and the CurrentCulture is set by the UmbracoContext
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Umbraco.Web.Models.RenderModel.Content">
            <summary>
            Returns the current IPublishedContent object
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RenderModel.CurrentCulture">
            <summary>
            Returns the current Culture assigned to the page being rendered
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.RenderModel`1.#ctor(`0,System.Globalization.CultureInfo)">
            <summary>
            Constructor specifying both the IPublishedContent and the CultureInfo
            </summary>
            <param name="content"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Umbraco.Web.Models.RenderModel`1.#ctor(`0)">
            <summary>
            Constructor to set the IPublishedContent and the CurrentCulture is set by the UmbracoContext
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Umbraco.Web.Models.RenderModel`1.Content">
            <summary>
            Returns the current IPublishedContent object
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.JsonNetResult">
            <summary>
            Custom json result using newtonsoft json.net
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.MinifyJavaScriptResultAttribute">
            <summary>
            Minifies the result for the JavaScriptResult
            </summary>
            <remarks>
            Only minifies in release mode
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.MinifyJavaScriptResultAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Minify the result if in release mode
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute">
            <summary>
            Used for custom routed pages that are being integrated with the Umbraco data but are not
            part of the umbraco request pipeline. This allows umbraco macros to be able to execute in this scenario.
            </summary>
            <remarks>
            This is inspired from this discussion:
            http://our.umbraco.org/forum/developers/extending-umbraco/41367-Umbraco-6-MVC-Custom-MVC-Route?p=3
            
            which is based on custom routing found here:
            http://shazwazza.com/post/Custom-MVC-routing-in-Umbraco
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.#ctor(Umbraco.Web.UmbracoContext,System.Int32,System.String)">
            <summary>
            Constructor - can be used for testing
            </summary>
            <param name="umbracoContext"></param>
            <param name="contentId"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.#ctor(System.Int32)">
            <summary>
            A constructor used to set an explicit content Id to the PublishedContentRequest that will be created
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.#ctor(System.String)">
            <summary>
            A constructor used to set the data token key name that contains a reference to a PublishedContent instance
            </summary>
            <param name="dataTokenName"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.#ctor(Umbraco.Web.UmbracoContext,System.String,System.String)">
            <summary>
            Constructor - can be used for testing
            </summary>
            <param name="umbracoContext"></param>
            <param name="dataTokenName"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.ConfigurePublishedContentRequest(Umbraco.Web.Routing.PublishedContentRequest,System.Web.Mvc.ActionExecutedContext)">
            <summary>
            This assigns the published content to the request, developers can override this to specify 
            any other custom attributes required.
            </summary>
            <param name="pcr"></param>
            <param name="filterContext"></param>
        </member>
        <member name="P:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.UmbracoContext">
            <summary>
            Exposes the UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.EnsurePublishedContentRequestAttribute.Umbraco">
            <summary>
            Exposes an UmbracoHelper
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoViewPage`1">
            <summary>
            The View that umbraco front-end views inherit from
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoViewPage`1.InitializePage">
            <summary>
            Ensure that the current view context is added to the route data tokens so we can extract it if we like
            </summary>
            <remarks>
            Currently this is required by mvc macro engines
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoViewPage`1.WriteLiteral(System.Object)">
            <summary>
            This will detect the end /body tag and insert the preview badge if in preview mode
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.ApplicationContext">
            <summary>
            Returns the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.PublishedContentRequest">
            <summary>
            Returns the current PublishedContentRequest
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.Umbraco">
            <summary>
            Gets an UmbracoHelper
            </summary>
            <remarks>
            This constructs the UmbracoHelper with the content model of the page routed to
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoViewPage`1.Members">
            <summary>
            Returns the MemberHelper instance
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoTemplatePage`1.CurrentPage">
            <summary>
            Returns the content as a dynamic object
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.LogController">
            <summary>
            The API controller used for getting log history
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MacroController">
            <summary>
            API controller to deal with Macro data
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MacroController.GetMacroParameters(System.Int32)">
            <summary>
            Gets the macro parameters to be filled in for a particular macro
            </summary>
            <returns></returns>
            <remarks>
            Note that ALL logged in users have access to this method because editors will need to isnert macros into rte (content/media/members) and it's used for 
            inserting into templates/views/etc... it doesn't expose any sensitive data.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.Editors.MacroController.GetMacroResultAsHtmlForEditor(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="T:Umbraco.Web.Editors.MemberTypeController">
            <summary>
            An API controller used for dealing with content types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberTypeController.GetAllTypes">
            <summary>
            Returns all member types
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.UpdateCheckController.UpdateCheckResponseFilter">
            <summary>
            Adds the cookie response if it was successful
            </summary>
            <remarks>
            A filter is required because we are returning an object from the get method and not an HttpResponseMessage
            </remarks>
        </member>
        <member name="M:Umbraco.Web.MembershipProviderExtensions.GetConfiguration(System.Web.Security.MembershipProvider)">
            <summary>
            Returns the configuration of the membership provider used to configure change password editors
            </summary>
            <param name="membershipProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.ChangingPasswordModel">
            <summary>
            A model representing the data required to set a member/user password depending on the provider installed.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.NewPassword">
            <summary>
            The password value
            </summary>
            <remarks>
            This 
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.OldPassword">
            <summary>
            The old password - used to change a password when: EnablePasswordRetrieval = false 
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.Reset">
            <summary>
            Set to true if the password is to be reset - only valid when: EnablePasswordReset = true
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.Answer">
            <summary>
            The password answer - required for reset when: RequiresQuestionAndAnswer = true 
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ChangingPasswordModel.GeneratedPassword">
            <summary>
            This is filled in on the server side if the password has been reset/generated
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ModelWithNotifications`1">
            <summary>
            A generic model supporting notifications, this is useful for returning any model type to include notifications from api controllers
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ModelWithNotifications`1.Value">
            <summary>
            The generic value
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ModelWithNotifications`1.Notifications">
            <summary>
            The notifications
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.StylesheetController">
            <summary>
            The API controller used for retrieving available stylesheets
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MoveOrCopy">
            <summary>
            A model representing a model for moving or copying
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MoveOrCopy.ParentId">
            <summary>
            The Id of the node to move or copy to
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MoveOrCopy.Id">
            <summary>
            The id of the node to move or copy
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MoveOrCopy.RelateToOriginal">
            <summary>
            Boolean indicating whether copying the object should create a relation to it's original
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MacroParameter">
            <summary>
            Represents a macro parameter with an editor
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameter.View">
            <summary>
            The editor view to render for this parameter
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameter.Configuration">
            <summary>
            The configuration for this parameter editor
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MacroParameter.Value">
            <summary>
            Since we don't post this back this isn't currently really used on the server side
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberDisplay">
            <summary>
            A model representing a member to be displayed in the back office
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.MemberDisplay.MemberProviderFieldMapping">
            <summary>
            This is used to indicate how to map the membership provider properties to the save model, this mapping
            will change if a developer has opted to have custom member property aliases specified in their membership provider config, 
            or if we are editing a member that is not an Umbraco member (custom provider)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MemberSave">
            <summary>
            A model representing a member to be saved
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes">
            <summary>
            Represents the type's of Umbraco entities that can be resolved from the EntityController
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Macro">
            <summary>
            Macro
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Media">
            <summary>
            Media
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.MemberType">
            <summary>
            Member Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.MemberGroup">
            <summary>
            Member Group
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.ContentItem">
            <summary>
            Content Item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.MediaType">
            <summary>
            "Media Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.DocumentType">
            <summary>
            Document Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Stylesheet">
            <summary>
            Stylesheet
            </summary>        
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.Member">
            <summary>
            Member
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.DataType">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.PropertyType">
            <summary>
            Property Type
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes.PropertyGroup">
            <summary>
            Property Group
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.AuditLogType">
            <summary>
            Defines audit trail log types
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.New">
            <summary>
            Used when new nodes are added
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.Save">
            <summary>
            Used when nodes are saved
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.Open">
            <summary>
            Used when nodes are opened
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.Delete">
            <summary>
            Used when nodes are deleted
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.Publish">
            <summary>
            Used when nodes are published
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.SendToPublish">
            <summary>
            Used when nodes are send to publishing
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.UnPublish">
            <summary>
            Used when nodes are unpublished
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.Move">
            <summary>
            Used when nodes are moved
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.Copy">
            <summary>
            Used when nodes are copied
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.AssignDomain">
            <summary>
            Used when nodes are assígned a domain
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.PublicAccess">
            <summary>
            Used when public access are changed for a node
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.Sort">
            <summary>
            Used when nodes are sorted
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.Notify">
            <summary>
            Used when a notification are send to a user
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.RollBack">
            <summary>
            Used when a node's content is rolled back to a previous version
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.PackagerInstall">
            <summary>
            Used when a package is installed
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.PackagerUninstall">
            <summary>
            Used when a package is uninstalled
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.AuditLogType.SendToTranslate">
            <summary>
            Used when a node is send to translation
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MacroModelMapper">
            <summary>
            Declares model mappings for macros.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MemberModelMapper">
            <summary>
            Declares model mappings for members.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MemberModelMapper.MapGenericCustomProperties(Umbraco.Core.Services.IMemberService,Umbraco.Core.Models.IMember,Umbraco.Web.Models.ContentEditing.MemberDisplay)">
            <summary>
            Maps the generic tab with custom properties for content
            </summary>
            <param name="memberService"></param>
            <param name="member"></param>
            <param name="display"></param>
            <remarks>
            If this is a new entity and there is an approved field then we'll set it to true by default.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.MemberModelMapper.GetLoginProperty(Umbraco.Core.Services.IMemberService,Umbraco.Core.Models.IMember,Umbraco.Web.Models.ContentEditing.MemberDisplay)">
            <summary>
            Returns the login property display field
            </summary>
            <param name="memberService"></param>
            <param name="member"></param>
            <param name="display"></param>
            <returns></returns>
            <remarks>
            If the membership provider installed is the umbraco membership provider, then we will allow changing the username, however if
            the membership provider is a custom one, we cannot allow chaning the username because MembershipProvider's do not actually natively 
            allow that.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MemberModelMapper.MemberDtoPropertiesValueResolver">
            <summary>
            This ensures that the custom membership provider properties are not mapped - these property values are controller by the membership provider
            </summary>
            <remarks>
            Because these properties don't exist on the form, if we don't remove them for this map we'll get validation errors when posting data
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MemberModelMapper.MemberTabsAndPropertiesResolver">
            <summary>
            A custom tab/property resolver for members which will ensure that the built-in membership properties are or arent' displayed
            depending on if the member type has these properties
            </summary>
            <remarks>
            This also ensures that the IsLocked out property is readonly when the member is not locked out - this is because
            an admin cannot actually set isLockedOut = true, they can only unlock. 
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.TabsAndPropertiesResolver">
            <summary>
            Creates the tabs collection with properties assigned for display models
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.TabsAndPropertiesResolver.MapGenericProperties``1(``0,Umbraco.Web.Models.ContentEditing.ContentItemDisplayBase{Umbraco.Web.Models.ContentEditing.ContentPropertyDisplay,``0},Umbraco.Web.Models.ContentEditing.ContentPropertyDisplay[])">
            <summary>
            Maps properties on to the generic properties tab
            </summary>
            <param name="content"></param>
            <param name="display"></param>
            <param name="customProperties">
            Any additional custom properties to assign to the generic properties tab. 
            </param>
            <remarks>
            The generic properties tab is mapped during AfterMap and is responsible for 
            setting up the properties such as Created date, updated date, template selected, etc...
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.TabsAndPropertiesResolver.AddListView``1(Umbraco.Web.Models.ContentEditing.TabbedContentItem{Umbraco.Web.Models.ContentEditing.ContentPropertyDisplay,``0},System.String,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Adds the container (listview) tab to the document
            </summary>
            <typeparam name="TPersisted"></typeparam>
            <param name="display"></param>
            <param name="entityType">This must be either 'content' or 'media'</param>
            <param name="dataTypeService"></param>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MemberModelMapper.MemberProviderFieldMappingResolver">
            <summary>
            A resolver to map the provider field aliases
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.PasswordChangedModel">
            <summary>
            A model representing an attempt at changing a password
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PasswordChangedModel.ChangeError">
            <summary>
            The error affiliated with the failing password changes, null if changing was successful
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.PasswordChangedModel.ResetPassword">
            <summary>
            If the password was reset, this is the value it has been changed to
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueListPreValueEditor">
            <summary>
            Pre-value editor used to create a list of items
            </summary>
            <remarks>
            This pre-value editor is shared with editors like drop down, checkbox list, etc....
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueListPreValueEditor.CreatePreValueFields">
            <summary>
            Creates the pre-value fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueListPreValueEditor.ConvertDbToEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            The editor is expecting a json array for a field with a key named "items" so we need to format the persisted values
            to this format to be used in the editor.
            </summary>
            <param name="defaultPreVals"></param>
            <param name="persistedPreVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueListPreValueEditor.PreValueAsDictionary(Umbraco.Core.Models.PreValue)">
            <summary>
            Formats the prevalue as a dictionary (as we need to return not just the value, but also the sort-order, to the client)
            </summary>
            <param name="preValue">The prevalue to format</param>
            <returns>Dictionary object containing the prevalue formatted with the field names as keys and the value of those fields as the values</returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ValueListPreValueEditor.ConvertEditorToDb(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            Need to format the delimited posted string to individual values
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns>
            A string/string dictionary since all values that need to be persisted in the database are strings.
            </returns>
            <remarks>
            This is mostly because we want to maintain compatibility with v6 drop down property editors that store their prevalues in different db rows.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueListPreValueEditor.EnsureUniqueValuesValidator">
            <summary>
            A custom validator to ensure that all values in the list are unique
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.#cctor">
            <summary>
            We're going to bind to the MediaService Saving event so that we can populate the umbracoFile size, type, etc... label fields
            if we find any attached to the current media item.
            </summary>
            <remarks>
            I think this kind of logic belongs on this property editor, I guess it could exist elsewhere but it all has to do with the cropper.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.CreateValueEditor">
            <summary>
            Creates our custom value editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.ServiceEmptiedRecycleBin(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property}})">
            <summary>
            Ensures any files associated are removed
            </summary>
            <param name="allPropertyData"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.ServiceDeleted(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ContentBase})">
            <summary>
            Ensures any files associated are removed
            </summary>
            <param name="deletedEntities"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyEditor.ContentServiceCopied(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.CopyEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            After the content is copied we need to check if there are files that also need to be copied
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.PropertyValueEditorWrapper">
            <summary>
            Useful when returning a custom value editor when your property editor is attributed, it ensures the attribute
            values are copied across to your custom value editor.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ImageCropperPropertyValueEditor.ConvertEditorToDb(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Overrides the deserialize value so that we can save the file accordingly
            </summary>
            <param name="editorValue">
            This is value passed in from the editor. We normally don't care what the editorValue.Value is set to because
            we are more interested in the files collection associated with it, however we do care about the value if we 
            are clearing files. By default the editorValue.Value will just be set to the name of the file (but again, we
            just ignore this and deal with the file collection in editorValue.AdditionalData.ContainsKey("files") )
            </param>
            <param name="currentValue">
            The current value persisted for this property. This will allow us to determine if we want to create a new
            file path or use the existing file path.
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MacroContainerPropertyEditor.CreatePreValueEditor">
            <summary>
            Creates a pre value editor instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultiNodeTreePickerPropertyEditor.MultiNodePickerPreValueEditor.ConvertDbToEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            This ensures the multiPicker pre-val is set based on the maxNumber of nodes set
            </summary>
            <param name="defaultPreVals"></param>
            <param name="persistedPreVals"></param>
            <returns></returns>
            <remarks>
            Due to compatibility with 7.0.0 the multiPicker pre-val might already exist in the db, but we've removed that setting in 7.0.1 so we need to detect it and if it is
            there, then we'll set the maxNumber to '1'
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.PropertyEditorAssetAttribute">
            <summary>
            Indicates that the property editor requires this asset be loaded when the back office is loaded
            </summary>
            <remarks>
            This wraps a CDF asset
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.PropertyEditorAssetAttribute.DependencyFile">
            <summary>
            Returns a CDF file reference
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RteEmbedController">
            <summary>
            A controller used for the embed dialog
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.EntityController">
            <summary>
            The API controller used for getting entity objects, basic name, icon, id representation of umbraco objects that are based on CMSNode
            </summary>
            <remarks>
            Some objects such as macros are not based on CMSNode
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.Search(System.String,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.String)">
            <summary>
            Searches for results based on the entity type
            </summary>
            <param name="query"></param>
            <param name="type"></param>
            <param name="searchFrom">
            A starting point for the search, generally a node id, but for members this is a member type alias
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.SearchAll(System.String)">
            <summary>
            Searches for all content that the user is allowed to see (based on their allowed sections)
            </summary>
            <param name="query"></param>
            <returns></returns>
            <remarks>
            Even though a normal entity search will allow any user to search on a entity type that they may not have access to edit, we need
            to filter these results to the sections they are allowed to edit since this search function is explicitly for the global search 
            so if we showed entities that they weren't allowed to edit they would get errors when clicking on the result.
            
            The reason a user is allowed to search individual entity types that they are not allowed to edit is because those search
            methods might be used in things like pickers in the content editor.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetPath(System.Int32,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets the path for a given node ID
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetByKey(System.Guid,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets an entity by it's unique id if the entity supports that
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetByQuery(System.String,System.Int32,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes)">
            <summary>
            Gets an entity by a xpath query
            </summary>
            <param name="query"></param>
            <param name="nodeContextId"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.ExamineSearch(System.String,Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.String)">
            <summary>
            Searches for results based on the entity type
            </summary>
            <param name="query"></param>
            <param name="entityType"></param>
            <param name="searchFrom">
            A starting point for the search, generally a node id, but for members this is a member type alias
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.MemberFromSearchResults(Examine.ISearchResults)">
            <summary>
            Returns a collection of entities for media based on search results
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.MediaFromSearchResults(Examine.ISearchResults)">
            <summary>
            Returns a collection of entities for media based on search results
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.ContentFromSearchResults(Examine.ISearchResults)">
            <summary>
            Returns a collection of entities for content based on search results
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.GetResultForAll(Umbraco.Web.Models.ContentEditing.UmbracoEntityTypes,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the result for the entity list based on the type
            </summary>
            <param name="entityType"></param>
            <param name="postFilter">A string where filter that will filter the results dynamically with linq - optional</param>
            <param name="postFilterParams">the parameters to fill in the string where filter - optional</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.EntityController.ExecutePostFilter``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the post filter against a collection of objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities"></param>
            <param name="postFilter"></param>
            <param name="postFilterParams"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.MediaPostValidateAttribute">
            <summary>
            Checks if the user has access to post a content item based on whether it's being created or saved.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MemberController">
            <remarks>
            This controller is decorated with the UmbracoApplicationAuthorizeAttribute which means that any user requesting
            access to ALL of the methods on this controller will need access to the member application.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.GetListNodeDisplay(System.String)">
            <summary>
            Returns a display node with a list view to render members
            </summary>
            <param name="listName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.GetByKey(System.Guid)">
            <summary>
            Gets the content json for the member
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.GetEmpty(System.String)">
            <summary>
            Gets an empty content item for the 
            </summary>
            <param name="contentTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.PostSave(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Saves member
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.MapPropertyValues(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Maps the property values to the persisted entity
            </summary>
            <param name="contentItem"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.UpdateWithMembershipProvider(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Update the membership user using the membership provider (for things like email, etc...)
            If a password change is detected then we'll try that too.
            </summary>
            <param name="contentItem"></param>
            <returns>
            If the password has been reset then this method will return the reset/generated password, otherwise will return null.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.RefetchMemberData(Umbraco.Web.Models.ContentEditing.MemberSave,Umbraco.Web.Editors.MemberController.LookupType)">
            <summary>
            Re-fetches the database data to map to the PersistedContent object and re-assigns the already mapped the posted properties so that the display object is up-to-date
            </summary>
            <param name="contentItem"></param>
            <remarks>
            This is done during an update if the membership provider has changed some underlying data - we need to ensure that our model is consistent with that data
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.CreateWithMembershipProvider(Umbraco.Web.Models.ContentEditing.MemberSave,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            This is going to create the user with the membership provider and check for validation
            </summary>
            <param name="contentItem"></param>
            <param name="status"></param>
            <returns></returns>
            <remarks>
            Depending on if the Umbraco membership provider is active or not, the process differs slightly:
            
            * If the umbraco membership provider is used - we create the membership user first with the membership provider, since 
                it's the umbraco membership provider, this writes to the umbraco tables. When that is complete we re-fetch the IMember
                model data from the db. In this case we don't care what the provider user key is.
            * If we're using a non-umbraco membership provider - we check if there is a 'Member' member type - if so 
                we create an empty IMember instance first (of type 'Member'), this gives us a unique ID (GUID)
                that we then use to create the member in the custom membership provider. This acts as the link between Umbraco data and 
                the custom membership provider data. This gives us the ability to eventually have custom membership properties but still use
                a custom memberhip provider. If there is no 'Member' member type, then we will simply just create the membership provider member
                with no link to our data.
            
            If this is successful, it will go and re-fetch the IMember from the db because it will now have an ID because the Umbraco provider 
            uses the umbraco data store - then of course we need to re-map it to the saved property values.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MemberController.DeleteByKey(System.Guid)">
            <summary>
            Permanently deletes a member
            </summary>
            <param name="key"></param>
            <returns></returns>
            
        </member>
        <member name="P:Umbraco.Web.Editors.MemberController.MembershipScenario">
            <summary>
            Returns the currently configured membership scenario for members in umbraco
            </summary>
            <value></value>
        </member>
        <member name="T:Umbraco.Web.Editors.CurrentUserController">
            <summary>
            Controller to back the User.Resource service, used for fetching user data when already authenticated. user.service is currently used for handling authentication
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.CurrentUserController.GetMembershipProviderConfig">
            <summary>
            Returns the configuration for the backoffice user membership provider - used to configure the change password dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.CurrentUserController.PostChangePassword(Umbraco.Web.Models.ChangingPasswordModel)">
            <summary>
            Changes the users password
            </summary>
            <param name="data"></param>
            <returns>
            If the password is being reset it will return the newly reset password, otherwise will return an empty value
            </returns>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.DataTypeDisplay">
            <summary>
            Represents a data type that is being edited
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeDisplay.SelectedEditor">
            <summary>
            The alias of the property editor
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeDisplay.Notifications">
            <summary>
            This is used to add custom localized messages/strings to the response for the app to use for localized UI purposes.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeSave.Action">
            <summary>
            The action to perform when saving this data type
            </summary>
            <remarks>
            If either of the Publish actions are specified an exception will be thrown.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeSave.PersistedDataType">
            <summary>
            The real persisted data type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.DataTypeSave.PropertyEditor">
            <summary>
            The PropertyEditor assigned
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.PreValueFieldDisplay">
            <summary>
            Defines a pre value editable field for a data type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.PreValueFieldSave">
            <summary>
            Defines a pre value editable field for a data type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PreValueFieldSave.Key">
            <summary>
            The key to store the pre-value against
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PreValueFieldSave.Value">
            <summary>
            The value stored for the pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PreValueFieldDisplay.Name">
            <summary>
            The name to display for this pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PreValueFieldDisplay.Description">
            <summary>
            The description to display for this pre-value field
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PreValueFieldDisplay.HideLabel">
            <summary>
            Specifies whether to hide the label for the pre-value
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.PreValueFieldDisplay.View">
            <summary>
            The view to render for the field
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.PropertyEditorBasic">
            <summary>
            Defines an available property editor to be able to select for a data type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.DatabaseTypeResolver">
            <summary>
            Gets the DataTypeDatabaseType from the selected property editor for the data type
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.DataTypeModelMapper">
            <summary>
            Configure's model mappings for Data types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.PreValueDisplayResolver.MapPreValueValuesToPreValueFields(Umbraco.Web.Models.ContentEditing.PreValueFieldDisplay[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Maps pre-values in the dictionary to the values for the fields
            </summary>
            <param name="fields"></param>
            <param name="preValues"></param>        
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.CheckBoxListPropertyEditor">
            <summary>
            A property editor to allow multiple checkbox selection of pre-defined items.
            </summary>
            <remarks>
            Due to remaining backwards compatible, this stores the id of the checkbox items in the database 
            as INT and we have logic in here to ensure it is formatted correctly including ensuring that the string value is published
            in cache and not the int ID.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.CheckBoxListPropertyEditor.CreatePreValueEditor">
            <summary>
            Return a custom pre-value editor
            </summary>
            <returns></returns>
            <remarks>
            We are just going to re-use the ValueListPreValueEditor
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.CheckBoxListPropertyEditor.CreateValueEditor">
            <summary>
            We need to override the value editor so that we can ensure the string value is published in cache and not the integer ID value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.ColorPickerPropertyEditor.CreatePreValueEditor">
            <summary>
            Return a custom pre-value editor
            </summary>
            <returns></returns>
            <remarks>
            ColorListPreValueEditor uses the ValueListPreValueEditor with a custom view and controller.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DatePropertyEditor.DatePropertyValueEditor">
            <summary>
            CUstom value editor so we can serialize with the correct date format (excluding time)
            and includes the date validator
            </summary>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.DateTimePropertyEditor.DefaultPreValues">
            <summary>
            Overridden because we ONLY support Date + Time format and we don't have pre-values in the db.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DateTimeValidator">
            <summary>
            Used to validate if the value is a valid date/time
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DropDownMultiplePropertyEditor">
            <summary>
            A property editor to allow multiple selection of pre-defined items
            </summary>
            <remarks>
            Due to maintaining backwards compatibility this data type stores the value as a string which is a comma separated value of the 
            ids of the individual items so we have logic in here to deal with that.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DropDownMultipleWithKeysPropertyEditor">
            <summary>
            A property editor to allow multiple selection of pre-defined items
            </summary>
            <remarks>
            Due to maintaining backwards compatibility this data type stores the value as a string which is a comma separated value of the 
            ids of the individual items so we have logic in here to deal with that.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DropDownPropertyEditor">
            <summary>
            A property editor to allow the individual selection of pre-defined items.
            </summary>
            <remarks>
            Due to remaining backwards compatible, this stores the id of the drop down item in the database which is why it is marked
            as INT and we have logic in here to ensure it is formatted correctly including ensuring that the string value is published
            in cache and not the int ID.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DropDownWithKeysPropertyEditor">
            <summary>
            A property editor to allow the individual selection of pre-defined items.
            </summary>
            <remarks>
            Due to remaining backwards compatible, this stores the id of the drop down item in the database which is why it is marked
            as INT and we have logic in here to ensure it is formatted correctly including ensuring that the INT ID value is published
            in cache and not the string value.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DropDownWithKeysPropertyEditor.CreatePreValueEditor">
            <summary>
            Return a custom pre-value editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DropDownPropertyEditor.CreateValueEditor">
            <summary>
            We need to override the value editor so that we can ensure the string value is published in cache and not the integer ID value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.DropDownMultipleWithKeysPropertyEditor.DropDownMultiplePreValueEditor">
            <summary>
            A pre-value editor for the 'drop down list multiple' property editor that ensures that 'multiple' is saved for the config in the db but is not 
            rendered as a pre-value field.
            </summary>
            <remarks>
            This is mostly to maintain backwards compatibility with old property editors. Devs can now simply use the Drop down property editor and check the multiple pre-value checkbox
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.DropDownMultipleWithKeysPropertyEditor.DropDownMultiplePreValueEditor.ConvertDbToEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            Always
            </summary>
            <param name="defaultPreVals"></param>
            <param name="persistedPreVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.IntegerPropertyEditor.CreateValueEditor">
            <summary>
            Overridden to ensure that the value is validated
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.IntegerPropertyEditor.IntegerPreValueEditor">
            <summary>
            A custom pre-value editor class to deal with the legacy way that the pre-value data is stored.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPreValueEditor">
            <summary>
            A custom pre-value editor class to deal with the legacy way that the pre-value data is stored.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPreValueEditor.ConvertEditorToDb(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            Need to change how we persist the values so they are compatible with the legacy way we store values
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPreValueEditor.ConvertDbToEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            Need to deal with the legacy way of storing pre-values and turn them into nice values for the editor
            </summary>
            <param name="defaultPreVals"></param>
            <param name="persistedPreVals"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor">
            <summary>
            Custom value editor so we can format the value for the editor and the database
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.ConvertEditorToDb(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            The value passed in from the editor will be an array of simple objects so we'll need to parse them to get the string
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
            <remarks>
            We will also check the pre-values here, if there are more items than what is allowed we'll just trim the end
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.MultipleTextStringPropertyEditor.MultipleTextStringPropertyValueEditor.ConvertDbToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Models.PropertyType,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            We are actually passing back an array of simple objects instead of an array of strings because in angular a primitive (string) value
            cannot have 2 way binding, so to get around that each item in the array needs to be an object with a string.
            </summary>
            <param name="property"></param>
            <param name="propertyType"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
            <remarks>
            The legacy property editor saved this data as new line delimited! strange but we have to maintain that.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.PublishValuesMultipleValueEditor">
            <summary>
            Custom value editor to handle posted json data and to return json data for the multiple selected items as well as ensuring
            that the multiple selected int IDs are published to cache as a delimited string (values)
            </summary>
            <remarks>
            This is re-used by editors such as the multiple drop down list or check box list
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.PublishValueValueEditor">
            <summary>
            A custom value editor for any property editor that stores a pre-value int id so that we can ensure that the 'value' not the ID get's put into cache
            </summary>
            <remarks>
            This is required for legacy/backwards compatibility, otherwise we'd just store the string version and cache the string version without
            needing additional lookups.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.PublishValueValueEditor.ConvertDbToString(Umbraco.Core.Models.Property,Umbraco.Core.Models.PropertyType,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Need to lookup the pre-values and put the string version in cache, not the ID (which is what is stored in the db)
            </summary>
            <param name="property"></param>
            <param name="propertyType"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.PublishValuesMultipleValueEditor.ConvertDbToString(Umbraco.Core.Models.Property,Umbraco.Core.Models.PropertyType,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            If publishing ids, we don't need to do anything, otherwise we need to look up the pre-values and get the string values
            </summary>
            <param name="property"></param>
            <param name="propertyType"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.PublishValuesMultipleValueEditor.ConvertDbToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Models.PropertyType,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Override so that we can return a json array to the editor for multi-select values
            </summary>
            <param name="property"></param>
            <param name="propertyType"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.PublishValuesMultipleValueEditor.ConvertEditorToDb(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            When multiple values are selected a json array will be posted back so we need to format for storage in 
            the database which is a comma separated ID value
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RadioButtonsPropertyEditor">
            <summary>
            A property editor to allow the individual selection of pre-defined items.
            </summary>
            <remarks>
            Due to remaining backwards compatible, this stores the id of the item in the database which is why it is marked
            as INT and we have logic in here to ensure it is formatted correctly including ensuring that the INT ID value is published
            in cache and not the string value.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RichTextPreValueController">
            <summary>
            ApiController to provide RTE configuration with available plugins and commands from the RTE config
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TagPropertyEditorTagDefinition">
            <summary>
            Used to dynamically change the tag group and storage type based on the pre-values
            </summary>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.TagsPropertyEditor.DefaultPreValues">
            <summary>
            Override to supply the default group
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.ConvertEditorToDb(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            This needs to return IEnumerable{string}
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredValidator">
            <summary>
            Returns the validator used for the required field validation which is specified on the PropertyType
            </summary>
            <remarks>
            This will become legacy as soon as we implement overridable pre-values.
            
            The default validator used is the RequiredValueValidator but this can be overridden by property editors
            if they need to do some custom validation, or if the value being validated is a json object.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredTagsValueValidator">
            <summary>
            Custom validator to validate a required value against an empty json value
            </summary>
            <remarks>
            This is required because the Tags property editor is not of type 'JSON', it's just string so the underlying
            validator does not validate against an empty json string
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.TagsPropertyEditor.TagPropertyValueEditor.RequiredTagsValueValidator.Validate(System.Object,System.String,Umbraco.Core.Models.PreValueCollection,Umbraco.Core.PropertyEditors.PropertyEditor)">
            <summary>
            Validates a null value or an empty json value
            </summary>
            <param name="value"></param>
            <param name="config"></param>
            <param name="preValues"></param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.LabelPropertyEditor.LabelPropertyValueEditor">
            <summary>
            Custom value editor to mark it as readonly
            </summary>
        </member>
        <member name="P:Umbraco.Web.PropertyEditors.LabelPropertyEditor.LabelPropertyValueEditor.IsReadOnly">
            <summary>
            This editor is for display purposes only, any values bound to it will not be saved back to the database
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.LabelPropertyEditor.LabelPreValueEditor.ConvertDbToEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            Chuck all the values into one field so devs can see what is stored there - we want this in case we've converted a legacy proeprty editor over to a label
            we should still show the pre-values stored for the data type.
            </summary>
            <param name="defaultPreVals"></param>
            <param name="persistedPreVals"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PublishedContentQuery">
            <summary>
            A class used to query for published content, media items
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.Search(System.String,System.Boolean,System.String)">
            <summary>
            Searches content
            </summary>
            <param name="term"></param>
            <param name="useWildCards"></param>
            <param name="searchProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.Search(Examine.SearchCriteria.ISearchCriteria,Examine.Providers.BaseSearchProvider)">
            <summary>
            Searhes content
            </summary>
            <param name="criteria"></param>
            <param name="searchProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.TypedSearch(System.String,System.Boolean,System.String)">
            <summary>
            Searches content
            </summary>
            <param name="term"></param>
            <param name="useWildCards"></param>
            <param name="searchProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentQuery.TypedSearch(Examine.SearchCriteria.ISearchCriteria,Examine.Providers.BaseSearchProvider)">
            <summary>
            Searhes content
            </summary>
            <param name="criteria"></param>
            <param name="searchProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.ImageCropperTemplateExtensions">
            <summary>
            Provides extension methods for getting ImageProcessor Url from the core Image Cropper property editor
            </summary>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the ImageProcessor Url by the crop alias (from the "umbracoFile" property alias) on the IPublishedContent item
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="cropAlias">
            The crop alias e.g. thumbnail
            </param>
            <returns>
            The ImageProcessor.Web Url.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(Umbraco.Core.Models.IPublishedContent,System.String,System.String)">
            <summary>
            Gets the ImageProcessor Url by the crop alias using the specified property containing the image cropper Json data on the IPublishedContent item.
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="propertyAlias">
            The property alias of the property containing the Json data e.g. umbracoFile
            </param>
            <param name="cropAlias">
            The crop alias e.g. thumbnail
            </param>
            <returns>
            The ImageProcessor.Web Url.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(Umbraco.Core.Models.IPublishedContent,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.Boolean,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean)">
            <summary>
            Gets the ImageProcessor Url from the IPublishedContent item.
            </summary>
            <param name="mediaItem">
            The IPublishedContent item.
            </param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="propertyAlias">
            Property alias of the property containing the Json data.
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="preferFocalPoint">
            Use focal point, to generate an output image using the focal point instead of the predefined crop
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters&gt;.
            </param>
            <param name="cacheBuster">
            Add a serialised date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            The further options.
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>  
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>         
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Umbraco.Web.ImageCropperTemplateExtensions.GetCropUrl(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{Umbraco.Web.Models.ImageCropMode},System.Nullable{Umbraco.Web.Models.ImageCropAnchor},System.Boolean,System.Boolean,System.String,System.String,System.Nullable{Umbraco.Web.Models.ImageCropRatioMode},System.Boolean)">
            <summary>
            Gets the ImageProcessor Url from the image path.
            </summary>
            <param name="imageUrl">
            The image url.
            </param>
            <param name="width">
            The width of the output image.
            </param>
            <param name="height">
            The height of the output image.
            </param>
            <param name="quality">
            Quality percentage of the output image.
            </param>
            <param name="imageCropMode">
            The image crop mode.
            </param>
            <param name="imageCropAnchor">
            The image crop anchor.
            </param>
            <param name="imageCropperValue">
            The Json data from the Umbraco Core Image Cropper property editor
            </param>
            <param name="cropAlias">
            The crop alias.
            </param>
            <param name="preferFocalPoint">
            Use focal point to generate an output image using the focal point instead of the predefined crop if there is one
            </param>
            <param name="useCropDimensions">
            Use crop dimensions to have the output image sized according to the predefined crop sizes, this will override the width and height parameters&gt;.
            </param>
            <param name="cacheBusterValue">
            Add a serialised date of the last edit of the item to ensure client cache refresh when updated
            </param>
            <param name="furtherOptions">
            The further options.
            </param>
            <param name="ratioMode">
            Use a dimension as a ratio
            </param>  
            <param name="upScale">
            If the image should be upscaled to requested dimensions
            </param>         
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Umbraco.Web.Routing.CustomRouteUrlProvider">
            <summary>
            This url provider is used purely to deal with umbraco custom routes that utilize UmbracoVirtualNodeRouteHandler and will return
            the URL returned from the current PublishedContentRequest.PublishedContent (virtual node) if the request is in fact a virtual route and 
            the id that is being requested matches the id of the current PublishedContentRequest.PublishedContent.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.IUrlProvider">
            <summary>
            Provides urls.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.IUrlProvider.GetUrl(Umbraco.Web.UmbracoContext,System.Int32,System.Uri,Umbraco.Web.Routing.UrlProviderMode)">
            <summary>
            Gets the nice url of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <param name="mode">The url mode.</param>
            <returns>The url for the published content.</returns>
            <remarks>
            <para>The url is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the provider is unable to provide a url, it should return <c>null</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.IUrlProvider.GetOtherUrls(Umbraco.Web.UmbracoContext,System.Int32,System.Uri)">
            <summary>
            Gets the other urls of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <returns>The other urls for the published content.</returns>
            <remarks>
            <para>Other urls are those that <c>GetUrl</c> would not return in the current context, but would be valid
            urls for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.CustomRouteUrlProvider.GetUrl(Umbraco.Web.UmbracoContext,System.Int32,System.Uri,Umbraco.Web.Routing.UrlProviderMode)">
            <summary>
            This will simply return the URL that is returned by the assigned IPublishedContent if this is a custom route
            </summary>
            <param name="umbracoContext"></param>
            <param name="id"></param>
            <param name="current"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Routing.CustomRouteUrlProvider.GetOtherUrls(Umbraco.Web.UmbracoContext,System.Int32,System.Uri)">
            <summary>
            This always returns null because this url provider is used purely to deal with Umbraco custom routes with 
            UmbracoVirtualNodeRouteHandler, we really only care about the normal URL so that RedirectToCurrentUmbracoPage() works 
            with SurfaceControllers
            </summary>
            <param name="umbracoContext"></param>
            <param name="id"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProviderExtensions.GetContentUrls(Umbraco.Core.Models.IContent,Umbraco.Web.UmbracoContext)">
            <summary>
            Gets the URLs for the content item
            </summary>
            <param name="content"></param>
            <param name="umbracoContext"></param>
            <returns></returns>
            <remarks>
            Use this when displaying URLs, if there are errors genertaing the urls the urls themselves will
            contain the errors.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions">
            <summary>
            Provides options to the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunner`1"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions"/> class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.LongRunning">
            <summary>
            Gets or sets a value indicating whether the running task should be a long-running,
            coarse grained operation.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.KeepAlive">
            <summary>
            Gets or sets a value indicating whether the running task should block and wait
            on the queue, or end, when the queue is empty.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.AutoStart">
            <summary>
            Gets or sets a value indicating whether the running task should start immediately
            or only once a task has been added to the queue.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.BackgroundTaskRunnerOptions.PreserveRunningTask">
            <summary>
            Gets or setes a value indicating whether the running task should be preserved
            once completed, or reset to null. For unit tests.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.DelayedRecurringTaskBase`1">
            <summary>
            Provides a base class for recurring background tasks.
            </summary>
            <typeparam name="T">The type of the managed tasks.</typeparam>
        </member>
        <member name="T:Umbraco.Web.Scheduling.RecurringTaskBase`1">
            <summary>
            Provides a base class for recurring background tasks.
            </summary>
            <typeparam name="T">The type of the managed tasks.</typeparam>
        </member>
        <member name="T:Umbraco.Web.Scheduling.IBackgroundTask">
            <summary>
            Represents a background task.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.IBackgroundTask.Run">
            <summary>
            Runs the background task.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.IBackgroundTask.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the task asynchronously.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance representing the execution of the background task.</returns>
            <exception cref="T:System.NotImplementedException">The background task cannot run asynchronously.</exception>
        </member>
        <member name="P:Umbraco.Web.Scheduling.IBackgroundTask.IsAsync">
            <summary>
            Indicates whether the background task can run asynchronously.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase`1.#ctor(Umbraco.Web.Scheduling.IBackgroundTaskRunner{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.RecurringTaskBase`1"/> class with a tasks runner and a period.
            </summary>
            <param name="runner">The task runner.</param>
            <param name="periodMilliseconds">The period.</param>
            <remarks>The task will repeat itself periodically. Use this constructor to create a new task.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase`1.#ctor(Umbraco.Web.Scheduling.RecurringTaskBase{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Scheduling.RecurringTaskBase`1"/> class with a source task.
            </summary>
            <param name="source">The source task.</param>
            <remarks>Use this constructor to create a new task from a source task in <c>GetRecurring</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase`1.Run">
            <summary>
            Implements IBackgroundTask.Run().
            </summary>
            <remarks>Classes inheriting from <c>RecurringTaskBase</c> must implement <c>PerformRun</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase`1.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Implements IBackgroundTask.RunAsync().
            </summary>
            <remarks>Classes inheriting from <c>RecurringTaskBase</c> must implement <c>PerformRun</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase`1.PerformRun">
            <summary>
            Runs the background task.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase`1.PerformRunAsync">
            <summary>
            Runs the task asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance representing the execution of the background task.</returns>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase`1.GetRecurring">
            <summary>
            Gets a new occurence of the recurring task.
            </summary>
            <returns>A new task instance to be queued, or <c>null</c> to terminate the recurring task.</returns>
            <remarks>The new task instance must be created via the <c>RecurringTaskBase(RecurringTaskBase{T} source)</c> constructor,
            where <c>source</c> is the current task, eg: <c>return new MyTask(this);</c></remarks>
        </member>
        <member name="M:Umbraco.Web.Scheduling.RecurringTaskBase`1.Dispose">
            <summary>
            Dispose the task.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Scheduling.RecurringTaskBase`1.IsAsync">
            <summary>
            Indicates whether the background task can run asynchronously.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Scheduling.ILatchedBackgroundTask">
            <summary>
            Represents a latched background task.
            </summary>
            <remarks>Latched background tasks can suspend their execution until
            a condition is met. However if the tasks runner has to terminate,
            latched background tasks can be executed immediately, depending on
            the value returned by RunsOnShutdown.</remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.ILatchedBackgroundTask.Latch">
            <summary>
            Gets a wait handle on the task condition.
            </summary>
            <exception cref="T:System.InvalidOperationException">The task is not latched.</exception>
        </member>
        <member name="P:Umbraco.Web.Scheduling.ILatchedBackgroundTask.IsLatched">
            <summary>
            Gets a value indicating whether the task is latched.
            </summary>
            <remarks>Should return false as soon as the condition is met.</remarks>
        </member>
        <member name="P:Umbraco.Web.Scheduling.ILatchedBackgroundTask.RunsOnShutdown">
            <summary>
             Gets a value indicating whether the task can be executed immediately if the task runner has to terminate.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Strategies.Migrations.ClearCsrfCookiesAfterUpgrade">
            <summary>
            After upgrade we clear out the csrf tokens
            </summary>
        </member>
        <member name="T:Umbraco.Web.Strategies.Migrations.ClearMediaXmlCacheForDeletedItemsAfterUpgrade">
            <summary>
            This will execute after upgrading to remove any xml cache for media that are currently in the bin
            </summary>
            <remarks>    
            This will execute for specific versions - 
            
            * If current is less than or equal to 7.0.0
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Strategies.Migrations.EnsureDefaultListViewDataTypesCreated">
            <summary>
            Creates the built in list view data types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Strategies.Migrations.EnsureDefaultListViewDataTypesCreated.ApplicationStarting(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Attach to event on starting
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="P:Umbraco.Web.Strategies.Migrations.EnsureDefaultListViewDataTypesCreated.ExecuteWhenApplicationNotConfigured">
            <summary>
            Ensure this is run when not configured
            </summary>
        </member>
        <member name="P:Umbraco.Web.Strategies.Migrations.EnsureDefaultListViewDataTypesCreated.ExecuteWhenDatabaseNotConfigured">
            <summary>
            Ensure this is run when not configured
            </summary>
        </member>
        <member name="T:Umbraco.Web.Strategies.NotificationsHandler">
            <summary>
            Subscribes to the relavent events in order to send out notifications
            </summary>
        </member>
        <member name="T:Umbraco.Web.TagQuery">
            <summary>
            A class that exposes methods used to query tag data in views
            </summary>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetContentByTag(System.String,System.String)">
            <summary>
            Returns all content that is tagged with the specified tag value and optional tag group
            </summary>
            <param name="tag"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetContentByTagGroup(System.String)">
            <summary>
            Returns all content that has been tagged with any tag in the specified group
            </summary>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetMediaByTag(System.String,System.String)">
            <summary>
            Returns all Media that is tagged with the specified tag value and optional tag group
            </summary>
            <param name="tag"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetMediaByTagGroup(System.String)">
            <summary>
            Returns all Media that has been tagged with any tag in the specified group
            </summary>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetAllTags(System.String)">
            <summary>
            Get every tag stored in the database (with optional group)
            </summary>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetAllContentTags(System.String)">
            <summary>
            Get all tags for content items (with optional group)
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetAllMediaTags(System.String)">
            <summary>
            Get all tags for media items (with optional group)
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetAllMemberTags(System.String)">
            <summary>
            Get all tags for member items (with optional group)
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetTagsForProperty(System.Int32,System.String,System.String)">
            <summary>
            Returns all tags attached to a property by entity id
            </summary>
            <param name="contentId"></param>
            <param name="propertyTypeAlias"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.TagQuery.GetTagsForEntity(System.Int32,System.String)">
            <summary>
            Returns all tags attached to an entity (content, media or member) by entity id
            </summary>
            <param name="contentId"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Trees.CoreTreeAttribute">
            <summary>
            Indicates that a tree is a core tree and shouldn't be treated as a plugin tree
            </summary>
            <remarks>
            This ensures that umbraco will look in the umbraco folders for views for this tree
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeController">
            <summary>
            The base controller for all tree requests
            </summary>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeControllerBase">
            <summary>
            A base controller reference for non-attributed trees (un-registered). Developers should inherit from
            TreeController.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetTreeNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The method called to render the contents of the tree structure
            </summary>
            <param name="id"></param>
            <param name="queryStrings">
            All of the query string parameters passed from jsTree
            </param>
            <remarks>
            We are allowing an arbitrary number of query strings to be pased in so that developers are able to persist custom data from the front-end
            to the back end to be used in the query for model data.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetMenuForNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns the menu structure for the node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns the root node for the tree
            </summary>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The action called to render the contents of the tree structure
            </summary>
            <param name="id"></param>
            <param name="queryStrings">
            All of the query string parameters passed from jsTree
            </param>
            <returns>JSON markup for jsTree</returns>        
            <remarks>
            We are allowing an arbitrary number of query strings to be pased in so that developers are able to persist custom data from the front-end
            to the back end to be used in the query for model data.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.GetMenu(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The action called to render the menu for a tree node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateRootNode(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Helper method to create a root model for a tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Helper method to create tree nodes
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String)">
            <summary>
            Helper method to create tree nodes
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String,System.String)">
            <summary>
            Helper method to create tree nodes
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="routePath"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String,System.Boolean)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="icon"></param>
            <param name="hasChildren"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.CreateTreeNode(System.String,System.String,System.Net.Http.Formatting.FormDataCollection,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Helper method to create tree nodes and automatically generate the json url
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <param name="title"></param>
            <param name="routePath"></param>
            <param name="hasChildren"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.AddQueryStringsToAdditionalData(Umbraco.Web.Models.Trees.TreeNode,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            The AdditionalData of a node is always populated with the query string data, this method performs this
            operation and ensures that special values are not inserted or that duplicate keys are not added.
            </summary>
            <param name="node"></param>
            <param name="queryStrings"></param>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeControllerBase.IsDialog(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            If the request is for a dialog mode tree
            </summary>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.RootNodeDisplayName">
            <summary>
            The name to display on the root node
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeControllerBase.TreeAlias">
            <summary>
            Gets the current tree alias from the attribute assigned to it.
            </summary>
        </member>
        <member name="E:Umbraco.Web.Trees.TreeControllerBase.TreeNodesRendering">
            <summary>
            An event that allows developers to modify the tree node collection that is being rendered
            </summary>
            <remarks>
            Developers can add/remove/replace/insert/update/etc... any of the tree items in the collection.
            </remarks>
        </member>
        <member name="E:Umbraco.Web.Trees.TreeControllerBase.RootNodeRendering">
            <summary>
            An event that allows developer to modify the root tree node that is being rendered
            </summary>
        </member>
        <member name="E:Umbraco.Web.Trees.TreeControllerBase.MenuRendering">
            <summary>
            An event that allows developers to modify the meun that is being rendered
            </summary>
            <remarks>
            Developers can add/remove/replace/insert/update/etc... any of the tree items in the collection.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.RootNodeDisplayName">
            <summary>
            The name to display on the root node
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.TreeController.TreeAlias">
            <summary>
            Gets the current tree alias from the attribute assigned to it.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.FileSystemTreeController.OnRenderFileNode(Umbraco.Web.Models.Trees.TreeNode@)">
            <summary>
            Inheritors can override this method to modify the file node that is created.
            </summary>
            <param name="xNode"></param>
        </member>
        <member name="M:Umbraco.Web.Trees.FileSystemTreeController.OnRenderFolderNode(Umbraco.Web.Models.Trees.TreeNode@)">
            <summary>
            Inheritors can override this method to modify the folder node that is created.
            </summary>
            <param name="xNode"></param>
        </member>
        <member name="T:Umbraco.Web.Trees.LegacyBaseTreeAttribute">
            <summary>
            This attribute is used purely to maintain some compatibility with legacy webform tree pickers
            </summary>
            <remarks>
            This allows us to attribute new trees with their legacy counterparts and when a legacy tree is loaded this will indicate 
            on the new tree which legacy tree to load (it won't actually render using the new tree)
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.MemberTreeController.GetTreeNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Gets an individual tree node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Trees.MenuRenderingEventArgs.NodeId">
            <summary>
            The tree node id that the menu is rendering for
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.MenuRenderingEventArgs.Menu">
            <summary>
            The menu being rendered
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.CreateChildEntity">
            <summary>
            Represents the refresh node menu item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.ActionMenuItem">
            <summary>
            A menu item that represents some JS that needs to execute when the menu item is clicked.
            </summary>
            <remarks>
            These types of menu items are rare but they do exist. Things like refresh node simply execute
            JS and don't launch a dialog.
            
            Each action menu item describes what angular service that it's method exists in and what the method name is.
            
            An action menu item must describe the angular service name for which it's method exists. It may also define what the 
            method name is that will be called in this service but if one is not specified then we will assume the method name is the
            same as the Type name of the current action menu class.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.MenuItem">
            <summary>
            A context menu item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.DialogTitleKey">
            <summary>
            Used as a key for the AdditionalData to specify a specific dialog title instead of the menu title
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.ActionUrlKey">
            <summary>
            Used to specify the URL that the dialog will launch to in an iframe
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.ActionViewKey">
            <summary>
            Used to specify the angular view that the dialog will launch
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.JsActionKey">
            <summary>
            Used to specify the js method to execute for the menu item 
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.Trees.MenuItem.ActionRouteKey">
            <summary>
            Used to specify an angular route to go to for the menu item
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.NavigateToRoute(System.String)">
            <summary>
            Sets the menu item to navigate to the specified angular route path
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.ExecuteLegacyJs(System.String)">
            <summary>
            Adds the required meta data to the menu item so that angular knows to attempt to call the Js method.
            </summary>
            <param name="jsToExecute"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.LaunchDialogView(System.String,System.String)">
            <summary>
            Sets the menu item to display a dialog based on an angular view path
            </summary>
            <param name="view"></param>
            <param name="dialogTitle"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.LaunchDialogUrl(System.String,System.String)">
            <summary>
            Sets the menu item to display a dialog based on a url path in an iframe
            </summary>
            <param name="url"></param>
            <param name="dialogTitle"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.SetDialogTitle(System.String)">
            <summary>
            Puts a dialog title into the meta data to be displayed on the dialog of the menu item (if there is one)
            instead of the menu name
            </summary>
            <param name="dialogTitle"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItem.SetActionUrl(System.String,Umbraco.Web.Trees.ActionUrlMethod)">
            <summary>
            Configures the menu item to launch a URL with the specified action (dialog or new window)
            </summary>
            <param name="url"></param>
            <param name="method"></param>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItem.AdditionalData">
            <summary>
            A dictionary to support any additional meta data that should be rendered for the node which is 
            useful for custom action commands such as 'create', 'copy', etc...
            </summary>
            <remarks>
            We will also use the meta data collection for dealing with legacy menu items (i.e. for loading custom URLs or
            executing custom JS).
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItem.SeperatorBefore">
            <summary>
            Ensures a menu separator will exist before this menu item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.MenuItemList">
            <summary>
            A custom menu list
            </summary>
            <remarks>
            NOTE: We need a sub collection to the MenuItemCollection object due to how json serialization works.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.Add(umbraco.interfaces.IAction,System.String)">
            <summary>
            Adds a menu item
            </summary>
            <param name="action"></param>
            <param name="name">The text to display for the menu item, will default to the IAction alias if not specified</param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.Add``2(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds a menu item
            </summary>
            <typeparam name="TMenuItem"></typeparam>
            <typeparam name="TAction"></typeparam>
            <param name="hasSeparator"></param>
            <param name="name">The text to display for the menu item, will default to the IAction alias if not specified</param>
            <param name="additionalData"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.Add``1(System.String)">
            <summary>
            Adds a menu item
            </summary>
            <param name="name">The text to display for the menu item, will default to the IAction alias if not specified</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.Add``1(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a menu item with a key value pair which is merged to the AdditionalData bag
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="name">The text to display for the menu item, will default to the IAction alias if not specified</param>
            <param name="hasSeparator"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.Add``1(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds a menu item with a dictionary which is merged to the AdditionalData bag
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hasSeparator"></param>
            /// <param name="name">The text to display for the menu item, will default to the IAction alias if not specified</param>
            <param name="additionalData"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.CreateMenuItem``1(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hasSeparator"></param>
            <param name="name">The text to display for the menu item, will default to the IAction alias if not specified</param>
            <param name="additionalData"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.MenuItemList.DetectLegacyActionMenu(System.Type,Umbraco.Web.Models.Trees.MenuItem)">
            <summary>
            Checks if the IAction type passed in is attributed with LegacyActionMenuItemAttribute and if so 
            ensures that the correct action metadata is added.
            </summary>
            <param name="actionType"></param>
            <param name="menuItem"></param>
        </member>
        <member name="M:Umbraco.Web.UI.JavaScript.AssetInitialization.ScanPropertyEditors(ClientDependency.Core.ClientDependencyType,System.Web.HttpContextBase)">
            <summary>
            Get all dependencies declared on property editors
            </summary>
            <param name="cdfType"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.JavaScript.AssetInitialization.OptimizeAssetCollection(Newtonsoft.Json.Linq.JArray,ClientDependency.Core.ClientDependencyType,System.Web.HttpContextBase)">
            <summary>
            This will use CDF to optimize the asset file collection
            </summary>
            <param name="fileRefs"></param>
            <param name="cdfType"></param>
            <param name="httpContext"></param>
            <returns>
            Return the asset URLs that should be loaded, if the application is in debug mode then the URLs returned will be the same as the ones
            passed in with the CDF version query strings appended so cache busting works correctly.
            </returns>
        </member>
        <member name="M:Umbraco.Web.UI.JavaScript.CssInitialization.GetStylesheetInitialization(System.Web.HttpContextBase)">
            <summary>
            Processes all found manifest files and outputs yepnope.injectcss calls for all css files found in all manifests
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.JavaScript.CssInitialization.ParseMain(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Parses the CssResources.Main and returns a yepnop.injectCss format
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.UI.JavaScript.DependencyPathRenderer">
            <summary>
            A custom renderer that only outputs a dependency path instead of script tags - for use with the js loader with yepnope
            </summary>
        </member>
        <member name="F:Umbraco.Web.UI.JavaScript.DependencyPathRenderer.Delimiter">
            <summary>
            Used to delimit each dependency so we can split later
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.UI.JavaScript.DependencyPathRenderer.RegisterDependencies(System.Collections.Generic.List{ClientDependency.Core.IClientDependencyFile},System.Collections.Generic.HashSet{ClientDependency.Core.IClientDependencyPath},System.String@,System.String@,System.Web.HttpContextBase)" -->
        <member name="T:umbraco.controls.GenericProperties.GenericProperty">
            <summary>
            	Summary description for GenericProperty.
            </summary>
        </member>
        <member name="M:umbraco.controls.GenericProperties.GenericProperty.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.DeleteButton2">
            <summary>
            DeleteButton2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.FullHeader">
            <summary>
            FullHeader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.DeleteButton">
            <summary>
            DeleteButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.Header">
            <summary>
            Header control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.tbName">
            <summary>
            tbName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.tbAlias">
            <summary>
            tbAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.PropertyPanel2">
            <summary>
            PropertyPanel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.ddlTypes">
            <summary>
            ddlTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.PropertyPanel3">
            <summary>
            PropertyPanel3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.ddlTab">
            <summary>
            ddlTab control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.PropertyPanel4">
            <summary>
            PropertyPanel4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.checkMandatory">
            <summary>
            checkMandatory control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.PropertyPanel5">
            <summary>
            PropertyPanel5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.tbValidation">
            <summary>
            tbValidation control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.validationLink">
            <summary>
            validationLink control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.PropertyPanel6">
            <summary>
            PropertyPanel6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.GenericProperties.GenericProperty.tbDescription">
            <summary>
            tbDescription control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:umbraco.controls.GenericProperties.GenericProperty.AllowPropertyEdit">
            <summary>
            Defines whether the property can be edited in the UI
            </summary>
        </member>
        <member name="P:umbraco.controls.GenericProperties.GenericProperty.AllowNameEdit">
            <summary>
            Defines whether the property's name can be edited in the UI
            </summary>
        </member>
        <member name="F:umbraco.presentation.umbraco.create.script.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.create.script.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.create.script.scriptType">
            <summary>
            scriptType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.create.script.CreateMacroCheckBox">
            <summary>
            CreateMacroCheckBox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.create.script.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.create.controls.language">
            <summary>
            	Summary description for language.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.language.pp1">
            <summary>
            pp1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.language.Cultures">
            <summary>
            Cultures control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.language.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.language.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.DLRScripting.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.DLRScripting.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.DLRScripting.UpdatePanel1">
            <summary>
            UpdatePanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.DLRScripting.filetype">
            <summary>
            filetype control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.DLRScripting.template">
            <summary>
            template control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.DLRScripting.createMacro">
            <summary>
            createMacro control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.DLRScripting.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.DLRScripting.Textbox1">
            <summary>
            Textbox1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.PartialViewTasksBase">
            <summary>
            The base UI 'tasks' for the create dialog and delete processes
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.LegacyDialogTask">
            <summary>
            An abstract class that is used to implement all secure ITasks
            </summary>
            <remarks>
            In the near future we will overhaul how create dialogs work and how deletions work as well. In the meantime 
            if you ever need to create an ITask you should just inherit from this class and do not manually implement 
            ITask or ITaskReturnUrl. If you do, you MUST also implement IAppTask which associates an ITask to an app
            so we can validate the current user's security with the implementation. If you do not do this then your 
            implementation will not be secure. It means that if someone is logged in and doesn't have access to a 
            specific app, they'd still be able to execute code to create/delete for any ITask regardless of what app 
            they have access to.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.UI.IAssignedApp">
            <summary>
            This is used for anything that is assigned to an app
            </summary>
            <remarks>
            Currently things that need to be assigned to an app in order for user security to work are:
            dialogs, ITasks, editors
            </remarks>
        </member>
        <member name="P:Umbraco.Web.UI.IAssignedApp.AssignedApp">
            <summary>
            Returns the app alias that this element belongs to
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.LegacyDialogTask.Save">
            <summary>
            Base class first performs authentication for the current app before proceeding
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.LegacyDialogTask.Delete">
            <summary>
            Base class first performs authentication for the current app before proceeding
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.LegacyDialogTask.ValidateUserForApplication">
            <summary>
            Checks if the currently assigned user has access to the assigned app
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.UI.LegacyDialogTask.User">
            <summary>
            Gets/sets the user object for this Task
            </summary>
            <remarks>
            accessible by inheritors but can only be set internally
            </remarks>
        </member>
        <member name="P:Umbraco.Web.UI.LegacyDialogTask.umbraco#interfaces#ITask#UserId">
            <summary>
            Implemented explicitly as we don't want to expose this
            </summary>
        </member>
        <member name="T:umbraco.presentation.create.xslt">
            <summary>
            	Summary description for xslt.
            </summary>
        </member>
        <member name="F:umbraco.presentation.create.xslt.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.xslt.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.xslt.xsltTemplate">
            <summary>
            xsltTemplate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.xslt.createMacro">
            <summary>
            createMacro control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.xslt.Textbox1">
            <summary>
            Textbox1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.create.xslt.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.developer.packages.Installer">
            <summary>
            Summary description for packager.
            </summary>
        </member>
        <member name="M:umbraco.presentation.developer.packages.Installer.PerformFinishedAction(System.Int32,System.String,System.String)">
            <summary>
            Perform the 'Finished' action of the installer
            </summary>
            <param name="packageId"></param>
            <param name="dir"></param>
            <param name="url"></param>
        </member>
        <member name="M:umbraco.presentation.developer.packages.Installer.PerformRefreshAction(System.Int32,System.String,System.String,System.String)">
            <summary>
            Perform the 'Refresh' action of the installer
            </summary>
            <param name="packageId"></param>
            <param name="dir"></param>
            <param name="url"></param>
            <param name="customControl"></param>
        </member>
        <member name="M:umbraco.presentation.developer.packages.Installer.PerformPostRefreshAction">
            <summary>
            Runs Post refresh actions such reloading the correct tree nodes, etc...
            </summary>
        </member>
        <member name="M:umbraco.presentation.developer.packages.Installer.PerformPostInstallCleanup(System.Int32,System.String)">
            <summary>
            Runs Post install actions such as clearning any necessary cache, reloading the correct tree nodes, etc...
            </summary>
            <param name="packageId"></param>
            <param name="dir"></param>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.fb">
            <summary>
            fb control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pane_upload">
            <summary>
            pane_upload control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel9">
            <summary>
            PropertyPanel9 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.file1">
            <summary>
            file1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.ButtonLoadPackage">
            <summary>
            ButtonLoadPackage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.progbar1">
            <summary>
            progbar1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pane_authenticate">
            <summary>
            pane_authenticate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.tb_email">
            <summary>
            tb_email control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.tb_password">
            <summary>
            tb_password control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel2">
            <summary>
            PropertyPanel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.Button1">
            <summary>
            Button1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pane_acceptLicense">
            <summary>
            pane_acceptLicense control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pane_acceptLicenseInner">
            <summary>
            pane_acceptLicenseInner control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel3">
            <summary>
            PropertyPanel3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.LabelName">
            <summary>
            LabelName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel5">
            <summary>
            PropertyPanel5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.LabelAuthor">
            <summary>
            LabelAuthor control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel4">
            <summary>
            PropertyPanel4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.LabelMore">
            <summary>
            LabelMore control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel6">
            <summary>
            PropertyPanel6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.LabelLicense">
            <summary>
            LabelLicense control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel7">
            <summary>
            PropertyPanel7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.acceptCheckbox">
            <summary>
            acceptCheckbox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.PropertyPanel8">
            <summary>
            PropertyPanel8 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.readme">
            <summary>
            readme control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pp_unsecureFiles">
            <summary>
            pp_unsecureFiles control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.lt_files">
            <summary>
            lt_files control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pp_macroConflicts">
            <summary>
            pp_macroConflicts control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.ltrMacroAlias">
            <summary>
            ltrMacroAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pp_templateConflicts">
            <summary>
            pp_templateConflicts control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.ltrTemplateAlias">
            <summary>
            ltrTemplateAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pp_stylesheetConflicts">
            <summary>
            pp_stylesheetConflicts control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.ltrStylesheetNames">
            <summary>
            ltrStylesheetNames control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer._progbar1">
            <summary>
            _progbar1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.ButtonInstall">
            <summary>
            ButtonInstall control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pane_installing">
            <summary>
            pane_installing control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.progBar2">
            <summary>
            progBar2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.lit_installStatus">
            <summary>
            lit_installStatus control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pane_optional">
            <summary>
            pane_optional control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.pane_success">
            <summary>
            pane_success control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.bt_viewInstalledPackage">
            <summary>
            bt_viewInstalledPackage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.lit_authorUrl">
            <summary>
            lit_authorUrl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.tempFile">
            <summary>
            tempFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.Installer.processState">
            <summary>
            processState control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.cruds">
            <summary>
            Summary description for cruds.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.cruds.pane_form">
            <summary>
            pane_form control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.cruds.feedback1">
            <summary>
            feedback1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.cruds.PlaceHolder1">
            <summary>
            PlaceHolder1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.cruds.panel_buttons">
            <summary>
            panel_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.cruds.Button1">
            <summary>
            Button1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.loadPackager">
            <summary>
            Handles loading of the packager application into the developer application tree
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.BaseTree">
            <summary>
            All ITree's should inherit from BaseTree.
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.ITreeService">
            <summary>
            All Trees rely on the properties of an ITreeService interface. This has been created to avoid having trees
            dependant on the HttpContext
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.ITreeService.NodeKey">
            <summary>
            The NodeKey is a string representation of the nodeID. Generally this is used for tree's whos node's unique key value is a string in instead 
            of an integer such as folder names.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders out any JavaScript methods that may be required for tree functionality. Generally used to load the editor page when
            a user clicks on a tree node.
            </summary>
            <param name="Javascript"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.Render(System.Xml.XmlDocument@)">
            <summary>
            This will call the new Render method which works using a typed XmlTree object instead of the untyped XmlDocument object.
            This can still be overriden but is only for backwards compatibility.
            </summary>
            <param name="Tree"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            Classes need to override thid method to create the nodes for the XmlTree
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.Initialize">
            <summary>
            Initializes the class if it hasn't been done already
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.CreateRootNode(umbraco.cms.presentation.Trees.XmlTreeNode@)">
            <summary>
            This method creates the Root node definition for the tree.
            Inheritors must override this method to create their own definition.
            </summary>
            <param name="rootNode"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.CreateRootNodeActions(System.Collections.Generic.List{umbraco.interfaces.IAction}@)">
            <summary>
            This method creates the IAction list for the tree's root node.
            Inheritors can override this method to create their own Context menu.
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.CreateAllowedActions(System.Collections.Generic.List{umbraco.interfaces.IAction}@)">
            <summary>
            This method creates the AllowedActions IAction list for the tree's nodes.
            Inheritors can override this method to create their own Context menu.
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GenerateRootNode">
            <summary>		
            A helper method to re-generate the root node for the current tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.SetTreeParameters(umbraco.cms.presentation.Trees.ITreeService)">
            <summary>
            This method can initialize the ITreeService parameters for this class with another ITreeService object.
            This method could be used for Dependency Injection.
            </summary>
            <param name="treeParams"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetTreeInitUrl">
            <summary>
            Returns the tree service url to render the tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetTreeServiceUrl">
            <summary>
            Returns the tree service url to return the tree xml structure from the root node
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetTreeServiceUrl(System.Int32)">
            <summary>
            Returns the tree service url to return the tree xml structure from the node passed in
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetTreeServiceUrl(System.String)">
            <summary>
            Returns the tree service url to return the tree xml structure based on a string node key.
            </summary>
            <param name="nodeKey"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetTreeDialogUrl">
            <summary>
            Returns the tree service url to render the tree in dialog mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetTreeDialogUrl(System.Int32)">
            <summary>
            Returns the tree service url to render tree xml structure from the node passed in, in dialog mode.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetSerializedNodeData(System.String)">
            <summary>
            Returns the serialized data for the nodeId passed in.
            </summary>
            <remarks>
            This may not work with ITrees that don't support the BaseTree structure with TreeService.
            If a tree implements other query string data to make it work, this may not function since
            it only relies on the 3 parameters.
            </remarks>
            <param name="alias"></param>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.IsBaseTree(umbraco.interfaces.ITree)">
            <summary>
            Returns a boolean value indicating if the ITree passed in is an extension of BaseTree.
            This is used to preserve backwards compatibility previous to version 5.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.FromITree(umbraco.interfaces.ITree,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Converts an ITree into a BaseTree. This is used for Legacy trees that don't inherit from BaseTree already.
            </summary>
            <param name="tree"></param>
            <param name="alias"></param>
            <param name="appAlias"></param>
            <param name="iconClosed"></param>
            <param name="iconOpened"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetDefaultRootNodeActions">
            <summary>
            Returns the default actions for a root node
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.GetTreeHeader(System.String)">
            <summary>
            Returns the tree header title. If the alias isn't found in the language files, then it will
            return the title stored in the umbracoAppTree table.
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.OnBeforeNodeRender(umbraco.cms.presentation.Trees.XmlTree@,umbraco.cms.presentation.Trees.XmlTreeNode@,System.EventArgs)">
            <summary>
            Raises the <see cref="E:BeforeNodeRender"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseTree.OnAfterNodeRender(umbraco.cms.presentation.Trees.XmlTree@,umbraco.cms.presentation.Trees.XmlTreeNode@,System.EventArgs)">
            <summary>
            Raises the <see cref="E:AfterNodeRender"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.RootNode">
            <summary>
            Returns the node definition of the root node for this tree
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.RootNodeActions">
            <summary>
            By default the init actions that are allowed for all trees are Create, Reload Nodes.
            These are the menu items that show up in the context menu for the root node of the current tree.
            Should be used in conjunction with the RootNode property
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.AllowedActions">
            <summary>
            The actions that are allowed to be performed on this tree. These are the items that may show up on the
            context menu for a given node.
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.TreeAlias">
            <summary>
            The tree alias name. By default, if a BaseTree is instantiated by it's TreeDefinition, then the TreeAlias will be
            the name defined in the database. Inheritors can override this property to set the TreeAlias to whatever they choose.
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.StartNodeID">
            <summary>
            By default the start node id will be -1 which will return all of the nodes
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.NodeKey">
            <summary>
            The NodeKey is a string representation of the nodeID. Generally this is used for tree's whos node's unique key value is a string in instead 
            of an integer such as folder names.
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.id">
            <summary>
            The ID of the node to render. This is generally set before calling the render method of the tree. If it is not set then the 
            StartNodeID property is used as the node ID to render.
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.Services">
            <summary>
            Provides easy access to the ServiceContext
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseTree.HasEntityBasedEventSubscribers">
            <summary>
            Returns true if there are subscribers to either BeforeTreeRender or AfterTreeRender
            </summary>
        </member>
        <member name="E:umbraco.cms.presentation.Trees.BaseTree.NodeActionsCreated">
            <summary>
            Event that is raised once actions are assigned to nodes
            </summary>
        </member>
        <member name="M:umbraco.loadPackager.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="M:umbraco.loadPackager.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            Renders the specified tree item.
            </summary>
            <param name="tree">The tree.</param>
        </member>
        <member name="P:umbraco.loadPackager.id">
            <summary>
            Sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:umbraco.loadPackager.app">
            <summary>
            Sets the app.
            </summary>
            <value>The app.</value>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.XmlPublishedCache.XmlCacheFilePersister">
            <summary>
            This is the background task runner that persists the xml file to the file system
            </summary>
            <remarks>
            This is used so that all file saving is done on a web aware worker background thread and all logic is performed async so this
            process will not interfere with any web requests threads. This is also done as to not require any global locks and to ensure that
            if multiple threads are performing publishing tasks that the file will be persisted in accordance with the final resulting
            xml structure since the file writes are queued.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.Repository">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.#ctor">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.Categories(System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.CategoriesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.CategoriesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.Modules">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.ModulesAsync">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.ModulesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.ModulesCategorized">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.ModulesCategorizedAsync">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.ModulesCategorizedAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.Nitros">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.NitrosAsync">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.NitrosAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.NitrosCategorized">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.NitrosCategorizedAsync">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.NitrosCategorizedAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.authenticate(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.authenticateAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.authenticateAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchPackage(System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchPackageAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchPackageAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchPackageByVersion(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchPackageByVersionAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchPackageByVersionAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchProtectedPackage(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchProtectedPackageAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.fetchProtectedPackageAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.SubmitPackage(System.String,System.String,System.String,System.Byte[],System.Byte[],System.Byte[],System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.SubmitPackageAsync(System.String,System.String,System.String,System.Byte[],System.Byte[],System.Byte[],System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.SubmitPackageAsync(System.String,System.String,System.String,System.Byte[],System.Byte[],System.Byte[],System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.PackageByGuid(System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.PackageByGuidAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.PackageByGuidAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.our.Repository.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.CategoriesCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.ModulesCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.ModulesCategorizedCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.NitrosCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.NitrosCategorizedCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.authenticateCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.fetchPackageCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.fetchPackageByVersionCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.fetchProtectedPackageCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.SubmitPackageCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.our.Repository.PackageByGuidCompleted">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.Category">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Category.Text">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Category.Description">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Category.Url">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Category.Id">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Category.Packages">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.Package">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.RepoGuid">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Text">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Description">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Icon">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Thumbnail">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Documentation">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Demo">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Accepted">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.IsModule">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.EditorsPick">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Protected">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.HasUpgrade">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.UpgradeVersion">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.UpgradeReadMe">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.Package.Url">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.SubmitStatus">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.our.SubmitStatus.Complete">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.our.SubmitStatus.Exists">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.our.SubmitStatus.NoAccess">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.our.SubmitStatus.Error">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.CategoriesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.CategoriesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.CategoriesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.ModulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.ModulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.ModulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.ModulesCategorizedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.ModulesCategorizedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.ModulesCategorizedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.NitrosCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.NitrosCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.NitrosCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.NitrosCategorizedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.NitrosCategorizedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.NitrosCategorizedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.authenticateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.authenticateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.authenticateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.fetchPackageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.fetchPackageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.fetchPackageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.fetchPackageByVersionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.fetchPackageByVersionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.fetchPackageByVersionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.fetchProtectedPackageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.fetchProtectedPackageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.fetchProtectedPackageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.SubmitPackageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.SubmitPackageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.SubmitPackageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.PackageByGuidCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.our.PackageByGuidCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.our.PackageByGuidCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.WebApi.AngularJsonMediaTypeFormatter">
            <summary>
            This will format the JSON output for use with AngularJs's approach to JSON Vulnerability attacks
            </summary>
            <remarks>
            See: http://docs.angularjs.org/api/ng.$http (Security considerations)
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.AngularJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
            <summary>
            This will prepend the special chars to the stream output that angular will strip
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="writeStream"></param>
            <param name="content"></param>
            <param name="transportContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.AngularJsonOnlyConfigurationAttribute">
            <summary>
            Applying this attribute to any webapi controller will ensure that it only contains one json formatter compatible with the angular json vulnerability prevention.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Binders.ContentItemBaseBinder`2">
            <summary>
            Binds the content model to the controller action for the posted multi-part Post
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.ContentItemBaseBinder`2.#ctor(Umbraco.Core.ApplicationContext)">
            <summary>
            Constructor
            </summary>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.ContentItemBaseBinder`2.GetModelAsync(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Net.Http.MultipartFormDataStreamProvider)">
            <summary>
            Builds the model from the request contents
            </summary>
            <param name="actionContext"></param>
            <param name="bindingContext"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.ContentItemBaseBinder`2.MapPropertyValuesFromSaved(`1,Umbraco.Web.Models.ContentEditing.ContentItemDto{`0})">
            <summary>
            we will now assign all of the values in the 'save' model to the DTO object
            </summary>
            <param name="saveModel"></param>
            <param name="dto"></param>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.MemberBinder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.MemberBinder.GetExisting(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Returns an IMember instance used to bind values to and save (depending on the membership scenario)
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.MemberBinder.CreateNew(Umbraco.Web.Models.ContentEditing.MemberSave)">
            <summary>
            Gets an instance of IMember used when creating a member
            </summary>
            <param name="model"></param>
            <returns></returns>
            <remarks>
            Depending on whether a custom membership provider is configured this will return different results.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.MemberBinder.FilterMembershipProviderProperties(Umbraco.Core.Models.IContentTypeBase)">
            <summary>
            This will remove all of the special membership provider properties which were required to display the property editors
            for editing - but the values have been mapped back ot the MemberSave object directly - we don't want to keep these properties
            on the IMember because they will attempt to be persisted which we don't want since they might not even exist.
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Binders.MemberBinder.MemberValidationHelper">
            <summary>
            Custom validation helper so that we can exclude the Member.StandardPropertyTypeStubs from being validating for existence
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.ContentItemValidationHelper`2">
            <summary>
            A validation helper class used with ContentItemValidationFilterAttribute to be shared between content, media, etc...
            </summary>
            <typeparam name="TPersisted"></typeparam>
            <typeparam name="TModelSave"></typeparam>
            <remarks>
            If any severe errors occur then the response gets set to an error and execution will not continue. Property validation
            errors will just be added to the ModelState.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.ContentItemValidationHelper`2.ValidateExistingContent(Umbraco.Web.Models.ContentEditing.ContentItemBasic{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic,`0},System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Ensure the content exists
            </summary>
            <param name="postedItem"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.ContentItemValidationHelper`2.ValidateProperties(Umbraco.Web.Models.ContentEditing.ContentItemBasic{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic,`0},System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Ensure all of the ids in the post are valid
            </summary>
            <param name="postedItem"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.ContentItemValidationHelper`2.ValidateProperties(Umbraco.Web.Models.ContentEditing.ContentPropertyBasic[],Umbraco.Core.Models.Property[],System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            This validates that all of the posted properties exist on the persisted entity
            </summary>
            <param name="postedProperties"></param>
            <param name="persistedProperties"></param>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.ContentItemValidationHelper`2.ValidatePropertyData(Umbraco.Web.Models.ContentEditing.ContentItemBasic{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic,`0},System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Validates the data for each property
            </summary>
            <param name="postedItem"></param>
            <param name="actionContext"></param>
            <returns></returns>
            <remarks>
            All property data validation goes into the modelstate with a prefix of "Properties"
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.MemberBinder.MemberValidationHelper.ValidatePropertyData(Umbraco.Web.Models.ContentEditing.ContentItemBasic{Umbraco.Web.Models.ContentEditing.ContentPropertyBasic,Umbraco.Core.Models.IMember},System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            We need to manually validate a few things here like email and login to make sure they are valid and aren't duplicates
            </summary>
            <param name="postedItem"></param>
            <param name="actionContext"></param>
            <returns></returns>           
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper">
            <summary>
            A helper class to deal with csrf prevention with angularjs and webapi
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.CsrfValidationCookieName">
            <summary>
            The cookie name that is used to store the validation value
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.AngularCookieName">
            <summary>
            The cookie name that is set for angular to use to pass in to the header value for "X-XSRF-TOKEN"
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.AngularHeadername">
            <summary>
            The header name that angular uses to pass in the token to validate the cookie
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.GetTokens(System.String@,System.String@)">
            <summary>
            Returns 2 tokens - one for the cookie value and one that angular should set as the header value
            </summary>
            <param name="cookieToken"></param>
            <param name="headerToken"></param>
            <remarks>
            .Net provides us a way to validate one token with another for added security. With the way angular works, this 
            means that we need to set 2 cookies since angular uses one cookie value to create the header value, then we want to validate
            this header value against our original cookie value.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.ValidateTokens(System.String,System.String)">
            <summary>
            Validates the header token against the validation cookie value
            </summary>
            <param name="cookieToken"></param>
            <param name="headerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.AngularAntiForgeryHelper.ValidateHeaders(System.Net.Http.Headers.HttpRequestHeaders,System.String@)">
            <summary>
            Validates the headers/cookies passed in for the request
            </summary>
            <param name="requestHeaders"></param>
            <param name="failedReason"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.ClearAngularAntiForgeryTokenAttribute">
            <summary>
            Clears the angular csrf cookie if the request was successful
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.EnableOverrideAuthorizationAttribute">
            <summary>
            This allows for Action based auth attributes to override Class based auth attributes if they are specified
            </summary>
            <remarks>
            This attribute can be applied at the class level and will indicate to any class level auth attribute that inherits from OverridableAuthorizationAttribute
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FilterGrouping">
            <summary>
            Quickly split filters into different types 
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.OverridableAuthorizationAttribute">
            <summary>
            Abstract auth filter class that can be used to enable overriding class auth filters at the action level
            </summary>
            <remarks>
            To enable a class auth filter to be overridden by an action auth filter the EnableOverrideAuthorizationAttribute can be applied 
            to the class.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.OverridableAuthorizationAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            If the controller has an EnabledOverrideAuthorizationAttribute attribute specified and the action has any AuthorizeAttribute
            specified then use the action's auth attribute instead of this one
            </summary>
            <param name="actionContext">The context.</param>
            <exception cref="T:System.ArgumentNullException">The context parameter is null.</exception>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.SetAngularAntiForgeryTokensAttribute">
            <summary>
            A filter to set the csrf cookie token based on angular conventions
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoBackOfficeLogoutAttribute">
            <summary>
            A filter that is used to remove the authorization cookie for the current user when the request is successful
            </summary>
            <remarks>
            This is used so that we can log a user out in conjunction with using other filters that modify the cookies collection.
            SD: I beleive this is a bug with web api since if you modify the cookies collection on the HttpContext.Current and then 
            use a filter to write the cookie headers, the filter seems to have no affect at all.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoTreeAuthorizeAttribute">
            <summary>
            Ensures that the current user has access to the application for which the specified tree(s) belongs
            </summary>
            <remarks>
            This would allow a tree to be moved between sections
            </remarks>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.UmbracoTreeAuthorizeAttribute.Enable">
            <summary>
            Can be used by unit tests to enable/disable this filter
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.UmbracoTreeAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            Constructor to set authorization to be based on a tree alias for which application security will be applied
            </summary>
            <param name="treeAliases">
            If the user has access to the application that the treeAlias is specified in, they will be authorized.
            Multiple trees may be specified.
            </param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoUseHttps">
            <summary>
            If umbracoUseSSL property in web.config is set to true, this filter will redirect any http access to https.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.UmbracoUseHttps.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            If umbracoUseSSL is true and we have a non-HTTPS request, handle redirect.
            </summary>
            <param name="filterContext">Filter context</param>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.UmbracoUseHttps.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Check to see if HTTPS is currently being used if umbracoUseSSL is true.
            </summary>
            <param name="filterContext">Filter context</param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.ValidateAngularAntiForgeryTokenAttribute">
            <summary>
            A filter to check for the csrf token based on Angular's standard approach
            </summary>
            <remarks>
            Code derived from http://ericpanorel.net/2013/07/28/spa-authentication-and-csrf-mvc4-antiforgery-implementation/
            
            TODO: If/when we enable custom authorization (OAuth, or whatever) we'll need to detect that and disable this filter since with custom auth that 
            doesn't come from the same website (cookie), this will always fail.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpControllerContextExtensions.InvokeAuthorizationFiltersForRequest(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>
            This method will go an execute the authorization filters for the controller action, if any fail
            it will return their response, otherwise we'll return null.
            </summary>
            <param name="controllerContext"></param>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpControllerContextExtensions.FilterContinuation(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Collections.Generic.IList{System.Web.Http.Filters.IAuthorizationFilter},System.Int32)">
            <summary>
            This method is how you execute a chain of filters, it needs to recursively call in to itself as the continuation for the next filter in the chain
            </summary>
            <param name="actionContext"></param>
            <param name="token"></param>
            <param name="filters"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.CustomDateTimeConvertor">
            <summary>
            Used to convert the format of a DateTime object when serializing
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentSortOrder">
            <summary>
            A model representing a new sort order for a content/media item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentSortOrder.ParentId">
            <summary>
            The parent Id of the nodes being sorted
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentSortOrder.IdSortOrder">
            <summary>
            An array of integer Ids representing the sort order
            </summary>
            <remarks>
            Of course all of these Ids should be at the same level in the heirarchy!!
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Editors.ContentTypeController">
            <summary>
            An API controller used for dealing with content types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetAllPropertyTypeAliases">
            <summary>
            Gets all user defined properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.ContentTypeController.GetAllowedChildren(System.Int32)">
            <summary>
            Returns the allowed child content type objects for the content item id passed in
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="T:Umbraco.Web.Editors.LegacyController">
            <summary>
            The API controller used for dealing with legacy content
            </summary>    
        </member>
        <member name="M:Umbraco.Web.Editors.LegacyController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.LegacyController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.LegacyController.DeleteLegacyItem(System.String,System.String,System.String)">
            <summary>
            This will perform the delete operation for legacy items which include any item that
            has functionality included in the ui.xml structure.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.ProfileModel">
            <summary>
            A readonly member profile model
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ProfileModel.Name">
            <summary>
            The member's real name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ProfileModel.MemberTypeAlias">
            <summary>
            The member's member type alias
            </summary>        
        </member>
        <member name="P:Umbraco.Web.Models.ProfileModel.MemberProperties">
            <summary>
            The list of member properties
            </summary>
            <remarks>
            Adding items to this list on the front-end will not add properties to the member in the database.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ProfileModel.ProfileModelBinder">
            <summary>
            A custom model binder for MVC because the default ctor performs a lookup!
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.LoginStatusModel">
            <summary>
            The model representing the status of a logged in member 
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.LoginStatusModel.CreateModel">
            <summary>
            Creates a new empty LoginStatusModel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.LoginStatusModel.#ctor">
            <summary>
            This will construct a new LoginStatusModel and perform a lookup for hte curently logged in member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LoginStatusModel.Name">
            <summary>
            The name of the member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LoginStatusModel.Username">
            <summary>
            The username of the member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LoginStatusModel.Email">
            <summary>
            The email of the member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.LoginStatusModel.IsLoggedIn">
            <summary>
            True, if the member is currently logged in
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedPropertyExtension">
            <summary>
            Provides extension methods for <c>IPublishedProperty</c>.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.UmbracoProperty">
            <summary>
            A simple representation of an Umbraco property
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.MergeParentContextViewDataAttribute">
            <summary>
            This attribute can be used for when child actions execute and will automatically merge in the viewdata from the parent context to the 
            child action result.
            </summary>
            <remarks>
            This will retain any custom viewdata put into the child viewdata if the same key persists in the parent context's view data. You can always still
            access the parent's view data normally. 
            This just simplifies working with ChildActions and view data.
            
            NOTE: This does not mean that the parent context's view data will be merged before the action executes, if you need access to the parent context's view
            data during controller execution you can access it normally.
            
            NOTE: This recursively merges in all ParentActionViewContext ancestry in case there's child actions inside of child actions.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.MergeParentContextViewDataAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            Merge in the parent context's view data if this is a child action when the result is being executed
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.MergeParentContextViewDataAttribute.MergeCurrentParent(System.Web.Mvc.ControllerBase,System.Web.Mvc.ViewContext)">
            <summary>
            Recursively merges in each parent view context into the target
            </summary>
            <param name="target"></param>
            <param name="currentParent"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.ViewDataDictionaryExtensions.MergeViewDataFrom(System.Web.Mvc.ViewDataDictionary,System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Merges the source view data into the destination view data
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentLastChanceFinderByNotFoundHandlers">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that runs legacy <c>INotFoundHandler</c> in "last chance" situation.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.IContentFinder">
            <summary>
            Provides a method to try to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.IContentFinder.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="contentRequest">The <c>PublishedContentRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
            <remarks>Optionally, can also assign the template or anything else on the document request, although that is not required.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentLastChanceFinderByNotFoundHandlers.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="docRequest">The <c>PublishedContentRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="M:Umbraco.Web.Models.RegisterModel.CreateModel">
            <summary>
            Creates a new empty RegisterModel
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.MemberProperties">
            <summary>
            Returns the member properties
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.MemberTypeAlias">
            <summary>
            The member type alias to use to register the member
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.Name">
            <summary>
            The members real name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.Password">
            <summary>
            The members password
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.Username">
            <summary>
            The username of the model, if UsernameIsEmail is true then this is ignored.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.UsernameIsEmail">
            <summary>
            Flag to determine if the username should be the email address, if true then the Username property is ignored
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.LoginOnSuccess">
            <summary>
            Specifies if the member should be logged in if they are succesfully created
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.RegisterModel.CreatePersistentLoginCookie">
            <summary>
            Default is true to create a persistent cookie if LoginOnSuccess is true
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.RegisterModel.RegisterModelBinder">
            <summary>
            A custom model binder for MVC because the default ctor performs a lookup!
            </summary>
        </member>
        <member name="T:Umbraco.Web.Editors.MediaTypeController">
            <summary>
            An API controller used for dealing with media types
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaTypeController.GetAllowedChildren(System.Int32)">
            <summary>
            Returns the allowed child content type objects for the content item id passed in
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="T:Umbraco.Web.Security.MembershipHelper">
            <summary>
            A helper class for handling Members
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.IsUmbracoMembershipProviderActive">
            <summary>
            Returns true if the current membership provider is the Umbraco built-in one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.UpdateMemberProfile(Umbraco.Web.Models.ProfileModel)">
            <summary>
            Updates the currently logged in members profile
            </summary>
            <param name="model"></param>
            <returns>
            The updated MembershipUser object
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.RegisterMember(Umbraco.Web.Models.RegisterModel,System.Web.Security.MembershipCreateStatus@,System.Boolean)">
            <summary>
            Registers a new member
            </summary>
            <param name="model"></param>
            <param name="status"></param>
            <param name="logMemberIn">
            true to log the member in upon successful registration
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.Login(System.String,System.String)">
            <summary>
            A helper method to perform the validation and logging in of a member - this is simply wrapping standard membership provider and asp.net forms auth logic.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.Logout">
            <summary>
            Logs out the current member
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentMember">
            <summary>
            Returns the currently logged in member as IPublishedContent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentMemberId">
            <summary>
            Returns the currently logged in member id, -1 if they are not logged in
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentMemberProfileModel">
            <summary>
            Creates a new profile model filled in with the current members details if they are logged in which allows for editing
            profile properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.CreateRegistrationModel(System.String)">
            <summary>
            Creates a model to use for registering new members with custom member properties
            </summary>
            <param name="memberTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentLoginStatus">
            <summary>
            Returns the login status model of the currently logged in member, if no member is logged in it returns null;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.IsLoggedIn">
            <summary>
            Check if a member is logged in
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.IsMemberAuthorized(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns true or false if the currently logged in member is authorized based on the parameters provided
            </summary>
            <param name="allowAll"></param>
            <param name="allowTypes"></param>
            <param name="allowGroups"></param>
            <param name="allowMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.ChangePassword(System.String,Umbraco.Web.Models.ChangingPasswordModel,System.String)">
            <summary>
            Changes password for a member/user given the membership provider name and the password change model
            </summary>
            <param name="username"></param>
            <param name="passwordModel"></param>
            <param name="membershipProviderName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.ChangePassword(System.String,Umbraco.Web.Models.ChangingPasswordModel,System.Web.Security.MembershipProvider)">
            <summary>
            Changes password for a member/user given the membership provider and the password change model
            </summary>
            <param name="username"></param>
            <param name="passwordModel"></param>
            <param name="membershipProvider"></param>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.UpdateMember(System.Web.Security.MembershipUser,System.Web.Security.MembershipProvider,System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Updates a membership user with all of it's writable properties
            </summary>
            <param name="member"></param>
            <param name="provider"></param>
            <param name="email"></param>
            <param name="isApproved"></param>
            <param name="lastLoginDate"></param>
            <param name="lastActivityDate"></param>
            <param name="comment"></param>
            <returns>
            Returns successful if the membershipuser required updating, otherwise returns failed if it didn't require updating.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.MembershipHelper.GetCurrentPersistedMember">
            <summary>
            Returns the currently logged in IMember object - this should never be exposed to the front-end since it's returning a business logic entity!
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.SectionController">
            <summary>
            The API controller used for using the list of sections
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.ValidationHelper.ModelHasRequiredForPersistenceErrors(System.Object)">
            <summary>
            This will check if any properties of the model are attributed with the RequiredForPersistenceAttribute attribute and if they are it will 
            check if that property validates, if it doesn't it means that the current model cannot be persisted because it doesn't have the necessary information
            to be saved.
            </summary>
            <param name="model"></param>
            <returns></returns>
            <remarks>
            This is normally used for things like content creating when the name is empty since we cannot actually create a content item when the name is empty.
            This is similar but different from the standard Required validator since we still allow content to be saved when validation fails but there are some 
            content fields that are absolutely mandatory for creating/saving.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.HttpCookieExtensions">
            <summary>
            Extension methods used to check/set cookie values
            </summary>
            <remarks>
            This should 100% supercede the StateManager.Cookies
            </remarks> 
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.ExpireCookie(System.Web.HttpContextBase,System.String)">
            <summary>
            Removes the cookie from the request and the response if it exists
            </summary>
            <param name="http"></param>
            <param name="cookieName"></param>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasPreviewCookie(System.Web.HttpRequestBase)">
            <summary>
            Does a preview cookie exist ?
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasCookie(System.Web.HttpRequestBase,System.String)">
            <summary>
            Does a cookie exist with the specified key ?
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpCookieExtensions.HasCookieValue(System.Web.HttpRequestBase,System.String)">
            <summary>
            Is there a cookie with the key supplied and does it have a value that is not empty
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentSaveAction">
            <summary>
            The action associated with saving a content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.Save">
            <summary>
            Saves the content item, no publish
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.SaveNew">
            <summary>
            Creates a new content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.Publish">
            <summary>
            Saves and publishes the content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.PublishNew">
            <summary>
            Creates and publishes a new content item
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.SendPublish">
            <summary>
            Saves and sends publish notification
            </summary>
        </member>
        <member name="F:Umbraco.Web.Models.ContentEditing.ContentSaveAction.SendPublishNew">
            <summary>
            Creates and sends publish notification
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentTypeBasic">
            <summary>
            A basic version of a content type
            </summary>
            <remarks>
            Generally used to return the minimal amount of data about a content type
            </remarks> 
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.IconIsClass">
            <summary>
            Returns true if the icon represents a CSS class instead of a file path
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.IconFilePath">
            <summary>
            Returns the icon file path if the icon is not a class, otherwise returns an empty string
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.ThumbnailIsClass">
            <summary>
            Returns true if the icon represents a CSS class instead of a file path
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentTypeBasic.ThumbnailFilePath">
            <summary>
            Returns the icon file path if the icon is not a class, otherwise returns an empty string
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.MediaItemDisplay">
            <summary>
            A model representing a content item to be displayed in the back office
            </summary>    
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.Section">
            <summary>
            Represents a section (application) in the back office
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.Tab`1">
            <summary>
            Represents a tab in the UI
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.UserBasic">
            <summary>
            A basic structure the represents a user
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.EmailHash">
            <summary>
            The MD5 lowercase hash of the email which can be used by gravatar
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.SecondsUntilTimeout">
            <summary>
            Gets/sets the number of seconds for the user's auth ticket to expire
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.UserDetail.AllowedSections">
            <summary>
            A list of sections the user is allowed to view.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Web.FormDataCollectionExtensions.ToQueryString(System.Net.Http.Formatting.FormDataCollection,System.String[])" -->
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.ToDictionary(System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Converts the FormCollection to a dictionary
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.GetRequiredString(System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Returns the value of a mandatory item in the FormCollection
            </summary>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.HasKey(System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Checks if the collection contains the key
            </summary>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.FormDataCollectionExtensions.GetValue``1(System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Returns the object based in the collection based on it's key. This does this with a conversion so if it doesn't convert a null object is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentPropertyBasicConverter`1">
            <summary>
            Creates a base generic ContentPropertyBasic from a Property
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.ContentPropertyBasicConverter`1.ConvertCore(Umbraco.Core.Models.Property)">
            <summary>
            Assigns the PropertyEditor, Id, Alias and Value to the property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentPropertyDisplayConverter">
            <summary>
            Creates a ContentPropertyDisplay from a Property
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentPropertyDtoConverter">
            <summary>
            Creates a ContentPropertyDto from a Property
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentPropertyModelMapper">
            <summary>
            A mapper which declares how to map content properties. These mappings are shared among media (and probably members) which is 
            why they are in their own mapper
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.CreatorResolver">
            <summary>
            Maps the Creator for content
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.MediaModelMapper">
            <summary>
            Declares model mappings for media.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentTypeModelMapper">
            <summary>
            Defines mappings for content/media/members type mappings
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentModelMapper">
            <summary>
            Declares how model mappings for content
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.ContentModelMapper.AfterMap(Umbraco.Core.Models.IContent,Umbraco.Web.Models.ContentEditing.ContentItemDisplay,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Maps the generic tab with custom properties for content
            </summary>
            <param name="content"></param>
            <param name="display"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Mapping.ContentModelMapper.GetPublishedDate(Umbraco.Core.Models.IContent,Umbraco.Core.ApplicationContext)">
            <summary>
            Gets the published date value for the IContent object
            </summary>
            <param name="content"></param>
            <param name="applicationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.ContentModelMapper.ActionButtonsResolver">
            <summary>
            Creates the list of action buttons allowed for this user - Publish, Send to publish, save, unpublish returned as the button's 'letter'
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Mapping.OwnerResolver`1">
            <summary>
            Maps the Owner for IContentBase
            </summary>
            <typeparam name="TPersisted"></typeparam>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.#cctor">
            <summary>
            We're going to bind to the MediaService Saving event so that we can populate the umbracoFile size, type, etc... label fields
            if we find any attached to the current media item.
            </summary>
            <remarks>
            I think this kind of logic belongs on this property editor, I guess it could exist elsewhere but it all has to do with the upload field.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.CreateValueEditor">
            <summary>
            Creates our custom value editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.ServiceEmptiedRecycleBin(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property}})">
            <summary>
            Ensures any files associated are removed
            </summary>
            <param name="allPropertyData"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.ServiceDeleted(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ContentBase})">
            <summary>
            Ensures any files associated are removed
            </summary>
            <param name="deletedEntities"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.ContentServiceCopied(Umbraco.Core.Services.IContentService,Umbraco.Core.Events.CopyEventArgs{Umbraco.Core.Models.IContent})">
            <summary>
            After the content is copied we need to check if there are files that also need to be copied
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.FileUploadPreValueEditor">
            <summary>
            A custom pre-val editor to ensure that the data is stored how the legacy data was stored in 
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.FileUploadPreValueEditor.ConvertDbToEditor(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            Format the persisted value to work with our multi-val editor.
            </summary>
            <param name="defaultPreVals"></param>
            <param name="persistedPreVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyEditor.FileUploadPreValueEditor.ConvertEditorToDb(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.PreValueCollection)">
            <summary>
            Take the posted values and convert them to a semi-colon separated list so that its backwards compatible
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.FileUploadPropertyValueEditor">
            <summary>
            The editor for the file upload property editor
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.FileUploadPropertyValueEditor.ConvertEditorToDb(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Overrides the deserialize value so that we can save the file accordingly
            </summary>
            <param name="editorValue">
            This is value passed in from the editor. We normally don't care what the editorValue.Value is set to because
            we are more interested in the files collection associated with it, however we do care about the value if we 
            are clearing files. By default the editorValue.Value will just be set to the name of the file (but again, we
            just ignore this and deal with the file collection in editorValue.AdditionalData.ContainsKey("files") )
            </param>
            <param name="currentValue">
            The current value persisted for this property. This will allow us to determine if we want to create a new
            file path or use the existing file path.
            </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.CreateValueEditor">
            <summary>
            Create a custom value editor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor">
            <summary>
            A custom value editor to ensure that macro syntax is parsed when being persisted and formatted correctly for display in the editor
            </summary>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.ConfigureForDisplay(Umbraco.Core.Models.PreValueCollection)">
            <summary>
            override so that we can hide the label based on the pre-value
            </summary>
            <param name="preValues"></param>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.ConvertDbToEditor(Umbraco.Core.Models.Property,Umbraco.Core.Models.PropertyType,Umbraco.Core.Services.IDataTypeService)">
            <summary>
            Format the data for the editor
            </summary>
            <param name="property"></param>
            <param name="propertyType"></param>
            <param name="dataTypeService"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PropertyEditors.RichTextPropertyEditor.RichTextPropertyValueEditor.ConvertEditorToDb(Umbraco.Core.Models.Editors.ContentPropertyData,System.Object)">
            <summary>
            Format the data for persistence
            </summary>
            <param name="editorValue"></param>
            <param name="currentValue"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetTreeNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Gets an individual tree node
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.PerformGetTreeNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Gets the tree nodes for the given id
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.HasPathAccess(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns true or false if the current user has access to the node based on the user's allowed start node (path) access
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetTreeNodes(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Ensures the recycle bin is appended when required (i.e. user has access to the root and it's not in dialog mode)
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
            <remarks>
            This method is overwritten strictly to render the recycle bin, it should serve no other purpose
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetTreeNodesInternal(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Before we make a call to get the tree nodes we have to check if they can actually be rendered
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
            <remarks>
            Currently this just checks if it is a container type, if it is we cannot render children. In the future this might check for other things.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.GetMenuForNode(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Checks if the menu requested is for the recycle bin and renders that, otherwise renders the result of PerformGetMenuForNode
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.FilterUserAllowedMenuItems(Umbraco.Web.Models.Trees.MenuItemCollection,System.Collections.Generic.IEnumerable{Umbraco.Web.Models.Trees.MenuItem})">
            <summary>
            Based on the allowed actions, this will filter the ones that the current user is allowed
            </summary>
            <param name="menuWithAllItems"></param>
            <param name="userAllowedMenuItems"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeControllerBase.CanUserAccessNode(Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.Collections.Generic.IEnumerable{Umbraco.Web.Models.Trees.MenuItem})">
            <summary>
            Determins if the user has access to view the node/document
            </summary>
            <param name="doc">The Document to check permissions against</param>
            <param name="allowedUserOptions">A list of MenuItems that the user has permissions to execute on the current document</param>
            <remarks>By default the user must have Browse permissions to see the node in the Content tree</remarks>
            <returns></returns>        
        </member>
        <member name="P:Umbraco.Web.Trees.ContentTreeControllerBase.RecycleBinId">
            <summary>
            Returns the 
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ContentTreeControllerBase.RecycleBinSmells">
            <summary>
            Returns true if the recycle bin has items in it
            </summary>
        </member>
        <member name="P:Umbraco.Web.Trees.ContentTreeControllerBase.UserStartNode">
            <summary>
            Returns the user's start node for this tree
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.MediaTreeController.GetSingleTreeNode(Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Creates a tree node for a content item based on an UmbracoEntity
            </summary>
            <param name="e"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.MediaTreeController.HasPathAccess(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns true or false if the current user has access to the node based on the user's allowed start node (path) access
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.ActionMenuItemAttribute">
            <summary>
            The attribute to assign to any ActionMenuItem objects.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.ActionMenuItemAttribute.#ctor(System.String,System.String)">
            <summary>
            This constructor defines both the angular service and method name to use
            </summary>
            <param name="serviceName"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.ActionMenuItemAttribute.#ctor(System.String)">
            <summary>
            This constructor will assume that the method name equals the type name of the action menu class
            </summary>
            <param name="serviceName"></param>
        </member>
        <member name="T:Umbraco.Web.Trees.ActionUrlMethod">
            <summary>
            Specifies the action to take for a menu item when a URL is specified
            </summary>
        </member>
        <member name="T:Umbraco.Web.Trees.ApplicationTreeRegistrar">
            <summary>
            A startup handler for putting the tree config in the config file based on attributes found
            </summary>
            <remarks>
            TODO: This is really not a very ideal process but the code is found here because tree plugins are in the Web project or the legacy business logic project.
            Moving forward we can put the base tree plugin classes in the core and then this can all just be taken care of normally within the service.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Trees.ApplicationTreeRegistrar.LazyEnumerableTrees">
            <summary>
            This class is here so that we can provide lazy access to tree scanning for when it is needed
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeRegistrar.LazyEnumerableTrees.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeRegistrar.LazyEnumerableTrees.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Umbraco.Web.Trees.LegacyTreeController">
            <summary>
            This is used to output JSON from legacy trees
            </summary>
        </member>
        <member name="T:Umbraco.Web.Trees.LegacyTreeDataConverter">
            <summary>
            Converts the legacy tree data to the new format
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.LegacyTreeDataConverter.GetLegacyTreeForLegacyServices(Umbraco.Core.Services.IApplicationTreeService,System.String)">
            <summary>
            This is used by any legacy services that require rendering a BaseTree, if a new controller tree is detected it will try to invoke it's legacy predecessor.
            </summary>
            <param name="appTreeService"></param>
            <param name="treeType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.LegacyTreeDataConverter.ConvertFromLegacyMenu(System.String,umbraco.cms.presentation.Trees.XmlTree,System.String)">
            <summary>
            Gets the menu item collection from a legacy tree node based on it's parent node's child collection
            </summary>
            <param name="nodeId">The node id</param>
            <param name="xmlTree">The node collection that contains the node id</param>
            <param name="currentSection"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.LegacyTreeDataConverter.ConvertFromLegacyMenu(umbraco.cms.presentation.Trees.XmlTreeNode,System.String)">
            <summary>
            Gets the menu item collection from a legacy tree node
            </summary>
            <param name="xmlTreeNode"></param>
            <param name="currentSection"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.LegacyTreeDataConverter.GetLegacyConfirmView(umbraco.interfaces.IAction,System.String)">
            <summary>
            This will look at the legacy IAction's JsFunctionName and convert it to a confirmation dialog view if possible
            </summary>
            <param name="action"></param>
            <param name="currentSection"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.LegacyTreeDataConverter.GetUrlAndTitleFromLegacyAction(umbraco.interfaces.IAction,System.String,System.String,System.String,System.String)">
            <summary>
            This will look at a legacy IAction's JsFunctionName and convert it to a URL if possible.
            </summary>
            <param name="action"></param>
            <param name="nodeName"></param>
            <param name="currentSection"></param>
            <param name="nodeId"></param>
            <param name="nodeType"></param>
        </member>
        <member name="M:Umbraco.Web.Trees.LegacyTreeDataConverter.ConvertFromLegacy(System.String,umbraco.cms.presentation.Trees.XmlTreeNode,System.Web.Http.Routing.UrlHelper,System.String,System.Net.Http.Formatting.FormDataCollection,System.Boolean)">
            <summary>
            Converts a legacy XmlTreeNode to a new TreeNode
            </summary>
            <param name="parentId"></param>
            <param name="xmlTreeNode"></param>
            <param name="urlHelper"></param>
            <param name="currentSection"></param>
            <param name="currentQueryStrings">
            The current query strings for the request - this is used to append the query strings to the menu URL of the item being rendered since the menu
            actually belongs to this same node (request) the query strings need to exist so the menu can be rendered in some cases.
            </param>
            <param name="isRoot"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Trees.LegacyTreeJavascript">
            <summary>
            A class used to render the legacy JS requirements for trees and IActions.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.LegacyTreeJavascript.GetLegacyTreeJavascript">
            <summary>
            If any legacy tree requires any JS rendering then we will compile a JS output of the combination.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.LegacyTreeJavascript.GetLegacyIActionJavascript">
            <summary>
            Returns a string with javascript proxy methods for IActions that are using old javascript
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.MenuItemCollection">
            <summary>
            A menu item collection for a given tree node
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItemCollection.DefaultMenuAlias">
            <summary>
            Sets the default menu item alias to be shown when the menu is launched - this is optional and if not set then the menu will just be shown normally.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.MenuItemCollection.Items">
            <summary>
            The list of menu items
            </summary>
            <remarks>
            We require this so the json serialization works correctly
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.RefreshNode">
            <summary>
            Represents the refresh node menu item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.SearchResultItem.Id">
            <summary>
            The string representation of the ID, used for Web responses
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.SearchResultItem.Title">
            <summary>
            The name/title of the search result item
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.SearchResultItem.Rank">
            <summary>
            The rank of the search result
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.SearchResultItem.Description">
            <summary>
            Description/Synopsis of the item
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.SectionRootNode">
            <summary>
            A special tree node that represents the section root node for any section.
            </summary>
            <remarks>
            This is required to return the tree data for a given section. Some sections may only contain one tree which means it's section
            root should also display a menu, whereas other sections have multiple trees and the section root shouldn't display a menu.
            
            The section root also contains an explicit collection of children.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.Trees.TreeNode">
            <summary>
            Represents a model in the tree
            </summary>
            <remarks>
            TreeNode is sealed to prevent developers from adding additional json data to the response
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNode.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Internal constructor, to create a tree node use the CreateTreeNode methods of the TreeApiController.
            </summary>
            <param name="nodeId"></param>
            <param name="parentId">The parent id for the current node</param>
            <param name="getChildNodesUrl"></param>
            <param name="menuUrl"></param>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.HasChildren">
            <summary>
            A flag to set whether or not this node has children
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.NodeType">
            <summary>
            The tree nodetype which refers to the type of node rendered in the tree
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.RoutePath">
            <summary>
            Optional: The Route path for the editor for this node
            </summary>
            <remarks>
            If this is not set, then the route path will be automatically determined by: {section}/edit/{id}
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.ChildNodesUrl">
            <summary>
            The JSON url to load the nodes children
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.MenuUrl">
            <summary>
            The JSON url to load the menu from
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.IconIsClass">
            <summary>
            Returns true if the icon represents a CSS class instead of a file path
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.IconFilePath">
            <summary>
            Returns the icon file path if the icon is not a class, otherwise returns an empty string
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.Trees.TreeNode.CssClasses">
            <summary>
            A list of additional/custom css classes to assign to the node
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeExtensions.TryGetRootNodeFromControllerTree(Umbraco.Core.Models.ApplicationTree,System.Net.Http.Formatting.FormDataCollection,System.Web.Http.Controllers.HttpControllerContext)">
            <summary>
            This will go and get the root node from a controller tree by executing the tree's GetRootNode method
            </summary>
            <param name="appTree"></param>
            <param name="formCollection"></param>
            <param name="controllerContext"></param>
            <returns></returns>
            <remarks>
            This ensures that authorization filters are applied to the sub request 
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeAttribute">
            <summary>
            Identifies an application tree
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.TreeAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Trees.TreeAttribute"/> class.
            </summary>
            <param name="appAlias">The app alias.</param>
            <param name="alias">The alias.</param>
            <param name="title">The title.</param>
            <param name="iconClosed">The icon closed.</param>
            <param name="iconOpen">The icon open.</param>
            <param name="initialize">if set to <c>true</c> [initialize].</param>
            <param name="sortOrder">The sort order.</param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.AssignLegacyJsCallback(Umbraco.Web.Models.Trees.TreeNode,System.String)">
            <summary>
            Legacy tree node's assign a JS method callback for when an item is clicked, this method facilitates that.
            </summary>
            <param name="treeNode"></param>
            <param name="jsCallback"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetContainerStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is currently protected publicly
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetProtectedStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is currently protected publicly
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetLockedStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is currently locked / non-deletable
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetHasUnpublishedVersionStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is has unpublished versions (but is currently published)
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:Umbraco.Web.Models.Trees.TreeNodeExtensions.SetNotPublishedStyle(Umbraco.Web.Models.Trees.TreeNode)">
            <summary>
            Sets the node style to show that it is is not published
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="T:Umbraco.Web.Trees.TreeQueryStringParameters">
            <summary>
            Common query string parameters used for tree query strings
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.GetApplicationTrees(System.String,System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns the tree nodes for an application
            </summary>
            <param name="application">The application to load tree for</param>
            <param name="tree">An optional single tree alias, if specified will only load the single tree for the request app</param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.GetRootForMultipleAppTree(Umbraco.Core.Models.ApplicationTree,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Get the root node for an application with multiple trees
            </summary>
            <param name="configTree"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ApplicationTreeController.GetRootForSingleAppTree(Umbraco.Core.Models.ApplicationTree,System.String,System.Net.Http.Formatting.FormDataCollection,System.String)">
            <summary>
            Get the root node for an application with one tree
            </summary>
            <param name="configTree"></param>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.BackOfficeController">
            <summary>
            A controller to render out the default back office view and JS results
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoController">
            <summary>
            A base controller class containing all of the Umbraco objects as properties that a developer requires
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.Umbraco">
            <summary>
            Returns an UmbracoHelper object
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.ApplicationContext">
            <summary>
            Returns the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.Services">
            <summary>
            Returns a ServiceContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.DatabaseContext">
            <summary>
            Returns a DatabaseContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoController.Security">
            <summary>
            Returns the WebSecurity instance
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.Default">
            <summary>
            Render the default view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.AuthorizeUpgrade">
            <summary>
            This Action is used by the installer when an upgrade is detected but the admin user is not logged in. We need to 
            ensure the user is authenticated before the install takes place so we redirect here to show the standard login screen.
            </summary>
            <returns></returns>      
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.LocalizedText(System.String)">
            <summary>
            Get the json localized text for a given culture or the culture for the current user
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.Application">
            <summary>
            Returns the JavaScript main file including all references found in manifests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.GetManifestAssetList">
            <summary>
            Returns a js array of all of the manifest assets
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.ServerVariables">
            <summary>
            Returns the JavaScript object representing the static server variables javascript object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.GetApplicationState">
            <summary>
            Returns the server variables regarding the application state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.LegacyTreeJs">
            <summary>
            Returns the JavaScript blocks for any legacy trees declared
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.BackOfficeController.GetLegacyActionJs(Umbraco.Web.Editors.BackOfficeController.LegacyJsActionType)">
            <summary>
            Renders out all JavaScript references that have bee declared in IActions
            </summary>
        </member>
        <member name="T:Umbraco.Web.Security.Providers.MembersMembershipProvider">
            <summary>
            Custom Membership Provider for Umbraco Members (User authentication for Frontend applications NOT umbraco CMS)  
            </summary>
        </member>
        <member name="T:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2">
            <summary>
            Abstract Membership Provider that users any implementation of IMembershipMemberService{TEntity} service
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call 
            <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider 
            has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>       
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">This property is ignore for this provider</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformCreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source with the specified member type
            </summary>
            <param name="memberTypeAlias">A specific member type to create the member for</param>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="isApproved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"></see> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">
            TODO: This setting currently has no effect
            </param>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"></see> collection that contains a page of pageSize<see cref="T:System.Web.Security.MembershipUser"></see> objects beginning at the page specified by pageIndex.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetNumberOfUsersOnline">
            <summary>
            Gets the number of users currently accessing the application.
            </summary>
            <returns>
            The number of users currently accessing the application.       
            </returns>
            <remarks>
            The way this is done is the same way that it is done in the MS SqlMembershipProvider - We query for any members
            that have their last active date within the Membership.UserIsOnlineTimeWindow (which is in minutes). It isn't exact science
            but that is how MS have made theirs so we'll follow that principal.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformGetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source.
            </summary>
            <param name="username">The user to retrieve the password for.</param>
            <param name="answer">The password answer for the user.</param>
            <returns>
            The password for the specified user name.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="username">The name of the user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets information from the data source for a user based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"></see> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.GetUserNameByEmail(System.String)">
            <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.PerformResetPassword(System.String,System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user (not used with Umbraco).</param>
            <param name="generatedPassword"></param>
            <returns>The new password for the specified user.</returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.UnlockUser(System.String)">
            <summary>
            Clears a lock so that the membership user can be validated.
            </summary>
            <param name="username">The membership user to clear the lock status for.</param>
            <returns>
            true if the membership user was successfully unlocked; otherwise, false.
            </returns>
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates e-mail  approved status, lock status and comment on a user.
            </summary>
            <param name="user">A <see cref="T:System.Web.Security.MembershipUser"></see> object that represents the user to update and the updated information for the user.</param>      
        </member>
        <member name="M:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
        </member>
        <member name="P:Umbraco.Web.Security.Providers.UmbracoMembershipProvider`2.AllowManuallyChangingPassword">
            <summary>
            For backwards compatibility, this provider supports this option by default it is true
            </summary>
        </member>
        <member name="P:Umbraco.Web.Security.Providers.MembersRoleProvider.ApplicationName">
            <summary>
            The name of the application using the custom role provider.
            </summary>
            <value></value>
            <returns>The name of the application using the custom membership provider.</returns>
        </member>
        <member name="T:Umbraco.Web.Security.Providers.UsersMembershipProvider">
            <summary>
            Custom Membership Provider for Umbraco Users (User authentication for Umbraco Backend CMS)  
            </summary>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeController.GetSingleTreeNode(Umbraco.Core.Models.EntityBase.IUmbracoEntity,System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Creates a tree node for a content item based on an UmbracoEntity
            </summary>
            <param name="e"></param>
            <param name="parentId"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeController.HasPathAccess(System.String,System.Net.Http.Formatting.FormDataCollection)">
            <summary>
            Returns true or false if the current user has access to the node based on the user's allowed start node (path) access
            </summary>
            <param name="id"></param>
            <param name="queryStrings"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Trees.ContentTreeController.GetAllNodeMenuItems(Umbraco.Core.Models.EntityBase.IUmbracoEntity)">
            <summary>
            Returns a collection of all menu items that can be on a content node
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.UI.JavaScript.JsInitialization">
            <summary>
            Reads from all defined manifests and ensures that any of their initialization is output with the
            main Umbraco initialization output.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.JavaScript.JsInitialization.GetJavascriptInitialization(System.Web.HttpContextBase,Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Processes all found manifest files and outputs the main.js file containing all plugin manifests
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.JavaScript.JsInitialization.GetDefaultInitialization">
            <summary>
            Returns the default config as a JArray
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.JavaScript.JsInitialization.ParseMain(System.String[])">
            <summary>
            Parses the JsResources.Main and replaces the replacement tokens accordingly.
            </summary>
            <param name="replacements"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemDisplay">
            <summary>
            A model representing a content item to be displayed in the back office
            </summary>    
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemDisplay.AllowedActions">
            <summary>
            The allowed 'actions' based on the user's permissions - Create, Update, Publish, Send to publish
            </summary>
            <remarks>
            Each char represents a button which we can then map on the front-end to the correct actions
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemDto`1">
            <summary>
            Represents a content item from the database including all of the required data that we need to work with such as data type data
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemFile">
            <summary>
            Represents an uploaded file for a particular property
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemFile.PropertyAlias">
            <summary>
            The property alias associated with the file
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemFile.FileName">
            <summary>
            The original file name
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemFile.TempFilePath">
            <summary>
            The file path for the uploaded file for where the MultipartFormDataStreamProvider has saved the temp file
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentItemSave">
            <summary>
            A model representing a content item to be saved
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentItemSave.TemplateAlias">
            <summary>
            The template alias to save
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentPropertyBasic">
            <summary>
            Represents a content property to be saved
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentPropertyBasic.PropertyEditor">
            <summary>
            Used internally during model mapping
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentPropertyDisplay">
            <summary>
            Represents a content property that is displayed in the UI
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.ContentEditing.ContentPropertyDto">
            <summary>
            Represents a content property from the database
            </summary>
        </member>
        <member name="P:Umbraco.Web.Models.ContentEditing.ContentPropertyDto.PreValues">
            <summary>
            The current pre-values for this property
            </summary>
        </member>
        <member name="T:Umbraco.Web.Standalone.StandaloneApplication">
            <summary>
            An application standalone applications.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Standalone.StandaloneApplication.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Standalone.StandaloneApplication"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Standalone.StandaloneApplication.GetBootManager">
            <summary>
            Provides the application boot manager.
            </summary>
            <returns>An application boot manager.</returns>
        </member>
        <member name="M:Umbraco.Web.Standalone.StandaloneApplication.GetApplication(System.String)">
            <summary>
            Gets the instance of the standalone Umbraco application.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Standalone.StandaloneApplication.Start(System.Boolean)">
            <summary>
            Starts the application.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Standalone.StandaloneApplication.WithApplicationEventHandler``1">
            <summary>
            Associates an <see cref="T:Umbraco.Core.IApplicationEventHandler"/> type with the application.
            </summary>
            <typeparam name="T">The type to associate.</typeparam>
            <returns>The application.</returns>
            <remarks>Types implementing <see cref="T:Umbraco.Core.IApplicationEventHandler"/> from within
            an executable are not automatically discovered by Umbraco and have to be
            explicitely associated with the application using this method.</remarks>
        </member>
        <member name="M:Umbraco.Web.Standalone.StandaloneApplication.WithoutApplicationEventHandler``1">
            <summary>
            Dissociates an <see cref="T:Umbraco.Core.IApplicationEventHandler"/> type from the application.
            </summary>
            <typeparam name="T">The type to dissociate.</typeparam>
            <returns>The application.</returns>
        </member>
        <member name="M:Umbraco.Web.Standalone.StandaloneApplication.WithApplicationEventHandler(System.Type)">
            <summary>
            Associates an <see cref="T:Umbraco.Core.IApplicationEventHandler"/> type with the application.
            </summary>
            <param name="type">The type to associate.</param>
            <returns>The application.</returns>
            <remarks>Types implementing <see cref="T:Umbraco.Core.IApplicationEventHandler"/> from within
            an executable are not automatically discovered by Umbraco and have to be
            explicitely associated with the application using this method.</remarks>
        </member>
        <member name="M:Umbraco.Web.Standalone.StandaloneApplication.WithoutApplicationEventHandler(System.Type)">
            <summary>
            Dissociates an <see cref="T:Umbraco.Core.IApplicationEventHandler"/> type from the application.
            </summary>
            <param name="type">The type to dissociate.</param>
            <returns>The application.</returns>
        </member>
        <member name="P:Umbraco.Web.Standalone.StandaloneApplication.ApplicationContext">
            <summary>
            Gets the current <see cref="P:Umbraco.Web.Standalone.StandaloneApplication.ApplicationContext"/>.
            </summary>
            <remarks>This is a shortcut for scripts to be able to do <c>$app.ApplicationContext</c>.</remarks>
        </member>
        <member name="P:Umbraco.Web.Standalone.StandaloneApplication.UmbracoContext">
            <summary>
            Gets the current <see cref="P:Umbraco.Web.Standalone.StandaloneApplication.UmbracoContext"/>.
            </summary>
            <remarks>This is a shortcut for scripts to be able to do <c>$app.UmbracoContext</c>.</remarks>
        </member>
        <member name="T:Umbraco.Web.Standalone.StandaloneBootManager">
            <summary>
            A boot manager for use in standalone applications.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Standalone.StandaloneHttpContext">
            <summary>
            An Http context for use in standalone applications.
            </summary>
        </member>
        <member name="T:Umbraco.Web.HttpRequestExtensions">
            <summary>
            Extension methods for the HttpRequest and HttpRequestBase objects
            </summary>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.CleanForXss(System.Web.HttpRequest,System.String)">
            <summary>
            Extracts the value from the query string and cleans it to prevent xss attacks.
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.GetItemAsString(System.Web.HttpRequest,System.String,System.String)">
            <summary>
            Safely get a request item as string, if the item does not exist, an empty string is returned.
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <param name="valueIfNotFound">The value to return if the key is not found in the collection</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.GetItemAsString(System.Web.HttpRequestBase,System.String,System.String)">
            <summary>
            Safely get a request item as string, if the item does not exist, an empty string is returned.
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <param name="valueIfNotFound">The value to return if the key is not found in the collection</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.GetItemAs``1(System.Web.HttpRequestBase,System.String)">
            <summary>
            Safely get the item from the query string and convert it to type 'T', otherwise will return default(T).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpRequestExtensions.GetItemAs``1(System.Web.HttpRequest,System.String)">
            <summary>
            Safely get the item from the query string and convert it to type 'T', otherwise will return default(T).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiService``1(System.Web.Http.Routing.UrlHelper,System.String,System.Object)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiService(System.Web.Http.Routing.UrlHelper,System.String,System.Type,System.Object)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="apiControllerType"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiService(System.Web.Http.Routing.UrlHelper,System.String,System.String,System.Object)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HttpUrlHelperExtensions.GetUmbracoApiService(System.Web.Http.Routing.UrlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Install.InstallHelper.GetAllSteps">
            <summary>
            Get the installer steps
            </summary>
            <returns></returns>
            <remarks>
            The step order returned here is how they will appear on the front-end if they have views assigned
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Install.InstallHelper.GetStepsForCurrentInstallType">
            <summary>
            Returns the steps that are used only for the current installation type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Install.InstallHelper.IsBrandNewInstall">
            <summary>
            Checks if this is a brand new install meaning that there is no configured version and there is no configured database connection
            </summary>
        </member>
        <member name="T:Umbraco.Web.Install.HttpInstallAuthorizeAttribute">
            <summary>
            Ensures authorization occurs for the installer if it has already completed. If install has not yet occured
            then the authorization is successful
            </summary>
        </member>
        <member name="M:Umbraco.Web.Install.HttpInstallAuthorizeAttribute.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="T:Umbraco.Web.Macros.PartialViewMacroController">
            <summary>
            Controller to render macro content for Parital View Macros
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.PartialViewMacroController.Index">
            <summary>
            Child action to render a macro
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Macros.PartialViewMacroEngine">
            <summary>
            A macro engine using MVC Partial Views to execute
            </summary>
        </member>
        <member name="M:Umbraco.Web.Macros.PartialViewMacroEngine.#ctor(System.Web.HttpContextBase,Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor generally used for unit testing
            </summary>
            <param name="httpContext"></param>
            <param name="umbracoContext"> </param>
        </member>
        <member name="T:Umbraco.Web.Macros.PartialViewMacroPage">
            <summary>
            The base view class that PartialViewMacro views need to inherit from
            </summary>
        </member>
        <member name="P:Umbraco.Web.Macros.PartialViewMacroPage.CurrentPage">
            <summary>
            Returns the a DynamicPublishedContent object
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.DynamicPublishedContent">
            <summary>
            The base dynamic model for views
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Attempts to call a method on the dynamic object
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.TryGetCustomMember(System.Dynamic.GetMemberBinder)">
            <summary>
            Attempts to return a custom member (generally based on a string match)
            </summary>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.TryGetChildrenByAlias(System.Dynamic.GetMemberBinder)">
            <summary>
            Attempts to return the children by the document type's alias (for example: CurrentPage.NewsItems where NewsItem is the
            document type alias)
            </summary>
            <param name="binder"></param>
            <returns></returns>
            <remarks>
            This method will work by both the plural and non-plural alias (i.e. NewsItem and NewsItems)
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.TryGetDocumentProperty(System.Dynamic.GetMemberBinder)">
            <summary>
            Attempts to return a member based on the reflected document property
            </summary>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.TryGetUserProperty(System.Dynamic.GetMemberBinder)">
            <summary>
            Attempts to return a member based on a user defined umbraco property
            </summary>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.GetMemberMatchMethods">
            <summary>
            Returns the member match methods in the correct order and is used in the TryGetMember method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Try to return an object based on the dynamic member accessor
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
            <remarks>
            TODO: SD: This will alwasy return true so that no exceptions are generated, this is only because this is how the 
            old DynamicNode worked, I'm not sure if this is the correct/expected functionality but I've left it like that.
            IMO I think this is incorrect and it would be better to throw an exception for something that is not supported!
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.GetReflectedProperty(System.String)">
            <summary>
            Returns a property defined on the document object as a member property using reflection
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.GetUserProperty(System.String,System.Boolean)">
            <summary>
            Return a user defined property
            </summary>
            <param name="alias"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContent.Site">
            <summary>
            A shortcut method for AncestorOrSelf(1)
            </summary>
            <returns>
            The site homepage
            </returns>
        </member>
        <member name="T:Umbraco.Web.Models.DynamicPublishedContentList">
            <summary>
            Represents a collection of DynamicPublishedContent items.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContentList.Add(Umbraco.Web.Models.DynamicPublishedContent)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="dynamicContent">The item to add.</param>
        </member>
        <member name="M:Umbraco.Web.Models.DynamicPublishedContentList.Remove(Umbraco.Web.Models.DynamicPublishedContent)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="dynamicContent">The item to remove.</param>
        </member>
        <member name="T:Umbraco.Web.Models.PartialViewMacroModel">
            <summary>
            The model used when rendering Partial View Macros
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.AreaRegistrationExtensions.RouteControllerPlugin(System.Web.Mvc.AreaRegistration,System.String,System.Type,System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates a custom individual route for the specified controller plugin. Individual routes
            are required by controller plugins to map to a unique URL based on ID.
            </summary>
            <param name="controllerName"></param>
            <param name="controllerType"></param>
            <param name="routes">An existing route collection</param>
            <param name="controllerSuffixName">
            The suffix name that the controller name must end in before the "Controller" string for example:
            ContentTreeController has a controllerSuffixName of "Tree", this is used for route constraints.
            </param>
            <param name="defaultAction"></param>
            <param name="defaultId"></param>
            <param name="area"></param>
            <param name="umbracoTokenValue">The DataToken value to set for the 'umbraco' key, this defaults to 'backoffice' </param>
            <param name="routeTokens">By default this value is just {action}/{id} but can be modified for things like web api routes</param>
            <param name="isMvc">Default is true for MVC, otherwise false for WebAPI</param>
            <param name="areaPathPrefix">
            If specified will add this string to the path between the umbraco path and the area path name, for example:
                /umbraco/CUSTOMPATHPREFIX/areaname
            if not specified, will just route like:
                /umbraco/areaname
            </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.BaseRest.BaseRestHandler.IsBaseRestRequest(System.Uri)">
            <summary>
            Returns a value indicating whether a specified Uri should be routed to the BaseRestHandler.
            </summary>
            <param name="uri">The specified Uri.</param>
            <returns>A value indicating whether the specified Uri should be routed to the BaseRestHandler.</returns>
        </member>
        <member name="T:Umbraco.Web.ContextualPublishedCacheExtensions">
            <summary>
            Provides extension methods to ContextualPublishedCache.
            </summary>
        </member>
        <member name="M:Umbraco.Web.ContextualPublishedCacheExtensions.GetDynamicById(Umbraco.Web.PublishedCache.ContextualPublishedContentCache,System.Int32)">
            <summary>
            Gets a dynamic content identified by its unique identifier.
            </summary>
            <param name="cache">The contextual cache.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The dynamic content, or null.</returns>
        </member>
        <member name="M:Umbraco.Web.ContextualPublishedCacheExtensions.GetDynamicSingleByXPath(Umbraco.Web.PublishedCache.ContextualPublishedContentCache,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a dynamic content resulting from an XPath query.
            </summary>
            <param name="cache">The contextual cache.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables</param>
            <returns>The dynamic content, or null.</returns>
        </member>
        <member name="M:Umbraco.Web.ContextualPublishedCacheExtensions.GetDynamicSingleByXPath(Umbraco.Web.PublishedCache.ContextualPublishedContentCache,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a dynamic content resulting from an XPath query.
            </summary>
            <param name="cache">The contextual cache.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables</param>
            <returns>The dynamic content, or null.</returns>
        </member>
        <member name="M:Umbraco.Web.ContextualPublishedCacheExtensions.GetDynamicByXPath(Umbraco.Web.PublishedCache.ContextualPublishedContentCache,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets dynamic contents resulting from an XPath query.
            </summary>
            <param name="cache">The contextual cache.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables</param>
            <returns>The dynamic contents.</returns>
        </member>
        <member name="M:Umbraco.Web.ContextualPublishedCacheExtensions.GetDynamicByXPath(Umbraco.Web.PublishedCache.ContextualPublishedContentCache,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets dynamic contents resulting from an XPath query.
            </summary>
            <param name="cache">The contextual cache.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables</param>
            <returns>The dynamic contents.</returns>
        </member>
        <member name="M:Umbraco.Web.ContextualPublishedCacheExtensions.GetDynamicAtRoot(Umbraco.Web.PublishedCache.ContextualPublishedContentCache)">
            <summary>
            Gets dynamic contents at root.
            </summary>
            <param name="cache">The contextual cache.</param>
            <returns>The dynamic contents.</returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.DefaultRenderMvcControllerResolver">
            <summary>
            A resolver used to resolve the default RenderMvcController that is used to render any front-end
            Umbraco page when using MVC when there are no routes hijacked.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.DefaultRenderMvcControllerResolver.#ctor(System.Type)">
            <summary>
            Constructor accepting the default RenderMvcController
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.DefaultRenderMvcControllerResolver.GetDefaultControllerType">
            <summary>
            Returns the Default RenderMvcController type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.DefaultRenderMvcControllerResolver.GetControllerInstance">
            <summary>
            Returns an instance of the default controller instance.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.DefaultRenderMvcControllerResolver.SetDefaultControllerType(System.Type)">
            <summary>
            Sets the default RenderMvcController type
            </summary>
            <param name="controllerType"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.DefaultRenderMvcControllerResolver.ValidateType(System.Type)">
            <summary>
            Ensures that the type passed in is of type RenderMvcController
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.QueryStringFilterAttribute">
            <summary>
            Allows an Action to execute with an arbitrary number of QueryStrings
            </summary>
            <remarks>
            Just like you can POST an arbitrary number of parameters to an Action, you can't GET an arbitrary number
            but this will allow you to do it
            
            http://stackoverflow.com/questions/488061/passing-multiple-parameters-to-controller-in-asp-net-mvc-also-generating-on-the
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.ContextualPublishedContentCache">
            <summary>
            Provides access to cached documents in a specified context.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.ContextualPublishedCache`1">
            <summary>
            Provides access to cached contents in a specified context.
            </summary>
            <typeparam name="T">The type of the underlying published cache.</typeparam>
            <remarks>The type <typeparamref name="T"/> differenciates between the content cache and the media cache,
            ie it will be either IPublishedContentCache or IPublishedMediaCache.</remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.ContextualPublishedCache">
            <summary>
            Provides access to cached contents in a specified context.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.ContextualPublishedCache"/> with a context.
            </summary>
            <param name="umbracoContext">The context.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.ContentHasChanged">
            <summary>
            Informs the contextual cache that content has changed.
            </summary>
            <remarks>The contextual cache may, although that is not mandatory, provide an immutable snapshot of
            the content over the duration of the context. If you make changes to the content and do want to have
            the cache update its snapshot, you have to explicitely ask it to do so by calling ContentHasChanged.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetById(System.Int32)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>Considers published or unpublished content depending on context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetById(System.Boolean,System.Int32)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetAtRoot">
            <summary>
            Gets content at root.
            </summary>
            <returns>The contents.</returns>
            <remarks>Considers published or unpublished content depending on context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetAtRoot(System.Boolean)">
            <summary>
            Gets contents at root.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The contents.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetSingleByXPath(System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            <para>Considers published or unpublished content depending on context.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetSingleByXPath(System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            <para>Considers published or unpublished content depending on context.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetSingleByXPath(System.Boolean,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetSingleByXPath(System.Boolean,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetByXPath(System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets content resulting from an XPath query.
            </summary>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            <para>Considers published or unpublished content depending on context.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetByXPath(System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets content resulting from an XPath query.
            </summary>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            <para>Considers published or unpublished content depending on context.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetByXPath(System.Boolean,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetByXPath(System.Boolean,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetXPathNavigator">
            <summary>
            Gets an XPath navigator that can be used to navigate content.
            </summary>
            <returns>The XPath navigator.</returns>
            <remarks>Considers published or unpublished content depending on context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.GetXPathNavigator(System.Boolean)">
            <summary>
            Gets an XPath navigator that can be used to navigate content.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The XPath navigator.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.HasContent">
            <summary>
            Gets a value indicating whether the underlying non-contextual cache contains content.
            </summary>
            <returns>A value indicating whether the underlying non-contextual cache contains content.</returns>
            <remarks>Considers published or unpublished content depending on context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache.HasContent(System.Boolean)">
            <summary>
            Gets a value indicating whether the underlying non-contextual cache contains content.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>A value indicating whether the underlying non-contextual cache contains content.</returns>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.ContextualPublishedCache.XPathNavigatorIsNavigable">
            <summary>
            Gets a value indicating whether <c>GetXPathNavigator</c> returns an <c>XPathNavigator</c>
            and that navigator is a <c>NavigableNavigator</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.#ctor(Umbraco.Web.UmbracoContext,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.ContextualPublishedCache`1"/> with a context and a published cache.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.GetById(System.Boolean,System.Int32)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.GetAtRoot(System.Boolean)">
            <summary>
            Gets content at root.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The contents.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.GetSingleByXPath(System.Boolean,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.GetSingleByXPath(System.Boolean,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.GetByXPath(System.Boolean,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.GetByXPath(System.Boolean,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets content resulting from an XPath query.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>
            <para>If <param name="vars" /> is <c>null</c>, or is empty, or contains only one single
            value which itself is <c>null</c>, then variables are ignored.</para>
            <para>The XPath expression should reference variables as <c>$var</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.GetXPathNavigator(System.Boolean)">
            <summary>
            Gets an XPath navigator that can be used to navigate content.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The XPath navigator.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.HasContent(System.Boolean)">
            <summary>
            Gets a value indicating whether the underlying non-contextual cache contains content.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>A value indicating whether the underlying non-contextual cache contains content.</returns>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.InnerCache">
            <summary>
            Gets the underlying published cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.ContextualPublishedCache`1.XPathNavigatorIsNavigable">
            <summary>
            Gets a value indicating whether <c>GetXPathNavigator</c> returns an <c>XPathNavigator</c>
            and that navigator is a <c>NavigableNavigator</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedContentCache.#ctor(Umbraco.Web.PublishedCache.IPublishedContentCache,Umbraco.Web.UmbracoContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.ContextualPublishedContentCache"/> class with a published content cache and a context.
            </summary>
            <param name="cache">A published content cache.</param>
            <param name="umbracoContext">A context.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedContentCache.GetByRoute(System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets content identified by a route.
            </summary>
            <param name="route">The route</param>
            <param name="hideTopLevelNode">A value forcing the HideTopLevelNode setting.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>A valid route is either a simple path eg <c>/foo/bar/nil</c> or a root node id and a path, eg <c>123/foo/bar/nil</c>.</para>
            <para>Considers published or unpublished content depending on context.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedContentCache.GetByRoute(System.Boolean,System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets content identified by a route.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="route">The route</param>
            <param name="hideTopLevelNode">A value forcing the HideTopLevelNode setting.</param>
            <returns>The content, or null.</returns>
            <remarks>A valid route is either a simple path eg <c>/foo/bar/nil</c> or a root node id and a path, eg <c>123/foo/bar/nil</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedContentCache.GetRouteById(System.Int32)">
            <summary>
            Gets the route for a content identified by its unique identifier.
            </summary>
            <param name="contentId">The content unique identifier.</param>
            <returns>The route.</returns>
            <remarks>Considers published or unpublished content depending on context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedContentCache.GetRouteById(System.Boolean,System.Int32)">
            <summary>
            Gets the route for a content identified by its unique identifier.
            </summary>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The route.</returns>
            <remarks>Considers published or unpublished content depending on context.</remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.ContextualPublishedMediaCache">
            <summary>
            Provides access to cached medias in a specified context.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.ContextualPublishedMediaCache.#ctor(Umbraco.Web.PublishedCache.IPublishedMediaCache,Umbraco.Web.UmbracoContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.ContextualPublishedMediaCache"/> class with a published media cache and a context.
            </summary>
            <param name="cache">A published media cache.</param>
            <param name="umbracoContext">A context.</param>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.PublishedCachesResolver">
            <summary>
            Resolves the IPublishedCaches object.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedCachesResolver.#ctor(Umbraco.Web.PublishedCache.IPublishedCaches)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.PublishedCachesResolver"/> class with caches.
            </summary>
            <param name="caches">The caches.</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedCachesResolver.SetCaches(Umbraco.Web.PublishedCache.IPublishedCaches)">
            <summary>
            Sets the caches.
            </summary>
            <param name="caches">The caches.</param>
            <remarks>For developers, at application startup.</remarks>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.PublishedCachesResolver.Caches">
            <summary>
            Gets the caches.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.IPublishedCaches">
            <summary>
            Provides caches (content and media).
            </summary>
            <remarks>Groups caches that _may_ be related.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCaches.CreateContextualContentCache(Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a contextual content cache for a specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>A new contextual content cache for the specified context.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCaches.CreateContextualMediaCache(Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a contextual media cache for a specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>A new contextual media cache for the specified context.</returns>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.PublishedCaches">
            <summary>
            Provides caches (content and media).
            </summary>
            <remarks>Default implementation for unrelated caches.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedCaches.#ctor(Umbraco.Web.PublishedCache.IPublishedContentCache,Umbraco.Web.PublishedCache.IPublishedMediaCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.PublishedCaches"/> class with a content cache
            and a media cache.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedCaches.CreateContextualContentCache(Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a contextual content cache for a specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>A new contextual content cache for the specified context.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.PublishedCaches.CreateContextualMediaCache(Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a contextual media cache for a specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>A new contextual media cache for the specified context.</returns>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedMediaCache">
            <summary>
            An IPublishedMediaStore that first checks for the media in Examine, and then reverts to the database
            </summary>
            <remarks>
            NOTE: In the future if we want to properly cache all media this class can be extended or replaced when these classes/interfaces are exposed publicly.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.IPublishedCache">
            <summary>
            Provides access to cached contents.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetById(Umbraco.Web.UmbracoContext,System.Boolean,System.Int32)">
            <summary>
            Gets a content identified by its unique identifier.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetAtRoot(Umbraco.Web.UmbracoContext,System.Boolean)">
            <summary>
            Gets contents at root.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The contents.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetSingleByXPath(Umbraco.Web.UmbracoContext,System.Boolean,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetSingleByXPath(Umbraco.Web.UmbracoContext,System.Boolean,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets a content resulting from an XPath query.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The content, or null.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetByXPath(Umbraco.Web.UmbracoContext,System.Boolean,System.String,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets contents resulting from an XPath query.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetByXPath(Umbraco.Web.UmbracoContext,System.Boolean,System.Xml.XPath.XPathExpression,Umbraco.Core.Xml.XPathVariable[])">
            <summary>
            Gets contents resulting from an XPath query.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="xpath">The XPath query.</param>
            <param name="vars">Optional XPath variables.</param>
            <returns>The contents.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.GetXPathNavigator(Umbraco.Web.UmbracoContext,System.Boolean)">
            <summary>
            Gets an XPath navigator that can be used to navigate contents.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>The XPath navigator.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedCache.HasContent(Umbraco.Web.UmbracoContext,System.Boolean)">
            <summary>
            Gets a value indicating whether the cache contains published content.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <returns>A value indicating whether the cache contains published content.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.IPublishedCache.XPathNavigatorIsNavigable">
            <summary>
            Gets a value indicating whether <c>GetXPathNavigator</c> returns an <c>XPathNavigator</c>
            and that navigator is a <c>NavigableNavigator</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedMediaCache.#ctor(Umbraco.Core.ApplicationContext,Examine.Providers.BaseSearchProvider,Examine.Providers.BaseIndexProvider)">
            <summary>
            Generally used for unit testing to use an explicit examine searcher
            </summary>
            <param name="applicationContext"></param>
            <param name="searchProvider"></param>
            <param name="indexProvider"></param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedMediaCache.GetProperty(Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedMediaCache.DictionaryPublishedContent,System.String)">
            <summary>
            We will need to first check if the document was loaded by Examine, if so we'll need to check if this property exists 
            in the results, if it does not, then we'll have to revert to looking up in the db. 
            </summary>
            <param name="dd"> </param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedMediaCache.GetChildrenMedia(System.Int32,System.Xml.XPath.XPathNavigator)">
            <summary>
            A Helper methods to return the children for media whther it is based on examine or xml
            </summary>
            <param name="parentId"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedMediaCache.DictionaryPublishedContent">
            <summary>
            An IPublishedContent that is represented all by a dictionary.
            </summary>
            <remarks>
            This is a helper class and definitely not intended for public use, it expects that all of the values required 
            to create an IPublishedContent exist in the dictionary by specific aliases.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedMediaCache.DictionaryPublishedContent.LoadedFromExamine">
            <summary>
            Flag to get/set if this was laoded from examine cache
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedMediaCache.DictionaryPublishedContent.ItemType">
            <summary>
            Returns 'Media' as the item type
            </summary>
        </member>
        <member name="P:Umbraco.Web.Dictionary.DefaultCultureDictionary.Item(System.String)">
            <summary>
            Returns the dictionary value based on the key supplied
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Dictionary.DefaultCultureDictionary.Culture">
            <summary>
            Returns the current culture
            </summary>
        </member>
        <member name="T:Umbraco.Web.Dictionary.DefaultCultureDictionaryFactory">
            <summary>
            A culture dictionary factory used to create an Umbraco.Core.Dictionary.ICultureDictionary.
            </summary>
            <remarks>
            In the future this will allow use to potentially store dictionary items elsewhere and allows for maximum flexibility.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.MemberAuthorizeAttribute">
            <summary>
            Attribute for attributing controller actions to restrict them
            to just authenticated members, and optionally of a particular type and/or group
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.MemberAuthorizeAttribute.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.MemberAuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Override method to throw exception instead of returning a 401 result
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="P:Umbraco.Web.Mvc.MemberAuthorizeAttribute.AllowAll">
            <summary>
            Flag for whether to allow all site visitors or just authenticated members
            </summary>
            <remarks>
            This is the same as applying the [AllowAnonymous] attribute
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Mvc.MemberAuthorizeAttribute.AllowType">
            <summary>
            Comma delimited list of allowed member types
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.MemberAuthorizeAttribute.AllowGroup">
            <summary>
            Comma delimited list of allowed member groups
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.MemberAuthorizeAttribute.AllowMembers">
            <summary>
            Comma delimited list of allowed members
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.BackOfficeArea">
            <summary>
            An area registration for back office components
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.BackOfficeArea.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            Create the routes for the area
            </summary>
            <param name="context"></param>
            <remarks>
            By using the context to register the routes it means that the area is already applied to them all 
            and that the namespaces searched for the controllers are ONLY the ones specified.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerFactoryExtensions.GetControllerTypeInternal(System.Web.Mvc.IControllerFactory,System.Web.Routing.RequestContext,System.String)">
            <summary>
            Gets a controller type by the name
            </summary>
            <param name="factory"></param>
            <param name="requestContext"></param>
            <param name="controllerName"></param>
            <returns></returns>
            <remarks>
            This is related to issue: http://issues.umbraco.org/issue/U4-1726. We already have a method called GetControllerTypeInternal on our MasterControlelrFactory,
            however, we cannot always guarantee that the usage of this will be a MasterControllerFactory like during unit tests. So we needed to create
            this extension method to do the checks instead.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.IRenderMvcController">
            <summary>
            The interface that must be implemented for a controller to be designated to execute for route hijacking
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.IRenderMvcController.Index(Umbraco.Web.Models.RenderModel)">
            <summary>
            The default action to render the front-end view
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.SurfaceRouteHandler">
            <summary>
            Assigned to all SurfaceController's so that it returns our custom SurfaceMvcHandler to use for rendering
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.ResolutionFrozen(System.Object,System.EventArgs)">
            <summary>
            Once resolution is frozen, then we can bind to the events that we require
            </summary>
            <param name="s"></param>
            <param name="args"></param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.GetCachedRoutes">
            <summary>
            Used ONLY for unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.GetCachedIds">
            <summary>
            Used ONLY for unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.Store(System.Int32,System.String)">
            <summary>
            Stores a route for a node.
            </summary>
            <param name="nodeId">The node identified.</param>
            <param name="route">The route.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.GetRoute(System.Int32)">
            <summary>
            Gets a route for a node.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <returns>The route for the node, else null.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.GetNodeId(System.String)">
            <summary>
            Gets a node for a route.
            </summary>
            <param name="route">The route.</param>
            <returns>The node identified for the route, else zero.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.ClearNode(System.Int32)">
            <summary>
            Clears the route for a node.
            </summary>
            <param name="nodeId">The node identifier.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.RoutesCache.Clear">
            <summary>
            Clears all routes.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.UrlProviderMode">
            <summary>
            Specifies the type of urls that the url provider should produce.
            </summary>
            <remarks>
            <para>The <c>AutoLegacy</c> option is equivalent to <c>Auto</c> but it also respects the legacy <c>useDomainPrefixes</c> setting. 
            When that setting is true, then all urls are absolute. Otherwise, urls will be relative or absolute, depending on hostnames.</para>
            <para>The <c>Relative</c> option can lead to invalid results when combined with hostnames, but it is the only way to reproduce
            the true, pre-4.10, always-relative behavior of Umbraco.</para>
            <para>For the time being, the default option is <c>AutoLegacy</c> although in the future it will be <c>Auto</c>.</para>
            </remarks>
        </member>
        <member name="F:Umbraco.Web.Routing.UrlProviderMode.AutoLegacy">
            <summary>
            Indicates that the url provider should determine automatically whether to return relative or absolute urls,
            and also respect the legacy <c>useDomainPrefixes</c> setting.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Routing.UrlProviderMode.Relative">
            <summary>
            Indicates that the url provider should produce relative urls exclusively.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Routing.UrlProviderMode.Absolute">
            <summary>
            Indicates that the url provider should produce absolute urls exclusively.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Routing.UrlProviderMode.Auto">
            <summary>
            Indicates that the url provider should determine automatically whether to return relative or absolute urls.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Search.ExamineIndexerModel.DocumentCount">
            <summary>
            The number of docs in the index
            </summary>
        </member>
        <member name="P:Umbraco.Web.Search.ExamineIndexerModel.FieldCount">
            <summary>
            The number of fields in the index
            </summary>
        </member>
        <member name="P:Umbraco.Web.Search.ExamineIndexerModel.DeletionCount">
            <summary>
            The number of documents flagged for deletion in the index
            </summary>
        </member>
        <member name="P:Umbraco.Web.Search.ExamineIndexerModel.IsOptimized">
            <summary>
            Whether or not the indexed is optimized
            </summary>
        </member>
        <member name="P:Umbraco.Web.Search.ExamineIndexerModel.IsLuceneIndex">
            <summary>
            Generally will always be true unless someone has created a new non-lucene index
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineExtensions">
            <summary>
            Extension methods for the LuceneIndexer
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineExtensions.GetIndexDocumentCount(Examine.LuceneEngine.Providers.LuceneIndexer)">
            <summary>
            Return the number of indexed documents in Lucene
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineExtensions.GetIndexFieldCount(Examine.LuceneEngine.Providers.LuceneIndexer)">
            <summary>
            Return the total number of fields in the index
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineExtensions.IsIndexOptimized(Examine.LuceneEngine.Providers.LuceneIndexer)">
            <summary>
            Returns true if the index is optimized or not
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineExtensions.IsIndexLocked(Examine.LuceneEngine.Providers.LuceneIndexer)">
            <summary>
            Check if the index is locked
            </summary>
            <param name="indexer"></param>
            <returns></returns>
            <remarks>
            If the index does not exist we'll consider it locked
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineExtensions.GetDeletedDocumentsCount(Examine.LuceneEngine.Providers.LuceneIndexer)">
            <summary>
            The number of documents deleted in the index
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Security.WebSecurity">
            <summary>
            A utility class used for dealing with USER security in Umbraco
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.IsMemberAuthorized(System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns true or false if the currently logged in member is authorized based on the parameters provided
            </summary>
            <param name="allowAll"></param>
            <param name="allowTypes"></param>
            <param name="allowGroups"></param>
            <param name="allowMembers"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.PerformLogin(System.Int32)">
            <summary>
            Logs a user in.
            </summary>
            <param name="userId">The user Id</param>
            <returns>returns the number of seconds until their session times out</returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.PerformLogin(Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Logs the user in
            </summary>
            <param name="user"></param>
            <returns>returns the number of seconds until their session times out</returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ClearCurrentLogin">
            <summary>
            Clears the current login for the currently logged in user
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.RenewLoginTimeout">
            <summary>
            Renews the user's login ticket
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateBackOfficeCredentials(System.String,System.String)">
            <summary>
            Validates credentials for a back office user
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.GetBackOfficeMembershipUser(System.String,System.Boolean)">
            <summary>
            Returns the MembershipUser from the back office membership provider
            </summary>
            <param name="username"></param>
            <param name="setOnline"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.GetBackOfficeUser(System.String)">
            <summary>
            Returns the back office IUser instance for the username specified
            </summary>
            <param name="username"></param>
            <returns></returns>
            <remarks>
            This will return an Iuser instance no matter what membership provider is installed for the back office, it will automatically
            create any missing Iuser accounts if one is not found and a custom membership provider is being used. 
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateUserNodeTreePermissions(umbraco.BusinessLogic.User,System.String,System.String)">
            <summary>
            Validates the user node tree permissions.
            </summary>
            <param name="umbracoUser"></param>
            <param name="path">The path.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateUserApp(System.String)">
            <summary>
            Validates the current user to see if they have access to the specified app
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.GetUserId(System.String)">
            <summary>
            Gets the user id.
            </summary>
            <param name="umbracoUserContextId">This is not used</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.GetUserId">
            <summary>
            Gets the currnet user's id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.GetSessionId">
            <summary>
            Returns the current user's unique session id - used to mitigate csrf attacks or any other reason to validate a request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateUserContextId(System.String)">
            <summary>
            Validates the user context ID.
            </summary>
            <param name="currentUmbracoUserContextId">This doesn't do anything</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateCurrentUser">
            <summary>
            Validates the currently logged in user and ensures they are not timed out
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.ValidateCurrentUser(System.Boolean)">
            <summary>
            Validates the current user assigned to the request and ensures the stored user data is valid
            </summary>
            <param name="throwExceptions">set to true if you want exceptions to be thrown if failed</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.AuthorizeRequest(System.Boolean)">
            <summary>
            Authorizes the full request, checks for SSL and validates the current user
            </summary>
            <param name="throwExceptions">set to true if you want exceptions to be thrown if failed</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.UserHasAppAccess(System.String,Umbraco.Core.Models.Membership.IUser)">
            <summary>
            Checks if the specified user as access to the app
            </summary>
            <param name="app"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Security.WebSecurity.UserHasAppAccess(System.String,System.String)">
            <summary>
            Checks if the specified user by username as access to the app
            </summary>
            <param name="app"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Security.WebSecurity.CurrentUser">
            <summary>
            Gets the current user.
            </summary>
            <value>The current user.</value>
        </member>
        <member name="M:Umbraco.Web.Standalone.WriteableConfigSystem.Install">
            <summary>
            Re-initializes the ConfigurationManager, allowing us to merge in the settings from Core.Config
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.JavaScript.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.JavaScript.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.JavaScript.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.JavaScript.Resources.JsInitialize">
             <summary>
               Looks up a localized string similar to [
                &apos;lib/jquery/jquery-2.0.3.min.js&apos;,
                &apos;lib/angular/1.1.5/angular.min.js&apos;,
                &apos;lib/underscore/underscore.js&apos;,
            
                &apos;lib/jquery/jquery-ui-1.10.3.custom.min.js&apos;,
            
                &apos;lib/angular/1.1.5/angular-cookies.min.js&apos;,
                &apos;lib/angular/1.1.5/angular-mobile.js&apos;,
                &apos;lib/angular/1.1.5/angular-sanitize.min.js&apos;,
            
                &apos;lib/angular/angular-ui-sortable.js&apos;,
                
                &apos;lib/jquery/jquery.upload/js/jquery.fileupload.js&apos;,
                &apos;lib/jquery/jquery.upload/js/load-image.min.js&apos;,
                &apos;lib/jquery/jquery.upload/js/ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Umbraco.Web.UI.JavaScript.Resources.Main">
             <summary>
               Looks up a localized string similar to LazyLoad.js(&quot;##JsInitialize##&quot;, function () {
                //we need to set the legacy UmbClientMgr path
                UmbClientMgr.setUmbracoPath(&apos;&quot;##UmbracoPath##&quot;&apos;);
            
                jQuery(document).ready(function () {
                    angular.bootstrap(document, [&apos;umbraco&apos;]);
                });
            });.
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Umbraco.Web.UI.JavaScript.Resources.ServerVariables" -->
        <member name="E:Umbraco.Web.UI.JavaScript.ServerVariablesParser.Parsing">
            <summary>
            Allows developers to add custom variables on parsing
            </summary>
        </member>
        <member name="T:Umbraco.Web.Strategies.Migrations.RebuildMediaXmlCacheAfterUpgrade">
            <summary>
            This will execute after upgrading to rebuild the xml cache
            </summary>
            <remarks>
            This cannot execute as part of a db migration since we need access to the services/repos.
            
            This will execute for specific versions - 
            
            * If current is less than or equal to 7.0.0
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Strategies.PublicAccessEventHandler">
            <summary>
            Used to ensure that the access.xml file is kept up to date properly
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Bundles.JsApplicationLib">
            <summary>
            The core libs that have no dependencies
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Bundles.JsJQueryCore">
            <summary>
            The core Jquery libs
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Bundles.JsJQueryPlugins">
            <summary>
            The core Jquery libs
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Bundles.JsUmbracoApplicationCore">
            <summary>
            The core libs that require JQuery to be loaded
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Bundles.JsUmbracoApplicationUI">
            <summary>
            The UI Umbraco libs 
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Bundles.JsUmbracoTree">
            <summary> 
            The umb tree libs
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.CdfLogger">
            <summary>
            A logger for ClientDependency
            </summary>
        </member>
        <member name="T:Umbraco.Web.Models.LegacyNodeHelper">
            <summary>
            Used to convert to/from the legacy INode from IPublishedContent
            </summary>
        </member>
        <member name="F:umbraco.controls.passwordChanger.umbPasswordChanger_passwordNew">
            <summary>
            umbPasswordChanger_passwordNew control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.passwordChanger.umbPasswordChanger_passwordNewConfirm">
            <summary>
            umbPasswordChanger_passwordNewConfirm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.passwordChanger.ConfirmPasswordValidator">
            <summary>
            CompareValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.passwordChanger.IsChangingPasswordField">
            <summary>
            IsChangingPassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.passwordChanger.ResetPasswordCheckBox">
            <summary>
            ResetPasswordCheckBox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.passwordChanger.umbPasswordChanger_passwordCurrent">
            <summary>
            umbPasswordChanger_passwordCurrent control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:umbraco.controls.passwordChanger.ShowOldPassword">
            <summary>
            Determines whether to show the old password field or not
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Controls.UmbracoUserControl">
            <summary>
            A base class for all Presentation UserControls to inherit from
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.Controls.UmbracoUserControl.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Default constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.UI.Controls.UmbracoUserControl.#ctor">
            <summary>
            Empty constructor, uses Singleton to resolve the UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.InstanceId">
            <summary>
            Useful for debugging
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.Umbraco">
            <summary>
            Returns an UmbracoHelper object
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.Members">
            <summary>
            Returns the MemberHelper instance
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.Security">
            <summary>
            Returns the current WebSecurity instance
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.ApplicationContext">
            <summary>
            Returns the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.Services">
            <summary>
            Returns a ServiceContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.DatabaseContext">
            <summary>
            Returns a DatabaseContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.Url">
            <summary>
            Returns a UrlHelper
            </summary>
            <remarks>
            This URL helper is created without any route data and an empty request context
            </remarks>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoUserControl.SqlHelper">
            <summary>
            Returns the legacy SqlHelper
            </summary>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.BeginAsyncSaveOperation(System.Object,System.EventArgs,System.AsyncCallback,System.Object)">
            <summary>
            Called asynchronously in order to persist all of the data to the database
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="cb"></param>
            <param name="state"></param>
            <returns></returns>
            <remarks>
            This can be a long running operation depending on how many content nodes exist and if the node type alias
            has changed as this will need to regenerate XML for all of the nodes.
            </remarks>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.EndAsyncSaveOperation(System.IAsyncResult)">
            <summary>
            Occurs once the async database save operation has completed
            </summary>
            <param name="ar"></param>
            <remarks>
            This updates the UI elements
            </remarks>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.save_click(System.Object,System.EventArgs)">
            <summary>
            The save button click event handlers
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.LoadContentType">
            <summary>
            Loads the current ContentType from the id found in the querystring.
            The correct type is loaded based on editing location (DocumentType, MediaType or MemberType).
            </summary>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.UpdateTreeNode">
            <summary>
            Updates the Node in the Tree
            </summary>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.GetPropertyWrapperForPropertyType(umbraco.cms.businesslogic.propertytype.PropertyType,umbraco.cms.businesslogic.datatype.DataTypeDefinition[],umbraco.cms.businesslogic.datatype.DataTypeDefinition[]@)">
            <summary>
            Returns a generic property wrapper for a given property - this determines if the property type should be
            allowed to be editable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.BeginAsyncDeleteOperation(System.Object,System.EventArgs,System.AsyncCallback,System.Object)">
            <summary>
            Called asynchronously in order to delete a content type property
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="cb"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.EndAsyncDeleteOperation(System.IAsyncResult)">
            <summary>
            Occurs once the async database delete operation has completed
            </summary>
            <param name="ar"></param>
            <remarks>
            This updates the UI elements
            </remarks>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.gpw_Delete(System.Object,System.EventArgs)">
            <summary>
            Removes a PropertyType from the current ContentType when user clicks "red x"
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.btnNewTab_Click(System.Object,System.EventArgs)">
            <summary>
            Adds a new Tab to current ContentType when user clicks 'New Tab'-button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.dgTabs_ItemCommand(System.Object,System.Web.UI.WebControls.DataGridCommandEventArgs)">
            <summary>
            Removes a Tab from current ContentType when user clicks Delete button
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.TabView1">
            <summary>
            TabView1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pnlGeneral">
            <summary>
            pnlGeneral control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pnlTab">
            <summary>
            pnlTab control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.PaneTabsInherited">
            <summary>
            PaneTabsInherited control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.tabsMasterContentTypeName">
            <summary>
            tabsMasterContentTypeName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.Pane2">
            <summary>
            Pane2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pp_newTab">
            <summary>
            pp_newTab control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.txtNewTab">
            <summary>
            txtNewTab control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.btnNewTab">
            <summary>
            btnNewTab control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.Pane1">
            <summary>
            Pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.dgTabs">
            <summary>
            dgTabs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.lttNoTabs">
            <summary>
            lttNoTabs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pnlInfo">
            <summary>
            pnlInfo control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.Pane3">
            <summary>
            Pane3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pp_name">
            <summary>
            pp_name control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.txtName">
            <summary>
            txtName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pp_alias">
            <summary>
            pp_alias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.txtAlias">
            <summary>
            txtAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pp_icon">
            <summary>
            pp_icon control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.tb_icon">
            <summary>
            ddlIcons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pp_description">
            <summary>
            pp_description control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.description">
            <summary>
            description control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pnlStructure">
            <summary>
            pnlStructure control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.Pane6">
            <summary>
            Pane6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pp_Root">
            <summary>
            pp_Root control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.allowAtRoot">
            <summary>
            allowAtRoot control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.Pane5">
            <summary>
            Pane5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pp_allowedChildren">
            <summary>
            pp_allowedChildren control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.lstAllowedContentTypes">
            <summary>
            lstAllowedContentTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.PlaceHolderAllowedContentTypes">
            <summary>
            PlaceHolderAllowedContentTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pnlProperties">
            <summary>
            pnlProperties control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.PanePropertiesInherited">
            <summary>
            PanePropertiesInherited control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.propertiesMasterContentTypeName">
            <summary>
            propertiesMasterContentTypeName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.Pane4">
            <summary>
            Pane4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.PropertyTypeNew">
            <summary>
            PropertyTypeNew control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.PropertyTypes">
            <summary>
            PropertyTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.checkTxtAliasJs">
            <summary>
            checkTxtAliasJs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.DuplicateAliasValidator">
            <summary>
            DuplicateAliasValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.Pane9">
            <summary>
            Pane9 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.pp_compositions">
            <summary>
            pp_compositions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.lstContentTypeCompositions">
            <summary>
            lstContentTypeCompositions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.ContentTypeControlNew.PlaceHolderContentTypeCompositions">
            <summary>
            PlaceHolderContentTypeCompositions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.controls.ContentTypeControlNew.DeleteAsyncState">
            <summary>
            A class to track the async state for deleting a doc type property
            </summary>
        </member>
        <member name="T:umbraco.controls.ContentTypeControlNew.SaveAsyncState">
            <summary>
            A class to track the async state for saving the doc type
            </summary>
        </member>
        <member name="M:umbraco.controls.ContentTypeControlNew.SaveAsyncState.HasAnyPropertyAliasChanged(umbraco.cms.businesslogic.ContentType)">
            <summary>
            Returns true if any property has been removed or if any alias has changed
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.controls.Tree.TreeControl">
            <summary>
            The Umbraco tree control.
            <remarks>If this control doesn't exist on an UmbracoEnsuredPage it will not work.</remarks>
            </summary>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.DEFAULT_APP">
            <summary>
            If there is not application or tree specified in a query string then this is the application to load.
            </summary>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.#ctor">
            <summary>
            Set the defaults
            </summary>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.SetTreeService(umbraco.cms.presentation.Trees.TreeService)">
            <summary>
            Can be set explicitly which will override what is in query strings or what has been set by properties.
            Useful for rendering out a tree dynamically with an instance of anoterh TreeService.
            By using this method, it will undo any of the tree service public properties that may be set
            on this object.
            </summary>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.Initialize">
            <summary>
            Initializes the control and looks up the tree structures that are required to be rendered.
            Properties of the control (or SetTreeService) need to be set before pre render or calling
            GetJSONContextMenu or GetJSONNode
            </summary>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.OnPreRender(System.EventArgs)">
            <summary>
            This calls the databind method to bind the data binding syntax on the front-end.
            <remarks>
            Databinding was used instead of inline tags in case the tree properties needed to be set
            by other classes at runtime
            </remarks>
            </summary>
            <param name="e"></param>
            <remarks>
            This will initialize the control so all TreeService properties need to be set before hand
            </remarks>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.GetJSONContextMenu">
            <summary>
            Returns the JSON markup for the full context menu
            </summary>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.GetLegacyIActionJavascript">
            <summary>
            Returns a string with javascript proxy methods for IActions that are using old javascript
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.GetJSONNode(System.String)">
            <summary>
            Returns the JSON markup for one node
            </summary>
            <param name="treeAlias"></param>
            <param name="nodeId"></param>
            <returns></returns>
            <remarks>
            This will initialize the control so all TreeService properties need to be set before hand
            </remarks>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.GetJSONInitNode">
            <summary>
            Returns the JSON markup for the first node in the tree
            </summary>
        </member>
        <member name="M:umbraco.controls.Tree.TreeControl.GetCurrentApp">
            <summary>
            Return the current application alias. If neither the TreeType of Application is specified
            than return the default application. If the Application is null but there is a TreeType then
            find the application that the tree type is associated with.
            </summary>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.CssInclude2">
            <summary>
            CssInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.CssInclude3">
            <summary>
            CssInclude3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.CssInclude1">
            <summary>
            CssInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude2">
            <summary>
            JsInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude3">
            <summary>
            JsInclude3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude4">
            <summary>
            JsInclude4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude5">
            <summary>
            JsInclude5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude6">
            <summary>
            JsInclude6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude8">
            <summary>
            JsInclude8 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude11">
            <summary>
            JsInclude11 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude7">
            <summary>
            JsInclude7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude12">
            <summary>
            JsInclude12 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude9">
            <summary>
            JsInclude9 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.JsInclude10">
            <summary>
            JsInclude10 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Tree.TreeControl.TreeContainer">
            <summary>
            TreeContainer control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:umbraco.controls.Tree.TreeControl.Mode">
            <summary>
            Allows for checkboxes to be used with the tree. Default is standard.
            </summary>
        </member>
        <member name="P:umbraco.controls.Tree.TreeControl.JSCurrApp">
            <summary>
            Returns the required JavaScript as a string for the current application
            </summary>
        </member>
        <member name="P:umbraco.controls.Tree.TreeControl.ManualInitialization">
            <summary>
            By default this is false. If set to true, then the code in the client side of the tree will force calling rebuildTree
            to be called explicitly for the tree to render
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.create.controls.simple">
            <summary>
            	Summary description for simple.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.simple.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.simple.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.simple.Textbox1">
            <summary>
            Textbox1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.simple.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.directoryBrowser.pane">
            <summary>
            pane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.umbraco.dialogs.protectPage">
            <summary>
            Summary description for protectPage.
            </summary>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.tempFile">
            <summary>
            tempFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.feedback">
            <summary>
            feedback control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.p_mode">
            <summary>
            p_mode control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.pane_chooseMode">
            <summary>
            pane_chooseMode control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.rb_simple">
            <summary>
            rb_simple control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.rb_advanced">
            <summary>
            rb_advanced control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.p_noGroupsFound">
            <summary>
            p_noGroupsFound control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.bt_selectMode">
            <summary>
            bt_selectMode control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.pane_simple">
            <summary>
            pane_simple control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.pp_login">
            <summary>
            pp_login control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.simpleLogin">
            <summary>
            simpleLogin control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.pp_pass">
            <summary>
            pp_pass control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.simplePassword">
            <summary>
            simplePassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.pane_advanced">
            <summary>
            pane_advanced control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.PropertyPanel3">
            <summary>
            PropertyPanel3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.PropertyPanel2">
            <summary>
            PropertyPanel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.groupsSelector">
            <summary>
            groupsSelector control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.p_buttons">
            <summary>
            p_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.pane_pages">
            <summary>
            pane_pages control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.pp_loginPage">
            <summary>
            pp_loginPage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.ph_loginpage">
            <summary>
            ph_loginpage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.cv_loginPage">
            <summary>
            cv_loginPage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.pp_errorPage">
            <summary>
            pp_errorPage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.ph_errorpage">
            <summary>
            ph_errorpage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.cv_errorPage">
            <summary>
            cv_errorPage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.bt_protect">
            <summary>
            bt_protect control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.bt_buttonRemoveProtection">
            <summary>
            bt_buttonRemoveProtection control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.errorId">
            <summary>
            errorId control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.loginId">
            <summary>
            loginId control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.protectPage.js">
            <summary>
            js control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.emptyTrashcan.pane_form">
            <summary>
            pane_form control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.emptyTrashcan.progbar">
            <summary>
            progbar control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.create">
            <summary>
            Summary description for create.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.create.path">
            <summary>
            path control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.create.pane_chooseNode">
            <summary>
            pane_chooseNode control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.create.JTree">
            <summary>
            JTree control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.create.panel_buttons">
            <summary>
            panel_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.create.PageNameHolder">
            <summary>
            PageNameHolder control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.create.pane_chooseName">
            <summary>
            pane_chooseName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.create.phCreate">
            <summary>
            phCreate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.AssignDomain">
            <summary>
            Summary description for AssignDomain.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.FeedBackMessage">
            <summary>
            FeedBackMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.pane_addnew">
            <summary>
            pane_addnew control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.prop_domain">
            <summary>
            prop_domain control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.DomainName">
            <summary>
            DomainName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.DomainValidator">
            <summary>
            DomainValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.DomainValidator2">
            <summary>
            DomainValidator2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.prop_lang">
            <summary>
            prop_lang control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.Languages">
            <summary>
            Languages control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.LanguageValidator">
            <summary>
            LanguageValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.ok">
            <summary>
            ok control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.pane_edit">
            <summary>
            pane_edit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain.allDomains">
            <summary>
            allDomains control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.UI.Pages.UmbracoEnsuredPage">
            <summary>
            UmbracoEnsuredPage is the standard protected page in the umbraco backend, and forces authentication.
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Pages.BasePage">
            <summary>
            umbraco.BasePages.BasePage is the default page type for the umbraco backend.
            The basepage keeps track of the current user and the page context. But does not 
            Restrict access to the page itself.
            The keep the page secure, the umbracoEnsuredPage class should be used instead
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.BasePage.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"></see> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.BasePage.Url">
            <summary>
            Returns a UrlHelper
            </summary>
            <remarks>
            This URL helper is created without any route data and an empty request context
            </remarks>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.BasePage.Html">
            <summary>
            Returns a HtmlHelper
            </summary>        
            <remarks>
            This html helper is created with an empty context and page so it may not have all of the functionality expected.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.BasePage.ApplicationContext">
            <summary>
            Returns the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.BasePage.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.BasePage.Security">
            <summary>
            Returns the current WebSecurity instance
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.BasePage.Services">
            <summary>
            Returns a ServiceContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.BasePage.DatabaseContext">
            <summary>
            Returns a DatabaseContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.BasePage.ClientTools">
            <summary>
            Returns a refernce of an instance of ClientTools for access to the pages client API
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.UmbracoEnsuredPage.OnPreInit(System.EventArgs)">
            <summary>
            Authorizes the user
            </summary>
            <param name="e"></param>
            <remarks>
            Checks if the page exists outside of the /umbraco route, in which case the request will not have been authenticated for the back office 
            so we'll force authentication.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.UmbracoEnsuredPage.CurrentApp">
            <summary>
            Gets/sets the app that this page is assigned to
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.UmbracoEnsuredPage.RedirectToUmbraco">
            <summary>
            If true then umbraco will force any window/frame to reload umbraco in the main window
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Pages.UmbracoEnsuredPage.UmbracoUser">
            <summary>
            Returns the current user
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.Pages.UmbracoEnsuredPage.WebformsPageTreeAuthorizeAttribute">
            <summary>
            Used to assign a webforms page's security to a specific tree which will in turn check to see
            if the current user has access to the specified tree's registered section
            </summary>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain2.data">
            <summary>
            data control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain2.feedback">
            <summary>
            feedback control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain2.pane_language">
            <summary>
            pane_language control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain2.prop_language">
            <summary>
            prop_language control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain2.pane_domains">
            <summary>
            pane_domains control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.AssignDomain2.p_buttons">
            <summary>
            p_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.user.EditUser">
            <summary>
            Summary description for EditUser.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.user.EditUser.SetupForm">
            <summary>
            Setups the form.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.user.EditUser.ChangePassword(umbraco.controls.passwordChanger,System.Web.Security.MembershipUser,System.Web.UI.WebControls.CustomValidator)">
            <summary>
            This handles changing the password
            </summary>
            <param name="passwordChangerControl"></param>
            <param name="membershipUser"></param>
            <param name="passwordChangerValidator"></param>
        </member>
        <member name="M:umbraco.cms.presentation.user.EditUser.SaveUser_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the saveUser control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Web.UI.ImageClickEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUser.UserTabs">
            <summary>
            UserTabs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.UmbracoContextExtensions">
            <summary>
            Provides extension methods for <see cref="T:Umbraco.Web.UmbracoContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoContextExtensions.ContentHasChanged(Umbraco.Web.UmbracoContext)">
            <summary>
            Informs the context that content has changed.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            <para>The contextual caches may, although that is not mandatory, provide an immutable snapshot of
            the content over the duration of the context. If you make changes to the content and do want to have
            the caches update their snapshot, you have to explicitely ask them to do so by calling ContentHasChanged.</para>
            <para>The context informs the contextual caches that content has changed.</para>
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.settings.stylesheet.editstylesheet">
            <summary>
            Summary description for editstylesheet.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.editstylesheet.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.editstylesheet.Pane7">
            <summary>
            Pane7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.editstylesheet.pp_name">
            <summary>
            pp_name control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.editstylesheet.NameTxt">
            <summary>
            NameTxt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.editstylesheet.pp_path">
            <summary>
            pp_path control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.editstylesheet.lttPath">
            <summary>
            lttPath control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.editstylesheet.pp_source">
            <summary>
            pp_source control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.editstylesheet.editorSource">
            <summary>
            editorSource control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.settings.stylesheet.EditStyleSheetProperty">
            <summary>
            Summary description for EditStyleSheetProperty.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.EditStyleSheetProperty.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.EditStyleSheetProperty.Pane7">
            <summary>
            Pane7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.EditStyleSheetProperty.NameTxt">
            <summary>
            NameTxt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.EditStyleSheetProperty.AliasTxt">
            <summary>
            AliasTxt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.EditStyleSheetProperty.Content">
            <summary>
            Content control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.stylesheet.EditStyleSheetProperty.prStyles">
            <summary>
            prStyles control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.UrlHelperExtensions">
            <summary>
            Extension methods for UrlHelper
            </summary>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetExamineManagementServicePath(System.Web.Mvc.UrlHelper)">
            <summary>
            Returns the base path (not including the 'action') of the MVC controller "ExamineManagementController"
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUmbracoApiService``1(System.Web.Mvc.UrlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUmbracoApiServiceBaseUrl``1(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            Return the Base Url (not including the action) for a Web Api service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUmbracoApiService(System.Web.Mvc.UrlHelper,System.String,System.Type,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="apiControllerType"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUmbracoApiService(System.Web.Mvc.UrlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUmbracoApiService(System.Web.Mvc.UrlHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the Url for a Web Api service
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetUrlWithCacheBust(System.Web.Mvc.UrlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Return the Url for an action with a cache-busting hash appended
            </summary>
            <param name="url"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="routeVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperExtensions.GetCacheBustHash">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.MediaController">
            <remarks>
            This controller is decorated with the UmbracoApplicationAuthorizeAttribute which means that any user requesting
            access to ALL of the methods on this controller will need access to the media application.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetEmpty(System.String,System.Int32)">
            <summary>
            Gets an empty content item for the 
            </summary>
            <param name="contentTypeAlias"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetById(System.Int32)">
            <summary>
            Gets the content json for the content id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetByIds(System.Int32[])">
            <summary>
            Return media for the specified ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetRootMedia">
            <summary>
            Returns the root media objects
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.GetChildren(System.Int32,System.Int32,System.Int32,System.String,Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction,System.String)">
            <summary>
            Returns the child media objects
            </summary>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.DeleteById(System.Int32)">
            <summary>
            Moves an item to the recycle bin, if it is already there then it will permanently delete it
            </summary>
            <param name="id"></param>
            <returns></returns> 
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.PostMove(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Change the sort order for media
            </summary>
            <param name="move"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.PostSave(Umbraco.Web.Models.ContentEditing.MediaItemSave)">
            <summary>
            Saves content
            </summary>
            <returns></returns>        
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.MapPropertyValues``1(Umbraco.Web.Models.ContentEditing.ContentBaseItemSave{``0})">
            <summary>
            Maps the property values to the persisted entity
            </summary>
            <param name="contentItem"></param>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.EmptyRecycleBin">
            <summary>
            Empties the recycle bin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.PostSort(Umbraco.Web.Models.ContentEditing.ContentSortOrder)">
            <summary>
            Change the sort order for media
            </summary>
            <param name="sorted"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.PostAddFile">
            <summary>
            Used to submit a media file
            </summary>
            <returns></returns>
            <remarks>
            We cannot validate this request with attributes (nicely) due to the nature of the multi-part for data.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.ValidateMoveOrCopy(Umbraco.Web.Models.ContentEditing.MoveOrCopy)">
            <summary>
            Ensures the item can be moved/copied to the new location
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Editors.MediaController.CheckPermissions(System.Collections.Generic.IDictionary{System.String,System.Object},Umbraco.Core.Models.Membership.IUser,Umbraco.Core.Services.IMediaService,System.Int32,Umbraco.Core.Models.IMedia)">
            <summary>
            Performs a permissions check for the user to check if it has access to the node based on 
            start node and/or permissions for the node
            </summary>
            <param name="storage">The storage to add the content item to so it can be reused</param>
            <param name="user"></param>
            <param name="mediaService"></param>
            <param name="nodeId">The content to lookup, if the contentItem is not specified</param>
            <param name="media">Specifies the already resolved content item to check against, setting this ignores the nodeId</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Editors.MediaController.PostedFiles">
            <summary>
            This is used for the response of PostAddFile so that we can analyze the response in a filter and remove the 
            temporary files that were created.
            </summary>
        </member>
        <member name="T:Umbraco.Web.UrlHelperRenderExtensions">
            <summary>
            Extension methods for UrlHelper for use in templates
            </summary>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.String)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.String,System.Object)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.Type)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="surfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction(System.Web.Mvc.UrlHelper,System.String,System.Type,System.Object)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <param name="url"></param>
            <param name="action"></param>
            <param name="surfaceType"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction``1(System.Web.Mvc.UrlHelper,System.String)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UrlHelperRenderExtensions.SurfaceAction``1(System.Web.Mvc.UrlHelper,System.String,System.Object)">
            <summary>
            Generates a URL based on the current Umbraco URL with a custom query string that will route to the specified SurfaceController
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.IsBackOfficeAttribute">
            <summary>
            When applied to an api controller it will be routed to the /Umbraco/BackOffice prefix route so we can determine if it
            is a back office route or not.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.ContentItemBinder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Binders.MediaItemBinder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.EnsureUserPermissionForContentAttribute">
            <summary>
            Auth filter to check if the current user has access to the content item (by id). 
            </summary>
            <remarks>
            
            This first checks if the user can access this based on their start node, and then checks node permissions
            
            By default the permission that is checked is browse but this can be specified in the ctor.
            NOTE: This cannot be an auth filter because that happens too soon and we don't have access to the action params.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.EnsureUserPermissionForContentAttribute.#ctor(System.Int32)">
            <summary>
            This constructor will only be able to test the start node access
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.EnsureUserPermissionForMediaAttribute">
            <summary>
            Auth filter to check if the current user has access to the content item
            </summary>
            <remarks>
            Since media doesn't have permissions, this simply checks start node access    
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.EnsureUserPermissionForMediaAttribute.#ctor(System.Int32)">
            <summary>
            This constructor will only be able to test the start node access
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FileUploadCleanupFilterAttribute">
            <summary>
            Checks if the parameter is ContentItemSave and then deletes any temporary saved files from file uploads associated with the request
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.FileUploadCleanupFilterAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor specifies if the filter should analyze the incoming or outgoing model
            </summary>
            <param name="incomingModel"></param>
        </member>
        <member name="P:Umbraco.Web.WebApi.Filters.FileUploadCleanupFilterAttribute.AllowMultiple">
            <summary>
            Returns true so that other filters can execute along with this one
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FilterAllowedOutgoingContentAttribute">
            <summary>
            This inspects the result of the action that returns a collection of content and removes 
            any item that the current user doesn't have access to
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.FilterAllowedOutgoingMediaAttribute">
            <summary>
            This inspects the result of the action that returns a collection of content and removes 
            any item that the current user doesn't have access to
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.Filters.FilterAllowedOutgoingMediaAttribute.AllowMultiple">
            <summary>
            Returns true so that other filters can execute along with this one
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.HttpQueryStringFilterAttribute">
            <summary>
            Allows an Action to execute with an arbitrary number of QueryStrings
            </summary>
            <remarks>
            Just like you can POST an arbitrary number of parameters to an Action, you can't GET an arbitrary number
            but this will allow you to do it
            </remarks>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.OutgoingDateTimeFormatAttribute">
            <summary>
            Sets the json outgoing/serialized datetime format
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.OutgoingDateTimeFormatAttribute.#ctor(System.String)">
            <summary>
            Specify a custom format
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.OutgoingDateTimeFormatAttribute.#ctor">
            <summary>
            Will use the standard ISO format
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoApplicationAuthorizeAttribute">
            <summary>
            Ensures that the current user has access to the specified application
            </summary>
        </member>
        <member name="F:Umbraco.Web.WebApi.Filters.UmbracoApplicationAuthorizeAttribute.Enable">
            <summary>
            Can be used by unit tests to enable/disable this filter
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.Filters.UmbracoApplicationAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            Constructor to set any number of applications that the user needs access to to be authorized
            </summary>
            <param name="appName">
            If the user has access to any of the specified apps, they will be authorized.
            </param>
        </member>
        <member name="T:Umbraco.Web.WebApi.GuidNoHyphenConverter">
            <summary>
            A custom converter for GUID's to format without hyphens
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.TryGetHttpContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Tries to retrieve the current HttpContext if one exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateUserNoAccessResponse(System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a 403 (Forbidden) response indicating that hte current user doesn't have access to the resource
            requested or the action it needs to take.
            </summary>
            <param name="request"></param>
            <returns></returns>
            <remarks>
            This is different from a 401 which indicates that the user is not logged in.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateValidationErrorResponse``1(System.Net.Http.HttpRequestMessage,``0)">
            <summary>
            Create a 400 response message indicating that a validation error occurred
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateValidationErrorResponse(System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a 400 response message indicating that a validation error occurred
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateValidationErrorResponse(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Create a 400 response message indicating that a validation error occurred
            </summary>
            <param name="request"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebApi.HttpRequestMessageExtensions.CreateValidationErrorResponse(System.Net.Http.HttpRequestMessage,System.Web.Http.ModelBinding.ModelStateDictionary)">
            <summary>
            Create a 400 response message indicating that a validation error occurred
            </summary>
            <param name="request"></param>
            <param name="modelState"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebApi.JsonCamelCaseFormatter">
            <summary>
            Applying this attribute to any webapi controller will ensure that it only contains one json formatter compatible with the angular json vulnerability prevention.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.MemberAuthorizeAttribute">
            <summary>
            Attribute for attributing controller actions to restrict them
            to just authenticated members, and optionally of a particular type and/or group
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.MemberAuthorizeAttribute.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="P:Umbraco.Web.WebApi.MemberAuthorizeAttribute.AllowAll">
            <summary>
            Flag for whether to allow all site visitors or just authenticated members
            </summary>
            <remarks>
            This is the same as applying the [AllowAnonymous] attribute
            </remarks>
        </member>
        <member name="P:Umbraco.Web.WebApi.MemberAuthorizeAttribute.AllowType">
            <summary>
            Comma delimited list of allowed member types
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.MemberAuthorizeAttribute.AllowGroup">
            <summary>
            Comma delimited list of allowed member groups
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.MemberAuthorizeAttribute.AllowMembers">
            <summary>
            Comma delimited list of allowed members
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebApi.UmbracoApiControllerResolver.RegisteredUmbracoApiControllers">
            <summary>
            Gets all of the umbraco api controller types
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute">
            <summary>	
            Ensures authorization is successful for a back office user
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.AuthorizeCore(System.Web.HttpContextBase)">
            <summary>
            Ensures that the user must be in the Administrator or the Install role
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoAuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Override to to ensure no redirect occurs
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.NotChildAction">
            <summary>
            Used to ensure that actions with duplicate names that are not child actions don't get executed when 
            we are Posting and not redirecting.
            </summary>
            <remarks>
            See issue: http://issues.umbraco.org/issue/U4-1819
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoAuthorizedController">
            <summary>
            A base MVC controller for use in the back office that ensures that every call to it authorizes the current user.
            </summary>
            <remarks>
            This controller essentially just uses a global UmbracoAuthorizeAttribute, inheritors that require more granular control over the 
            authorization of each method can use this attribute instead of inheriting from this controller.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoAuthorizedController.UmbracoUser">
            <summary>
            Returns the currently logged in Umbraco User
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoControllerFactory">
            <summary>
            Abstract filtered controller factory used for all Umbraco controller factory implementations
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.IFilteredControllerFactory.CanHandle(System.Web.Routing.RequestContext)">
            <summary>
            Determines whether this instance can handle the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if this instance can handle the specified request; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Creates the specified controller by using the specified request context.
            </summary>
            <returns>
            The controller.
            </returns>
            <param name="requestContext">The request context.</param><param name="controllerName">The name of the controller.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Gets the controller's session behavior.
            </summary>
            <returns>
            The controller's session behavior.
            </returns>
            <param name="requestContext">The request context.</param><param name="controllerName">The name of the controller whose session behavior you want to get.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
            Releases the specified controller.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoControllerFactory.OverridenDefaultControllerFactory">
            <summary>
            By default, <see cref="T:System.Web.Mvc.DefaultControllerFactory"/> only exposes <see cref="M:System.Web.Mvc.IControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)"/> which throws an exception
            if the controller is not found. Since we want to try creating a controller, and then fall back to <see cref="T:Umbraco.Web.Mvc.RenderMvcController"/> if one isn't found,
            this nested class changes the visibility of <see cref="T:System.Web.Mvc.DefaultControllerFactory"/>'s internal methods in order to not have to rely on a try-catch.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoMvcHandler">
            <summary>
            MVC handler to facilitate the TemplateRenderer. This handler can execute an MVC request and return it as a string.
            
            Original:
            
            This handler also used to intercept creation of controllers and store it for later use.
            This was needed for the 'return CurrentUmbracoPage()' surface controller functionality 
            because it needs to send data back to the page controller.
            
            The creation of this controller has been moved to the UmbracoPageResult class which will create a controller when needed.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoMvcHandler.ExecuteUmbracoRequest">
            <summary>
            This is used internally purely to render an Umbraco MVC template to string and shouldn't be used for anything else.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedContentCache.GetByRoute(Umbraco.Web.UmbracoContext,System.Boolean,System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets content identified by a route.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="route">The route</param>
            <param name="hideTopLevelNode">A value forcing the HideTopLevelNode setting.</param>
            <returns>The content, or null.</returns>
            <remarks>
            <para>A valid route is either a simple path eg <c>/foo/bar/nil</c> or a root node id and a path, eg <c>123/foo/bar/nil</c>.</para>
            <para>If <param name="hideTopLevelNode" /> is <c>null</c> then the settings value is used.</para>
            <para>The value of <paramref name="preview"/> overrides the context.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedContentCache.GetRouteById(Umbraco.Web.UmbracoContext,System.Boolean,System.Int32)">
            <summary>
            Gets the route for a content identified by its unique identifier.
            </summary>
            <param name="umbracoContext">The context.</param>
            <param name="preview">A value indicating whether to consider unpublished content.</param>
            <param name="contentId">The content unique identifier.</param>
            <returns>The route.</returns>
            <remarks>The value of <paramref name="preview"/> overrides the context.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.IPublishedContentCache.CreateDetachedProperty(Umbraco.Core.Models.PublishedContent.PublishedPropertyType,System.Object,System.Boolean)">
            <summary>
            Creates a detached property.
            </summary>
            <param name="propertyType">The published property type.</param>
            <param name="value">The value.</param>
            <param name="isPreviewing">A value indicating whether the property is created within a previewing context.</param>
            <returns>A detached property.</returns>
            <remarks>Implementations must check that propertyType.IsDetachedOrNested is true.</remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedContentExtensions">
            <summary>
            Provides extension methods for <c>IPublishedContent</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.NiceUrl(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the url for the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The url for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Url(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the url for the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The url for the content.</returns>
            <remarks>Better use the <c>Url</c> property but that method is here to complement <c>UrlAbsolute()</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.NiceUrlWithDomain(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the absolute url for the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The absolute url for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.UrlWithDomain(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the absolute url for the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The absolute url for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.UrlAbsolute(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the absolute url for the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The absolute url for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetTemplateAlias(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Returns the current template Alias
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.HasProperty(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets a value indicating whether the content has a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <returns>A value indicating whether the content has the property identified by the alias.</returns>
            <remarks>The content may have a property, and that property may not have a value.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.HasValue(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets a value indicating whether the content has a value for a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <returns>A value indicating whether the content has a value for the property identified by the alias.</returns>
            <remarks>Returns true if <c>GetProperty(alias)</c> is not <c>null</c> and <c>GetProperty(alias).HasValue</c> is <c>true</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.HasValue(Umbraco.Core.Models.IPublishedContent,System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether the content has a value for a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="recurse">A value indicating whether to navigate the tree upwards until a property with a value is found.</param>
            <returns>A value indicating whether the content has a value for the property identified by the alias.</returns>
            <remarks>Returns true if <c>GetProperty(alias, recurse)</c> is not <c>null</c> and <c>GetProperty(alias, recurse).HasValue</c> is <c>true</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.HasValue(Umbraco.Core.Models.IPublishedContent,System.String,System.String,System.String)">
            <summary>
            Returns one of two strings depending on whether the content has a value for a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="valueIfTrue">The value to return if the content has a value for the property.</param>
            <param name="valueIfFalse">The value to return if the content has no value for the property.</param>
            <returns>Either <paramref name="valueIfTrue"/> or <paramref name="valueIfFalse"/> depending on whether the content
            has a value for the property identified by the alias.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.HasValue(Umbraco.Core.Models.IPublishedContent,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Returns one of two strings depending on whether the content has a value for a property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="recurse">A value indicating whether to navigate the tree upwards until a property with a value is found.</param>
            <param name="valueIfTrue">The value to return if the content has a value for the property.</param>
            <param name="valueIfFalse">The value to return if the content has no value for the property.</param>
            <returns>Either <paramref name="valueIfTrue"/> or <paramref name="valueIfFalse"/> depending on whether the content
            has a value for the property identified by the alias.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the value of a content's property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <returns>The value of the content's property identified by the alias.</returns>
            <remarks>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, returns <c>null</c>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue(Umbraco.Core.Models.IPublishedContent,System.String,System.String)">
            <summary>
            Gets the value of a content's property identified by its alias, if it exists, otherwise a default value.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, if it exists, otherwise a default value.</returns>
            <remarks>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, returns <paramref name="defaultValue"/>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue(Umbraco.Core.Models.IPublishedContent,System.String,System.Object)">
            <summary>
            Gets the value of a content's property identified by its alias, if it exists, otherwise a default value.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, if it exists, otherwise a default value.</returns>
            <remarks>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, returns <paramref name="defaultValue"/>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue(Umbraco.Core.Models.IPublishedContent,System.String,System.Boolean)">
            <summary>
            Recursively gets the value of a content's property identified by its alias.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="recurse">A value indicating whether to recurse.</param>
            <returns>The recursive value of the content's property identified by the alias.</returns>
            <remarks>
            <para>Recursively means: walking up the tree from <paramref name="content"/>, get the first value that can be found.</para>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, returns <c>null</c>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue(Umbraco.Core.Models.IPublishedContent,System.String,System.Boolean,System.Object)">
            <summary>
            Recursively the value of a content's property identified by its alias, if it exists, otherwise a default value.
            </summary>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="recurse">A value indicating whether to recurse.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, if it exists, otherwise a default value.</returns>
            <remarks>
            <para>Recursively means: walking up the tree from <paramref name="content"/>, get the first value that can be found.</para>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, returns <paramref name="defaultValue"/>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue``1(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the value of a content's property identified by its alias, converted to a specified type.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <returns>The value of the content's property identified by the alias, converted to the specified type.</returns>
            <remarks>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, or if it could not be converted, returns <c>default(T)</c>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue``1(Umbraco.Core.Models.IPublishedContent,System.String,``0)">
            <summary>
            Gets the value of a content's property identified by its alias, converted to a specified type, if it exists, otherwise a default value.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, converted to the specified type, if it exists, otherwise a default value.</returns>
            <remarks>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, or if it could not be converted, returns <paramref name="defaultValue"/>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue``1(Umbraco.Core.Models.IPublishedContent,System.String,System.Boolean)">
            <summary>
            Recursively gets the value of a content's property identified by its alias, converted to a specified type.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="recurse">A value indicating whether to recurse.</param>
            <returns>The value of the content's property identified by the alias, converted to the specified type.</returns>
            <remarks>
            <para>Recursively means: walking up the tree from <paramref name="content"/>, get the first value that can be found.</para>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, or if it could not be converted, returns <c>default(T)</c>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetPropertyValue``1(Umbraco.Core.Models.IPublishedContent,System.String,System.Boolean,``0)">
            <summary>
            Recursively gets the value of a content's property identified by its alias, converted to a specified type, if it exists, otherwise a default value.
            </summary>
            <typeparam name="T">The target property type.</typeparam>
            <param name="content">The content.</param>
            <param name="alias">The property alias.</param>
            <param name="recurse">A value indicating whether to recurse.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the content's property identified by the alias, converted to the specified type, if it exists, otherwise a default value.</returns>
            <remarks>
            <para>Recursively means: walking up the tree from <paramref name="content"/>, get the first value that can be found.</para>
            <para>The value comes from <c>IPublishedProperty</c> field <c>Value</c> ie it is suitable for use when rendering content.</para>
            <para>If no property with the specified alias exists, or if the property has no value, or if it could not be converted, returns <paramref name="defaultValue"/>.</para>
            <para>If eg a numeric property wants to default to 0 when value source is empty, this has to be done in the converter.</para>
            <para>The alias is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.ToContentSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the content enumerable as a content set.
            </summary>
            <param name="source">The content enumerable.</param>
            <returns>A content set wrapping the content enumerable.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.ToContentSet``1(System.Linq.IOrderedEnumerable{``0})">
            <summary>
            Returns the ordered content enumerable as an ordered content set.
            </summary>
            <param name="source">The ordered content enumerable.</param>
            <returns>A ordered content set wrapping the ordered content enumerable.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsVisible(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets a value indicating whether the content is visible.
            </summary>
            <param name="content">The content.</param>
            <returns>A value indicating whether the content is visible.</returns>
            <remarks>A content is not visible if it has an umbracoNaviHide property with a value of "1". Otherwise,
            the content is visible.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsDocumentType(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Determines whether the specified content is a specified content type.
            </summary>
            <param name="content">The content to determine content type of.</param>
            <param name="docTypeAlias">The alias of the content type to test against.</param>
            <returns>True if the content is of the specified content type; otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.IsDocumentType(Umbraco.Core.Models.IPublishedContent,System.String,System.Boolean)">
            <summary>
            Determines whether the specified content is a specified content type or it's derived types.
            </summary>
            <param name="content">The content to determine content type of.</param>
            <param name="docTypeAlias">The alias of the content type to test against.</param>
            <param name="recursive">When true, recurses up the content type tree to check inheritance; when false just calls IsDocumentType(this IPublishedContent content, string docTypeAlias).</param>
            <returns>True if the content is of the specified content type or a derived content type; otherwise false.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the ancestors of the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The ancestors of the content, in down-top order.</returns>
            <remarks>Does not consider the content itself.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors(Umbraco.Core.Models.IPublishedContent,System.Int32)">
            <summary>
            Gets the ancestors of the content, at a level lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The ancestors of the content, at a level lesser or equal to the specified level, in down-top order.</returns>
            <remarks>Does not consider the content itself. Only content that are "high enough" in the tree are returned.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the ancestors of the content, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The ancestors of the content, of the specified content type, in down-top order.</returns>
            <remarks>Does not consider the content itself. Returns all ancestors, of the specified content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors``1(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the ancestors of the content, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The ancestors of the content, of the specified content type, in down-top order.</returns>
            <remarks>Does not consider the content itself. Returns all ancestors, of the specified content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestors``1(Umbraco.Core.Models.IPublishedContent,System.Int32)">
            <summary>
            Gets the ancestors of the content, at a level lesser or equal to a specified level, and of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The ancestors of the content, at a level lesser or equal to the specified level, and of the specified
            content type, in down-top order.</returns>
            <remarks>Does not consider the content itself. Only content that are "high enough" in the trees, and of the
            specified content type, are returned.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the content and its ancestors.
            </summary>
            <param name="content">The content.</param>
            <returns>The content and its ancestors, in down-top order.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Core.Models.IPublishedContent,System.Int32)">
            <summary>
            Gets the content and its ancestors, at a level lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The content and its ancestors, at a level lesser or equal to the specified level,
            in down-top order.</returns>
            <remarks>Only content that are "high enough" in the tree are returned. So it may or may not begin
            with the content itself, depending on its level.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the content and its ancestors, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The content and its ancestors, of the specified content type, in down-top order.</returns>
            <remarks>May or may not begin with the content itself, depending on its content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf``1(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the content and its ancestors, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The content and its ancestors, of the specified content type, in down-top order.</returns>
            <remarks>May or may not begin with the content itself, depending on its content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorsOrSelf``1(Umbraco.Core.Models.IPublishedContent,System.Int32)">
            <summary>
            Gets the content and its ancestor, at a lever lesser or equal to a specified level, and of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The content and its ancestors, at a level lesser or equal to the specified level, and of the specified
            content type, in down-top order.</returns>
            <remarks>May or may not begin with the content itself, depending on its level and content type.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the ancestor of the content, ie its parent.
            </summary>
            <param name="content">The content.</param>
            <returns>The ancestor of the content.</returns>
            <remarks>This method is here for consistency purposes but does not make much sense.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor(Umbraco.Core.Models.IPublishedContent,System.Int32)">
            <summary>
            Gets the nearest ancestor of the content, at a lever lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The nearest (in down-top order) ancestor of the content, at a level lesser or equal to the specified level.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the nearest ancestor of the content, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAlias">The content type alias.</param>
            <returns>The nearest (in down-top order) ancestor of the content, of the specified content type.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor``1(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the nearest ancestor of the content, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The nearest (in down-top order) ancestor of the content, of the specified content type.</returns>
            <remarks>Does not consider the content itself. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Ancestor``1(Umbraco.Core.Models.IPublishedContent,System.Int32)">
            <summary>
            Gets the nearest ancestor of the content, at the specified level and of the specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The ancestor of the content, at the specified level and of the specified content type.</returns>
            <remarks>Does not consider the content itself. If the ancestor at the specified level is
            not of the specified type, returns <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the content or its nearest ancestor.
            </summary>
            <param name="content">The content.</param>
            <returns>The content.</returns>
            <remarks>This method is here for consistency purposes but does not make much sense.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf(Umbraco.Core.Models.IPublishedContent,System.Int32)">
            <summary>
            Gets the content or its nearest ancestor, at a lever lesser or equal to a specified level.
            </summary>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns>The content or its nearest (in down-top order) ancestor, at a level lesser or equal to the specified level.</returns>
            <remarks>May or may not return the content itself depending on its level. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the content or its nearest ancestor, of a specified content type.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAlias">The content type.</param>
            <returns>The content or its nearest (in down-top order) ancestor, of the specified content type.</returns>
            <remarks>May or may not return the content itself depending on its content type. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf``1(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the content or its nearest ancestor, of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The content or its nearest (in down-top order) ancestor, of the specified content type.</returns>
            <remarks>May or may not return the content itself depending on its content type. May return <c>null</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.AncestorOrSelf``1(Umbraco.Core.Models.IPublishedContent,System.Int32)">
            <summary>
            Gets the content or its nearest ancestor, at a lever lesser or equal to a specified level, and of a specified content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <param name="maxLevel">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.EnumerateAncestors(Umbraco.Core.Models.IPublishedContent,System.Boolean)">
            <summary>
            Enumerates ancestors of the content, bottom-up.
            </summary>
            <param name="content">The content.</param>
            <param name="orSelf">Indicates whether the content should be included.</param>
            <returns>Enumerates bottom-up ie walking up the tree (parent, grand-parent, etc).</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.DescendantsOrSelf(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IPublishedContent},System.String)">
            <summary>
            Returns all DescendantsOrSelf of all content referenced
            </summary>
            <param name="parentNodes"></param>
            <param name="docTypeAlias"></param>
            <returns></returns>
            <remarks>
            This can be useful in order to return all nodes in an entire site by a type when combined with TypedContentAtRoot
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.DescendantsOrSelf``1(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IPublishedContent})">
            <summary>
            Returns all DescendantsOrSelf of all content referenced
            </summary>
            <param name="parentNodes"></param>
            <returns></returns>
            <remarks>
            This can be useful in order to return all nodes in an entire site by a type when combined with TypedContentAtRoot
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Parent``1(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the parent of the content, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The parent of content, of the given content type, else null.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Children(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the children of the content.
            </summary>
            <param name="content">The content.</param>
            <returns>The children of the content.</returns>
            <remarks>
            <para>Children are sorted by their sortOrder.</para>
            <para>This method exists for consistency, it is the same as calling content.Children as a property.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Children(Umbraco.Core.Models.IPublishedContent,System.Func{Umbraco.Core.Models.IPublishedContent,System.Boolean})">
            <summary>
            Gets the children of the content, filtered by a predicate.
            </summary>
            <param name="content">The content.</param>
            <param name="predicate">The predicate.</param>
            <returns>The children of the content, filtered by the predicate.</returns>
            <remarks>
            <para>Children are sorted by their sortOrder.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.Children``1(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Gets the children of the content, of a given content type.
            </summary>
            <typeparam name="T">The content type.</typeparam>
            <param name="content">The content.</param>
            <returns>The children of content, of the given content type.</returns>
            <remarks>
            <para>Children are sorted by their sortOrder.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.ChildrenAsTable(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the children of the content in a DataTable.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAliasFilter">An optional content type alias.</param>
            <returns>The children of the content.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GenerateDataTable(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Gets the children of the content in a DataTable.
            </summary>
            <param name="content">The content.</param>
            <param name="contentTypeAliasFilter">An optional content type alias.</param>
            <returns>The children of the content.</returns>
        </member>
        <member name="M:Umbraco.Web.PublishedContentExtensions.GetCulture(Umbraco.Core.Models.IPublishedContent,System.Uri)">
            <summary>
            Gets the culture that would be selected to render a specified content,
            within the context of a specified current request.
            </summary>
            <param name="content">The content.</param>
            <param name="current">The request Uri.</param>
            <returns>The culture that would be selected to render the content.</returns>
        </member>
        <member name="P:Umbraco.Web.PublishedContentExtensions.GetPropertyAliasesAndNames">
            <summary>
            This is used only for unit tests to set the delegate to look up aliases/names dictionary of a content type
            </summary>
        </member>
        <member name="T:Umbraco.Web.ExamineExtensions">
            <summary>
            Extension methods for Examine
            </summary>
        </member>
        <member name="T:Umbraco.Web.FormlessPage">
            <summary>
            A formless page for use with the rendering a control in a page via Server.Execute. 
            This ignores the check to check for a form control on the page.
            </summary>
            <remarks>
            UmbracoHelper currently uses this for rendering macros but could be used anywhere we want when rendering
            a page with Server.Execute. 
            SD: I have a custom MVC engine that uses this in my own internal libs if we want to pull it out which is called ViewManager
            and works really well for things like this.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.HtmlHelperRenderExtensions">
            <summary>
            HtmlHelper extensions for use in templates
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.RenderProfiler(System.Web.Mvc.HtmlHelper)">
            <summary>
            Renders the markup for the profiler
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.AreaPartial(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
            <summary>
            Renders a partial view that is found in the specified area
            </summary>
            <param name="helper"></param>
            <param name="partial"></param>
            <param name="area"></param>
            <param name="model"></param>
            <param name="viewData"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.PreviewBadge(System.Web.Mvc.HtmlHelper)">
            <summary>
            Will render the preview badge when in preview mode which is not required ever unless the MVC page you are
            using does not inherit from UmbracoTemplatePage
            </summary>
            <param name="helper"></param>
            <returns></returns>
            <remarks>
            See: http://issues.umbraco.org/issue/U4-1614
            </remarks>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            A validation summary that lets you pass in a prefix so that the summary only displays for elements 
            containing the prefix. This allows you to have more than on validation summary on a page.
            </summary>
            <param name="htmlHelper"></param>
            <param name="prefix"></param>
            <param name="excludePropertyErrors"></param>
            <param name="message"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Action``1(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Returns the result of a child action of a strongly typed SurfaceController
            </summary>
            <typeparam name="T"></typeparam>
            <param name="htmlHelper"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Type)">
            <summary>
            Returns the result of a child action of a SurfaceController
            </summary>
            <typeparam name="T"></typeparam>
            <param name="htmlHelper"></param>
            <param name="actionName"></param>
            <param name="surfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline against a locally declared controller
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="surfaceType">The surface controller to route to</param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm``1(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="html"></param>
            <param name="action"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Mvc.FormMethod)">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.BeginUmbracoForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper method to create a new form to execute in the Umbraco request pipeline to a surface controller plugin
            </summary>
            <param name="html"></param>
            <param name="action"></param>
            <param name="controllerName"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.RenderForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.String,System.Object)">
            <summary>
            This renders out the form for us
            </summary>
            <param name="htmlHelper"></param>
            <param name="formAction"></param>
            <param name="method"></param>
            <param name="htmlAttributes"></param>
            <param name="surfaceController"></param>
            <param name="surfaceAction"></param>
            <param name="area"></param>		
            <param name="additionalRouteVals"></param>
            <returns></returns>
            <remarks>
            This code is pretty much the same as the underlying MVC code that writes out the form
            </remarks>
        </member>
        <member name="T:Umbraco.Web.HtmlHelperRenderExtensions.UmbracoForm">
            <summary>
            Used for rendering out the Form for BeginUmbracoForm
            </summary>
        </member>
        <member name="M:Umbraco.Web.HtmlHelperRenderExtensions.UmbracoForm.#ctor(System.Web.Mvc.ViewContext,System.String,System.String,System.String,System.Web.Mvc.FormMethod,System.Object)">
            <summary>
            Creates an UmbracoForm
            </summary>
            <param name="viewContext"></param>
            <param name="controllerName"></param>
            <param name="controllerAction"></param>
            <param name="area"></param>
            <param name="method"></param>
            <param name="additionalRouteVals"></param>
        </member>
        <member name="T:Umbraco.Web.Scheduling.Scheduler">
            <summary>
            Used to do the scheduling for tasks, publishing, etc...
            </summary>
            <remarks>
            All tasks are run in a background task runner which is web aware and will wind down the task correctly instead of killing it completely when
            the app domain shuts down.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.Merge(System.Web.Mvc.ModelStateDictionary,System.Web.Mvc.ModelStateDictionary,System.String)">
            <summary>
            Merges ModelState that has names matching the prefix
            </summary>
            <param name="state"></param>
            <param name="dictionary"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.IsValid(System.Web.Mvc.ModelStateDictionary,System.String)">
            <summary>
            Checks if there are any model errors on any fields containing the prefix
            </summary>
            <param name="state"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.AddPropertyError(System.Web.Http.ModelBinding.ModelStateDictionary,System.ComponentModel.DataAnnotations.ValidationResult,System.String)">
            <summary>
            Adds the error to model state correctly for a property so we can use it on the client side.
            </summary>
            <param name="modelState"></param>
            <param name="result"></param>
            <param name="propertyAlias"></param>
        </member>
        <member name="M:Umbraco.Web.ModelStateExtensions.ToJsonErrors(System.Web.Mvc.ModelStateDictionary)">
            <summary>
            Serializes the ModelState to JSON for JavaScript to interrogate the errors
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.MergeModelStateToChildActionAttribute">
            <summary>
            When a ChildAction is executing and we want the ModelState from the Parent context to be merged in
            to help with validation, this filter can be used.
            </summary>
            <remarks>
            By default, this filter will only merge when an Http POST is detected but this can be modified in the ctor
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginViewEngine">
            <summary>
            A view engine to look into the App_Plugins folder for views for packaged controllers
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginViewEngine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginViewEngine.EnsureFolderAndWebConfig(System.Web.Mvc.ViewEngineResult)">
            <summary>
            Ensures that the correct web.config for razor exists in the /Views folder.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.PostedDataProxyInfo">
            <summary>
            Represents the data required to proxy a request to a surface controller for posted data
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.RouteDefinition">
            <summary>
            Represents the data required to route to a specific controller/action during an Umbraco request
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RouteDefinition.ControllerType">
            <summary>
            The Controller type found for routing to
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RouteDefinition.PublishedContentRequest">
            <summary>
            The current RenderModel found for the request
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RouteDefinition.HasHijackedRoute">
            <summary>
            Gets/sets whether the current request has a hijacked route/user controller routed for it
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.RedirectToUmbracoPageResult">
            <summary>
            Redirects to an Umbraco page by Id or Entity
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="queryStringValues"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="queryString"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.IPublishedContent,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
            <param name="queryStringValues"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="queryString"></param>
            <param name="queryStringValues"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection,Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="queryStringValues"></param>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(System.Int32,System.String,Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="pageId"></param>
            <param name="queryString"></param>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.IPublishedContent,Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.IPublishedContent,System.Collections.Specialized.NameValueCollection,Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
            <param name="queryStringValues"></param>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RedirectToUmbracoPageResult.#ctor(Umbraco.Core.Models.IPublishedContent,System.String,Umbraco.Web.UmbracoContext)">
            <summary>
            Creates a new RedirectToUmbracoResult
            </summary>
            <param name="publishedContent"></param>
            <param name="queryString"></param>
            <param name="umbracoContext"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.Strings.WebConfigTemplate">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;configuration&gt;
            
              &lt;configSections&gt;
                &lt;sectionGroup name=&quot;system.web.webPages.razor&quot; type=&quot;System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;&gt;
                  &lt;section name=&quot;host&quot; type=&quot;System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot; requirePermission=&quot;false&quot; /&gt;
                  &lt;section name=&quot;page [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginControllerArea">
            <summary>
            A custom area for controllers that are plugins
            </summary>	
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginControllerArea.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Web.Mvc.PluginControllerMetadata})">
            <summary>
            The constructor accepts all types of plugin controllers and will verify that ALL of them have the same areaName assigned to them 
            based on their PluginControllerAttribute. If they are not the same an exception will be thrown.
            </summary>
            <param name="pluginControllers"></param>		
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginControllerArea.MapRouteSurfaceControllers(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Umbraco.Web.Mvc.PluginControllerMetadata})">
            <summary>
            Registers all surface controller routes
            </summary>
            <param name="routes"></param>
            <param name="surfaceControllers"></param>
            <remarks>
            The routes will be:
            
            /Umbraco/[AreaName]/[ControllerName]/[Action]/[Id]
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.PluginControllerArea.MapRouteApiControllers(System.Web.Routing.RouteCollection,System.Collections.Generic.IEnumerable{Umbraco.Web.Mvc.PluginControllerMetadata})">
            <summary>
            Registers all api controller routes
            </summary>
            <param name="routes"></param>
            <param name="apiControllers"></param>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginControllerAttribute">
            <summary>
            An attribute applied to a plugin controller that requires that it is routed to its own area
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.SurfaceControllerFactory">
            <summary>
            Creates SurfaceControllers
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderControllerFactory">
            <summary>
            A controller factory for the render pipeline of Umbraco. This controller factory tries to create a controller with the supplied
            name, and falls back to UmbracoController if none was found.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderControllerFactory.CanHandle(System.Web.Routing.RequestContext)">
            <summary>
            Determines whether this instance can handle the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if this instance can handle the specified request; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Creates the controller
            </summary>
            <param name="requestContext"></param>
            <param name="controllerName"></param>
            <returns></returns>
            <remarks>
            We always set the correct ActionInvoker on our custom created controller, this is very important for route hijacking!
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceControllerFactory.CanHandle(System.Web.Routing.RequestContext)">
            <summary>
            Check if the correct data tokens are in the route values so that we know its a surface controller route
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.SurfaceControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Create the controller
            </summary>
            <param name="requestContext"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.PluginControllerMetadata">
            <summary>
            Represents some metadata about the controller
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.PluginControllerMetadata.IsBackOffice">
            <summary>
            This is determined by another attribute [IsBackOffice] which slightly modifies the route path 
            allowing us to determine if it is indeed a back office request or not
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoPageResult">
            <summary>
            Used by posted forms to proxy the result to the page in which the current URL matches on
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.ExecuteControllerAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.IController)">
            <summary>
            Executes the controller action
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.ResetRouteData(System.Web.Routing.RouteData)">
            <summary>
            Since we could be returning the current page from a surface controller posted values in which the routing values are changed, we 
            need to revert these values back to nothing in order for the normal page to render again.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.ValidateRouteData(System.Web.Routing.RouteData)">
            <summary>
            Validate that the current page execution is not being handled by the normal umbraco routing system
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.EnsureViewContextForWebForms(System.Web.Mvc.ControllerContext)">
            <summary>
            When POSTing to MVC but rendering in WebForms we need to do some trickery, we'll create a dummy viewcontext with all of the
            current modelstate, tempdata, viewdata so that if we're rendering partial view macros within the webforms view, they will
            get all of this merged into them.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.CopyControllerData(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerBase)">
            <summary>
            Ensure ModelState, ViewData and TempData is copied across
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.CreateController(System.Web.Mvc.ControllerContext,System.Web.Mvc.IControllerFactory,Umbraco.Web.Mvc.RouteDefinition)">
            <summary>
            Creates a controller using the controller factory
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.UmbracoPageResult.CleanupController(System.Web.Mvc.IController,System.Web.Mvc.IControllerFactory)">
            <summary>
            Cleans up the controller by releasing it using the controller factory, and by disposing it.
            </summary>
        </member>
        <member name="T:Umbraco.Web.PropertyEditors.ValueConverters.RteMacroRenderingValueConverter">
            <summary>
            A value converter for TinyMCE that will ensure any macro content is rendered properly even when 
            used dynamically.
            </summary>
        </member>
        <member name="T:Umbraco.Web.RenderFieldCaseType">
            <summary>
            Used in the .Field method when rendering an Umbraco field to specify what case type it should be
            </summary>
        </member>
        <member name="T:Umbraco.Web.RenderFieldEncodingType">
            <summary>
            Used in the .Field method to render an Umbraco field to specify what encoding to use
            </summary>
        </member>
        <member name="M:Umbraco.Web.RouteCollectionExtensions.MapUmbracoRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,Umbraco.Web.Mvc.UmbracoVirtualNodeRouteHandler,System.Object,System.String[])">
            <summary>
            Maps an Umbraco route with an UmbracoVirtualNodeRouteHandler
            </summary>
            <param name="routes"></param>
            <param name="name"></param>
            <param name="url"></param>
            <param name="defaults"></param>
            <param name="virtualNodeHandler"></param>
            <param name="constraints"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String[])">
            <summary>
            Routes a webapi controller with namespaces
            </summary>
            <param name="routes"></param>
            <param name="name"></param>
            <param name="url"></param>
            <param name="defaults"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.RouteCollectionExtensions.RegisterArea``1(System.Web.Routing.RouteCollection)">
            <summary>
            Extension method to manually regsiter an area
            </summary>
            <typeparam name="T"></typeparam>
            <param name="routes"></param>
        </member>
        <member name="T:Umbraco.Web.Routing.AliasUrlProvider">
            <summary>
            Provides urls using the <c>umbracoUrlAlias</c> property.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.AliasUrlProvider.GetUrl(Umbraco.Web.UmbracoContext,System.Int32,System.Uri,Umbraco.Web.Routing.UrlProviderMode)">
            <summary>
            Gets the nice url of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <param name="mode">The url mode.</param>
            <returns>The url for the published content.</returns>
            <remarks>
            <para>The url is absolute or relative depending on url indicated by <c>current</c> and settings, unless
            <c>absolute</c> is true, in which case the url is always absolute.</para>
            <para>If the provider is unable to provide a url, it should return <c>null</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.AliasUrlProvider.GetOtherUrls(Umbraco.Web.UmbracoContext,System.Int32,System.Uri)">
            <summary>
            Gets the other urls of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <returns>The other urls for the published content.</returns>
            <remarks>
            <para>Other urls are those that <c>GetUrl</c> would not return in the current context, but would be valid
            urls for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByLegacy404">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that runs the legacy 404 logic.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByLegacy404.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="pcr">The <c>PublishedContentRequest</c>.</param>		
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByNotFoundHandler`1">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that runs a legacy NotFoundHandler.
            </summary>
            <remarks>Provided for backward compatibility.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByNotFoundHandler`1.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="pcr">The <c>PublishedContentRequest</c>.</param>		
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByPageIdQuery">
            <summary>
            This looks up a document by checking for the umbPageId of a request/query string
            </summary>
            <remarks>
            This is used by library.RenderTemplate and also some of the macro rendering functionality like in
            insertMacro.aspx and macroResultWrapper.aspx
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Mvc.SurfaceControllerResolver.SurfaceControllers">
            <summary>
            Gets the surface controllers
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.SurfaceControllerResolver.RegisteredSurfaceControllers">
            <summary>
            Gets all of the surface controller types
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByNotFoundHandlers">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that runs legacy <c>INotFoundHandler</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByNotFoundHandlers.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="docRequest">The <c>PublishedContentRequest</c>.</param>
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.ISiteDomainHelper">
            <summary>
            Provides utilities to handle site domains.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.ISiteDomainHelper.MapDomain(System.Uri,Umbraco.Web.Routing.DomainAndUri[])">
            <summary>
            Filters a list of <c>DomainAndUri</c> to pick one that best matches the current request.
            </summary>
            <param name="current">The Uri of the current request.</param>
            <param name="domainAndUris">The list of <c>DomainAndUri</c> to filter.</param>
            <returns>The selected <c>DomainAndUri</c>.</returns>
            <remarks>
            <para>If the filter is invoked then <paramref name="domainAndUris"/> is _not_ empty and
            <paramref name="current"/> is _not_ null, and <paramref name="current"/> could not be
            matched with anything in <paramref name="domainAndUris"/>.</para>
            <para>The filter _must_ return something else an exception will be thrown.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ISiteDomainHelper.MapDomains(System.Uri,Umbraco.Web.Routing.DomainAndUri[],System.Boolean)">
            <summary>
            Filters a list of <c>DomainAndUri</c> to pick those that best matches the current request.
            </summary>
            <param name="current">The Uri of the current request.</param>
            <param name="domainAndUris">The list of <c>DomainAndUri</c> to filter.</param>
            <param name="excludeDefault">A value indicating whether to exclude the current/default domain.</param>
            <returns>The selected <c>DomainAndUri</c> items.</returns>
            <remarks>The filter must return something, even empty, else an exception will be thrown.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.RoutableAttemptEventArgs">
            <summary>
            Event args containing information about why the request was not routable, or if it is routable
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.UmbracoRequestEventArgs">
            <summary>
            Event args used for event launched during a request (like in the UmbracoModule)
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.DefaultUrlProvider">
            <summary>
            Provides urls.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.DefaultUrlProvider.GetUrl(Umbraco.Web.UmbracoContext,System.Int32,System.Uri,Umbraco.Web.Routing.UrlProviderMode)">
            <summary>
            Gets the nice url of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <param name="mode">The url mode.</param>
            <returns>The url for the published content.</returns>
            <remarks>
            <para>The url is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the provider is unable to provide a url, it should return <c>null</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DefaultUrlProvider.GetOtherUrls(Umbraco.Web.UmbracoContext,System.Int32,System.Uri)">
            <summary>
            Gets the other urls of a published content.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <returns>The other urls for the published content.</returns>
            <remarks>
            <para>Other urls are those that <c>GetUrl</c> would not return in the current context, but would be valid
            urls for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.DomainAndUri">
            <summary>
            Represents an Umbraco domain and its normalized uri.
            </summary>
            <remarks>
            <para>In Umbraco it is valid to create domains with name such as <c>example.com</c>, <c>https://www.example.com</c>, <c>example.com/foo/</c>.</para>
            <para>The normalized uri of a domain begins with a scheme and ends with no slash, eg <c>http://example.com/</c>, <c>https://www.example.com/</c>, <c>http://example.com/foo/</c>.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainAndUri.#ctor(umbraco.cms.businesslogic.web.Domain,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.DomainAndUri"/> class with a Domain and a uri scheme.
            </summary>
            <param name="domain">The domain.</param>
            <param name="scheme">The uri scheme.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainAndUri.ToString">
            <summary>
            Gets a string that represents the <see cref="T:Umbraco.Web.Routing.DomainAndUri"/> instance.
            </summary>
            <returns>A string that represents the current <see cref="T:Umbraco.Web.Routing.DomainAndUri"/> instance.</returns>
        </member>
        <member name="P:Umbraco.Web.Routing.DomainAndUri.Domain">
            <summary>
            Gets or sets the Umbraco domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.DomainAndUri.Uri">
            <summary>
            Gets or sets the normalized uri of the domain.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.SiteDomainHelper">
            <summary>
            Provides utilities to handle site domains.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.Clear">
            <summary>
            Clears the entire configuration.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.AddSite(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
            <param name="domains">The site domains.</param>
            <remarks>At the moment there is no public way to remove a site. Clear and reconfigure.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.AddSite(System.String,System.String[])">
            <summary>
            Adds a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
            <param name="domains">The site domains.</param>
            <remarks>At the moment there is no public way to remove a site. Clear and reconfigure.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.RemoveSite(System.String)">
            <summary>
            Removes a site.
            </summary>
            <param name="key">A key uniquely identifying the site.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.BindSites(System.String[])">
            <summary>
            Binds some sites.
            </summary>
            <param name="keys">The keys uniquely identifying the sites to bind.</param>
            <remarks>
            <para>At the moment there is no public way to unbind sites. Clear and reconfigure.</para>
            <para>If site1 is bound to site2 and site2 is bound to site3 then site1 is bound to site3.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.MapDomain(System.Uri,Umbraco.Web.Routing.DomainAndUri[])">
            <summary>
            Filters a list of <c>DomainAndUri</c> to pick one that best matches the current request.
            </summary>
            <param name="current">The Uri of the current request.</param>
            <param name="domainAndUris">The list of <c>DomainAndUri</c> to filter.</param>
            <returns>The selected <c>DomainAndUri</c>.</returns>
            <remarks>
            <para>If the filter is invoked then <paramref name="domainAndUris"/> is _not_ empty and
            <paramref name="current"/> is _not_ null, and <paramref name="current"/> could not be
            matched with anything in <paramref name="domainAndUris"/>.</para>
            <para>The filter _must_ return something else an exception will be thrown.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelper.MapDomains(System.Uri,Umbraco.Web.Routing.DomainAndUri[],System.Boolean)">
            <summary>
            Filters a list of <c>DomainAndUri</c> to pick those that best matches the current request.
            </summary>
            <param name="current">The Uri of the current request.</param>
            <param name="domainAndUris">The list of <c>DomainAndUri</c> to filter.</param>
            <param name="excludeDefault">A value indicating whether to exclude the current/default domain.</param>
            <returns>The selected <c>DomainAndUri</c> items.</returns>
            <remarks>The filter must return something, even empty, else an exception will be thrown.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.SiteDomainHelper.ConfigWriteLock">
            <summary>
            Returns a disposable object that represents safe write access to config.
            </summary>
            <remarks>Should be used in a <c>using(SiteDomainHelper.ConfigWriteLock) { ... }</c>  mode.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.SiteDomainHelper.ConfigReadLock">
            <summary>
            Returns a disposable object that represents safe read access to config.
            </summary>
            <remarks>Should be used in a <c>using(SiteDomainHelper.ConfigWriteLock) { ... }</c>  mode.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.SiteDomainHelperResolver">
            <summary>
            Resolves the <see cref="T:Umbraco.Web.Routing.ISiteDomainHelper"/> implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelperResolver.#ctor(Umbraco.Web.Routing.ISiteDomainHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.SiteDomainHelperResolver"/> class with an <see cref="T:Umbraco.Web.Routing.ISiteDomainHelper"/> implementation.
            </summary>
            <param name="helper">The <see cref="T:Umbraco.Web.Routing.ISiteDomainHelper"/> implementation.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.SiteDomainHelperResolver.SetHelper(Umbraco.Web.Routing.ISiteDomainHelper)">
            <summary>
            Can be used by developers at runtime to set their IDomainHelper at app startup
            </summary>
            <param name="helper"></param>
        </member>
        <member name="P:Umbraco.Web.Routing.SiteDomainHelperResolver.Helper">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Web.Routing.ISiteDomainHelper"/> implementation.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.UrlProviderResolver">
            <summary>
            Resolves IUrlProvider objects.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProviderResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.UrlProviderResolver"/> class with an initial list of provider types.
            </summary>
            <param name="providerTypes">The list of provider types.</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProviderResolver.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.UrlProviderResolver"/> class with an initial list of provider types.
            </summary>
            <param name="providerTypes">The list of provider types.</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.UrlProviderResolver.Providers">
            <summary>
            Gets the providers.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.NotFoundHandlerHelper.GetCurrentNotFoundPageId(Umbraco.Core.Configuration.UmbracoSettings.IContentErrorPage[],System.String,Umbraco.Core.Services.IEntityService,Umbraco.Web.PublishedContentQuery)">
            <summary>
            Returns the Umbraco page id to use as the Not Found page based on the configured 404 pages and the current request
            </summary>
            <param name="error404Collection"></param>
            <param name="requestServerName">
            The server name attached to the request, normally would be the source of HttpContext.Current.Request.ServerVariables["SERVER_NAME"]
            </param>
            <param name="entityService"></param>
            <param name="publishedContentQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Routing.NotFoundHandlerHelper.GetContentIdFromErrorPageConfig(Umbraco.Core.Configuration.UmbracoSettings.IContentErrorPage,Umbraco.Core.Services.IEntityService,Umbraco.Web.PublishedContentQuery)">
            <summary>
            Returns the content id based on the configured IContentErrorPage section
            </summary>
            <param name="errorPage"></param>
            <param name="entityService"></param>
            <param name="publishedContentQuery"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Routing.EnsureRoutableOutcome">
            <summary>
            Reasons a request was not routable on the front-end
            </summary>
        </member>
        <member name="T:Umbraco.Web.Security.LegacyDefaultAppMapping">
            <summary>
            This is used specifically to assign a default 'app' to a particular section in order to validate the 
            currently logged in user's allowed applications
            </summary>
            <remarks>
            This relates to these issues:
            http://issues.umbraco.org/issue/U4-2021
            http://issues.umbraco.org/issue/U4-529
            
            In order to fix these issues we need to pass in an 'app' parameter but since we don't want to break compatibility 
            we will create this mapping to map a 'default application' to a section action (like creating or deleting)
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Security.LegacyDefaultAppMapping.#cctor">
            <summary>
            Constructor that assigns all initial known mappings
            </summary>
        </member>
        <member name="M:Umbraco.Web.Security.LegacyDefaultAppMapping.AddNodeTypeMappingForCreateDialog(System.String,System.String)">
            <summary>
            Adds the default app mapping to the node type
            </summary>
            <param name="nodeType">The nodeType is the same nodeType found in the UI.xml</param>
            <param name="defaultApp">The default app associated with this nodeType if the 'app' parameter was not detected</param>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.#ctor(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.PublishedContentRequestEngine"/> class with a content request.
            </summary>
            <param name="pcr">The content request.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.PrepareRequest">
            <summary>
            Prepares the request.
            </summary>
            <returns>
            Returns false if the request was not successfully prepared
            </returns>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.ConfigureRequest">
            <summary>
            Called by PrepareRequest once everything has been discovered, resolved and assigned to the PCR. This method
            finalizes the PCR with the values assigned.
            </summary>
            <returns>
            Returns false if the request was not successfully configured
            </returns>
            <remarks>
            This method logic has been put into it's own method in case developers have created a custom PCR or are assigning their own values
            but need to finalize it themselves.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.UpdateRequestOnMissingTemplate">
            <summary>
            Updates the request when there is no template to render the content.
            </summary>
            <remarks>This is called from Mvc when there's a document to render but no template.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.FindDomain">
            <summary>
            Finds the site root (if any) matching the http request, and updates the PublishedContentRequest accordingly.
            </summary>        
            <returns>A value indicating whether a domain was found.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.HandleWildcardDomains">
            <summary>
            Looks for wildcard domains in the path and updates <c>Culture</c> accordingly.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.FindTemplateRenderingEngine(System.String)">
            <summary>
            Finds the rendering engine to use to render a template specified by its alias.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>The rendering engine, or Unknown if the template was not found.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.FindPublishedContentAndTemplate">
            <summary>
            Finds the Umbraco document (if any) matching the request, and updates the PublishedContentRequest accordingly.
            </summary>
            <returns>A value indicating whether a document and template were found.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.FindPublishedContent">
            <summary>
            Tries to find the document matching the request, by running the IPublishedContentFinder instances.
            </summary>
            <exception cref="T:System.InvalidOperationException">There is no finder collection.</exception>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.HandlePublishedContent">
            <summary>
            Handles the published content (if any).
            </summary>
            <remarks>
            Handles "not found", internal redirects, access validation...
            things that must be handled in one place because they can create loops
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.FollowInternalRedirects">
            <summary>
            Follows internal redirections through the <c>umbracoInternalRedirectId</c> document property.
            </summary>
            <returns>A value indicating whether redirection took place and led to a new published document.</returns>
            <remarks>
            <para>Redirecting to a different site root and/or culture will not pick the new site root nor the new culture.</para>
            <para>As per legacy, if the redirect does not work, we just ignore it.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.EnsurePublishedContentAccess">
            <summary>
            Ensures that access to current node is permitted.
            </summary>
            <remarks>Redirecting to a different site root and/or culture will not pick the new site root nor the new culture.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.FindTemplate">
            <summary>
            Finds a template for the current node, if any.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequestEngine.FollowExternalRedirect">
            <summary>
            Follows external redirection through <c>umbracoRedirect</c> document property.
            </summary>
            <remarks>As per legacy, if the redirect does not work, we just ignore it.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.UrlProvider">
            <summary>
            Provides urls.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.#ctor(Umbraco.Web.UmbracoContext,System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.IUrlProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.UrlProvider"/> class with an Umbraco context and a list of url providers.
            </summary>
            <param name="umbracoContext">The Umbraco context.</param>
            <param name="urlProviders">The list of url providers.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetUrl(System.Int32)">
            <summary>
            Gets the url of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <returns>The url for the published content.</returns>
            <remarks>
            <para>The url is absolute or relative depending on <c>Mode</c> and on the current url.</para>
            <para>If the provider is unable to provide a url, it returns "#".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetUrl(System.Int32,System.Boolean)">
            <summary>
            Gets the nice url of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <param name="absolute">A value indicating whether the url should be absolute in any case.</param>
            <returns>The url for the published content.</returns>
            <remarks>
            <para>The url is absolute or relative depending on <c>Mode</c> and on <c>current</c>, unless
            <c>absolute</c> is true, in which case the url is always absolute.</para>
            <para>If the provider is unable to provide a url, it returns "#".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetUrl(System.Int32,System.Uri,System.Boolean)">
            <summary>
            Gets the nice url of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <param name="absolute">A value indicating whether the url should be absolute in any case.</param>
            <returns>The url for the published content.</returns>
            <remarks>
            <para>The url is absolute or relative depending on <c>Mode</c> and on <c>current</c>, unless
            <c>absolute</c> is true, in which case the url is always absolute.</para>
            <para>If the provider is unable to provide a url, it returns "#".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetUrl(System.Int32,Umbraco.Web.Routing.UrlProviderMode)">
            <summary>
            Gets the nice url of a published content.
            </summary>
            <param name="id">The published content identifier.</param>
            <param name="mode">The url mode.</param>
            <returns>The url for the published content.</returns>
            <remarks>
            <para>The url is absolute or relative depending on <c>mode</c> and on the current url.</para>
            <para>If the provider is unable to provide a url, it returns "#".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetUrl(System.Int32,System.Uri,Umbraco.Web.Routing.UrlProviderMode)">
            <summary>
            Gets the nice url of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <param name="mode">The url mode.</param>
            <returns>The url for the published content.</returns>
            <remarks>
            <para>The url is absolute or relative depending on <c>mode</c> and on <c>current</c>.</para>
            <para>If the provider is unable to provide a url, it returns "#".</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetOtherUrls(System.Int32)">
            <summary>
            Gets the other urls of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <returns>The other urls for the published content.</returns>
            <remarks>
            <para>Other urls are those that <c>GetUrl</c> would not return in the current context, but would be valid
            urls for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            <para>The results depend on the current url.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.UrlProvider.GetOtherUrls(System.Int32,System.Uri)">
            <summary>
            Gets the other urls of a published content.
            </summary>
            <param name="id">The published content id.</param>
            <param name="current">The current absolute url.</param>
            <returns>The other urls for the published content.</returns>
            <remarks>
            <para>Other urls are those that <c>GetUrl</c> would not return in the current context, but would be valid
            urls for the node in other contexts (different domain for current request, umbracoUrlAlias...).</para>
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.UrlProvider.Mode">
            <summary>
            Gets or sets the provider url mode.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Search.ExamineEvents">
            <summary>
            Used to wire up events for Examine
            </summary>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Once the application has started we should bind to all events and initialize the providers.
            </summary>
            <param name="httpApplication"></param>
            <param name="applicationContext"></param>
            <remarks>
            We need to do this on the Started event as to guarantee that all resolvers are setup properly.
            </remarks>		
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.ContentTypeCacheRefresherCacheUpdated(Umbraco.Web.Cache.ContentTypeCacheRefresher,Umbraco.Core.Cache.CacheRefresherEventArgs)">
            <summary>
            This is used to refresh content indexers IndexData based on the DataService whenever a content type is changed since
            properties may have been added/removed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            See: http://issues.umbraco.org/issue/U4-4798
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.MediaCacheRefresherCacheUpdated(Umbraco.Web.Cache.MediaCacheRefresher,Umbraco.Core.Cache.CacheRefresherEventArgs)">
            <summary>
            Handles index management for all media events - basically handling saving/copying/trashing/deleting
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.PublishedPageCacheRefresherCacheUpdated(Umbraco.Web.Cache.PageCacheRefresher,Umbraco.Core.Cache.CacheRefresherEventArgs)">
            <summary>
            Handles index management for all published content events - basically handling published/unpublished
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            This will execute on all servers taking part in load balancing
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.UnpublishedPageCacheRefresherCacheUpdated(Umbraco.Web.Cache.UnpublishedPageCacheRefresher,Umbraco.Core.Cache.CacheRefresherEventArgs)">
            <summary>
            Handles index management for all unpublished content events - basically handling saving/copying/deleting
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            This will execute on all servers taking part in load balancing
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.IndexerDocumentWriting(System.Object,Examine.LuceneEngine.DocumentWritingEventArgs)">
            <summary>
            Event handler to create a lower cased version of the node name, this is so we can support case-insensitive searching and still
            use the Whitespace Analyzer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.DeleteIndexForEntity(System.Int32,System.Boolean)">
            <summary>
            Remove items from any index that doesn't support unpublished content
            </summary>
            <param name="entityId"></param>
            <param name="keepIfUnpublished">
            If true, indicates that we will only delete this item from indexes that don't support unpublished content.
            If false it will delete this from all indexes regardless.
            </param>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.ReIndexForContent(Umbraco.Core.Models.IContent,System.Boolean)">
            <summary>
            Re-indexes a content item whether published or not but only indexes them for indexes supporting unpublished content
            </summary>
            <param name="sender"></param>
            <param name="isContentPublished">
            Value indicating whether the item is published or not
            </param>
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.ToXDocument(umbraco.cms.businesslogic.Content,System.Boolean)">
            <summary>
            Converts a content node to XDocument
            </summary>
            <param name="node"></param>
            <param name="cacheOnly">true if data is going to be returned from cache</param>
            <returns></returns>		
        </member>
        <member name="M:Umbraco.Web.Search.ExamineEvents.ToXDocument(umbraco.cms.businesslogic.Content)">
            <summary>
            Converts a content node to Xml
            </summary>
            <param name="node"></param>
            <returns></returns>		
        </member>
        <member name="T:Umbraco.Web.Strategies.DataTypes.LegacyUploadFieldWorkaround">
            <summary>
            Before Save Content/Media subscriber that checks for Upload fields and updates related fields accordingly.
            </summary>
            <remarks>
            This is an intermediate fix for the legacy DataTypeUploadField and the FileHandlerData, so that properties
            are saved correctly when using the Upload field on a (legacy) Document or Media class.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Strategies.Migrations.PublishAfterUpgradeToVersionSixth">
            <summary>
            This event ensures that upgrades from (configured) versions lower then 6.0.0
            have their publish state updated after the database schema has been migrated.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Strategies.Migrations.EnsureAppsTreesUpdatedOnUpgrade">
            <summary>
            This is kind of a hack to ensure that Apps and Trees that might still reside in the db is
            written to the 'new' applications.config and trees.config files upon upgrade to version 6.0
            </summary>
        </member>
        <member name="T:Umbraco.Web.Strategies.ServerRegistrationEventHandler">
            <summary>
            This will ensure that the server is automatically registered in the database as an active node 
            on application startup and whenever a back office request occurs.
            </summary>
            <remarks>
            We do this on app startup to ensure that the server is in the database but we also do it for the first 'x' times
            a back office request is made so that we can tell if they are using https protocol which would update to that address
            in the database. The first front-end request probably wouldn't be an https request.
            
            For back office requests (so that we don't constantly make db calls), we'll only update the database when we detect at least
            a timespan of 1 minute between requests.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Strategies.ServerRegistrationEventHandler.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Update the database with this entry and bind to request events
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="T:Umbraco.Web.Templates.TemplateRenderer">
            <summary>
            This is used purely for the RenderTemplate functionality in Umbraco
            </summary>
            <remarks>
            This allows you to render either an MVC or Webforms template based purely off of a node id and an optional alttemplate id as string output.	
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Templates.TemplateRenderer.RenderUmbracoRequestToString(System.Web.Routing.RequestContext)">
            <summary>
            This will execute the UmbracoMvcHandler for the request specified and get the string output.
            </summary>
            <param name="requestContext">
            Assumes the RequestContext is setup specifically to render an Umbraco view.
            </param>
            <returns></returns>
            <remarks>
            To acheive this we temporarily change the output text writer of the current HttpResponse, then
              execute the controller via the handler which innevitably writes the result to the text writer
              that has been assigned to the response. Then we change the response textwriter back to the original
              before continuing .
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Templates.TemplateRenderer.SaveExistingItems">
            <summary>
            Save all items that we know are used for rendering execution to variables so we can restore after rendering
            </summary>
        </member>
        <member name="M:Umbraco.Web.Templates.TemplateRenderer.RestoreItems">
            <summary>
            Restores all items back to their context's to continue normal page rendering execution
            </summary>
        </member>
        <member name="P:Umbraco.Web.Templates.TemplateRenderer.PageId">
            <summary>
            Gets/sets the page id for the template to render
            </summary>
        </member>
        <member name="P:Umbraco.Web.Templates.TemplateRenderer.AltTemplate">
            <summary>
            Gets/sets the alt template to render if there is one
            </summary>
        </member>
        <member name="T:Umbraco.Web.Templates.TemplateUtilities">
            <summary>
            Utility class used for templates
            </summary>
        </member>
        <member name="M:Umbraco.Web.Templates.TemplateUtilities.ParseInternalLinks(System.String)">
            <summary>
            Parses the string looking for the {localLink} syntax and updates them to their correct links.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Templates.TemplateUtilities.ResolveUrlsFromTextString(System.String)">
            <summary>
            The RegEx matches any HTML attribute values that start with a tilde (~), those that match are passed to ResolveUrl to replace the tilde with the application path.
            </summary>
            <param name="text"></param>
            <returns></returns>
            <remarks>
            When used with a Virtual-Directory set-up, this would resolve all URLs correctly.
            The recommendation is that the "ResolveUrlsFromTextString" option (in umbracoSettings.config) is set to false for non-Virtual-Directory installs.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Trees.PartialViewMacrosTree">
            <summary>
            Tree for displaying partial view macros in the developer app
            </summary>
        </member>
        <member name="T:Umbraco.Web.Trees.PartialViewsTree">
            <summary>
            Tree for displaying partial views in the settings app
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.FileSystemTree.OnRenderFileNode(umbraco.cms.presentation.Trees.XmlTreeNode@)">
            <summary>
            Inheritors can override this method to modify the file node that is created.
            </summary>
            <param name="xNode"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.FileSystemTree.OnRenderFolderNode(umbraco.cms.presentation.Trees.XmlTreeNode@)">
            <summary>
            Inheritors can override this method to modify the folder node that is created.
            </summary>
            <param name="xNode"></param>
        </member>
        <member name="M:Umbraco.Web.Trees.PartialViewsTree.OnRenderFolderNode(umbraco.cms.presentation.Trees.XmlTreeNode@)">
            <summary>
            Ensures that no folders can be added
            </summary>
            <param name="xNode"></param>
        </member>
        <member name="M:Umbraco.Web.Trees.PartialViewMacrosTree.OnRenderFolderNode(umbraco.cms.presentation.Trees.XmlTreeNode@)">
            <summary>
            Ensures that no folders can be added
            </summary>
            <param name="xNode"></param>
        </member>
        <member name="T:Umbraco.Web.UI.Controls.InsertMacroSplitButton">
            <summary>
            Represents the 'insert macro' button when editing a template which includes the drop down list selector
            </summary>
            <remarks>
            Though this would be nicer to do in a UserControl, unfortunatley the way that the ScrollingMenu control is designed it seems that 
            we have to insert all items via code and loading a UserControl in dynamically is equally ugly. 
            </remarks>
        </member>
        <member name="T:Umbraco.Web.UI.Controls.UmbracoControl">
            <summary>
            A control that exposes the helpful Umbraco context objects
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.Controls.UmbracoControl.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Default constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.UI.Controls.UmbracoControl.#ctor">
            <summary>
            Empty constructor, uses Singleton to resolve the UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoControl.Umbraco">
            <summary>
            Returns an UmbracoHelper object
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoControl.Url">
            <summary>
            Returns a UrlHelper
            </summary>
            <remarks>
            This URL helper is created without any route data and an empty request context
            </remarks>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.UmbracoControl.SqlHelper">
            <summary>
            Returns the legacy SqlHelper
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.InsertMacroSplitButton.ClientCallbackOpenMacroModel">
            <summary>
            The JS callback to display the dialog modal screen to customize the macro to be inserted into the editor if the
            macro has parameters.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UI.Controls.InsertMacroSplitButton.ClientCallbackInsertMacroMarkup">
            <summary>
            The JS callback method which accepts an 'alias' parameter that is invoked when clicking the macro button
            to insert a macro that has no parameters.
            </summary>
        </member>
        <member name="T:Umbraco.Web.UI.LegacyDialogHandler">
            <summary>
            This is used to replace the old umbraco.presentation.create.dialogHandler_temp class which is used
            to handle sections create/delete actions.
            </summary>
            <remarks>
            We need to overhaul how all of this is handled which is why this is a legacy class
            http://issues.umbraco.org/issue/U4-1373
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UI.LegacyDialogHandler.GetTaskForOperation(System.Web.HttpContextBase,umbraco.BusinessLogic.User,Umbraco.Web.UI.LegacyDialogHandler.Operation,System.String)">
            <summary>
            Gets the ITask for the operation for the node Type
            </summary>
            <param name="umbracoUser"></param>
            <param name="op"></param>
            <param name="nodeType"></param>
            <param name="httpContext"></param>
            <returns>
            Returns the ITask if one is found and can be made, otherwise null
            </returns>
            <remarks>
            This will first check if we've already created the ITask in the current Http request
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UI.LegacyDialogHandler.UserHasCreateAccess(System.Web.HttpContextBase,umbraco.BusinessLogic.User,System.String)">
            <summary>
            Checks if the user has access to launch the ITask that matches the node type based on the app assigned
            </summary>
            <param name="httpContext"></param>
            <param name="umbracoUser"></param>
            <param name="nodeType"></param>
            <returns></returns>
            <remarks>
            If the ITask doesn't implement LegacyDialogTask then we will return 'true' since we cannot validate
            the application assigned.
            
            TODO: Create an API to assign a nodeType to an app so developers can manually secure it
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UI.LegacyDialogHandler.UserHasDeleteAccess(System.Web.HttpContextBase,umbraco.BusinessLogic.User,System.String)">
            <summary>
            Checks if the user has access to launch the ITask that matches the node type based on the app assigned
            </summary>
            <param name="httpContext"></param>
            <param name="umbracoUser"></param>
            <param name="nodeType"></param>
            <returns></returns>
            <remarks>
            If the ITask doesn't implement LegacyDialogTask then we will return 'true' since we cannot validate
            the application assigned.
            
            TODO: Create an API to assign a nodeType to an app so developers can manually secure it
            </remarks>
        </member>
        <member name="T:Umbraco.Web.UI.Pages.ClientTools">
            <summary>
            Renders the client side code necessary to interact with the Umbraco client side API.
            Each method returns an instance of this class so you can chain calls together.
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.ClearClientTreeCache">
            <summary>
            This removes all tree JSON data cached in the client browser.
            Useful when you want to ensure that the tree is reloaded from live data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.ShiftApp(System.String)">
            <summary>
            Change applications
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.RefreshAdmin(System.Int32)">
            <summary>
            Refresh the entire administration console after a specified amount of time.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.RefreshTree">
            <summary>
            Refreshes the entire current tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.ShowSpeechBubble(Umbraco.Web.UI.SpeechBubbleIcon,System.String,System.String)">
            <summary>
            A reference to the umbraco UI component "speechbubble". The speechbubble appears in the lower right corner of the screen, notifying users of events
            </summary>
            <param name="i">The speechbubble icon.</param>
            <param name="header">The speechbubble header.</param>
            <param name="body">The body text</param>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.ChangeContentFrameUrl(System.String)">
            <summary>
            Changes the content in the content frame to the specified URL
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.ShowDashboard(System.String)">
            <summary>
            Shows the dashboard for the given application
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.ChildNodeCreated">
            <summary>
            Reloads the children of the current action node and selects the node that didn't exist there before.
            If the client side system cannot determine which node is new, then no node is selected.		
            </summary>
            <remarks>
            This is used by many create dialogs, however the sync method should be used based on the full path of the
            node but because the current Umbraco implementation of ITask only returns a url to load, there's no way
            to determine what the full path of the new child is.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.SyncTree(System.String,System.Boolean)">
            <summary>
            Synchronizes the tree to the path specified.
            </summary>
            <param name="path"></param>
            <param name="forceReload">
            If set to true, will ensure that the node to be synced has it's data 
            reloaded from the server. Otherwise, if the node already exists, the tree will simply sync to the node
            that is already there.
            </param>
            <remarks>
            This will work for any tree, however you would need to know the path of the node. Currently, media and content
            are the only trees that store a path, however, if you were working in the template tree for example, a path to a
            node could be "init,1090" and this method would still work.
            
            Sync tree will works by syncing the active tree type. This can be specified explicitly by calling SetActiveTreeType. 
            This will allow developers to sync many trees in one application at one time if needed.
            </remarks>
            <example>
            <![CDATA[
            //if you had both the media and content trees in the same app, you could sync both at the same
            //time by doing:
            BasePage.Current.ClientTools
            	.SetActiveTreeType("content")
            		.SyncTree("-1,100,200")
            	.SetActiveTreeType("media")
            		.SyncTree("-1,323,355");
            ]]>
            </example>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.ReloadActionNode(System.Boolean,System.Boolean)">
            <summary>
            Reloads only the last node that the user interacted with via the context menu. To reload a specify node, use SyncTree.
            </summary>
            <param name="reselect"></param>
            <param name="reloadChildren"></param>
            <remarks>
            If for whatever reason the client side system cannot just refresh the one node, the system will use jsTree's built in 
            refresh tool, this however won't allow for reselect or reloadChildren. Most trees will work with the single node
            refresh but 3rd party tools may have poorly built tree data models.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.SetActiveTreeType(System.String)">
            <summary>
            When the application searches for a node, it searches for nodes in specific tree types.
            If SyncTree is used, it will sync the tree nodes with the active tree type, therefore if
            a developer wants to sync a specific tree, they can call this method to set the type to sync.
            </summary>
            <remarks>
            Each branch of a particular tree should theoretically be the same type, however, developers can
            override the type of each branch in their BaseTree's but this is not standard practice. If there
            are multiple types of branches in one tree, then only those branches that have the Active tree type
            will be searched for syncing.
            </remarks>
            <param name="treeType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.CloseModalWindow(System.String)">
            <summary>
            Closes the Umbraco dialog window if it is open
            </summary>
            <param name="returnVal">specify a value to return to add to the onCloseCallback method if one was specified in the OpenModalWindow method</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.CloseModalWindow">
            <summary>
            Closes the umbraco dialog window if it is open
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.OpenModalWindow(System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Opens a modal window
            </summary>
            <param name="url"></param>
            <param name="name"></param>
            <param name="height"></param>
            <param name="showHeader"></param>
            <param name="width"></param>
            <param name="top"></param>
            <param name="leftOffset"></param>
            <param name="closeTriggers"></param>
            <param name="onCloseCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UI.Pages.ClientTools.RegisterClientScript(System.String)">
            <summary>
            This will use the ScriptManager to register the script if one is available, otherwise will default to the ClientScript
            class of the page.
            </summary>
            <param name="script"></param>
        </member>
        <member name="T:Umbraco.Web.UI.Pages.ClientTools.Scripts">
            <summary>
            Returns the string markup for the JavaScript that is rendered.
            If referencing JavaScript scripts in the backend, this class should be used
            in case future changes to the client code is change, this will remain intact.
            </summary>
        </member>
        <member name="F:Umbraco.Web.UI.SpeechBubbleIcon.Save">
            <summary>
            Save icon
            </summary>
        </member>
        <member name="F:Umbraco.Web.UI.SpeechBubbleIcon.Info">
            <summary>
            Info icon
            </summary>
        </member>
        <member name="F:Umbraco.Web.UI.SpeechBubbleIcon.Error">
            <summary>
            Error icon
            </summary>
        </member>
        <member name="F:Umbraco.Web.UI.SpeechBubbleIcon.Success">
            <summary>
            Success icon
            </summary>
        </member>
        <member name="F:Umbraco.Web.UI.SpeechBubbleIcon.Warning">
            <summary>
            Warning icon
            </summary>
        </member>
        <member name="T:umbraco.AttributeCollectionAdapter">
            <summary>
            Class that adapts an <see cref="T:System.Web.UI.AttributeCollection"/> to the <see cref="T:System.Collections.IDictionary"/> interface.
            </summary>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.#ctor(System.Web.UI.AttributeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.AttributeCollectionAdapter"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary"/> object is read-only.
            </exception>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.CopyTo(System.Array,System.Int32)">
            <summary>Not implemented.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="T:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator">
            <summary>
            <see cref="T:System.Collections.IDictionaryEnumerator"/> for the <see cref="T:umbraco.AttributeCollectionAdapter"/> class.
            </summary>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator.#ctor(umbraco.AttributeCollectionAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and the value of the current dictionary entry.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry.
            </exception>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The key of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry.
            </exception>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <value></value>
            <returns>
            The value of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry.
            </exception>
        </member>
        <member name="P:umbraco.AttributeCollectionAdapter.AttributeCollectionAdapterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="T:umbraco.UmbracoDefault">
            <summary>
            The codebehind class for the main default.aspx page that does the webforms rendering in Umbraco
            </summary>
            <remarks>
            We would move this to the UI project but there is a public API property and some protected properties which people may be using so 
            we cannot move it.
            </remarks>
        </member>
        <member name="M:umbraco.UmbracoDefault.FireBeforeRequestInit(umbraco.RequestInitEventArgs)">
            <summary>
            Raises the <see cref="E:umbraco.UmbracoDefault.BeforeRequestInit"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.UmbracoDefault.FireAfterRequestInit(umbraco.RequestInitEventArgs)">
            <summary>
            Raises the <see cref="E:umbraco.UmbracoDefault.AfterRequestInit"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.UmbracoDefault.ValidateRequest">
            <summary>
            To turn off request validation set this to false before the PageLoad event. This equivalent to the validateRequest page directive
            and has nothing to do with "normal" validation controls. Default value is true.
            </summary>
        </member>
        <member name="E:umbraco.UmbracoDefault.BeforeRequestInit">
            <summary>
            occurs before the umbraco page is initialized for rendering.
            </summary>
        </member>
        <member name="E:umbraco.UmbracoDefault.AfterRequestInit">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="T:umbraco.UmbracoDefault.TempDataController">
            <summary>
            Simply used to clear temp data
            </summary>
        </member>
        <member name="T:umbraco.UmbracoDefault.RequestInitEventHandler">
            <summary>
            The preinit event handler
            </summary>
        </member>
        <member name="F:umbraco.presentation.channels.wlwmanifest.xhtml">
            <summary>
            xhtml control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.moveOrCopy">
            <summary>
            Summary description for moveOrCopy.
            </summary>
        </member>
        <member name="M:umbraco.dialogs.moveOrCopy.CheckPermissions(Umbraco.Core.Models.IContentBase,umbraco.interfaces.IAction)">
            <summary>
            Checks if the current user has permissions to execute this action against this node
            </summary>
            <param name="node"></param>
            <param name="currentAction"></param>
            <returns></returns>
            <remarks>
            This used to do a recursive check for all descendent nodes but this is not required and is a massive CPU hog.
            See: http://issues.umbraco.org/issue/U4-2632, https://groups.google.com/forum/?fromgroups=#!topic/umbraco-dev/L1D4LwVSP2Y
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.feedback">
            <summary>
            feedback control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.pane_form">
            <summary>
            pane_form control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.JTree">
            <summary>
            JTree control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.pp_relate">
            <summary>
            pp_relate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.RelateDocuments">
            <summary>
            RelateDocuments control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.pane_form_notice">
            <summary>
            pane_form_notice control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.pane_settings">
            <summary>
            pane_settings control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.masterType">
            <summary>
            masterType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.panel_buttons">
            <summary>
            panel_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.moveOrCopy.ok">
            <summary>
            ok control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.sort">
            <summary>
            Summary description for sort.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.sort.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.sort.JsInclude2">
            <summary>
            JsInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.sort.prog1">
            <summary>
            prog1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.sort.sortDone">
            <summary>
            sortDone control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.sort.sortPane">
            <summary>
            sortPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.sort.lt_nodes">
            <summary>
            lt_nodes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.publish">
            <summary>
            Summary description for publish.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.publish.masterPagePrefix">
            <summary>
            masterPagePrefix control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.publish.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.publish.TheForm">
            <summary>
            TheForm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.publish.PublishAll">
            <summary>
            PublishAll control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.publish.PublishUnpublishedItems">
            <summary>
            PublishUnpublishedItems control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.publish.ok">
            <summary>
            ok control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.publish.ProgBar1">
            <summary>
            ProgBar1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.publish.theEnd">
            <summary>
            theEnd control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.publish.feedbackMsg">
            <summary>
            feedbackMsg control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.macroResultWrapper">
            <summary>
            Summary description for macroResultWrapper.
            </summary>
        </member>
        <member name="F:umbraco.presentation.macroResultWrapper.Form1">
            <summary>
            Form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.macroResultWrapper.PlaceHolder1">
            <summary>
            PlaceHolder1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages._default.ContentPlaceHolderDefault">
            <summary>
            ContentPlaceHolderDefault control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.publishStatus">
            <summary>
            Summary description for publishStatus.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.publishStatus.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.publishStatus.Form1">
            <summary>
            Form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.publishStatus.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco._Default">
            <summary>
            Summary description for _Default.
            </summary>
        </member>
        <member name="F:umbraco._Default.Form1">
            <summary>
            Form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.tree">
            <summary>
            This still outputs the xml format of the tree in case developers are using it.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.tree.Page_Load(System.Object,System.EventArgs)">
            <summary>
            This checks to see which request parameters have been set for the Tree xml service
            to run. If there is no Tree Type specified, then this will return the xml structure
            of the initial tree nodes for all trees required for the current application. Otherwise
            this will return thre required tree xml based on the request parameters specified.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.cms.presentation.tree.LoadAppTrees(System.String)">
            <summary>
            If the application supports multiple trees, then this function iterates over all of the trees assigned to it
            and creates their top level nodes and context menus.
            </summary>
            <param name="appAlias"></param>
        </member>
        <member name="M:umbraco.cms.presentation.tree.LoadTree(System.String)">
            <summary>
            This will load the particular ITree object and call it's render method to get the nodes that need to be rendered.
            </summary>
            <param name="appAlias"></param>
            <param name="treeAlias"></param>
        </member>
        <member name="M:umbraco.cms.presentation.tree.LoadNullTree">
            <summary>
            Load an empty tree structure to show the end user that there was a problem loading the tree.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.tree.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:umbraco.presentation.ping.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:umbraco.PartialViewMacroTasks">
            <summary>
            The UI 'tasks' for the create dialog and delete processes
            </summary>
        </member>
        <member name="T:umbraco.PartialViewTasks">
            <summary>
            The UI 'tasks' for the create dialog and delete processes
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.developer.editMacro">
            <summary>
            Summary description for editMacro.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.developer.editMacro.PopulateFieldsOnLoad(Umbraco.Core.Models.IMacro,System.String,System.String)">
            <summary>
            Populates the control (textbox) values on page load
            </summary>
            <param name="macro"></param>
            <param name="macroAssemblyValue"></param>
            <param name="macroTypeValue"></param>
        </member>
        <member name="M:umbraco.cms.presentation.developer.editMacro.SetMacroValuesFromPostBack(Umbraco.Core.Models.IMacro,System.Int32,System.String,System.String)">
            <summary>
            Sets the values on the Macro object from the values posted back before saving the macro
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.TabView1">
            <summary>
            TabView1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.Pane1">
            <summary>
            Pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroPane">
            <summary>
            macroPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroName">
            <summary>
            macroName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroAlias">
            <summary>
            macroAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.Pane1_2">
            <summary>
            Pane1_2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroXslt">
            <summary>
            macroXslt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.xsltFiles">
            <summary>
            xsltFiles control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroUserControl">
            <summary>
            macroUserControl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.userControlList">
            <summary>
            userControlList control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.assemblyBrowserUserControl">
            <summary>
            assemblyBrowserUserControl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroAssembly">
            <summary>
            macroAssembly control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroType">
            <summary>
            macroType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.assemblyBrowser">
            <summary>
            assemblyBrowser control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroPython">
            <summary>
            macroPython control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.pythonFiles">
            <summary>
            pythonFiles control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.Pane1_3">
            <summary>
            Pane1_3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.Table1">
            <summary>
            Table1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroEditor">
            <summary>
            macroEditor control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroRenderContent">
            <summary>
            macroRenderContent control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.Pane1_4">
            <summary>
            Pane1_4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.Table3">
            <summary>
            Table3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.cachePeriod">
            <summary>
            cachePeriod control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.cacheByPage">
            <summary>
            cacheByPage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.cachePersonalized">
            <summary>
            cachePersonalized control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.Panel2">
            <summary>
            Panel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editMacro.macroProperties">
            <summary>
            macroProperties control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editPython.UmbracoPanel1">
            <summary>
            UmbracoPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editPython.Pane1">
            <summary>
            Pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editPython.pp_filename">
            <summary>
            pp_filename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editPython.pythonFileName">
            <summary>
            pythonFileName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editPython.pp_testing">
            <summary>
            pp_testing control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editPython.SkipTesting">
            <summary>
            SkipTesting control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editPython.pp_errorMsg">
            <summary>
            pp_errorMsg control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editPython.pythonSource">
            <summary>
            pythonSource control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.developer.editXslt">
            <summary>
            Summary description for editXslt.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.UmbracoPanel1">
            <summary>
            UmbracoPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.pane1">
            <summary>
            Pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.pp_filename">
            <summary>
            pp_filename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.xsltFileName">
            <summary>
            xsltFileName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.pp_testing">
            <summary>
            pp_testing control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.SkipTesting">
            <summary>
            SkipTesting control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.pp_errorMsg">
            <summary>
            pp_errorMsg control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.editorSource">
            <summary>
            editorSource control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.editXslt.editorJs">
            <summary>
            editorJs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.editMacro">
            <summary>
            Summary description for insertMacro.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.editMacro.pl_edit">
            <summary>
            pl_edit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.editMacro.pane_edit">
            <summary>
            pane_edit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.editMacro.macroProperties">
            <summary>
            macroProperties control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.editMacro.pl_insert">
            <summary>
            pl_insert control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.editMacro.pane_insert">
            <summary>
            pane_insert control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.editMacro.pp_chooseMacro">
            <summary>
            pp_chooseMacro control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.editMacro.umb_macroAlias">
            <summary>
            umb_macroAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.editMacro.bt_insert">
            <summary>
            bt_insert control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.editMacro.renderHolder">
            <summary>
            renderHolder control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.umbracoField">
            <summary>
            Summary description for umbracoField.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.JsInclude2">
            <summary>
            JsInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.tagName">
            <summary>
            tagName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pane_form">
            <summary>
            pane_form control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_insertField">
            <summary>
            pp_insertField control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.fieldPicker">
            <summary>
            fieldPicker control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_insertAltField">
            <summary>
            pp_insertAltField control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.altFieldPicker">
            <summary>
            altFieldPicker control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_insertAltText">
            <summary>
            pp_insertAltText control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_recursive">
            <summary>
            pp_recursive control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_insertBefore">
            <summary>
            pp_insertBefore control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_insertAfter">
            <summary>
            pp_insertAfter control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_FormatAsDate">
            <summary>
            pp_FormatAsDate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_casing">
            <summary>
            pp_casing control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_encode">
            <summary>
            pp_encode control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_convertLineBreaks">
            <summary>
            pp_convertLineBreaks control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.umbracoField.pp_removePTags">
            <summary>
            pp_removePTags control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.treePicker.DialogTree">
            <summary>
            DialogTree control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.ClientLoader">
            <summary>
            ClientLoader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.CssInclude1">
            <summary>
            CssInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.CssInclude2">
            <summary>
            CssInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude2">
            <summary>
            JsInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude8">
            <summary>
            JsInclude8 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude9">
            <summary>
            JsInclude9 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude4">
            <summary>
            JsInclude4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude5">
            <summary>
            JsInclude5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude6">
            <summary>
            JsInclude6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude7">
            <summary>
            JsInclude7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsInclude3">
            <summary>
            JsInclude3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.JsIncludeHotkeys">
            <summary>
            JsIncludeHotkeys control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.head">
            <summary>
            head control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.ScriptManager1">
            <summary>
            ScriptManager1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.body">
            <summary>
            body control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoPage.footer">
            <summary>
            footer control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.Head1">
            <summary>
            Head1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.ClientLoader">
            <summary>
            ClientLoader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.CssInclude1">
            <summary>
            CssInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.JsInclude3">
            <summary>
            JsInclude3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.JsInclude6">
            <summary>
            JsInclude6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.JsInclude4">
            <summary>
            JsInclude4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.JsInclude2">
            <summary>
            JsInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.head">
            <summary>
            head control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.ScriptManager1">
            <summary>
            ScriptManager1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.body">
            <summary>
            body control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.masterpages.umbracoDialog.footer">
            <summary>
            footer control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.Search.QuickSearch">
            <summary>
            	Summary description for quickEdit.
            </summary>
        </member>
        <member name="F:umbraco.presentation.Search.QuickSearch.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.Search.QuickSearch.JsInclude3">
            <summary>
            JsInclude3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.settings.EditContentTypeNew.tmpPane">
            <summary>
            tmpPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.settings.EditContentTypeNew.templateList">
            <summary>
            templateList control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.settings.EditContentTypeNew.ddlTemplates">
            <summary>
            ddlTemplates control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.settings.editTemplate">
            <summary>
            Summary description for editTemplate.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.settings.editTemplate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.CssInclude1">
            <summary>
            CssInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.JsInclude">
            <summary>
            JsInclude control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.Pane7">
            <summary>
            Pane7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.pp_name">
            <summary>
            pp_name control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.NameTxt">
            <summary>
            NameTxt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.pp_alias">
            <summary>
            pp_alias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.AliasTxt">
            <summary>
            AliasTxt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.pp_masterTemplate">
            <summary>
            pp_masterTemplate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.MasterTemplate">
            <summary>
            MasterTemplate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.pp_source">
            <summary>
            pp_source control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.editorSource">
            <summary>
            editorSource control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.rpt_codeTemplates">
            <summary>
            rpt_codeTemplates control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.settings.editTemplate.rpt_macros">
            <summary>
            rpt_macros control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.settings.modal.ShowUmbracoTags">
            <summary>
            Summary description for ShowUmbracoTags.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.settings.modal.ShowUmbracoTags.Pane7">
            <summary>
            Pane7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.uQuery">
            <summary>
            namespacing this interface, as only relevant to uQuery
            </summary>
            <summary>
            uQuery - static helper methods
            </summary>
            <summary>
            Static helper methods
            </summary>
            <summary>
            Static helper methods
            </summary>
            <summary>
            uQuery sub-class for Nodes
            </summary>
            <summary>
            Static helper methods
            </summary>
        </member>
        <member name="M:umbraco.uQuery.GetPublishedXml(umbraco.uQuery.UmbracoObjectType)">
            <summary>
            Constructs the XML source from the cmsContentXml table used for Media and Members.
            </summary>
            <param name="umbracoObjectType">an UmbracoObjectType value</param>
            <returns>XML built from the cmsContentXml table</returns>
        </member>
        <member name="M:umbraco.uQuery.IsLegacyXmlSchema">
            <summary>
            Checks the Umbraco XML Schema version in use
            </summary>
            <returns>true if using the old XML schema, else false if using the new XML schema</returns>
        </member>
        <member name="M:umbraco.uQuery.GetCsvIds(System.String)">
            <summary>
            build a string array from a csv
            </summary>
            <param name="csv">string of comma seperated values</param>
            <returns>An array of node ids as string.</returns>
        </member>
        <member name="M:umbraco.uQuery.GetXmlIds(System.String)">
            <summary>
            Gets Ids from known XML fragments (as saved by the MNTP / XPath CheckBoxList)
            </summary>
            <param name="xml">The Xml</param>
            <returns>An array of node ids as integer.</returns>
        </member>
        <member name="M:umbraco.uQuery.GetIdFromQueryString">
            <summary>
            Gets an Id value from the QueryString
            </summary>
            <returns>an id as a string or string.empty</returns>
        </member>
        <member name="M:umbraco.uQuery.ConvertToIntArray(System.String[])">
            <summary>
            Converts a string array into an integer array.
            </summary>
            <param name="items">The string array.</param>
            <returns>Returns an integer array.</returns>
        </member>
        <member name="M:umbraco.uQuery.GenerateXmlDocument(System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.List{System.Int32}},System.Collections.Generic.IDictionary{System.Int32,System.Xml.XmlNode},System.Int32,System.Xml.XmlNode)">
            <summary>
            Generates an XML document.
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <param name="nodeIndex">Index of the node.</param>
            <param name="parentId">The parent id.</param>
            <param name="parentNode">The parent node.</param>
        </member>
        <member name="M:umbraco.uQuery.GetContentIdByPropertyId(System.Int32)">
            <summary>
            Gets the <c>Content</c> Id by property Id.
            </summary>
            <param name="propertyId">The property id.</param>
            <returns>Returns the <c>Content</c> Id.</returns>
        </member>
        <member name="M:umbraco.uQuery.GetAllDataTypes">
            <summary>
            Gets all datatypes sorted by a specified property name
            </summary>
            <returns>
            A sorted list of datatypes. Null if property name is wrong.
            </returns>
        </member>
        <member name="M:umbraco.uQuery.GetAllDataTypes(System.Boolean)">
            <summary>
            Gets all datatypes sorted by a specified property name
            </summary>
            <param name="sortByName">if set to <c>true</c> [sort by name].</param>
            <returns>
            A sorted list of datatypes. Null if property name is wrong.
            </returns>
        </member>
        <member name="M:umbraco.uQuery.GetBaseDataTypeGuid(System.Int32)">
            <summary>
            Gets the data type GUID.
            </summary>
            <param name="datatypeNodeId">The datatype node id.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.uQuery.GetDictionaryItem(System.String,System.String)">
            <summary>
            Gets a dictionary item if it exists. Otherwise returns the fallback string.
            </summary>
            <param name="key">The dictionary key.</param>
            <param name="fallback">The fallback.</param>
            <returns>
            A dictionary string or the fallback string
            </returns>
        </member>
        <member name="M:umbraco.uQuery.GetDictionaryItem(System.String,System.String,System.Int32)">
            <summary>
            Gets the dictionary item for a specified language. Otherwise returns the fallback string.
            </summary>
            <param name="key">The dictionary key.</param>
            <param name="fallback">The fallback.</param>
            <param name="languageId">The language id.</param>
            <returns>
            Returns the value of a dictionary item from a language id, or the fallback string.
            </returns>
        </member>
        <member name="M:umbraco.uQuery.GetDocumentsByCsv(System.String)">
            <summary>
            Get collection of Document objects from the supplied CSV of IDs
            </summary>
            <param name="csv">string csv of IDs</param>
            <returns>collection or emtpy collection</returns>
        </member>
        <member name="M:umbraco.uQuery.GetDocumentsByXml(System.String)">
            <summary>
            Gets the documents by XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.uQuery.GetCurrentDocument">
            <summary>
            checks to see if the current node can be got via the nodeFactory, and then constructed as a Document, if not then
            checks to see if there's an id parameter on the QueryString to construct a Document
            </summary>
            <returns>the current Document or null</returns>
        </member>
        <member name="M:umbraco.uQuery.GetDocument(System.String)">
            <summary>
            Get document from an ID
            </summary>
            <param name="documentId">string ID of document to get</param>
            <returns>Document or null</returns>
        </member>
        <member name="M:umbraco.uQuery.GetDocument(System.Int32)">
            <summary>
            Get media item from an ID
            </summary>
            <param name="id">ID of media item to get</param>
            <returns>Media or null</returns>
        </member>
        <member name="M:umbraco.uQuery.IsDocumentPublished(System.String)">
            <summary>
            Determines whether the specified Document is published.
            </summary>
            <param name="id">The Document's id.</param>
            <returns>
            	<c>true</c> if the specified id is published; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.uQuery.ToNameIds(System.Collections.Generic.IEnumerable{umbraco.cms.businesslogic.web.Document})">
            <summary>
            Extension method on Document collection to return key value pairs of: Id / Text
            </summary>
            <param name="documents">generic list of Document objects</param>
            <returns>a collection of document IDs and their text fields</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMediaByXPath(System.String)">
            <summary>
            Get a collection of media items from an XPath expression (note XML source is currently a flat structure)
            </summary>
            <param name="xPath">XPath expression</param>
            <returns>collection or empty collection</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMediaByCsv(System.String)">
            <summary>
            Get collection of media objects from the supplied CSV of IDs
            </summary>
            <param name="csv">string csv of IDs</param>
            <returns>collection or emtpy collection</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMediaByXml(System.String)">
            <summary>
            Gets the media by XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.uQuery.GetMediaByName(System.String)">
            <summary>
            Get Media by name
            </summary>
            <param name="name">name of node to look for</param>
            <returns>list of nodes, or empty list</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMediaByType(System.String)">
            <summary>
            Get Media by media type alias
            </summary>
            <param name="mediaTypeAlias">The media type alias</param>
            <returns>list of media, or empty list</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMedia(System.String)">
            <summary>
            Get media item from an ID
            </summary>
            <param name="mediaId">string ID of media item to get</param>
            <returns>media or null</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMedia(System.Int32)">
            <summary>
            Get media item from an ID
            </summary>
            <param name="id">ID of media item to get</param>
            <returns>Media or null</returns>
        </member>
        <member name="M:umbraco.uQuery.ToNameIds(System.Collections.Generic.IEnumerable{umbraco.cms.businesslogic.media.Media})">
            <summary>
            Extension method on Media collection to return key value pairs of: media.Id / media.Text
            </summary>
            <param name="media">generic list of Media objects</param>
            <returns>a collection of mediaIDs and their text fields</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMembersByXPath(System.String)">
            <summary>
            Get a collection of members from an XPath expression (note XML source is currently a flat structure)
            </summary>
            <param name="xPath">XPath expression</param>
            <returns>collection or empty collection</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMembersByCsv(System.String)">
            <summary>
            Get collection of member objects from the supplied CSV of IDs
            </summary>
            <param name="csv">string csv of IDs</param>
            <returns>collection or emtpy collection</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMembersByXml(System.String)">
            <summary>
            Gets the members by XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.uQuery.GetMembersByType(System.String)">
            <summary>
            Get Members by member type alias
            </summary>
            <param name="memberTypeAlias">The member type alias</param>
            <returns>list of members, or empty list</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMember(System.String)">
            <summary>
            Get member from an ID
            </summary>
            <param name="memberId">string representation of an umbraco.cms.businesslogic.member.Member object Id</param>
            <returns>member or null</returns>
        </member>
        <member name="M:umbraco.uQuery.GetMember(System.Int32)">
            <summary>
            Get member from an ID
            </summary>
            <param name="id">ID of member item to get</param>
            <returns>member or null</returns>
        </member>
        <member name="M:umbraco.uQuery.ToNameIds(System.Collections.Generic.IEnumerable{umbraco.cms.businesslogic.member.Member})">
            <summary>
            Extension method on Member collection to return key value pairs of: member.Id / member.loginName
            </summary>
            <param name="members">generic list of Member objects</param>
            <returns>a collection of memberIDs and their login names</returns>
        </member>
        <member name="F:umbraco.uQuery.RootNodeId">
            <summary>
            Gets the Root Node Id (-1)
            </summary>
        </member>
        <member name="M:umbraco.uQuery.GetNodesByXPath(System.String)">
            <summary>
            Get a collection of Umbraco Nodes from an XPath expression
            </summary>
            <param name="xpath">XPath expression to get Nodes, can use $ancestorOrSelf which will use the current Node if published, else it'll use the nearest published parent
            $currentPage will be depreciated</param>
            <returns>an empty collection or a collection of nodes</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNodesByCsv(System.String)">
            <summary>
            Returns a collection of Nodes, from a delimited list of Ids (as per the format used with UltimatePicker)
            </summary>
            <param name="csv">string csv of Ids</param>
            <returns>an empty collection or a collection or Nodes</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNodesByXml(System.String)">
            <summary>
            Builds a node collection from an XML snippet
            </summary>
            <param name="xml">
            the expected Xml snippet is that stored by the Multi-Node Tree Picker (and XPathCheckBoxList when storing Ids)
            "<MultiNodePicker>
                <nodeId>1065</nodeId>
                <nodeId>1068</nodeId>
                <nodeId>1066</nodeId>
             </MultiNodePicker>"
            </param>
            <returns>an empty list or a list of nodes</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNodesByName(System.String)">
            <summary>
            Get nodes by name
            </summary>
            <param name="name">name of node to look for</param>
            <returns>list of nodes, or empty list</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNodesByType(System.String)">
            <summary>
            Get nodes by document type alias
            </summary>
            <param name="documentTypeAlias">The document type alias</param>
            <returns>list of nodes, or empty list</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNodesByType(System.Int32)">
            <summary>
            Get nodes by document type id
            </summary>
            <param name="documentTypeId">The document type id.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.uQuery.GetNodeByUrl(System.String)">
            <summary>
            Gets the node by URL.
            </summary>
            <param name="url">url to search for</param>
            <returns>null or node matching supplied url</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNodeIdByPathLevel(System.String,System.Int32)">
            <summary>
            Gets the node id by path level.
            </summary>
            <param name="path">The path.</param>
            <param name="level">The level.</param>
            <returns>Returns the node id for a given path level.</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNodeIdByUrl(System.String)">
            <summary>
            Gets the node Id by URL.
            </summary>
            <param name="url">The URL to get the XML node from.</param>
            <returns>Returns the node Id.</returns>
            <remarks>
            <para>Thanks to Jonas Eriksson http://our.umbraco.org/member/4853 </para>
            <para>Just runs lookups to find the document, does not follow internal redirects, 404 handlers,
            page access verification, wildcard domains -- nothing.</para>
            </remarks>
        </member>
        <member name="M:umbraco.uQuery.GetRootNode">
            <summary>
            Get top level content node
            </summary>
            <returns>the top level content node</returns>
        </member>
        <member name="M:umbraco.uQuery.GetCurrentNode">
            <summary>
            checks to see if the current node can be got via the nodeFactory, if not then 
            checks to see if the current node can be got via an id on the QueryString
            </summary>
            <returns>the current node or null if not found</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNode(System.String)">
            <summary>
            Checks the supplied string can be cast to an integer, and returns the node with that Id
            </summary>
            <param name="nodeId">string representing the nodeId to return</param>
            <returns>Node or null</returns>
        </member>
        <member name="M:umbraco.uQuery.GetNode(System.Int32)">
            <summary>
            Wrapper for Node constructor
            </summary>
            <param name="id">id of Node to get</param>
            <returns>Node or null</returns>
        </member>
        <member name="M:umbraco.uQuery.ResolveXPath(System.String)">
            <summary>
            Resolves the XPath expression with any Umbraco-specific parameters.
            </summary>
            <param name="xpath">The xpath expression.</param>
            <returns>Returns an XPath expression with the Umbraco-specific parameters resolved.</returns>
        </member>
        <member name="M:umbraco.uQuery.ToNameIds(System.Collections.Generic.IEnumerable{umbraco.NodeFactory.Node})">
            <summary>
            Extension method on Node collection to return key value pairs of: node.Id / node.Name
            </summary>
            <param name="nodes">generic list of node objects</param>
            <returns>a collection of nodeIDs and their names</returns>
        </member>
        <member name="M:umbraco.uQuery.MakeNewPreValue(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Makes a new PreValue.
            </summary>
            <param name="dataTypeDefinitionId">The datatype definition id.</param>
            <param name="value">The value.</param>
            <param name="alias">The alias.</param>
            <param name="sortOrder">The sort order.</param>
            <returns>
            The inserted prevalue or null if the operation failed.
            </returns>
        </member>
        <member name="M:umbraco.uQuery.GetPreValues(System.Int32)">
            <summary>
            Gets the prevalues for a specified datatype as a strongly typed list.
            </summary>
            <param name="dataTypeDefinitionId">The datatype definition id.</param>
            <returns>The list of PreValues.</returns>
        </member>
        <member name="M:umbraco.uQuery.GetPreValues(System.Int32,System.String)">
            <summary>
            Gets the pre values.
            TODO: [OA] Document on Codeplex
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.uQuery.ReorderPreValue(System.Int32,System.Int32)">
            <summary>
            Reorders the prevalue.
            </summary>
            <param name="preValueId">The prevalue id.</param>
            <param name="sortOrder">The sort order.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.uQuery.GetUmbracoObjectType(System.String)">
            <summary>
            Get an UmbracoObjectType value from it's name
            </summary>
            <param name="name">Enum value name</param>
            <returns>an UmbracoObjectType Enum value</returns>
        </member>
        <member name="M:umbraco.uQuery.GetUmbracoObjectType(System.Guid)">
            <summary>
            Get an instance of an Umbraco Object Type enum value from it's GUID
            </summary>
            <param name="guid">Enum value GUID</param>
            <returns>an UmbracoObjectType Enum value</returns>
        </member>
        <member name="M:umbraco.uQuery.GetUmbracoObjectType(System.Int32)">
            <summary>
            Get an UmbracoObjectType value from an id in umbracoNode table
            </summary>
            <param name="id">id to search for</param>
            <returns>an UmbracoObjectType Enum value</returns>
        </member>
        <member name="P:umbraco.uQuery.SqlHelper">
            <summary>
            Gets the SqlHelper used by Umbraco
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:umbraco.uQuery.IGetProperty" -->
        <member name="M:umbraco.uQuery.IGetProperty.LoadPropertyValue(System.String)">
            <summary>
            use to inflate the strongly typed object by the string value
            </summary>
            <param name="value">the Umbraco property value stored by this property</param>
        </member>
        <member name="M:umbraco.uQuery.Members.AddMemberToGroup(System.Int32,System.Int32)">
            <summary>
            Adds the member to group.
            </summary>
            <param name="memberId">The member id.</param>
            <param name="groupId">The group id.</param>
        </member>
        <member name="M:umbraco.uQuery.Members.AddMembersToGroup(System.Int32[],System.Int32)">
            <summary>
            Adds the members to group.
            </summary>
            <param name="memberIds">The member ids.</param>
            <param name="groupId">The group id.</param>
        </member>
        <member name="M:umbraco.uQuery.Members.AddMembersToGroups(System.Int32[],System.Int32[])">
            <summary>
            Adds the members to groups.
            </summary>
            <param name="memberIds">The member ids.</param>
            <param name="groupIds">The group ids.</param>
        </member>
        <member name="M:umbraco.uQuery.Members.AddMembersToGroups(System.Int32[],System.String[])">
            <summary>
            Adds the members to groups.
            </summary>
            <param name="memberIds">The member ids.</param>
            <param name="groupNames">The group names.</param>
        </member>
        <member name="M:umbraco.uQuery.Members.RemoveMemberFromGroup(System.Int32,System.Int32)">
            <summary>
            Removes the member from group.
            </summary>
            <param name="memberId">The member id.</param>
            <param name="groupId">The group id.</param>
        </member>
        <member name="M:umbraco.uQuery.Members.RemoveMembersFromGroup(System.Int32[],System.Int32)">
            <summary>
            Removes the members from group.
            </summary>
            <param name="memberIds">The member ids.</param>
            <param name="groupId">The group id.</param>
        </member>
        <member name="M:umbraco.uQuery.Members.RemoveMembersFromGroups(System.Int32[],System.Int32[])">
            <summary>
            Removes the members from groups.
            </summary>
            <param name="memberIds">The member ids.</param>
            <param name="groupIds">The group ids.</param>
        </member>
        <member name="M:umbraco.uQuery.Members.RemoveMembersFromGroups(System.Int32[],System.String[])">
            <summary>
            Removes the members from groups.
            </summary>
            <param name="memberIds">The member ids.</param>
            <param name="groupNames">The group names.</param>
        </member>
        <member name="T:umbraco.uQuery.UmbracoObjectType">
            <summary>
            Enum used to represent the Umbraco Object Types and thier associated GUIDs
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.Unknown">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.ContentItemType">
            <summary>
            Content Item Type
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.ROOT">
            <summary>
            Root
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.Media">
            <summary>
            Media
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.MemberType">
            <summary>
            Member Type
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.MemberGroup">
            <summary>
            Member Group
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.ContentItem">
            <summary>
            Content Item
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.MediaType">
            <summary>
            "Media Type
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.DocumentType">
            <summary>
            Document Type
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.RecycleBin">
            <summary>
            Recycle Bin
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.Stylesheet">
            <summary>
            Stylesheet
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.Member">
            <summary>
            Member
            </summary>
        </member>
        <member name="F:umbraco.uQuery.UmbracoObjectType.DataType">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="T:umbraco.uQuery.GuidAttribute">
            <summary>
            Attribute to associate a GUID string with an UmbracoObjectType Enum value
            </summary>
        </member>
        <member name="F:umbraco.uQuery.GuidAttribute.guid">
            <summary>
            string representation of a Guid
            </summary>
        </member>
        <member name="M:umbraco.uQuery.GuidAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GuidAttribute class
            Sets the guid value as a string
            </summary>
            <param name="guid">a string representation of a Guid from the enum attribute</param>
        </member>
        <member name="M:umbraco.uQuery.GuidAttribute.ToString">
            <summary>
            Gets the guid as a string
            </summary>
            <returns>string of guid</returns>
        </member>
        <member name="T:umbraco.uQuery.FriendlyNameAttribute">
            <summary>
            Attribute to add a Friendly Name string with an UmbracoObjectType enum value
            </summary>
        </member>
        <member name="F:umbraco.uQuery.FriendlyNameAttribute.friendlyName">
            <summary>
            friendly name value
            </summary>
        </member>
        <member name="M:umbraco.uQuery.FriendlyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FriendlyNameAttribute class
            Sets the friendly name value
            </summary>
            <param name="friendlyName">attribute value</param>
        </member>
        <member name="M:umbraco.uQuery.FriendlyNameAttribute.ToString">
            <summary>
            Gets the friendly name
            </summary>
            <returns>string of friendly name</returns>
        </member>
        <member name="T:umbraco.XsltExtensionAttribute">
            <summary>
            Allows App_Code XSLT extensions to be declared using the [XsltExtension] class attribute.
            </summary>
            <remarks>
            An optional XML namespace can be specified using [XsltExtension("MyNamespace")].
            </remarks>
        </member>
        <member name="T:Umbraco.Web.UmbracoHelper">
            <summary>
            A helper class that provides many useful methods and functionality for using Umbraco in templates
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.#ctor">
            <summary>
            Empty constructor to create an umbraco helper for access to methods that don't have dependencies or used for testing
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.#ctor(Umbraco.Web.UmbracoContext,Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Custom constructor setting the current page to the parameter passed in
            </summary>
            <param name="umbracoContext"></param>
            <param name="content"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Standard constructor setting the current page to the page that has been routed to
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderTemplate(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Renders the template for the specified pageId and an optional altTemplateId
            </summary>
            <param name="pageId"></param>
            <param name="altTemplateId">If not specified, will use the template assigned to the node</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderMacro(System.String)">
            <summary>
            Renders the macro with the specified alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderMacro(System.String,System.Object)">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderMacro(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderMacro(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},umbraco.page)">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="alias">The alias.</param>
            <param name="parameters">The parameters.</param>
            <param name="umbracoPage">The legacy umbraco page object that is required for some macros</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.RenderMacro(umbraco.macro,System.Collections.Generic.IDictionary{System.String,System.Object},umbraco.page)">
            <summary>
            Renders the macro with the specified alias, passing in the specified parameters.
            </summary>
            <param name="m">The macro.</param>
            <param name="parameters">The parameters.</param>
            <param name="umbracoPage">The legacy umbraco page object that is required for some macros</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Field(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Umbraco.Web.RenderFieldCaseType,Umbraco.Web.RenderFieldEncodingType,System.Boolean,System.Boolean,System.String)">
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Field(Umbraco.Core.Models.IPublishedContent,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Umbraco.Web.RenderFieldCaseType,Umbraco.Web.RenderFieldEncodingType,System.Boolean,System.Boolean,System.String)">
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.GetDictionaryValue(System.String)">
            <summary>
            Returns the dictionary value for the key specified
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.IsProtected(System.Int32,System.String)">
            <summary>
            Check if a document object is protected by the "Protect Pages" functionality in umbraco
            </summary>
            <param name="documentId">The identifier of the document object to check</param>
            <param name="path">The full path of the document object to check</param>
            <returns>True if the document object is protected</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.MemberHasAccess(System.Int32,System.String)">
            <summary>
            Check if the current user has access to a document
            </summary>
            <param name="nodeId">The identifier of the document object to check</param>
            <param name="path">The full path of the document object to check</param>
            <returns>True if the current user has access or if the current document isn't protected</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.GetCurrentMember">
            <summary>
            Gets (or adds) the current member from the current request cache
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.MemberIsLoggedOn">
            <summary>
            Whether or not the current member is logged in (based on the membership provider)
            </summary>
            <returns>True is the current user is logged in</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.NiceUrl(System.Int32)">
            <summary>
            Returns a string with a friendly url from a node.
            IE.: Instead of having /482 (id) as an url, you can have
            /screenshots/developer/macros (spoken url)
            </summary>
            <param name="nodeId">Identifier for the node that should be returned</param>
            <returns>String with a friendly url from a node</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Url(System.Int32)">
            <summary>
            Gets the url of a content identified by its identifier.
            </summary>
            <param name="contentId">The content identifier.</param>
            <returns>The url for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Url(System.Int32,Umbraco.Web.Routing.UrlProviderMode)">
            <summary>
            Gets the url of a content identified by its identifier, in a specified mode.
            </summary>
            <param name="contentId">The content identifier.</param>
            <param name="mode">The mode.</param>
            <returns>The url for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.NiceUrlWithDomain(System.Int32)">
            <summary>
            This method will always add the domain to the path if the hostnames are set up correctly. 
            </summary>
            <param name="nodeId">Identifier for the node that should be returned</param>
            <returns>String with a friendly url with full domain from a node</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.UrlAbsolute(System.Int32)">
            <summary>
            Gets the absolute url of a content identified by its identifier.
            </summary>
            <param name="contentId">The content identifier.</param>
            <returns>The absolute url for the content.</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.TypedMedia(System.Object)">
            <summary>
            Overloaded method accepting an 'object' type
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            We accept an object type because GetPropertyValue now returns an 'object', we still want to allow people to pass 
            this result in to this method.
            This method will throw an exception if the value is not of type int or string.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Search(System.String,System.Boolean,System.String)">
            <summary>
            Searches content
            </summary>
            <param name="term"></param>
            <param name="useWildCards"></param>
            <param name="searchProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.Search(Examine.SearchCriteria.ISearchCriteria,Examine.Providers.BaseSearchProvider)">
            <summary>
            Searhes content
            </summary>
            <param name="criteria"></param>
            <param name="searchProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.TypedSearch(System.String,System.Boolean,System.String)">
            <summary>
            Searches content
            </summary>
            <param name="term"></param>
            <param name="useWildCards"></param>
            <param name="searchProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.TypedSearch(Examine.SearchCriteria.ISearchCriteria,Examine.Providers.BaseSearchProvider)">
            <summary>
            Searhes content
            </summary>
            <param name="criteria"></param>
            <param name="searchProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.ReplaceLineBreaksForHtml(System.String)">
            <summary>
            Replaces text line breaks with html line breaks
            </summary>
            <param name="text">The text.</param>
            <returns>The text with text line breaks replaced with html linebreaks (<br/>)</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.CreateMd5Hash(System.String)">
            <summary>
            Returns an MD5 hash of the string specified
            </summary>
            <param name="text">The text to create a hash from</param>
            <returns>Md5 has of the string</returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoHelper.CreateEncryptedRouteString(System.String,System.String,System.String,System.Object)">
            <summary>
            This is used in methods like BeginUmbracoForm and SurfaceAction to generate an encrypted string which gets submitted in a request for which
            Umbraco can decrypt during the routing process in order to delegate the request to a specific MVC Controller.
            </summary>
            <param name="controllerName"></param>
            <param name="controllerAction"></param>
            <param name="area"></param>
            <param name="additionalRouteVals"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.TagQuery">
            <summary>
            Lazy instantiates the tag context
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.ContentQuery">
            <summary>
            Lazy instantiates the query context
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.UmbracoContext">
            <summary>
            Helper method to ensure an umbraco context is set when it is needed
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoHelper.AssignedContentItem">
            <summary>
            Returns the current IPublishedContent item assigned to the UmbracoHelper
            </summary>
            <remarks>
            Note that this is the assigned IPublishedContent item to the UmbracoHelper, this is not necessarily the Current IPublishedContent item
            being rendered. This IPublishedContent object is contextual to the current UmbracoHelper instance.
            
            In some cases accessing this property will throw an exception if there is not IPublishedContent assigned to the Helper
            this will only ever happen if the Helper is constructed with an UmbracoContext and it is not a front-end request
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the UmbracoHelper is constructed with an UmbracoContext and it is not a front-end request</exception>
        </member>
        <member name="M:Umbraco.Web.Mvc.ViewContextExtensions.CopyWithModel(System.Web.Mvc.ViewContext,System.Object)">
            <summary>
            Creates a new ViewContext from an existing one but specifies a new Model for the ViewData
            </summary>
            <param name="vc"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ViewDataContainerExtensions.FilterContainer(System.Web.Mvc.IViewDataContainer,System.String)">
            <summary>
            Creates a new IViewDataContainer but with a filtered ModelState
            </summary>
            <param name="container"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ViewDataContainerExtensions.CopyWithModel(System.Web.Mvc.IViewDataContainer,System.Object)">
            <summary>
            Returns a new IViewContainer based on the current one but supplies a different model to the ViewData
            </summary>
            <param name="container"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.XmlPublishedCache.PublishedContentCache.GetXmlDelegate">
            <summary>
            Gets/sets the delegate used to retrieve the Xml content, generally the setter is only used for unit tests
            and by default if it is not set will use the standard delegate which ONLY works when in the context an Http Request
            </summary>
            <remarks>
            If not defined, we will use the standard delegate which ONLY works when in the context an Http Request
            mostly because the 'content' object heavily relies on HttpContext, SQL connections and a bunch of other stuff
            that when run inside of a unit test fails.
            </remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.PublishedContentNotFoundHandler">
            <summary>
            Gets executed when no document can be found in Umbraco
            </summary>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.XmlPublishedCache.XmlPublishedContent">
            <summary>
            Represents an IPublishedContent which is created based on an Xml structure.
            </summary>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.XmlPublishedContent.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>XmlPublishedContent</c> class with an Xml node.
            </summary>
            <param name="xmlNode">The Xml node.</param>
            <param name="isPreviewing">A value indicating whether the published content is being previewed.</param>
        </member>
        <member name="M:Umbraco.Web.PublishedCache.XmlPublishedCache.XmlPublishedContent.#ctor(System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>XmlPublishedContent</c> class with an Xml node,
            and a value indicating whether to lazy-initialize the instance.
            </summary>
            <param name="xmlNode">The Xml node.</param>
            <param name="isPreviewing">A value indicating whether the published content is being previewed.</param>
            <param name="lazyInitialize">A value indicating whether to lazy-initialize the instance.</param>
            <remarks>Lazy-initializationg is NOT thread-safe.</remarks>
        </member>
        <member name="T:Umbraco.Web.PublishedCache.XmlPublishedCache.XmlPublishedProperty">
            <summary>
            Represents an IDocumentProperty which is created based on an Xml structure.
            </summary>
        </member>
        <member name="P:Umbraco.Web.PublishedCache.XmlPublishedCache.XmlPublishedProperty.DataValue">
            <summary>
            Gets the raw value of the property.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.Constants">
            <summary>
            constants
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.FilteredControllerFactoriesResolver">
            <summary>
            A resolver for storing IFilteredControllerFactories
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.FilteredControllerFactoriesResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructor
            </summary>
            <param name="factories"></param>		
        </member>
        <member name="T:Umbraco.Web.Mvc.MasterControllerFactory">
            <summary>
            A controller factory which uses an internal list of <see cref="T:Umbraco.Web.Mvc.IFilteredControllerFactory"/> in order to invoke 
            different controller factories dependent upon their implementation of <see cref="M:Umbraco.Web.Mvc.IFilteredControllerFactory.CanHandle(System.Web.Routing.RequestContext)"/> for the current
            request. Allows circumvention of MVC3's singly registered IControllerFactory.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.MasterControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Creates the specified controller by using the specified request context.
            </summary>
            <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
            <param name="controllerName">The name of the controller.</param>
            <returns>The controller.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext"/> parameter is null.</exception>
              
            <exception cref="T:System.ArgumentException">The <paramref name="controllerName"/> parameter is null or empty.</exception>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.MasterControllerFactory.GetControllerTypeInternal(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Retrieves the controller type for the specified name and request context.
            </summary>
            
            <returns>
            The controller type.
            </returns>
            <param name="requestContext">The context of the HTTP request, which includes the HTTP context and route data.</param>
            <param name="controllerName">The name of the controller.</param>
        </member>
        <member name="M:Umbraco.Web.Mvc.MasterControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
            Releases the specified controller.
            </summary>
            <param name="controller">The controller to release.</param>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderActionInvoker">
            <summary>
            Ensures that if an action for the Template name is not explicitly defined by a user, that the 'Index' action will execute
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
            <summary>
            Ensures that if an action for the Template name is not explicitly defined by a user, that the 'Index' action will execute
            </summary>
            <param name="controllerContext"></param>
            <param name="controllerDescriptor"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model to a value by using the specified controller context and binding context.
            </summary>
            <returns>
            The bound value.
            </returns>
            <param name="controllerContext">The controller context.</param><param name="bindingContext">The binding context.</param>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderMvcController">
            <summary>
            A controller to render front-end requests
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderMvcController.EnsurePhsyicalViewExists(System.String)">
            <summary>
            Checks to make sure the physical view file exists on disk
            </summary>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderMvcController.CurrentTemplate``1(``0)">
            <summary>
            Returns an ActionResult based on the template name found in the route values and the given model.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <returns></returns>
            <remarks>
            If the template found in the route values doesn't physically exist, then an empty ContentResult will be returned.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderMvcController.Index(Umbraco.Web.Models.RenderModel)">
            <summary>
            The default action to render the front-end view
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Mvc.RenderMvcController.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RenderMvcController.CurrentPage">
            <summary>
            Returns the Current published content item for rendering the content
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.RenderMvcController.PublishedContentRequest">
            <summary>
            Returns the current PublishedContentRequest
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.#ctor(System.Web.Mvc.IControllerFactory,Umbraco.Web.UmbracoContext)">
            <summary>
            Contructor generally used for unit testing
            </summary>
            <param name="controllerFactory"></param>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Assigns the correct controller based on the Umbraco request and returns a standard MvcHandler to prcess the response,
            this also stores the render model into the data tokens for the current RouteData.
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.SetupRouteDataForRequest(Umbraco.Web.Models.RenderModel,System.Web.Routing.RequestContext,Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Ensures that all of the correct DataTokens are added to the route values which are all required for rendering front-end umbraco views
            </summary>
            <param name="renderModel"></param>
            <param name="requestContext"></param>
            <param name="docRequest"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetFormInfo(System.Web.Routing.RequestContext)">
            <summary>
            Checks the request and query strings to see if it matches the definition of having a Surface controller
            posted/get value, if so, then we return a PostedDataProxyInfo object with the correct information.
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.HandlePostedValues(System.Web.Routing.RequestContext,Umbraco.Web.Mvc.PostedDataProxyInfo)">
            <summary>
            Handles a posted form to an Umbraco Url and ensures the correct controller is routed to and that
            the right DataTokens are set.
            </summary>
            <param name="requestContext"></param>
            <param name="postedInfo"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetUmbracoRouteDefinition(System.Web.Routing.RequestContext,Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Returns a RouteDefinition object based on the current renderModel
            </summary>
            <param name="requestContext"></param>
            <param name="publishedContentRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetHandlerForRoute(System.Web.Routing.RequestContext,Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            this will determine the controller and set the values in the route data
            </summary>
            <param name="requestContext"></param>
            <param name="publishedContentRequest"></param>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderRouteHandler.GetWebFormsHandler">
            <summary>
            Returns the handler for webforms requests
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.Mvc.RenderRouteHandler.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="T:Umbraco.Web.Mvc.RenderViewEngine">
            <summary>
            A view engine to look into the template location specified in the config for the front-end/Rendering part of the cms,
            this includes paths to render partial macros and media item templates.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderViewEngine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderViewEngine.EnsureFoldersAndFiles">
            <summary>
            Ensures that the correct web.config for razor exists in the /Views folder, the partials folder exist and the ViewStartPage exists.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RenderViewEngine.ShouldFindView(System.Web.Mvc.ControllerContext,System.Boolean)">
            <summary>
            Determines if the view should be found, this is used for view lookup performance and also to ensure 
            less overlap with other user's view engines. This will return true if the Umbraco back office is rendering
            and its a partial view or if the umbraco front-end is rendering but nothing else.
            </summary>
            <param name="controllerContext"></param>
            <param name="isPartial"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Mvc.UmbracoTemplatePage">
            <summary>
            The View that front-end templates inherit from
            </summary>
        </member>
        <member name="P:Umbraco.Web.Mvc.UmbracoTemplatePage.CurrentPage">
            <summary>
            Returns the content as a dynamic object
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.RouteValueDictionaryExtensions.ToFormCollection(System.Web.Routing.RouteValueDictionary)">
            <summary>
            Converts a route value dictionary to a form collection
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.RouteValueDictionaryExtensions.GetRequiredObject(System.Web.Routing.RouteValueDictionary,System.String)">
            <summary>
            Returns the value of a mandatory item in the route items
            </summary>
            <param name="items"></param>
            <param name="key"> </param>
            <returns></returns>
        </member>
        <member name="T:umbraco.NodeFactory.Node">
            <summary>
            Summary description for Node.
            </summary>
        </member>
        <member name="M:umbraco.NodeFactory.Node.#ctor(System.Int32,System.Boolean)">
            <summary>
            Special constructor for by-passing published vs. preview xml to use
            when updating the SiteMapProvider
            </summary>
            <param name="NodeId"></param>
            <param name="forcePublishedXml"></param>
        </member>
        <member name="T:Umbraco.Web.UmbracoUserControl">
            <summary>
            A base class for all Presentation UserControls to inherit from
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoUserControl.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            Default constructor
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoUserControl.#ctor">
            <summary>
            Empty constructor, uses Singleton to resolve the UmbracoContext
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.UmbracoAuthorizeAttribute">
            <summary>
            Ensures authorization is successful for a back office user
            </summary>    
        </member>
        <member name="F:Umbraco.Web.WebApi.UmbracoAuthorizeAttribute.Enable">
            <summary>
            Can be used by unit tests to enable/disable this filter
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.UmbracoAuthorizeAttribute.#ctor(Umbraco.Web.UmbracoContext)">
            <summary>
            THIS SHOULD BE ONLY USED FOR UNIT TESTS
            </summary>
            <param name="umbracoContext"></param>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.ValidationFilterAttribute">
            <summary>
            An action filter used to do basic validation against the model and return a result
            straight away if it fails.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebApi.Filters.UmbracoUserTimeoutFilterAttribute">
            <summary>
            This will check if the request is authenticated and if there's an auth ticket present we will 
            add a custom header to the response indicating how many seconds are remaining for the current 
            user's session. This allows us to keep track of a user's session effectively in the back office.
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebApi.WebApiHelper.CreateContext(System.Net.Http.HttpMethod,System.Uri,System.Web.HttpContextBase)">
            <summary>
            A helper method to create a WebAPI HttpControllerContext which can be used to execute a controller manually
            </summary>
            <param name="method"></param>
            <param name="uri"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebBootManager">
            <summary>
            A bootstrapper for the Umbraco application which initializes all objects including the Web portion of the application 
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.#ctor(Umbraco.Core.UmbracoApplicationBase,System.Boolean)">
            <summary>
            Constructor for unit tests, ensures some resolvers are not initialized
            </summary>
            <param name="umbracoApplication"></param>
            <param name="isForTesting"></param>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.Initialize">
            <summary>
            Initialize objects before anything during the boot cycle happens
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.FreezeResolution">
            <summary>
            Override this method in order to ensure that the UmbracoContext is also created, this can only be 
            created after resolution is frozen!
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.InitializeProfilerResolver">
            <summary>
            Ensure the current profiler is the web profiler
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.InitializeApplicationEventsResolver">
            <summary>
            Adds custom types to the ApplicationEventsResolver
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.Complete(System.Action{Umbraco.Core.ApplicationContext})">
            <summary>
            Ensure that the OnApplicationStarted methods of the IApplicationEvents are called
            </summary>
            <param name="afterComplete"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.CreateApplicationCache">
            <summary>
            Creates the application cache based on the HttpRuntime cache
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.CreateRoutes">
            <summary>
            Creates the routes
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebBootManager.InitializeResolvers">
            <summary>
            Initializes all web based and core resolves 
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.LegacyRequestInitializer">
            <summary>
            A legacy class for old style handling of URL requests
            </summary>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.GetControllerName(System.Type)">
            <summary>
            Return the controller name from the controller type
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.GetControllerName(System.Web.Mvc.IController)">
            <summary>
            Return the controller name from the controller instance
            </summary>
            <param name="controllerInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.GetControllerName``1">
            <summary>
            Return the controller name from the controller type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.CreateEmptyViewContext(System.Web.Mvc.ControllerBase)">
            <summary>
            This is generally used for proxying to a ChildAction which requires a ViewContext to be setup
            but since the View isn't actually rendered the IView object is null, however the rest of the 
            properties are filled in.
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.RenderViewResultAsString(System.Web.Mvc.ControllerBase,System.Web.Mvc.ViewResultBase)">
            <summary>
            Returns the string output from a ViewResultBase object
            </summary>
            <param name="controller"></param>
            <param name="viewResult"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.RenderViewToString(System.Web.Mvc.ControllerBase,System.String,System.Object,System.Boolean)">
            <summary>
            Renders the partial view to string.
            </summary>
            <param name="controller">The controller context.</param>
            <param name="viewName">Name of the view.</param>
            <param name="model">The model.</param>
            <param name="isPartial">true if it is a Partial view, otherwise false for a normal view </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.Mvc.ControllerExtensions.EnsureViewObjectDataOnResult(System.Web.Mvc.ControllerBase,System.Web.Mvc.ViewResultBase)">
            <summary>
            Normally in MVC the way that the View object gets assigned to the result is to Execute the ViewResult, this however
            will write to the Response output stream which isn't what we want. Instead, this method will use the same logic inside
            of MVC to assign the View object to the result but without executing it. This also ensures that the ViewData and the TempData
            is assigned from the controller.
            This is only relavent for view results of PartialViewResult or ViewResult.
            </summary>
            <param name="result"></param>
            <param name="controller"></param>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentLastChanceFinderResolver">
            <summary>
            Resolves the last chance IPublishedContentFinder object.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentLastChanceFinderResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.ContentLastChanceFinderResolver"/> class with no finder.
            </summary>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentLastChanceFinderResolver.#ctor(Umbraco.Web.Routing.IContentFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.ContentLastChanceFinderResolver"/> class with an instance of a finder.
            </summary>
            <param name="finder">An instance of a finder.</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentLastChanceFinderResolver.SetFinder(Umbraco.Web.Routing.IContentFinder)">
            <summary>
            Sets the last chance finder.
            </summary>
            <param name="finder">The finder.</param>
            <remarks>For developers, at application startup.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.ContentLastChanceFinderResolver.Finder">
            <summary>
            Gets the last chance finder.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByUrlAlias">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page aliases.
            </summary>
            <remarks>
            <para>Handles <c>/just/about/anything</c> where <c>/just/about/anything</c> is contained in the <c>umbracoUrlAlias</c> property of a document.</para>
            <para>The alias is the full path to the document. There can be more than one alias, separated by commas.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByUrlAlias.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="docRequest">The <c>PublishedContentRequest</c>.</param>		
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="M:Umbraco.Web.Media.ThumbnailProviders.ThumbnailProvidersResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructor
            </summary>
            <param name="providers"></param>		
        </member>
        <member name="P:Umbraco.Web.Media.ThumbnailProviders.ThumbnailProvidersResolver.Providers">
            <summary>
            Return the providers
            </summary>
        </member>
        <member name="M:Umbraco.Web.UI.Controls.FolderBrowser.CreateChildControls">
            <summary>
            Create the native .net child controls for this control
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByIdPath">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page identifiers.
            </summary>
            <remarks>
            <para>Handles <c>/1234</c> where <c>1234</c> is the identified of a document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByIdPath.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="docRequest">The <c>PublishedContentRequest</c>.</param>		
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByNiceUrl">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page nice urls.
            </summary>
            <remarks>
            <para>Handles <c>/foo/bar</c> where <c>/foo/bar</c> is the nice url of a document.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByNiceUrl.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="docRequest">The <c>PublishedContentRequest</c>.</param>		
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByNiceUrl.FindContent(Umbraco.Web.Routing.PublishedContentRequest,System.String)">
            <summary>
            Tries to find an Umbraco document for a <c>PublishedContentRequest</c> and a route.
            </summary>
            <param name="docreq">The document request.</param>
            <param name="route">The route.</param>
            <returns>The document node, or null.</returns>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByNiceUrlAndTemplate">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles page nice urls and a template.
            </summary>
            <remarks>
            <para>Handles <c>/foo/bar/template</c> where <c>/foo/bar</c> is the nice url of a document, and <c>template</c> a template alias.</para>
            <para>If successful, then the template of the document request is also assigned.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByNiceUrlAndTemplate.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="docRequest">The <c>PublishedContentRequest</c>.</param>		
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
            <remarks>If successful, also assigns the template.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderByProfile">
            <summary>
            Provides an implementation of <see cref="T:Umbraco.Web.Routing.IContentFinder"/> that handles profiles.
            </summary>
            <remarks>
            <para>Handles <c>/profile/login</c> where <c>/profile</c> is the profile page nice url and <c>login</c> the login of a member.</para>
            <para>This should rather be done with a rewriting rule. There would be multiple profile pages in multi-sites/multi-langs setups.
            We keep it for backward compatility reasons.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderByProfile.TryFindContent(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Tries to find and assign an Umbraco document to a <c>PublishedContentRequest</c>.
            </summary>
            <param name="docRequest">The <c>PublishedContentRequest</c>.</param>		
            <returns>A value indicating whether an Umbraco document was found and assigned.</returns>
        </member>
        <member name="T:Umbraco.Web.PluginManagerExtensions">
            <summary>
            Extension methods for the PluginTypeResolver
            </summary>
        </member>
        <member name="M:Umbraco.Web.PluginManagerExtensions.ResolveAttributedTreeControllers(Umbraco.Core.PluginManager)">
            <summary>
            Returns all available TreeApiController's in application that are attribute with TreeAttribute
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PluginManagerExtensions.ResolveTrees(Umbraco.Core.PluginManager)">
            <summary>
            Returns all available ITrees in application
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PluginManagerExtensions.ResolveRestExtensions(Umbraco.Core.PluginManager)">
            <summary>
            Returns all classes attributed with RestExtensionAttribute attribute
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PluginManagerExtensions.ResolveXsltExtensions(Umbraco.Core.PluginManager)">
            <summary>
            Returns all classes attributed with XsltExtensionAttribute attribute
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PluginManagerExtensions.ResolveThumbnailProviders(Umbraco.Core.PluginManager)">
            <summary>
            Returns all IThumbnailProvider classes
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.PluginManagerExtensions.ResolveImageUrlProviders(Umbraco.Core.PluginManager)">
            <summary>
            Returns all IImageUrlProvider classes
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.Routing.DomainHelper">
            <summary>
            Provides utilities to handle domains.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.GetAllDomains(System.Boolean)">
            <summary>
            Gets all domains defined in the system.
            </summary>
            <param name="includeWildcards">A value indicating whether to include wildcard domains.</param>
            <returns>All domains defined in the system.</returns>
            <remarks>This is to temporarily abstract Umbraco's API.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.GetNodeDomains(System.Int32,System.Boolean)">
            <summary>
            Gets all domains defined in the system at a specified node.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <param name="includeWildcards">A value indicating whether to include wildcard domains.</param>
            <returns>All domains defined in the system at the specified node.</returns>
            <remarks>This is to temporarily abstract Umbraco's API.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.DomainForNode(System.Int32,System.Uri)">
            <summary>
            Finds the domain for the specified node, if any, that best matches a specified uri.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <param name="current">The uri, or null.</param>
            <returns>The domain and its uri, if any, that best matches the specified uri, else null.</returns>
            <remarks>If at least a domain is set on the node then the method returns the domain that
            best matches the specified uri, else it returns null.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.NodeHasDomains(System.Int32)">
            <summary>
            Gets a value indicating whether a specified node has domains.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <returns>True if the node has domains, else false.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.DomainsForNode(System.Int32,System.Uri,System.Boolean)">
            <summary>
            Find the domains for the specified node, if any, that match a specified uri.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <param name="current">The uri, or null.</param>
            <param name="excludeDefault">A value indicating whether to exclude the current/default domain. True by default.</param>
            <returns>The domains and their uris, that match the specified uri, else null.</returns>
            <remarks>If at least a domain is set on the node then the method returns the domains that
            best match the specified uri, else it returns null.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.DomainForUri(umbraco.cms.businesslogic.web.Domain[],System.Uri,System.Func{Umbraco.Web.Routing.DomainAndUri[],Umbraco.Web.Routing.DomainAndUri})">
            <summary>
            Finds the domain that best matches a specified uri, into a group of domains.
            </summary>
            <param name="domains">The group of domains.</param>
            <param name="current">The uri, or null.</param>
            <param name="filter">A function to filter the list of domains, if more than one applies, or <c>null</c>.</param>
            <returns>The domain and its normalized uri, that best matches the specified uri.</returns>
            <remarks>
            <para>If more than one domain matches, then the <paramref name="filter"/> function is used to pick
            the right one, unless it is <c>null</c>, in which case the method returns <c>null</c>.</para>
            <para>The filter, if any, will be called only with a non-empty argument, and _must_ return something.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.DomainsForUri(umbraco.cms.businesslogic.web.Domain[],System.Uri)">
            <summary>
            Gets the domains that match a specified uri, into a group of domains.
            </summary>
            <param name="domains">The group of domains.</param>
            <param name="current">The uri, or null.</param>
            <returns>The domains and their normalized uris, that match the specified uri.</returns>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.SanitizeForBackwardCompatibility(umbraco.cms.businesslogic.web.Domain)">
            <summary>
            Sanitize a Domain.
            </summary>
            <param name="domain">The Domain to sanitize.</param>
            <returns>The sanitized domain.</returns>
            <remarks>This is a _really_ nasty one that should be removed at some point. Some people were
            using hostnames such as "/en" which happened to work pre-4.10 but really make no sense at
            all... and 4.10 throws on them, so here we just try to find a way so 4.11 does not throw.
            But really... no.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.ExistsDomainInPath(umbraco.cms.businesslogic.web.Domain[],System.String,System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether there is another domain defined down in the path to a node under the current domain's root node.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The path to a node under the current domain's root node eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>A value indicating if there is another domain defined down in the path.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.FindDomainInPath(umbraco.cms.businesslogic.web.Domain[],System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the deepest non-wildcard Domain, if any, from a group of Domains, in a node path.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The node path eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>The deepest non-wildcard Domain in the path, or null.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.FindWildcardDomainInPath(umbraco.cms.businesslogic.web.Domain[],System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the deepest wildcard Domain, if any, from a group of Domains, in a node path.
            </summary>
            <param name="domains">The domains.</param>
            <param name="path">The node path eg '-1,1234,5678'.</param>
            <param name="rootNodeId">The current domain root node identifier, or null.</param>
            <returns>The deepest wildcard Domain in the path, or null.</returns>
            <remarks>Looks _under_ rootNodeId but not _at_ rootNodeId.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.DomainHelper.PathRelativeToDomain(System.Uri,System.String)">
            <summary>
            Returns the part of a path relative to the uri of a domain.
            </summary>
            <param name="domainUri">The normalized uri of the domain.</param>
            <param name="path">The full path of the uri.</param>
            <returns>The path part relative to the uri of the domain.</returns>
            <remarks>Eg the relative part of <c>/foo/bar/nil</c> to domain <c>example.com/foo</c> is <c>/bar/nil</c>.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.ContentFinderResolver">
            <summary>
            Resolves IPublishedContentFinder objects.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.ContentFinderResolver"/> class with an initial list of finder types.
            </summary>
            <param name="finders">The list of finder types</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.ContentFinderResolver.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.ContentFinderResolver"/> class with an initial list of finder types.
            </summary>
            <param name="finders">The list of finder types</param>
            <remarks>The resolver is created by the <c>WebBootManager</c> and thus the constructor remains internal.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.ContentFinderResolver.Finders">
            <summary>
            Gets the finders.
            </summary>
        </member>
        <member name="T:Umbraco.Web.Routing.PublishedContentRequest">
            <summary>
            Represents a request for one specified Umbraco IPublishedContent to be rendered
            by one specified template, using one specified Culture and RenderingEngine.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.#ctor(System.Uri,Umbraco.Web.Routing.RoutingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.PublishedContentRequest"/> class with a specific Uri and routing context.
            </summary>
            <param name="uri">The request <c>Uri</c>.</param>
            <param name="routingContext">A routing context.</param>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.Prepare">
            <summary>
            Prepares the request.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.ConfigureRequest">
            <summary>
            Called to configure the request
            </summary>
            <remarks>
            This public method is legacy, Prepare() has been made public now which should be used and ensures the domains are assigned and
            if a public content item is already assigned Prepare() now ensures that the finders are not executed.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.UpdateOnMissingTemplate">
            <summary>
            Updates the request when there is no template to render the content.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.OnPrepared">
            <summary>
            Triggers the Prepared event.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Routing.PublishedContentRequest._publishedContent">
            <summary>
            The requested IPublishedContent, if any, else <c>null</c>.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Routing.PublishedContentRequest._initialPublishedContent">
            <summary>
            The initial requested IPublishedContent, if any, else <c>null</c>.
            </summary>
            <remarks>The initial requested content is the content that was found by the finders,
            before anything such as 404, redirect... took place.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.SetInternalRedirectPublishedContent(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Sets the requested content, following an internal redirect.
            </summary>
            <param name="content">The requested content.</param>
            <remarks>Depending on <c>UmbracoSettings.InternalRedirectPreservesTemplate</c>, will
            preserve or reset the template, if any.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.SetIsInitialPublishedContent">
            <summary>
            Indicates that the current PublishedContent is the initial one.
            </summary>
        </member>
        <member name="F:Umbraco.Web.Routing.PublishedContentRequest._template">
            <summary>
            The template model, if any, else <c>null</c>.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.TrySetTemplate(System.String)">
            <summary>
            Tries to set the template to use to display the requested content.
            </summary>
            <param name="alias">The alias of the template.</param>
            <returns>A value indicating whether a valid template with the specified alias was found.</returns>
            <remarks>
            <para>Successfully setting the template does refresh <c>RenderingEngine</c>.</para>
            <para>If setting the template fails, then the previous template (if any) remains in place.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.SetTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Sets the template to use to display the requested content.
            </summary>
            <param name="template">The template.</param>
            <remarks>Setting the template does refresh <c>RenderingEngine</c>.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.ResetTemplate">
            <summary>
            Resets the template.
            </summary>
            <remarks>The <c>RenderingEngine</c> becomes unknown.</remarks>
        </member>
        <member name="F:Umbraco.Web.Routing.PublishedContentRequest._umbracoPage">
            <summary>
            The "umbraco page" object.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.SetIs404">
            <summary>
            Indicates that the requested content could not be found.
            </summary>
            <remarks>This is for public access, in custom content finders or <c>Prepared</c> event handlers,
            where we want to allow developers to indicate a request is 404 but not to cancel it.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.SetRedirect(System.String)">
            <summary>
            Indicates that the content request should trigger a redirect (302).
            </summary>
            <param name="url">The url to redirect to.</param>
            <remarks>Does not actually perform a redirect, only registers that the response should
            redirect. Redirect will or will not take place in due time.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.SetRedirectPermanent(System.String)">
            <summary>
            Indicates that the content request should trigger a permanent redirect (301).
            </summary>
            <param name="url">The url to redirect to.</param>
            <remarks>Does not actually perform a redirect, only registers that the response should
            redirect. Redirect will or will not take place in due time.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.SetRedirect(System.String,System.Int32)">
            <summary>
            Indicates that the content requet should trigger a redirect, with a specified status code.
            </summary>
            <param name="url">The url to redirect to.</param>
            <param name="status">The status code (300-308).</param>
            <remarks>Does not actually perform a redirect, only registers that the response should
            redirect. Redirect will or will not take place in due time.</remarks>
        </member>
        <member name="M:Umbraco.Web.Routing.PublishedContentRequest.SetResponseStatus(System.Int32,System.String)">
            <summary>
            Sets the http response status code, along with an optional associated description.
            </summary>
            <param name="code">The http status code.</param>
            <param name="description">The description.</param>
            <remarks>Does not actually set the http response status code and description, only registers that
            the response should use the specified code and description. The code and description will or will
            not be used, in due time.</remarks>
        </member>
        <member name="E:Umbraco.Web.Routing.PublishedContentRequest.Prepared">
            <summary>
            Triggers once the published content request has been prepared, but before it is processed.
            </summary>
            <remarks>When the event triggers, preparation is done ie domain, culture, document, template,
            rendering engine, etc. have been setup. It is then possible to change anything, before
            the request is actually processed and rendered by Umbraco.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.Engine">
            <summary>
            Gets the engine associated to the request.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.Uri">
            <summary>
            Gets or sets the cleaned up Uri used for routing.
            </summary>
            <remarks>The cleaned up Uri has no virtual directory, no trailing slash, no .aspx extension, etc.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.PublishedContent">
            <summary>
            Gets or sets the requested content.
            </summary>
            <remarks>Setting the requested content clears <c>Template</c>.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.InitialPublishedContent">
            <summary>
            Gets the initial requested content.
            </summary>
            <remarks>The initial requested content is the content that was found by the finders,
            before anything such as 404, redirect... took place.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.IsInitialPublishedContent">
            <summary>
            Gets value indicating whether the current published content is the initial one.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.IsInternalRedirectPublishedContent">
            <summary>
            Gets or sets a value indicating whether the current published content has been obtained
            from the initial published content following internal redirections exclusively.
            </summary>
            <remarks>Used by PublishedContentRequestEngine.FindTemplate() to figure out whether to
            apply the internal redirect or not, when content is not the initial content.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.HasPublishedContent">
            <summary>
            Gets a value indicating whether the content request has a content.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.TemplateModel">
            <summary>
            Gets or sets the template model to use to display the requested content.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.TemplateAlias">
            <summary>
            Gets the alias of the template to use to display the requested content.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.HasTemplate">
            <summary>
            Gets a value indicating whether the content request has a template.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.Domain">
            <summary>
            Gets or sets the content request's domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.DomainUri">
            <summary>
            Gets or sets the content request's domain Uri.
            </summary>
            <remarks>The <c>Domain</c> may contain "example.com" whereas the <c>Uri</c> will be fully qualified eg "http://example.com/".</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.HasDomain">
            <summary>
            Gets a value indicating whether the content request has a domain.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.Culture">
            <summary>
            Gets or sets the content request's culture.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.RenderingEngine">
            <summary>
            Gets or sets whether the rendering engine is MVC or WebForms.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.RoutingContext">
            <summary>
            Gets or sets the current RoutingContext.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.UmbracoPage">
            <summary>
            Gets or sets the "umbraco page" object.
            </summary>
            <remarks>
            This value is only used for legacy/webforms code.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.Is404">
            <summary>
            Gets or sets a value indicating whether the requested content could not be found.
            </summary>
            <remarks>This is set in the <c>PublishedContentRequestBuilder</c>.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.IsRedirect">
            <summary>
            Gets a value indicating whether the content request triggers a redirect (permanent or not).
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.IsRedirectPermanent">
            <summary>
            Gets or sets a value indicating whether the redirect is permanent.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.RedirectUrl">
            <summary>
            Gets or sets the url to redirect to, when the content request triggers a redirect.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.ResponseStatusCode">
            <summary>
            Gets or sets the content request http response status code.
            </summary>
            <remarks>Does not actually set the http response status code, only registers that the response
            should use the specified code. The code will or will not be used, in due time.</remarks>
        </member>
        <member name="P:Umbraco.Web.Routing.PublishedContentRequest.ResponseStatusDescription">
            <summary>
            Gets or sets the content request http response status description.
            </summary>
            <remarks>Does not actually set the http response status description, only registers that the response
            should use the specified description. The description will or will not be used, in due time.</remarks>
        </member>
        <member name="T:Umbraco.Web.Routing.RoutingContext">
            <summary>
            Provides context for the routing of a request.
            </summary>
        </member>
        <member name="M:Umbraco.Web.Routing.RoutingContext.#ctor(Umbraco.Web.UmbracoContext,System.Collections.Generic.IEnumerable{Umbraco.Web.Routing.IContentFinder},Umbraco.Web.Routing.IContentFinder,Umbraco.Web.Routing.UrlProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Web.Routing.RoutingContext"/> class.
            </summary>
            <param name="umbracoContext"> </param>
            <param name="contentFinders">The document lookups resolver.</param>
            <param name="contentLastChanceFinder"> </param>
            <param name="urlProvider">The nice urls provider.</param>
        </member>
        <member name="P:Umbraco.Web.Routing.RoutingContext.UmbracoContext">
            <summary>
            Gets the Umbraco context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.RoutingContext.PublishedContentFinders">
            <summary>
            Gets the published content finders.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.RoutingContext.PublishedContentLastChanceFinder">
            <summary>
            Gets the published content last chance finder.
            </summary>
        </member>
        <member name="P:Umbraco.Web.Routing.RoutingContext.UrlProvider">
            <summary>
            Gets the urls provider.
            </summary>
        </member>
        <member name="T:umbraco.presentation.BasePageExtensions">
            <summary>
            Extension methods for the Umbraco BasePage
            </summary>
        </member>
        <member name="M:umbraco.presentation.BasePageExtensions.DisplayFatalError(umbraco.BasePages.BasePage,System.String)">
            <summary>
            Used to display an error message to the user and disable further execution.
            This will remove all controls from being rendered and show a feedback control with an error
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:umbraco.content">
            <summary>
            Represents the Xml storage for the Xml published cache.
            </summary>
        </member>
        <member name="M:umbraco.content.RefreshContentFromDatabase">
            <summary>
            Load content from database and replaces active content when done.
            </summary>
        </member>
        <member name="M:umbraco.content.PublishNodeDo(umbraco.cms.businesslogic.web.Document,System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Used by all overloaded publish methods to do the actual "noderepresentation to xml"
            </summary>
            <param name="d"></param>
            <param name="xmlContentCopy"></param>
            <param name="updateSitemapProvider"></param>
        </member>
        <member name="M:umbraco.content.SortNodes(System.Int32)">
            <summary>
            Sorts the documents.
            </summary>
            <param name="parentId">The parent node identifier.</param>
        </member>
        <member name="M:umbraco.content.UpdateDocumentCache(System.Int32)">
            <summary>
            Updates the document cache.
            </summary>
            <param name="pageId">The page id.</param>
        </member>
        <member name="M:umbraco.content.UpdateDocumentCache(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Updates the document cache.
            </summary>
            <param name="d">The d.</param>
        </member>
        <member name="M:umbraco.content.UpdateDocumentCache(System.Collections.Generic.List{umbraco.cms.businesslogic.web.Document})">
            <summary>
            Updates the document cache for multiple documents
            </summary>
            <param name="Documents">The documents.</param>
        </member>
        <member name="M:umbraco.content.ClearDocumentCache(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Clears the document cache and removes the document from the xml db cache.
            This means the node gets unpublished from the website.
            </summary>
            <param name="doc">The document</param>
        </member>
        <member name="M:umbraco.content.UnPublishNode(System.Int32)">
            <summary>
            Unpublishes the  node.
            </summary>
            <param name="documentId">The document id.</param>
        </member>
        <member name="M:umbraco.content.ClearContextCache">
            <summary>
            Clear HTTPContext cache if any
            </summary>
        </member>
        <member name="M:umbraco.content.LoadContentFromDatabase">
            <summary>
            Load content from database
            </summary>
        </member>
        <member name="M:umbraco.content.GetCacheFileUpdateTime">
            <summary>
            Adds a task to the xml cache file persister
            </summary>
        </member>
        <member name="M:umbraco.content.FireBeforeUpdateDocumentCache(umbraco.cms.businesslogic.web.Document,umbraco.cms.businesslogic.DocumentCacheEventArgs)">
            <summary>
            Fires the before document cache.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.DocumentCacheEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireAfterUpdateDocumentCache(umbraco.cms.businesslogic.web.Document,umbraco.cms.businesslogic.DocumentCacheEventArgs)">
            <summary>
            Fires after document cache updater.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.DocumentCacheEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireBeforeClearDocumentCache(umbraco.cms.businesslogic.web.Document,umbraco.cms.businesslogic.DocumentCacheEventArgs)">
            <summary>
            Fires the before document cache unpublish.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.DocumentCacheEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireAfterClearDocumentCache(umbraco.cms.businesslogic.web.Document,umbraco.cms.businesslogic.DocumentCacheEventArgs)">
            <summary>
            Fires the after document cache unpublish.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.DocumentCacheEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireBeforeRefreshContent(umbraco.cms.businesslogic.RefreshContentEventArgs)">
            <summary>
            Fires the content of the before refresh.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.RefreshContentEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireAfterRefreshContent(umbraco.cms.businesslogic.RefreshContentEventArgs)">
            <summary>
            Fires the content of the after refresh.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.RefreshContentEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireAfterContentCacheDatabaseLoadXmlString(System.String@,umbraco.cms.businesslogic.ContentCacheLoadNodeEventArgs)">
            <summary>
            Fires the before when creating the document cache from database
            </summary>
            <param name="node">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.ContentCacheLoadNodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireBeforeContentCacheLoadNode(System.Xml.XmlNode,umbraco.cms.businesslogic.ContentCacheLoadNodeEventArgs)">
            <summary>
            Fires the before when creating the document cache from database
            </summary>
            <param name="node">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.ContentCacheLoadNodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireAfterContentCacheLoadNodeFromDatabase(System.Xml.XmlNode,umbraco.cms.businesslogic.ContentCacheLoadNodeEventArgs)">
            <summary>
            Fires the after loading document cache xml node from database
            </summary>
            <param name="node">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.ContentCacheLoadNodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.content.FireBeforePublishNodeToContentCache(System.Xml.XmlNode,umbraco.cms.businesslogic.ContentCacheLoadNodeEventArgs)">
            <summary>
            Fires the before a publish action updates the content cache
            </summary>
            <param name="node">The sender.</param>
            <param name="e">The <see cref="T:umbraco.cms.businesslogic.ContentCacheLoadNodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.content.UmbracoXmlDiskCacheFileName">
            <summary>
            Gets the path of the umbraco XML disk cache file.
            </summary>
            <value>The name of the umbraco XML disk cache file.</value>
        </member>
        <member name="P:umbraco.content.XmlContent">
            <remarks>
            Get content. First call to this property will initialize xmldoc
            subsequent calls will be blocked until initialization is done
            Further we cache (in context) xmlContent for each request to ensure that
            we always have the same XmlDoc throughout the whole request.
            </remarks>
        </member>
        <member name="E:umbraco.content.BeforeUpdateDocumentCache">
            <summary>
            Occurs when [before document cache update].
            </summary>
        </member>
        <member name="E:umbraco.content.AfterUpdateDocumentCache">
            <summary>
            Occurs when [after document cache update].
            </summary>
        </member>
        <member name="E:umbraco.content.BeforeClearDocumentCache">
            <summary>
            Occurs when [before document cache unpublish].
            </summary>
        </member>
        <member name="E:umbraco.content.BeforeRefreshContent">
            <summary>
            Occurs when [before refresh content].
            </summary>
        </member>
        <member name="E:umbraco.content.AfterRefreshContent">
            <summary>
            Occurs when [after refresh content].
            </summary>
        </member>
        <member name="E:umbraco.content.AfterContentCacheDatabaseLoadXmlString">
            <summary>
            Occurs when [after loading the xml string from the database].
            </summary>
        </member>
        <member name="E:umbraco.content.BeforeContentCacheLoadNode">
            <summary>
            Occurs when [before when creating the document cache from database].
            </summary>
        </member>
        <member name="E:umbraco.content.AfterContentCacheLoadNodeFromDatabase">
            <summary>
            Occurs when [after loading document cache xml node from database].
            </summary>
        </member>
        <member name="E:umbraco.content.BeforePublishNodeToContentCache">
            <summary>
            Occurs when [before a publish action updates the content cache].
            </summary>
        </member>
        <member name="T:umbraco.content.ContentCacheDatabaseLoadXmlStringEventHandler">
            <summary>
            Occurs when [after loading the xml string from the database].
            </summary>
        </member>
        <member name="T:umbraco.content.ContentCacheLoadNodeEventHandler">
            <summary>
            Occurs when [after loading the xml string from the database and creating the xml node].
            </summary>
        </member>
        <member name="T:umbraco.helper">
            <summary>
            Summary description for helper.
            </summary>
        </member>
        <member name="M:umbraco.helper.parseAttribute(System.Collections.IDictionary,System.String)">
            <summary>
            This method will parse the attribute value to look for some special syntax such as
                [@requestKey]
                [%sessionKey]
                [#pageElement]
                [$recursiveValue]
            </summary>
            <param name="pageElements"></param>
            <param name="attributeValue"></param>
            <returns></returns>
            <remarks>
            You can even apply fallback's separated by comma's like:
            
                [@requestKey],[%sessionKey]
            
            </remarks>
        </member>
        <member name="T:umbraco.item">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.item.#ctor(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates a new Legacy item
            </summary>
            <param name="elements"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:umbraco.item.#ctor(Umbraco.Core.Models.IPublishedContent,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates an Item with a publishedContent item in order to properly recurse and return the value.
            </summary>
            <param name="publishedContent"></param>
            <param name="elements"></param>
            <param name="attributes"></param>
            <remarks>
            THIS ENTIRE CLASS WILL BECOME LEGACY, THE FIELD RENDERING NEEDS TO BE REPLACES SO THAT IS WHY THIS
            CTOR IS INTERNAL.
            </remarks>
        </member>
        <member name="M:umbraco.item.GetRecursiveValueLegacy(System.Collections.IDictionary)">
            <summary>
            Returns the recursive value using a legacy strategy of looking at the xml cache and the splitPath in the elements collection
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.library">
            <summary>
            Function library for umbraco. Includes various helper-methods and methods to
            save and load data from umbraco. 
            
            Especially usefull in XSLT where any of these methods can be accesed using the umbraco.library name-space. Example:
            &lt;xsl:value-of select="umbraco.library:NiceUrl(@id)"/&gt;
            </summary>
        </member>
        <member name="M:umbraco.library.GetUmbracoHelper">
            <summary>
            Returns a new UmbracoHelper so that we can start moving the logic from some of these methods to it
            </summary>
            <returns></returns>
        </member>
        <member name="F:umbraco.library.IsPublishing">
            <summary>
            Used by umbraco's publishing enginge, to determine if publishing is currently active
            </summary>
        </member>
        <member name="F:umbraco.library.NodesPublished">
            <summary>
            Used by umbraco's publishing enginge, to how many nodes is publish in the current publishing cycle
            </summary>
        </member>
        <member name="F:umbraco.library.PublishStart">
            <summary>
            Used by umbraco's publishing enginge, to determine the start time of the current publishing cycle.
            </summary>
        </member>
        <member name="M:umbraco.library.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:umbraco.library.#ctor(umbraco.page)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.library"/> class.
            </summary>
            <param name="Page">The page.</param>
        </member>
        <member name="M:umbraco.library.PythonExecuteFile(System.String)">
            <summary>
            Executes the given python script and returns the standardoutput.
            The Globals known from python macros are not accessible in this context.
            Neither macro or page nor the globals known from python macros are 
            accessible in this context. Only stuff we initialized in site.py
            can be used.
            </summary>
            <param name="file">The filename of the python script including the extension .py</param>
            <returns>Returns the StandardOutput</returns>
        </member>
        <member name="M:umbraco.library.PythonExecute(System.String)">
            <summary>
            Executes the given python expression and returns the standardoutput.
            The Globals known from python macros are not accessible in this context.
            Neighter macro or page nor the globals known from python macros are 
            accessible in this context. Only stuff we initialized in site.py
            can be used.
            </summary>
            <param name="expression">Python expression to execute</param>
            <returns>Returns the StandardOutput</returns>
        </member>
        <member name="M:umbraco.library.UnPublishSingleNode(System.Int32)">
            <summary>
            Unpublish a node, by removing it from the runtime xml index. Note, prior to this the Document should be 
            marked unpublished by setting the publish property on the document object to false
            </summary>
            <param name="DocumentId">The Id of the Document to be unpublished</param>
        </member>
        <member name="M:umbraco.library.UpdateDocumentCache(System.Int32)">
            <summary>
            Publishes a Document by adding it to the runtime xml index. Note, prior to this the Document should be 
            marked published by calling Publish(User u) on the document object.
            </summary>
            <param name="documentId">The Id of the Document to be published</param>
        </member>
        <member name="M:umbraco.library.PublishSingleNode(System.Int32)">
            <summary>
            Publishes the single node, this method is obsolete
            </summary>
            <param name="DocumentId">The document id.</param>
        </member>
        <member name="M:umbraco.library.RefreshContent">
            <summary>
            Refreshes the xml cache for all nodes
            </summary>
        </member>
        <member name="M:umbraco.library.RePublishNodes(System.Int32)">
            <summary>
            Re-publishes all nodes under a given node
            </summary>
            <param name="nodeID">The ID of the node and childnodes that should be republished</param>
        </member>
        <member name="M:umbraco.library.RePublishNodesDotNet(System.Int32)">
            <summary>
            Re-publishes all nodes under a given node
            </summary>
            <param name="nodeID">The ID of the node and childnodes that should be republished</param>
        </member>
        <member name="M:umbraco.library.RePublishNodesDotNet(System.Int32,System.Boolean)">
            <summary>
            Refreshes the runtime xml index. 
            Note: This *doesn't* mark any non-published document objects as published
            </summary>
            <param name="nodeID">Always use -1</param>
            <param name="SaveToDisk">Not used</param>
        </member>
        <member name="M:umbraco.library.JsonToXml(System.String)">
            <summary>
            This will convert a json structure to xml for use in xslt
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.setSession(System.String,System.String)">
            <summary>
            Add a session variable to the current user
            </summary>
            <param name="key">The Key of the variable</param>
            <param name="value">The Value</param>
        </member>
        <member name="M:umbraco.library.setCookie(System.String,System.String)">
            <summary>
            Add a cookie variable to the current user
            </summary>
            <param name="key">The Key of the variable</param>
            <param name="value">The Value of the variable</param>
        </member>
        <member name="M:umbraco.library.NiceUrl(System.Int32)">
            <summary>
            Returns a string with a friendly url from a node.
            IE.: Instead of having /482 (id) as an url, you can have
            /screenshots/developer/macros (spoken url)
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <returns>String with a friendly url from a node</returns>
        </member>
        <member name="M:umbraco.library.NiceUrlFullPath(System.Int32)">
            <summary>
            This method will always add the root node to the path. You should always use NiceUrl, as that is the
            only one who checks for toplevel node settings in the web.config
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <returns>String with a friendly url from a node</returns>
        </member>
        <member name="M:umbraco.library.NiceUrlWithDomain(System.Int32)">
            <summary>
            This method will always add the domain to the path if the hostnames are set up correctly. 
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <returns>String with a friendly url with full domain from a node</returns>
        </member>
        <member name="M:umbraco.library.NiceUrlWithDomain(System.Int32,System.Boolean)">
            <summary>
            This method will always add the domain to the path. 
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <param name="ignoreUmbracoHostNames">Ignores the umbraco hostnames and returns the url prefixed with the requested host (including scheme and port number)</param>
            <returns>String with a friendly url with full domain from a node</returns>
        </member>
        <member name="M:umbraco.library.GetItem(System.Int32,System.String)">
            <summary>
            Returns a string with the data from the given element of a node. Both elements (data-fields)
            and properties can be used - ie:
            getItem(1, nodeName) will return a string with the name of the node with id=1 even though
            nodeName is a property and not an element (data-field).
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <param name="alias">The element that should be returned</param>
            <returns>Returns a string with the data from the given element of a node</returns>
        </member>
        <member name="M:umbraco.library.GetCurrentDomains(System.Int32)">
            <summary>
            Checks with the Assigned domains settings and retuns an array the the Domains matching the node
            </summary>
            <param name="NodeId">Identifier for the node that should be returned</param>
            <returns>A Domain array with all the Domains that matches the nodeId</returns>
        </member>
        <member name="M:umbraco.library.GetItem(System.String)">
            <summary>
            Returns a string with the data from the given element of the current node. Both elements (data-fields)
            and properties can be used - ie:
            getItem(nodeName) will return a string with the name of the current node/page even though
            nodeName is a property and not an element (data-field).
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.GetPropertyTypeName(System.String,System.String)">
            <summary>
            Returns that name of a generic property
            </summary>
            <param name="ContentTypeAlias">The Alias of the content type (ie. Document Type, Member Type or Media Type)</param>
            <param name="PropertyTypeAlias">The Alias of the Generic property (ie. bodyText or umbracoNaviHide)</param>
            <returns>A string with the name. If nothing matches the alias, an empty string is returned</returns>
        </member>
        <member name="M:umbraco.library.GetMemberName(System.Int32)">
            <summary>
            Returns the Member Name from an umbraco member object
            </summary>
            <param name="MemberId">The identifier of the Member</param>
            <returns>The Member name matching the MemberId, an empty string is member isn't found</returns>
        </member>
        <member name="M:umbraco.library.GetMedia(System.Int32,System.Boolean)">
            <summary>
            Get a media object as an xml object
            </summary>
            <param name="MediaId">The identifier of the media object to be returned</param>
            <param name="Deep">If true, children of the media object is returned</param>
            <returns>An umbraco xml node of the media (same format as a document node)</returns>
        </member>
        <member name="M:umbraco.library.GetMember(System.Int32)">
            <summary>
            Get a member as an xml object
            </summary>
            <param name="MemberId">The identifier of the member object to be returned</param>
            <returns>An umbraco xml node of the member (same format as a document node), but with two additional attributes on the "node" element:
            "email" and "loginName".
            </returns>
        </member>
        <member name="M:umbraco.library.GetCurrentMember">
            <summary>
            Get the current member as an xml node
            </summary>
            <returns>Look in documentation for umbraco.library.GetMember(MemberId) for more information</returns>
        </member>
        <member name="M:umbraco.library.IsLoggedOn">
            <summary>
            Whether or not the current user is logged in (as a member)
            </summary>
            <returns>True is the current user is logged in</returns>
        </member>
        <member name="M:umbraco.library.IsProtected(System.Int32,System.String)">
            <summary>
            Check if a document object is protected by the "Protect Pages" functionality in umbraco
            </summary>
            <param name="DocumentId">The identifier of the document object to check</param>
            <param name="Path">The full path of the document object to check</param>
            <returns>True if the document object is protected</returns>
        </member>
        <member name="M:umbraco.library.HasAccess(System.Int32,System.String)">
            <summary>
            Check if the current user has access to a document
            </summary>
            <param name="NodeId">The identifier of the document object to check</param>
            <param name="Path">The full path of the document object to check</param>
            <returns>True if the current user has access or if the current document isn't protected</returns>
        </member>
        <member name="M:umbraco.library.md5(System.String)">
            <summary>
            Returns an MD5 hash of the string specified
            </summary>
            <param name="text">The text to create a hash from</param>
            <returns>Md5 has of the string</returns>
        </member>
        <member name="M:umbraco.library.DateGreaterThan(System.String,System.String)">
            <summary>
            Compare two dates
            </summary>
            <param name="firstDate">The first date to compare</param>
            <param name="secondDate">The second date to compare</param>
            <returns>True if the first date is greater than the second date</returns>
        </member>
        <member name="M:umbraco.library.DateGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Compare two dates
            </summary>
            <param name="firstDate">The first date to compare</param>
            <param name="secondDate">The second date to compare</param>
            <returns>True if the first date is greater than or equal the second date</returns>
        </member>
        <member name="M:umbraco.library.DateGreaterThanToday(System.String)">
            <summary>
            Check if a date is greater than today
            </summary>
            <param name="firstDate">The date to check</param>
            <returns>True if the date is greater that today (ie. at least the day of tomorrow)</returns>
        </member>
        <member name="M:umbraco.library.DateGreaterThanOrEqualToday(System.String)">
            <summary>
            Check if a date is greater than or equal today
            </summary>
            <param name="firstDate">The date to check</param>
            <returns>True if the date is greater that or equal today (ie. at least today or the day of tomorrow)</returns>
        </member>
        <member name="M:umbraco.library.CurrentDate">
            <summary>
            Get the current date
            </summary>
            <returns>Current date i xml format (ToString("s"))</returns>
        </member>
        <member name="M:umbraco.library.DateAdd(System.String,System.String,System.Int32)">
            <summary>
            Add a value to a date
            </summary>
            <param name="Date">The Date to user</param>
            <param name="AddType">The type to add: "y": year, "m": month, "d": day, "h": hour, "min": minutes, "s": seconds</param>
            <param name="add">An integer value to add</param>
            <returns>A date in xml format (ToString("s"))</returns>
        </member>
        <member name="M:umbraco.library.GetWeekDay(System.String)">
            <summary>
            Get the day of week from a date matching the current culture settings
            </summary>
            <param name="Date">The date to use</param>
            <returns>A string with the DayOfWeek matching the current contexts culture settings</returns>
        </member>
        <member name="M:umbraco.library.DateAddWithDateTimeObject(System.DateTime,System.String,System.Int32)">
            <summary>
            Add a value to a date. Similar to the other overload, but uses a datetime object instead of a string
            </summary>
            <param name="Date">The Date to user</param>
            <param name="AddType">The type to add: "y": year, "m": month, "d": day, "h": hour, "min": minutes, "s": seconds</param>
            <param name="add">An integer value to add</param>
            <returns>A date in xml format (ToString("s"))</returns>
        </member>
        <member name="M:umbraco.library.DateDiff(System.String,System.String,System.String)">
            <summary>
            Return the difference between 2 dates, in either minutes, seconds or years.
            </summary>
            <param name="firstDate">The first date.</param>
            <param name="secondDate">The second date.</param>
            <param name="diffType">format to return, can only be: s,m or y:  s = seconds, m = minutes, y = years.</param>
            <returns>A timespan as a integer</returns>
        </member>
        <member name="M:umbraco.library.FormatDateTime(System.String,System.String)">
            <summary>
            Formats a string to the specified formate.
            </summary>
            <param name="Date">The date.</param>
            <param name="Format">The format, compatible with regular .net date formats</param>
            <returns>A date in the new format as a string</returns>
        </member>
        <member name="M:umbraco.library.LongDate(System.String,System.Boolean,System.String)">
            <summary>
            Converts a string to Long Date and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <param name="WithTime">if set to <c>true</c> the date will include time.</param>
            <param name="TimeSplitter">The splitter between date and time.</param>
            <returns>A Long Date as a string.</returns>
        </member>
        <member name="M:umbraco.library.CultureExists(System.String)">
            <summary>
            Checks whether the Culture with the specified name exixts in the standard .net cultureInfo.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.LongDateWithDayName(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Converts a string to datetime in the longdate with day name format.
            </summary>
            <param name="Date">The date.</param>
            <param name="DaySplitter">String between day name and date</param>
            <param name="WithTime">if set to <c>true</c> the datetiem will include time.</param>
            <param name="TimeSplitter">String between date and time.</param>
            <param name="GlobalAlias">Culture name.</param>
            <returns>A datetime in the longdate formate with day name, as a string</returns>
        </member>
        <member name="M:umbraco.library.LongDate(System.String)">
            <summary>
            Converts a string to a Long Date and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <returns>A Long Date as a string.</returns>
        </member>
        <member name="M:umbraco.library.ShortDate(System.String)">
            <summary>
            Converts a string to a Short Date and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <returns>A Short Date as a string.</returns>
        </member>
        <member name="M:umbraco.library.ShortDateWithGlobal(System.String,System.String)">
            <summary>
            Converts a string to a Short Date, with a specific culture, and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <param name="GlobalAlias">Culture name</param>
            <returns>A short date with a specific culture, as a string</returns>
        </member>
        <member name="M:umbraco.library.ShortDateWithTimeAndGlobal(System.String,System.String)">
            <summary>
            Converts a string to a Short Date with time, with a specific culture, and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <param name="GlobalAlias">Culture name</param>
            <returns>A short date withi time, with a specific culture, as a string</returns>
        </member>
        <member name="M:umbraco.library.ShortTime(System.String)">
            <summary>
            Converts a datetime string to the ShortTime format.
            </summary>
            <param name="Date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.ShortDate(System.String,System.Boolean,System.String)">
            <summary>
            Converts a datetime string to the ShortDate format.
            </summary>
            <param name="Date">The date.</param>
            <param name="WithTime">if set to <c>true</c> the date will include time.</param>
            <param name="TimeSplitter">String dividing date and time</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.ReplaceLineBreaks(System.String)">
            <summary>
            Replaces text line breaks with html line breaks
            </summary>
            <param name="text">The text.</param>
            <returns>The text with text line breaks replaced with html linebreaks (<br/>)</returns>
        </member>
        <member name="M:umbraco.library.RenderMacroContent(System.String,System.Int32)">
            <summary>
            Renders the content of a macro. Uses the normal template umbraco macro markup as input.
            This only works properly with xslt macros. 
            Python and .ascx based macros will not render properly, as viewstate is not included.
            </summary>
            <param name="Text">The macro markup to be rendered.</param>
            <param name="PageId">The page id.</param>
            <returns>The rendered macro as a string</returns>
        </member>
        <member name="M:umbraco.library.RenderTemplate(System.Int32,System.Int32)">
            <summary>
            Renders a template.
            </summary>
            <param name="PageId">The page id.</param>
            <param name="TemplateId">The template id.</param>
            <returns>The rendered template as a string</returns>
        </member>
        <member name="M:umbraco.library.RenderTemplate(System.Int32)">
            <summary>
            Renders the default template for a specific page.
            </summary>
            <param name="PageId">The page id.</param>
            <returns>The rendered template as a string.</returns>
        </member>
        <member name="M:umbraco.library.RegisterClientScriptBlock(System.String,System.String,System.Boolean)">
            <summary>
            Registers the client script block.
            </summary>
            <param name="key">The key.</param>
            <param name="script">The script.</param>
            <param name="addScriptTags">if set to <c>true</c> [add script tags].</param>
        </member>
        <member name="M:umbraco.library.RegisterStyleSheetFile(System.String,System.String)">
            <summary>
            Registers the client script include.
            </summary>
            <param name="key">The key.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:umbraco.library.RegisterJavaScriptFile(System.String,System.String)">
            <summary>
            Registers the client script include.
            </summary>
            <param name="key">The key.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:umbraco.library.AddJquery">
            <summary>
            Adds a reference to the jQuery javascript file from the client/ui folder using "jQuery" as a key
            Recommended to use instead of RegisterJavaScriptFile for all nitros/packages that uses jQuery
            </summary>
        </member>
        <member name="M:umbraco.library.StripHtml(System.String)">
            <summary>
            Strips all html from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without any html tags.</returns>
        </member>
        <member name="M:umbraco.library.TruncateString(System.String,System.Int32,System.String)">
            <summary>
            Truncates a string if it's too long
            </summary>
            <param name="Text">The text to eventually truncate</param>
            <param name="MaxLength">The maximum number of characters (length)</param>
            <param name="AddString">String to append if text is truncated (ie "...")</param>
            <returns>A truncated string if text if longer than MaxLength appended with the addString parameters. If text is shorter
            then MaxLength then the full - non-truncated - string is returned</returns>
        </member>
        <member name="M:umbraco.library.Split(System.String,System.String)">
            <summary>
            Split a string into xml elements
            </summary>
            <param name="StringToSplit">The full text to spil</param>
            <param name="Separator">The separator</param>
            <returns>An XPathNodeIterator containing the substrings in the format of <values><value></value></values></returns>
        </member>
        <member name="M:umbraco.library.RemoveFirstParagraphTag(System.String)">
            <summary>
            Removes the starting and ending paragraph tags in a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without starting and endning paragraph tags</returns>
        </member>
        <member name="M:umbraco.library.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces a specified value with a new one.
            </summary>
            <param name="text">The text.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.LastIndexOf(System.String,System.String)">
            <summary>
            Returns the Last index of the specified value
            </summary>
            <param name="Text">The text.</param>
            <param name="Value">The value.</param>
            <returns>Return the last index of a value as a integer </returns>
        </member>
        <member name="M:umbraco.library.GetPreValues(System.Int32)">
             <summary>
             Gets the prevalues from a umbraco DataType with the specified data type id.
             </summary>
             <param name="DataTypeId">The data type id.</param>
             <returns>Returns the prevalues as a XPathNodeIterator in the format:
                 <preValues>
                     <prevalue id="[id]">[value]</prevalue>
                 </preValues> 
            </returns>
        </member>
        <member name="M:umbraco.library.GetPreValueAsString(System.Int32)">
            <summary>
            Gets the umbraco data type prevalue with the specified Id as string.
            </summary>
            <param name="Id">The id.</param>
            <returns>Returns the prevalue as a string</returns>
        </member>
        <member name="M:umbraco.library.GetDictionaryItems(System.String)">
            <summary>
            Gets the dictionary item with the specified key and it's child dictionary items.
            The language version is based on the culture of the current Url.
            </summary>
            <param name="Key">The key.</param>
            <returns>A XpathNodeIterator in the format:
            <DictionaryItems>
                <DictionaryItem key="[dictionaryItemKey]">[dictionaryItemValue]</DictionaryItem>
            </DictionaryItems>
            </returns>
        </member>
        <member name="M:umbraco.library.GetDictionaryItem(System.String)">
            <summary>
            Gets the dictionary item with the specified key.
            </summary>
            <param name="Key">The key.</param>
            <returns>A dictionary items value as a string.</returns>
        </member>
        <member name="M:umbraco.library.GetXmlNodeCurrent">
            <summary>
            Gets the current page.
            </summary>
            <returns>An XpathNodeIterator containing the current page as Xml.</returns>
        </member>
        <member name="M:umbraco.library.GetXmlNodeById(System.String)">
            <summary>
            Gets the page with the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>Returns the node with the specified id as xml in the form of a XPathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlNodeByXPath(System.String)">
            <summary>
            Queries the umbraco Xml cache with the specified Xpath query
            </summary>
            <param name="xpathQuery">The XPath query</param>
            <returns>Returns nodes matching the xpath query as a XpathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlAll">
            <summary>
            Gets the entire umbraco xml cache.
            </summary>
            <returns>Returns the entire umbraco Xml cache as a XPathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlDocument(System.String,System.Boolean)">
            <summary>
            Fetches a xml file from the specified path on the server.
            The path can be relative ("/path/to/file.xml") or absolute ("c:\folder\file.xml")
            </summary>
            <param name="Path">The path.</param>
            <param name="Relative">if set to <c>true</c> the path is relative.</param>
            <returns>The xml file as a XpathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlDocumentByUrl(System.String)">
            <summary>
            Fetches a xml file from the specified url.
            the Url can be a local url or even from a remote server.
            </summary>
            <param name="Url">The URL.</param>
            <returns>The xml file as a XpathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlDocumentByUrl(System.String,System.Int32)">
            <summary>
            Gets the XML document by URL Cached.
            </summary>
            <param name="Url">The URL.</param>
            <param name="CacheInSeconds">The cache in seconds (so 900 would be 15 minutes). This is independent of the global cache refreshing, as it doesn't gets flushed on publishing (like the macros do)</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.QueryForNode(System.String)">
            <summary>
            Returns the Xpath query for a node with the specified id
            </summary>
            <param name="id">The id.</param>
            <returns>The Xpath query for the node with the specified id as a string</returns>
        </member>
        <member name="M:umbraco.library.GetNodeFromLevel(System.String,System.Int32)">
            <summary>
            Helper function to get a value from a comma separated string. Usefull to get
            a node identifier from a Page's path string
            </summary>
            <param name="path">The comma separated string</param>
            <param name="level">The index to be returned</param>
            <returns>A string with the value of the index</returns>
        </member>
        <member name="M:umbraco.library.SendMail(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an e-mail using the System.Net.Mail.MailMessage object
            </summary>
            <param name="FromMail">The sender of the e-mail</param>
            <param name="ToMail">The recipient of the e-mail</param>
            <param name="Subject">E-mail subject</param>
            <param name="Body">The complete content of the e-mail</param>
            <param name="IsHtml">Set to true when using Html formatted mails</param>
        </member>
        <member name="M:umbraco.library.GetRandom(System.Int32)">
            <summary> 
            These random methods are from Eli Robillards blog - kudos for the work :-)
            http://weblogs.asp.net/erobillard/archive/2004/05/06/127374.aspx
            
            Get a Random object which is cached between requests. 
            The advantage over creating the object locally is that the .Next 
            call will always return a new value. If creating several times locally 
            with a generated seed (like millisecond ticks), the same number can be 
            returned. 
            </summary> 
            <returns>A Random object which is cached between calls.</returns> 
        </member>
        <member name="M:umbraco.library.GetRandom">
            <summary> 
            GetRandom with no parameters. 
            </summary> 
            <returns>A Random object which is cached between calls.</returns> 
        </member>
        <member name="M:umbraco.library.Request(System.String)">
            <summary>
            Get any value from the current Request collection. Please note that there also specialized methods for
            Querystring, Form, Servervariables and Cookie collections
            </summary>
            <param name="key">Name of the Request element to be returned</param>
            <returns>A string with the value of the Requested element</returns>
        </member>
        <member name="M:umbraco.library.ChangeContentType(System.String)">
            <summary>
            Changes the mime type of the current page.
            </summary>
            <param name="MimeType">The mime type (like text/xml)</param>
        </member>
        <member name="M:umbraco.library.ContextKey(System.String)">
            <summary>
            Get any value from the current Items collection.
            </summary>
            <param name="key">Name of the Items element to be returned</param>
            <returns>A string with the value of the Items element</returns>
        </member>
        <member name="M:umbraco.library.GetHttpItem(System.String)">
            <summary>
            Get any value from the current Http Items collection
            </summary>
            <param name="key">Name of the Item element to be returned</param>
            <returns>A string with the value of the Requested element</returns>
        </member>
        <member name="M:umbraco.library.RequestForm(System.String)">
            <summary>
            Get any value from the current Form collection
            </summary>
            <param name="key">Name of the Form element to be returned</param>
            <returns>A string with the value of the form element</returns>
        </member>
        <member name="M:umbraco.library.RequestQueryString(System.String)">
            <summary>
            Get any value from the current Querystring collection
            </summary>
            <param name="key">Name of the querystring element to be returned</param>
            <returns>A string with the value of the querystring element</returns>
        </member>
        <member name="M:umbraco.library.RequestCookies(System.String)">
            <summary>
            Get any value from the users cookie collection
            </summary>
            <param name="key">Name of the cookie to return</param>
            <returns>A string with the value of the cookie</returns>
        </member>
        <member name="M:umbraco.library.RequestServerVariables(System.String)">
            <summary>
            Get any element from the server variables collection
            </summary>
            <param name="key">The key for the element to be returned</param>
            <returns>A string with the value of the requested element</returns>
        </member>
        <member name="M:umbraco.library.Session(System.String)">
            <summary>
            Get any element from current user session
            </summary>
            <param name="key">The key for the element to be returned</param>
            <returns>A string with the value of the requested element</returns>
        </member>
        <member name="M:umbraco.library.SessionId">
            <summary>
            Returns the current ASP.NET session identifier
            </summary>
            <returns>The current ASP.NET session identifier</returns>
        </member>
        <member name="M:umbraco.library.UrlEncode(System.String)">
            <summary>
            URL-encodes a string 
            </summary>
            <param name="Text">The string to be encoded</param>
            <returns>A URL-encoded string</returns>
        </member>
        <member name="M:umbraco.library.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string 
            </summary>
            <param name="Text">The string to be encoded</param>
            <returns>A HTML-encoded string</returns>
        </member>
        <member name="M:umbraco.library.GetRelatedNodesAsXml(System.Int32)">
            <summary>
            Gets the related nodes, of the node with the specified Id, as XML.
            </summary>
            <param name="NodeId">The node id.</param>
            <returns>The related nodes as a XpathNodeIterator in the format:
                <code>
                    <relations>
                        <relation typeId="[typeId]" typeName="[typeName]" createDate="[createDate]" parentId="[parentId]" childId="[childId]"><node>[standard umbraco node Xml]</node></relation>
                    </relations>
                </code>
            </returns>
        </member>
        <member name="M:umbraco.library.PageId">
            <summary>
            Returns the identifier of the current page
            </summary>
            <returns>The identifier of the current page</returns>
        </member>
        <member name="M:umbraco.library.PageName">
            <summary>
            Returns the title of the current page
            </summary>
            <returns>The title of the current page</returns>
        </member>
        <member name="M:umbraco.library.PageElement(System.String)">
            <summary>
            Returns any element from the currentpage including generic properties
            </summary>
            <param name="key">The name of the page element to return</param>
            <returns>A string with the element value</returns>
        </member>
        <member name="M:umbraco.library.Tidy(System.String,System.Boolean)">
            <summary>
            Cleans the spified string with tidy
            </summary>
            <param name="StringToTidy">The string to tidy.</param>
            <param name="LiveEditing">if set to <c>true</c> [Live Editing].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.Item(System.Int32,System.String)">
            <summary>
            Creates an Umbraco item for the specified field of the specified node.
            This brings the <c>umbraco:Item</c> element functionality to XSLT documents,
            which enables Live Editing of XSLT generated content.
            </summary>
            <param name="nodeId">The ID of the node to create.</param>
            <param name="fieldName">Name of the field to create.</param>
            <returns>An Umbraco item.</returns>
        </member>
        <member name="M:umbraco.library.Item(System.Int32,System.String,System.String)">
            <summary>
            Creates an Umbraco item for the specified field of the specified node.
            This brings the <c>umbraco:Item</c> element functionality to XSLT documents,
            which enables Live Editing of XSLT generated content.
            </summary>
            <param name="nodeId">The ID of the node to create.</param>
            <param name="fieldName">Name of the field to create.</param>
            <param name="displayValue">
                Value that is displayed to the user, which can be different from the field value.
                Ignored if <c>null</c>.
                Inside an XSLT document, an XPath expression might be useful to generate this value,
                analogous to the functionality of the <c>Xslt</c> property of an <c>umbraco:Item</c> element.
            </param>
            <returns>An Umbraco item.</returns>
        </member>
        <member name="T:umbraco.macro">
            <summary>
            Summary description for macro.
            </summary>
        </member>
        <member name="F:umbraco.macro._predefinedExtensions">
            <summary>Cache for <see cref="!:GetPredefinedXsltExtensions"/>.</summary>
        </member>
        <member name="M:umbraco.macro.#ctor(System.Int32)">
            <summary>
            Creates a macro object
            </summary>
            <param name="id">Specify the macro-id which should be loaded (from table macro)</param>
        </member>
        <member name="M:umbraco.macro.#ctor">
            <summary>
            Creates an empty macro object.
            </summary>
        </member>
        <member name="M:umbraco.macro.removeFromCache">
            <summary>
            Deletes macro definition from cache.
            </summary>
            <returns>True if succesfull, false if nothing has been removed</returns>
        </member>
        <member name="M:umbraco.macro.OnMacroRendering(umbraco.MacroRenderingEventArgs)">
            <summary>
            Raises the MacroRendering event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.macro.renderMacro(System.Collections.Hashtable,System.Int32)">
            <summary>
            Renders the macro
            </summary>
            <param name="pageElements"></param>
            <param name="pageId"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.macro.AddMacroResultToCache(System.Web.UI.Control)">
            <summary>
            Adds the macro result to cache and returns the control since it might be updated
            </summary>
            <param name="macroControl"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.macro.GetMacroFromCache(System.String@,System.Web.UI.Control@)">
            <summary>
            Returns the cached version of this macro either as a string or as a Control
            </summary>
            <param name="macroHtml"></param>
            <param name="macroControl"></param>
            <returns></returns>
            <remarks>
            Depending on the type of macro, this will return the result as a string or as a control. This also 
            checks to see if preview mode is activated, if it is then we don't return anything from cache.
            </remarks>
        </member>
        <member name="M:umbraco.macro.GetControlForErrorBehavior(System.String,Umbraco.Core.Events.MacroErrorEventArgs)">
            <summary>
            Raises the error event and based on the error behavior either return a control to display or throw the exception
            </summary>
            <param name="msg"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.macro.MacroNeedsToBeClearedFromCache(umbraco.cms.businesslogic.macro.MacroModel,System.String,System.IO.FileInfo)">
            <summary>
            check that the file has not recently changed
            </summary>
            <param name="model"></param>
            <param name="dateAddedKey"></param>
            <param name="macroFile"></param>
            <returns></returns>
            <remarks>
            The only reason this is necessary is because a developer might update a file associated with the 
            macro, we need to ensure if that is the case that the cache not be used and it is refreshed.
            </remarks>
        </member>
        <member name="M:umbraco.macro.CacheMacroAsString(umbraco.cms.businesslogic.macro.MacroModel)">
            <summary>
            Determine if macro can be cached as string
            </summary>
            <param name="model"></param>
            <returns></returns>
            <remarks>
            Scripts and XSLT can be generated as strings, but not controls as page events wouldn't be hit (such as Page_Load, etc)
            </remarks>
        </member>
        <member name="M:umbraco.macro.CreateControlsFromText(System.String)">
            <summary>
            Parses the text for umbraco Item controls that need to be rendered.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A control containing the parsed text.</returns>
        </member>
        <member name="M:umbraco.macro.GetXsltExtensions">
            <summary>
            Gets a collection of all XSLT extensions for macros, including predefined extensions.
            </summary>
            <returns>A dictionary of name/extension instance pairs.</returns>
        </member>
        <member name="M:umbraco.macro.AddMacroXsltExtensions">
            <summary>
            Returns an XSLT argument list with all XSLT extensions added,
            both predefined and configured ones.
            </summary>
            <returns>A new XSLT argument list.</returns>
        </member>
        <member name="M:umbraco.macro.LoadPartialViewMacro(umbraco.cms.businesslogic.macro.MacroModel)">
            <summary>
            Renders a Partial View Macro
            </summary>
            <param name="macro"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.macro.loadControl(System.String,System.String,umbraco.cms.businesslogic.macro.MacroModel)">
            <summary>
            Loads a custom or webcontrol using reflection into the macro object
            </summary>
            <param name="fileName">The assembly to load from</param>
            <param name="controlName">Name of the control</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.macro.loadControl(System.String,System.String,umbraco.cms.businesslogic.macro.MacroModel,System.Collections.Hashtable)">
            <summary>
            Loads a custom or webcontrol using reflection into the macro object
            </summary>
            <param name="fileName">The assembly to load from</param>
            <param name="controlName">Name of the control</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.macro.loadUserControl(System.String,umbraco.cms.businesslogic.macro.MacroModel,System.Collections.Hashtable)">
            <summary>
            Loads an usercontrol using reflection into the macro object
            </summary>
            <param name="fileName">Filename of the usercontrol - ie. ~wulff.ascx</param>
            <param name="model"> </param>
            <param name="pageElements">The page elements.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.macro.AddXsltExtensionsToHeader(System.String)">
            <summary>
            Adds the XSLT extension namespaces to the XSLT header using 
            {0} as the container for the namespace references and
            {1} as the container for the exclude-result-prefixes
            </summary>
            <param name="xslt">The XSLT</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.macro.OnError(Umbraco.Core.Events.MacroErrorEventArgs)">
            <summary>
            Raises the <see cref="T:Umbraco.Core.Events.MacroErrorEventArgs"/> event.
            </summary>
            <param name="e">The <see cref="T:Umbraco.Core.Events.MacroErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:umbraco.macro.MacroRendering">
            <summary>
            An event that is raised just before the macro is rendered allowing developers to modify the macro before it executes.
            </summary>
        </member>
        <member name="E:umbraco.macro.Error">
            <summary>
            Occurs when a macro error is raised.
            </summary>
        </member>
        <member name="T:umbraco.MacroRenderingEventArgs">
            <summary>
            Event arguments used for the MacroRendering event
            </summary>
        </member>
        <member name="T:umbraco.page">
            <summary>
            Summary description for page.
            </summary>
        </member>
        <member name="M:umbraco.page.#ctor(System.Int32,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.page"/> class for a yet unpublished document, identified by its <c>id</c> and <c>version</c>.
            </summary>
            <param name="id">The identifier of the document.</param>
            <param name="version">The version to be displayed.</param>
        </member>
        <member name="M:umbraco.page.#ctor(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.page"/> class for a yet unpublished document.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:umbraco.page.#ctor(Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.page"/> class for a published document request.
            </summary>
            <param name="docreq">The <see cref="T:Umbraco.Web.Routing.PublishedContentRequest"/> pointing to the document.</param>
            <remarks>
            The difference between creating the page with PublishedContentRequest vs an IPublishedContent item is 
            that the PublishedContentRequest takes into account how a template is assigned during the routing process whereas
            with an IPublishedContent item, the template id is asssigned purely based on the default.
            </remarks>
        </member>
        <member name="M:umbraco.page.#ctor(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Initializes a new instance of the page for a published document
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:umbraco.page.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.page"/> class for a published document.
            </summary>
            <param name="node">The <c>XmlNode</c> representing the document.</param>
        </member>
        <member name="M:umbraco.page.#ctor(Umbraco.Core.Models.IContent)">
            <summary>
            Initializes a new instance of the page for a content.
            </summary>
            <param name="content">The content.</param>
            <remarks>This is for <see cref="T:Umbraco.Web.Editors.MacroController"/> usage only.</remarks>
        </member>
        <member name="M:umbraco.page.PopulateElementData(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Puts the properties of the node into the elements table
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:umbraco.scripting.python">
            <summary>
            Something like a proxy to IronPython. Does some initial settings and calls.
            Maps IronPython's StandardOutput and StandardError to a simple string.
            </summary>
        </member>
        <member name="M:umbraco.scripting.python.initEnv">
            <summary>
            To be able to import umbraco dll's we have to append the umbraco path to python.
            It should also be possible to import other python scripts from umbracos python folder.
            And finally to run run some custom init stuff the script site.py in umbraco's
            root folder will be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.scripting.python.loadScripts">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.scripting.python.execute(System.String)">
            <summary>
            Executes a python command like in console 
            </summary>
            <param name="expression">command to execute</param>
            <returns>returns standard out of executed command</returns>
        </member>
        <member name="M:umbraco.scripting.python.executeFile(System.String)">
            <summary>
            Executes a python script like in console 
            </summary>
            <param name="file">absolute path to script</param>
            <returns>returns standard out of executed script</returns>
        </member>
        <member name="M:umbraco.scripting.python.compileFile(System.String)">
            <summary>
            Compiles a python script and add it to umbraco's script collection.
            If compilation fails then an exception will be raised.
            </summary>
            <param name="file">absolute path to script</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.scripting.python.tryCompile(System.String)">
            <summary>
            Compiles a python script.
            If compilation fails then an exception will be raised.
            </summary>
            <param name="file">absolute path to script</param>
            <returns></returns>
        </member>
        <member name="T:umbraco.scripting.PythonEngine">
            <summary>
            The Class PythonEngine is just a wrapper for the real class IronPython.Hosting.PythonEngine
            in IronPython. In this manner we does not need a hard reference to the IronPython assembly.
            I've implemented only the methods i need for my purpose.
            </summary>
        </member>
        <member name="T:umbraco.LegacyRequestHandler">
            <summary>
            THIS CLASS IS PURELY HERE TO SUPPORT THE QUERYBYXPATH METHOD WHICH IS USED BY OTHER LEGACY BITS
            </summary>    
        </member>
        <member name="T:umbraco.presentation.requestModule">
            <summary>
            Summary description for requestModule.
            </summary>
        </member>
        <member name="F:umbraco.presentation.requestModule.handlingError">
            <summary>True if the module is currently handling an error.</summary>
        </member>
        <member name="F:umbraco.presentation.requestModule.unhandledErrors">
            <summary>List of errors that occurred since the last error was being handled.</summary>
        </member>
        <member name="M:umbraco.presentation.requestModule.Application_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the Application control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.presentation.requestModule.UmbracoRewrite(System.Object,System.EventArgs)">
            <summary>
            Performs path rewriting.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.presentation.requestModule.Application_Error(System.Object,System.EventArgs)">
            <summary>
            Handles the Error event of the Application control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.presentation.requestModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            
            <param name="httpContext">An <see cref="T:System.Web.HttpApplication"></see> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application </param>
        </member>
        <member name="M:umbraco.presentation.requestModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
            
        </member>
        <member name="T:umbraco.layoutControls.ShowField">
            <summary>
            Summary description for ShowField.
            </summary>
        </member>
        <member name="M:umbraco.layoutControls.ShowField.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Render this control to the output parameter specified.
            </summary>
            <param name="output"></param>
        </member>
        <member name="T:umbraco.template">
            <summary>
            Holds methods for parsing and building umbraco templates
            </summary>
            
        </member>
        <member name="M:umbraco.template.Parse(umbraco.page)">
            <summary>
            Parses the content of the templateOutput stringbuilder, and matches any tags given in the
            XML-file /umbraco/config/umbracoTemplateTags.xml. 
            Replaces the found tags in the StringBuilder object, with "real content"
            </summary>
            <param name="umbPage"></param>
        </member>
        <member name="T:umbraco.presentation.UmbracoContext">
            <summary>
            Class that encapsulates Umbraco information of a specific HTTP request.
            </summary>
        </member>
        <member name="M:umbraco.presentation.UmbracoContext.#ctor(System.Web.HttpContextBase)">
            <summary>
            Creates a new Umbraco context.
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:umbraco.presentation.UmbracoContext.#ctor(System.Web.HttpContext)">
            <summary>
            Creates a new Umbraco context.
            </summary>
            <param name="httpContext">The HTTP context on which the Umbraco context operates.</param>
        </member>
        <member name="M:umbraco.presentation.UmbracoContext.HasPermission(System.Char)">
            <summary>
            Determines whether the current user has the specified permission on the current page.
            </summary>
            <param name="permissionToken">The permission token.</param>
            <returns>
            	<c>true</c> if the user has permission; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.presentation.UmbracoContext.GetBaseUrl">
            <summary>
            Gets the base URL for the website
            </summary>
            <returns></returns>
        </member>
        <member name="P:umbraco.presentation.UmbracoContext.Current">
            <summary>
            Gets the current Umbraco Context.
            </summary>
        </member>
        <member name="P:umbraco.presentation.UmbracoContext.PageId">
            <summary>
            Gets the current page ID, or <c>null</c> if no page ID is available (e.g. a custom page).
            </summary>
        </member>
        <member name="P:umbraco.presentation.UmbracoContext.UmbracoUser">
            <summary>
            Gets the current logged in Umbraco user (editor).
            </summary>
            <value>The Umbraco user object or null</value>
        </member>
        <member name="P:umbraco.presentation.UmbracoContext.InPreviewMode">
            <summary>
            Determines whether the current user is in a preview mode and browsing the site (ie. not in the admin UI)
            </summary>
        </member>
        <member name="P:umbraco.presentation.UmbracoContext.Response">
            <summary>
            Gets the response for the current context
            </summary>
            <value>The response.</value>
        </member>
        <member name="P:umbraco.presentation.UmbracoContext.Request">
            <summary>
            Gets the request for the current context
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:umbraco.presentation.UmbracoContext.InternalSearchProvider">
            <summary>
            Gets the internal search provider from Examine.
            </summary>
            <value>The internal search provider.</value>
        </member>
        <member name="P:umbraco.presentation.UmbracoContext.InternalMemberSearchProvider">
            <summary>
            Gets the internal member search provider from Examine.
            </summary>
            <value>The internal search provider.</value>
        </member>
        <member name="T:umbraco.layoutControls.umbracoPageHolder">
            <summary>
            Summary description for umbracoPageHolder.
            </summary>
        </member>
        <member name="M:umbraco.layoutControls.umbracoPageHolder.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Render this control to the output parameter specified.
            </summary>
            <param name="output"> The HTML writer to write out to </param>
        </member>
        <member name="T:umbraco.presentation.UmbracoRequest">
            <summary>
            A custom HttpRequestBase object which exposes some additional methods
            </summary>
            <remarks>
            The only reason this class exists is because somebody decided that it would be a good idea to piggy
            back the IsDebug method on top of the HttpRequest object. Unforunately when this was created it 
            inherited from HttpRequestWrapper intead of HttpRequestBase which meant that this is not unit testable
            and still has a dependency on a real HttpRequest. So now it inherits from HttpRequestBase which 
            means we need to override all of the methods and just wrap them with the _request object passed in.
            
            This now needs to exist only because of backwards compatibility
            </remarks>
        </member>
        <member name="P:umbraco.presentation.UmbracoRequest.IsDebug">
            <summary>
            Gets a value indicating whether the request has debugging enabled
            </summary>
            <value><c>true</c> if this instance is debug; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:umbraco.presentation.UmbracoResponse">
            <summary>
            A custom HttpResponseBase class
            
            The only reason this class exists is for backwards compatibility. Previously this used to 
            inherit from HttpResponseWrapper which is incorrect since it is not unit testable and means that
            it still has a reliance on the real HttpResponse object which means that the UmbracoContext still has 
            a reliance on the real HttpContext.
            </summary>
        </member>
        <member name="T:umbraco.presentation.UmbracoServerUtility">
            <summary>
            A custom HttpServerUtilityBase object which exposes some additional methods and also overrides
            some such as MapPath to use the IOHelper.
            </summary>
            <remarks>
            Unforunately when this class was created it 
            inherited from HttpServerUtilityWrapper intead of HttpServerUtilityBase which meant that this is not unit testable
            and still has a dependency on a real HttpRequest. So now it inherits from HttpRequestBase which 
            means we need to override all of the methods and just wrap them with the _server object passed in.
            
            This now needs to exist only because of backwards compatibility
            </remarks>
        </member>
        <member name="M:umbraco.presentation.UmbracoServerUtility.MapPath(System.String)">
            <summary>
            Returns the physical file path that corresponds to the specified virtual path on the Web server.
            </summary>
            <param name="path">The virtual path of the Web server.</param>
            <returns>
            The physical file path that corresponds to <paramref name="path"/>.
            </returns>
            <exception cref="T:System.Web.HttpException">
            The current <see cref="T:System.Web.HttpContext"/> is null.
            </exception>
        </member>
        <member name="P:umbraco.presentation.UmbracoServerUtility.ContentXml">
            <summary>
            Gets the Umbraco XML cache
            </summary>
            <value>The content XML.</value>
        </member>
        <member name="F:umbraco.presentation.actions.delete.Panel2">
            <summary>
            Panel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.delete.confirm">
            <summary>
            confirm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.delete.pane_delete">
            <summary>
            pane_delete control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.delete.warning">
            <summary>
            warning control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.delete.deleteButton">
            <summary>
            deleteButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.delete.deleteMessage">
            <summary>
            deleteMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.delete.deleted">
            <summary>
            deleted control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.actions.editContent">
            <summary>
            This page is used only to deeplink to the edit content page with the tree
            </summary>
            <summary>
            editContent class.
            </summary>
            <remarks>
            Auto-generated class.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.editContent.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.actions.preview">
            <summary>
            preview class.
            </summary>
            <remarks>
            Auto-generated class.
            </remarks>
        </member>
        <member name="M:umbraco.presentation.actions.preview.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the Page control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:umbraco.presentation.actions.preview.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.publish.Panel2">
            <summary>
            Panel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.publish.confirm">
            <summary>
            confirm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.publish.pane_publish">
            <summary>
            pane_publish control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.publish.warning">
            <summary>
            warning control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.publish.deleteButton">
            <summary>
            deleteButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.publish.deleteMessage">
            <summary>
            deleteMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.actions.publish.deleted">
            <summary>
            deleted control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:CookComputing.Blogger.Category">
            <summary>
            Struct representing a blog category
            </summary>
        </member>
        <member name="T:CookComputing.Blogger.Post">
            <summary>
            Struct representing a blog post
            </summary>
        </member>
        <member name="T:CookComputing.Blogger.UserInfo">
            <summary>
            Struct containing user information
            </summary>
        </member>
        <member name="T:CookComputing.Blogger.BlogInfo">
            <summary>
            Struct containing Blog information
            </summary>
        </member>
        <member name="T:umbraco.presentation.channels.api">
            <summary>
            the umbraco channels API is xml-rpc webservice based on the metaweblog and blogger APIs
            for editing umbraco data froom external clients
            </summary>
        </member>
        <member name="M:umbraco.presentation.channels.api.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.presentation.channels.api"/> class.
            </summary>
        </member>
        <member name="M:umbraco.presentation.channels.api.newMediaObject(System.String,System.String,System.String,CookComputing.MetaWeblog.FileData)">
            <summary>
            Makes a new file to a designated blog using the metaWeblog API
            </summary>
            <param name="blogid">The blogid.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="file">The file.</param>
            <returns>Returns url as a string of a struct.</returns>
        </member>
        <member name="M:umbraco.presentation.channels.api.getPageList(System.String,System.String,System.String)">
            <summary>
            Gets a summary of all the pages from the blog with the spefied blogId.
            </summary>
            <param name="blogid">The blogid.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.presentation.channels.api.getPages(System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets a specified number of pages from the blog with the spefied blogId 
            </summary>
            <param name="blogid">The blogid.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="numberOfItems">The number of pages.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.presentation.channels.api.newCategory(System.String,System.String,System.String,umbraco.presentation.channels.wpCategory)">
            <summary>
            Creates a new blog category / tag.
            </summary>
            <param name="blogid">The blogid.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="category">The category.</param>
            <returns></returns>
        </member>
        <member name="T:umbraco.presentation.channels.wordApi">
            <summary>
            Summary description for Test.
            </summary>
        </member>
        <member name="T:umbraco.controls.ContentControl">
            <summary>
            Summary description for ContentControl.
            </summary>
        </member>
        <member name="M:umbraco.controls.ContentControl.#ctor(umbraco.cms.businesslogic.Content,umbraco.controls.ContentControl.publishModes,System.String)">
            <summary>
            Constructor to set default properties.
            </summary>
            <param name="c"></param>
            <param name="CanPublish"></param>
            <param name="Id"></param>
            <remarks>
            This method used to create all of the child controls too which is BAD since
            the page hasn't started initializing yet. Control IDs were not being named
            correctly, etc... I've moved the child control setup/creation to the CreateChildControls
            method where they are suposed to be.
            </remarks>
        </member>
        <member name="M:umbraco.controls.ContentControl.CreateChildControls">
            <summary>
            Create and setup all of the controls child controls.
            </summary>
        </member>
        <member name="M:umbraco.controls.ContentControl.LoadPropertyTypes(Umbraco.Core.Models.IContentTypeComposition,umbraco.uicontrols.TabPage,System.Collections.Hashtable,System.Int32,System.String)">
            <summary>
            Loades PropertyTypes by Tab/PropertyGroup using the new API.
            </summary>
            <param name="contentType"></param>
            <param name="tabPage"></param>
            <param name="inTab"></param>
            <param name="tabId"></param>
            <param name="tabCaption"></param>
        </member>
        <member name="M:umbraco.controls.ContentControl.LoadPropertyTypes(umbraco.cms.businesslogic.ContentType.TabI,umbraco.uicontrols.TabPage,System.Collections.Hashtable)">
            <summary>
            Loades PropertyTypes by Tab using the Legacy API.
            </summary>
            <param name="tab"></param>
            <param name="tabPage"></param>
            <param name="inTab"></param>
        </member>
        <member name="M:umbraco.controls.ContentControl.OnInit(System.EventArgs)">
            <summary>
            Initializes the control and ensures child controls are setup
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.controls.ContentControl.NameTxtCustomValidatorServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Custom validates the content name field
            </summary>
            <param name="source"></param>
            <param name="args"></param>
            <remarks>
            We need to ensure people are not entering XSS attacks on this field
            http://issues.umbraco.org/issue/U4-485
            
            This doesn't actually 'validate' but changes the text field value and strips html
            </remarks>
        </member>
        <member name="M:umbraco.controls.ContentControl.SetNameAndDataTypeValues">
            <summary>
            Sets the name (text) and values on the data types of the document
            </summary>
        </member>
        <member name="M:umbraco.controls.ContentControl.FireBeforeContentControlLoad(umbraco.controls.ContentControlLoadEventArgs)">
            <summary>
            Fires the before content control load.
            </summary>
            <param name="e">The <see cref="T:umbraco.controls.ContentControlLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:umbraco.controls.ContentControl.FireAfterContentControlLoad(umbraco.controls.ContentControlLoadEventArgs)">
            <summary>
            Fires the before content control load.
            </summary>
            <param name="e">The <see cref="T:umbraco.controls.ContentControlLoadEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:umbraco.controls.ContentControl.SavePropertyDataWhenInvalid">
            <summary>
            This property controls whether the content property values are persisted even if validation 
            fails. If set to false, then the values will not be persisted.
            </summary>
            <remarks>
            This is required because when we are editing content we should be persisting invalid values to the database
            as this makes it easier for editors to come back and fix up their changes before they publish. Of course we
            don't publish if the page is invalid. In the case of media and members, we don't want to persist the values
            to the database when the page is invalid because there is no published state.
            Relates to: http://issues.umbraco.org/issue/U4-227
            </remarks>
        </member>
        <member name="E:umbraco.controls.ContentControl.BeforeContentControlLoad">
            <summary>
            Occurs when [before content control load].
            </summary>
        </member>
        <member name="E:umbraco.controls.ContentControl.AfterContentControlLoad">
            <summary>
            Occurs when [before content control load].
            </summary>
        </member>
        <member name="T:umbraco.controls.ContentTypeControl">
            <summary>
            Summary description for ContentTypeControl.
            </summary>
        </member>
        <member name="M:umbraco.controls.Images.ImageViewer.OnPreRender(System.EventArgs)">
            <summary>
            automatically bind if it's not explicitly called.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:umbraco.controls.Images.ImageViewer.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.ImageViewer.MultiView">
            <summary>
            MultiView control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.ImageViewer.Basic">
            <summary>
            Basic control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.ImageViewer.ImageLink">
            <summary>
            ImageLink control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.ImageViewer.ThumbnailPreview">
            <summary>
            ThumbnailPreview control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:umbraco.controls.Images.ImageViewer.ClientCallbackMethod">
            <summary>
            A JS method to invoke when the image is loaded. The method should accept the media ID.
            </summary>
        </member>
        <member name="T:umbraco.controls.Images.ImageViewer.Style">
            <summary>
            The style to render the image viewer in
            </summary>
        </member>
        <member name="T:umbraco.controls.Images.ImageViewerUpdater">
            <summary>
            An ajax service to return the html for an image based on a media id
            </summary>
        </member>
        <member name="M:umbraco.controls.Images.ImageViewerUpdater.UpdateImage(System.Int32,System.String,System.String)">
            <summary>
            return the a json object with the properties
            html = the html returned for rendering the image viewer
            mediaId = the media id loaded
            width = the width of the media (0) if not found
            height = the height of the media (0) if not found
            url = the url of the image
            alt = the alt text for the image
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.controls.Images.UploadMediaImage">
            <summary>
            A control to render out the controls to upload a new image to media.
            Includes ability to select where in the media you would like it to upload and also supports client
            callback methods once complete.
            </summary>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.pane_upload">
            <summary>
            pane_upload control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.pp_name">
            <summary>
            pp_name control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.TextBoxTitle">
            <summary>
            TextBoxTitle control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.pp_file">
            <summary>
            pp_file control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.UploadControl">
            <summary>
            UploadControl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.pp_target">
            <summary>
            pp_target control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.pp_button">
            <summary>
            pp_button control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.SubmitButton">
            <summary>
            SubmitButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.controls.Images.UploadMediaImage.feedback">
            <summary>
            feedback control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:umbraco.controls.Images.UploadMediaImage.OnClientUpload">
            <summary>
            The JavaScript method to be invoked once the image is uploaded, the page is rendered and the document is ready.
            The method will receive a JSON object with the following parameters:
            - imagePath
            - thumbnailPath
            - width
            - height
            - id
            </summary>
        </member>
        <member name="T:umbraco.controls.DualSelectbox">
            <summary>
            Summary description for dualSelectbox.
            </summary>
        </member>
        <member name="T:umbraco.controls.GenericProperties.GenericPropertyWrapper">
            <summary>
            Summary description for GenericPropertyWrapper.
            </summary>
        </member>
        <member name="M:umbraco.controls.macroParameterControl.UpdateParameter(System.String,System.String)">
            <summary>
            Updates the macro parameter.
            </summary>
            <param name="alias">The alias.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:umbraco.controls.macroParameterControl.GetMacroTag">
            <summary>
            Gets the macro tag.
            </summary>
            <returns>The correct syntax for the macro including all parameters</returns>
        </member>
        <member name="P:umbraco.controls.macroParameterControl.ParameterValues">
            <summary>
            Gets the parameter values.
            </summary>
            <value>The parameter values.</value>
        </member>
        <member name="T:umbraco.controls.Tree.CustomTreeControl">
            <summary>
            A custom tree control that uses a custom web service to return the initial node, this is required
            due to a bug that exists in Umbraco 4.5.1 tree control/web service.
            </summary>
            <remarks>
            Since we're inheriting from a UserControl and all of the ClientDependency registrations are done inline, we need
            to re-register the ClientDependencies.
            </remarks>
        </member>
        <member name="M:umbraco.controls.Tree.CustomTreeControl.OnInit(System.EventArgs)">
            <summary>
            Ensure child controls are created on  init
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.controls.Tree.CustomTreeControl.CreateChildControls">
            <summary>
            Create the child controls
            </summary>
        </member>
        <member name="M:umbraco.controls.Tree.CustomTreeControl.OnPreRender(System.EventArgs)">
            <summary>
            Adds the internal markup to the TreeContainer control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.controls.Tree.CustomTreeControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render out the correct markup for the tree
            </summary>
            <remarks>
            Since we're inheriting from a UserControl, we need to render out the markup manually
            </remarks>
            <param name="writer"></param>
        </member>
        <member name="T:umbraco.controls.Tree.CustomTreeService">
            <summary>
            Client side ajax utlities for the tree
            </summary>
        </member>
        <member name="M:umbraco.controls.Tree.CustomTreeService.GetNodeInfo(System.Int32)">
            <summary>
            Returns some info about the node such as path and id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.controls.Tree.CustomTreeService.GetPathNames(System.Int32[])">
            <summary>
            returns the node names for each id passed in
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.controls.Tree.CustomTreeService.GetInitAppTreeData(System.String,System.String,System.Boolean,System.Boolean,umbraco.cms.presentation.Trees.TreeDialogModes,System.String,System.String)">
            <summary>
            Returns a key/value object with: json, app, js as the keys
            </summary>	
            <returns></returns>
        </member>
        <member name="M:umbraco.controls.Tree.JTreeContextMenuItem.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Not implemented as we never need to Deserialize
            </summary>
            <param name="dictionary"></param>
            <param name="type"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="P:umbraco.controls.Tree.JTreeContextMenuItem.SupportedTypes">
            <summary>
            TODO: Find out why we can't just return IAction as one type (JavaScriptSerializer doesn't seem to pick up on it)
            </summary>
        </member>
        <member name="T:umbraco.controls.Tree.NodeInfo">
            <summary>
            Simple data object to hold information about a node
            </summary>
        </member>
        <member name="P:umbraco.controls.Tree.NodeInfo.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:umbraco.controls.Tree.NodeInfo.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:umbraco.controls.Tree.NodeInfo.PathAsNames">
            <summary>
            Gets or sets the path as names.
            </summary>
            <value>The path as names.</value>
        </member>
        <member name="P:umbraco.controls.Tree.NodeInfo.NodeType">
            <summary>
            Gets or sets the type of the node.
            </summary>
            <value>The type of the node.</value>
        </member>
        <member name="T:umbraco.memberTasks.NewUIMemberEventHandler">
            <summary>
            The new event handler
            </summary>
        </member>
        <member name="T:umbraco.XsltTasks">
             <summary>
             Summary description for standardTasks.
             </summary>
            
        </member>
        <member name="T:umbraco.cms.presentation.developer.RelationTypes.EditRelationType">
            <summary>
            Edit an existing RelationType
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType._relationType">
            <summary>
            Class scope reference to the current RelationType being edited
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType._relations">
            <summary>
            Class scope reference to the relations associated with the current RelationType
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType._parentObjectType">
            <summary>
            Umbraco ObjectType used to represent all parent items in this relation type
            </summary>
            
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType._childObjectType">
            <summary>
            Umbraco ObjectType used to represent all child items in this relation type
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.Page_Load(System.Object,System.EventArgs)">
            <summary>
            On Load event
            </summary>
            <param name="sender">this aspx page</param>
            <param name="e">EventArgs (expect empty)</param>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.CreateChildControls">
            <summary>
            Creates the child controls used in this page
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.AliasCustomValidator_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            check that alias hasn't been changed to clash with another (except itself)
            </summary>
            <param name="source">the aliasCustomValidator control</param>
            <param name="args">to set validation respose</param>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.RefreshMenuImageButton_Click(System.Object,System.Web.UI.ImageClickEventArgs)">
            <summary>
            Reload the relations, in case they have changed
            </summary>
            <param name="sender">expects refreshMenuImageButton</param>
            <param name="e">expects ImageClickEventArgs</param>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.saveMenuImageButton_Click(System.Object,System.EventArgs)">
            <summary>
            Save button in Umbraco menu
            </summary>
            <param name="sender">expects saveMenuImageButton object</param>
            <param name="e">expects ImageClickEventArgs</param>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.tabControl">
            <summary>
            tabControl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.idPane">
            <summary>
            idPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.idPropertyPanel">
            <summary>
            idPropertyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.idLiteral">
            <summary>
            idLiteral control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.nameAliasPane">
            <summary>
            nameAliasPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.nameProperyPanel">
            <summary>
            nameProperyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.nameTextBox">
            <summary>
            nameTextBox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.nameRequiredFieldValidator">
            <summary>
            nameRequiredFieldValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.aliasPropertyPanel">
            <summary>
            aliasPropertyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.aliasTextBox">
            <summary>
            aliasTextBox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.aliasRequiredFieldValidator">
            <summary>
            aliasRequiredFieldValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.aliasCustomValidator">
            <summary>
            aliasCustomValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.directionPane">
            <summary>
            directionPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.dualPropertyPanel">
            <summary>
            dualPropertyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.dualRadioButtonList">
            <summary>
            dualRadioButtonList control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.objectTypePane">
            <summary>
            objectTypePane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.parentPropertyPanel">
            <summary>
            parentPropertyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.parentLiteral">
            <summary>
            parentLiteral control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.childPropertyPanel">
            <summary>
            childPropertyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.childLiteral">
            <summary>
            childLiteral control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.relationsCountPane">
            <summary>
            relationsCountPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.relationsCountPropertyPanel">
            <summary>
            relationsCountPropertyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.relationsCountLiteral">
            <summary>
            relationsCountLiteral control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.relationsPane">
            <summary>
            relationsPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.relationsPropertyPanel">
            <summary>
            relationsPropertyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.relationsRepeater">
            <summary>
            relationsRepeater control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.ParentObjectType">
            <summary>
            Gets the name of the parent object type for all relations in this relation type 
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.ChildObjectType">
            <summary>
            Gets the name of the child object type for all relations in this relation type
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.RelationTypeDirection">
            <summary>
            Gets a string representing the current relation type direction
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.EditRelationType.Relations">
            <summary>
            Gets the Relations for this RelationType, via lazy load
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.developer.RelationTypes.NewRelationType">
            <summary>
            Add a new Relation Type
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.Page_Load(System.Object,System.EventArgs)">
            <summary>
            On Load event
            </summary>
            <param name="sender">this aspx page</param>
            <param name="e">EventArgs (expect empty)</param>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.AliasCustomValidator_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Server side validation to ensure there are no existing relationshipTypes with the alias of
            the relation type being added
            </summary>
            <param name="source">the aliasCustomValidator control</param>
            <param name="args">to set validation respose</param>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.AddButton_Click(System.Object,System.EventArgs)">
            <summary>
            Add a new relation type into the database, and redirects to it's editing page.
            </summary>
            <param name="sender">expects the addButton control</param>
            <param name="e">expects EventArgs for addButton</param>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.AppendUmbracoObjectTypes(System.Web.UI.WebControls.ListControl)">
            <summary>
            Adds the Umbraco Object types to a drop down list
            </summary>
            <param name="dropDownList">control for which to add the Umbraco object types</param>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.nameAliasPane">
            <summary>
            nameAliasPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.nameProperyPanel">
            <summary>
            nameProperyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.descriptionTextBox">
            <summary>
            descriptionTextBox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.descriptionRequiredFieldValidator">
            <summary>
            descriptionRequiredFieldValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.aliasPropertyPanel">
            <summary>
            aliasPropertyPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.aliasTextBox">
            <summary>
            aliasTextBox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.aliasRequiredFieldValidator">
            <summary>
            aliasRequiredFieldValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.aliasCustomValidator">
            <summary>
            aliasCustomValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.directionPane">
            <summary>
            directionPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.dualRadioButtonList">
            <summary>
            dualRadioButtonList control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.objectTypePane">
            <summary>
            objectTypePane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.PropertyPanel2">
            <summary>
            PropertyPanel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.parentDropDownList">
            <summary>
            parentDropDownList control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.PropertyPanel3">
            <summary>
            PropertyPanel3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.childDropDownList">
            <summary>
            childDropDownList control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.NewRelationType.addButton">
            <summary>
            addButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation">
            <summary>
             This is used to build a collection of relations from a single sql statement,
             as the umbraco.cms.businesslogic.relation.Relation obj will hit the DB for each instace it creates
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation.Id">
            <summary>
            Gets or sets the Relation Id
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation.ParentId">
            <summary>
            Gets or sets Relation Parent Id
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation.ParentText">
            <summary>
            Gets or sets Relation Parent Text
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation.ChildId">
            <summary>
            Gets or sets Relation Child Id
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation.ChildText">
            <summary>
            Gets or sets Relation Child Text
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation.RelType">
            <summary>
            Gets or sets Relation RelationType Id
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation.DateTime">
            <summary>
            Gets or sets Relation DateTime
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.ReadOnlyRelation.Comment">
            <summary>
            Gets or sets Relation Comment
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.developer.RelationTypes.RelationTypesWebService">
            <summary>
            Webservice to delete relation types, this allows deletion via a javacscript call hooked into the tree UI
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.developer.RelationTypes.RelationTypesWebService.DeleteRelationType(System.Int32)">
            <summary>
            Delete an Umbraco RelationType and all it's associated Relations
            </summary>
            <param name="relationTypeId">database id of the relation type to delete</param>
        </member>
        <member name="T:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType">
            <summary>
            Delete a Relation Type - an Umbraco tree context menu action
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.instance">
            <summary>
            Private field for the singleton instance
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.Instance">
            <summary>
            Gets a singleton instance of this action
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.Alias">
            <summary>
            Gets a string alias used to identify this action
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.Letter">
            <summary>
            Gets a unique char to associate with this action
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.ShowInNotifier">
            <summary>
            Gets a value indicating whether the Umbraco notification area is used ?
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.CanBePermissionAssigned">
            <summary>
            Gets a value indicating whether this action can be configured for use only by specific members
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.Icon">
            <summary>
            Gets an icon to be used for the right click action 
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.JsSource">
            <summary>
            Gets a string for the javascript source
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionDeleteRelationType.JsFunctionName">
            <summary>
            Gets a javascript string to execute when this action is fired
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType">
            <summary>
            Create new Relation Type - an Umbraco tree context menu action
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.instance">
            <summary>
            Private field for the singleton instance
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.Instance">
            <summary>
            Gets a singleton instance of this action
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.Alias">
            <summary>
            Gets a string alias used to identify this action
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.Letter">
            <summary>
            Gets a unique char to associate with this action
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.ShowInNotifier">
            <summary>
            Gets a value indicating whether the Umbraco notification area is used ?
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.CanBePermissionAssigned">
            <summary>
            Gets a value indicating whether this action can be configured for use only by specific members
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.Icon">
            <summary>
            Gets an icon to be used for the right click action 
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.JsSource">
            <summary>
            Gets a string for the javascript source
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.developer.RelationTypes.TreeMenu.ActionNewRelationType.JsFunctionName">
            <summary>
            Gets a javascript string to execute when this action is fired
            </summary>
        </member>
        <member name="F:umbraco.presentation.dialogs.Preview.feedback1">
            <summary>
            feedback1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.Preview.pane_form">
            <summary>
            pane_form control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.Preview.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.Preview.docLit">
            <summary>
            docLit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.Preview.PropertyPanel2">
            <summary>
            PropertyPanel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.Preview.changeSetUrl">
            <summary>
            changeSetUrl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.members.MemberSearch.searchQuery">
            <summary>
            searchQuery control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.members.MemberSearch.ButtonSearch">
            <summary>
            ButtonSearch control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.members.MemberSearch.resultsPane">
            <summary>
            resultsPane control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.members.MemberSearch.rp_members">
            <summary>
            rp_members control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.nodeFactory.Node">
            <summary>
            Summary description for Node.
            </summary>
        </member>
        <member name="M:umbraco.presentation.nodeFactory.Node.#ctor(System.Int32,System.Boolean)">
            <summary>
            Special constructor for by-passing published vs. preview xml to use
            when updating the SiteMapProvider
            </summary>
            <param name="NodeId"></param>
            <param name="forcePublishedXml"></param>
        </member>
        <member name="M:umbraco.presentation.preview.PreviewContent.ValidatePreviewPath">
            <summary>
            Checks a preview file exist based on preview cookie
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.presentation.umbraco.Search.ExamineEvents">
            <summary>
            Used to wire up events for Examine
            </summary>
        </member>
        <member name="F:umbraco.presentation.umbraco.developer.Xslt.xsltVisualize.Pane1">
            <summary>
            Pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.developer.Xslt.xsltVisualize.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.developer.Xslt.xsltVisualize.xsltSelection">
            <summary>
            xsltSelection control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.developer.Xslt.xsltVisualize.contentPicker">
            <summary>
            contentPicker control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.developer.Xslt.xsltVisualize.visualizeDo">
            <summary>
            visualizeDo control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.developer.Xslt.xsltVisualize.visualizeContainer">
            <summary>
            visualizeContainer control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.developer.Xslt.xsltVisualize.visualizePanel">
            <summary>
            visualizePanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.developer.Xslt.xsltVisualize.visualizeArea">
            <summary>
            visualizeArea control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.insertMasterpageContent.pane_insert">
            <summary>
            pane_insert control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.insertMasterpageContent.pp_placeholder">
            <summary>
            pp_placeholder control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.insertMasterpageContent.dd_detectedAlias">
            <summary>
            dd_detectedAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.insertMasterpagePlaceholder.tb_alias">
            <summary>
            tb_alias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.mediaPicker.pane_src">
            <summary>
            pane_src control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.mediaPicker.ImageViewer">
            <summary>
            ImageViewer control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.mediaPicker.tv_options">
            <summary>
            tv_options control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.mediaPicker.pane_select">
            <summary>
            pane_select control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.mediaPicker.DialogTree">
            <summary>
            DialogTree control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.mediaPicker.pane_upload">
            <summary>
            pane_upload control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.mediaPicker.MediaUploader">
            <summary>
            MediaUploader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.republish">
            <summary>
            Summary description for republish.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.republish.p_republish">
            <summary>
            p_republish control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.republish.bt_go">
            <summary>
            bt_go control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.republish.progbar">
            <summary>
            progbar control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.republish.p_done">
            <summary>
            p_done control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.search.Wizard">
            <summary>
            Wizard control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.search.keyword">
            <summary>
            keyword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.search.searchButton">
            <summary>
            searchButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.search.nothingFound">
            <summary>
            nothingFound control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.search.searchResult">
            <summary>
            searchResult control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.SendPublish">
            <summary>
            Runs all action handlers for the ActionToPublish action for the document with
            the corresponding document id passed in by query string
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.create.controls.content">
            <summary>
            	Summary description for content.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.content.typeJs">
            <summary>
            typeJs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.content.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.content.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.content.nodeType">
            <summary>
            nodeType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.content.RequiredFieldValidator2">
            <summary>
            RequiredFieldValidator2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.content.Textbox1">
            <summary>
            Textbox1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.content.descr">
            <summary>
            descr control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.content.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.create.dialogHandler_temp">
            <summary>
            Summary description for dialogHandler_temp.
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.create.controls.media">
            <summary>
            	Summary description for media.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.create.controls.media.InitializeComponent">
            <summary>
            	Required method for Designer support - do not modify
            	the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.media.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.media.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.media.nodeType">
            <summary>
            nodeType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.media.Textbox1">
            <summary>
            Textbox1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.media.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.create.controls.member">
            <summary>
            	Summary description for member.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.create.controls.member.LoginExistsCheck(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Validation to Check if Login Name Exists
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:umbraco.cms.presentation.create.controls.member.EmailExistsCheck(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Validation to Check if Member with email Exists
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.EmailValidator">
            <summary>
            EmailValidator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.validationSummary">
            <summary>
            validationSummary control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.nameLiteral">
            <summary>
            nameLiteral control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.nameRequired">
            <summary>
            nameRequired control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.memberChooser">
            <summary>
            memberChooser control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.memberTypeRequired">
            <summary>
            memberTypeRequired control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.nodeType">
            <summary>
            nodeType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.loginRequired">
            <summary>
            loginRequired control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.loginExistsCheck">
            <summary>
            loginExistsCheck control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.Login">
            <summary>
            Login control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.emailRequired">
            <summary>
            emailRequired control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.emailExistsCheck">
            <summary>
            emailExistsCheck control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.Email">
            <summary>
            Email control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.PasswordRules">
            <summary>
            PasswordRules control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.passwordRequired">
            <summary>
            passwordRequired control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.Password">
            <summary>
            Password control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.Textbox1">
            <summary>
            Textbox1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.member.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.create.controls.nodeType">
            <summary>
            	Summary description for nodeType.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.create.controls.nodeType.Page_Load(System.Object,System.EventArgs)">
            <summary>
            The page_load.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.pp_MasterDocumentType">
            <summary>
            pp_MasterDocumentType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.masterType">
            <summary>
            masterType control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.masterTypePreDefined">
            <summary>
            masterTypePreDefined control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.pp_name">
            <summary>
            pp_name control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.rename">
            <summary>
            rename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.createTemplate">
            <summary>
            createTemplate control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.Textbox1">
            <summary>
            Textbox1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.CustomValidation1">
            <summary>
            CustomValidation1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.CustomValidation2">
            <summary>
            CustomValidation2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.create.controls.nodeType.sbmt">
            <summary>
            sbmt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:dashboardUtilities.LatestEdits">
            <summary>
            	Summary description for LatestEdits.
            </summary>
        </member>
        <member name="M:dashboardUtilities.LatestEdits.InitializeComponent">
            <summary>
            	Required method for Designer support - do not modify
            	the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:dashboardUtilities.LatestEdits.Repeater1">
            <summary>
            Repeater1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.developer.assemblyBrowser">
            <summary>
            Summary description for assemblyBrowser.
            </summary>
        </member>
        <member name="F:umbraco.developer.assemblyBrowser.AssemblyName">
            <summary>
            AssemblyName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.assemblyBrowser.ChooseProperties">
            <summary>
            ChooseProperties control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.assemblyBrowser.MacroProperties">
            <summary>
            MacroProperties control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.assemblyBrowser.Button1">
            <summary>
            Button1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.assemblyBrowser.ConfigProperties">
            <summary>
            ConfigProperties control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.assemblyBrowser.resultLiteral">
            <summary>
            resultLiteral control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.developer.autoDoc">
            <summary>
            Summary description for autoDoc.
            </summary>
        </member>
        <member name="F:umbraco.presentation.developer.packages.BrowseRepository.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.BrowseRepository.fb">
            <summary>
            fb control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.BrowseRepository.iframeGen">
            <summary>
            iframeGen control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.TabView1">
            <summary>
            TabView1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane1">
            <summary>
            Pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_name">
            <summary>
            pp_name control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageName">
            <summary>
            packageName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.RequiredFieldValidator0">
            <summary>
            RequiredFieldValidator0 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_url">
            <summary>
            pp_url control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageUrl">
            <summary>
            packageUrl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_version">
            <summary>
            pp_version control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageVersion">
            <summary>
            packageVersion control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.RequiredFieldValidator2">
            <summary>
            RequiredFieldValidator2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_file">
            <summary>
            pp_file control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.bt_submitButton">
            <summary>
            bt_submitButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageUmbFile">
            <summary>
            packageUmbFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane1_1">
            <summary>
            Pane1_1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_author">
            <summary>
            pp_author control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageAuthorName">
            <summary>
            packageAuthorName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.RequiredFieldValidator3">
            <summary>
            RequiredFieldValidator3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_author_url">
            <summary>
            pp_author_url control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageAuthorUrl">
            <summary>
            packageAuthorUrl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.RequiredFieldValidator4">
            <summary>
            RequiredFieldValidator4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane1_2">
            <summary>
            Pane1_2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_licens">
            <summary>
            pp_licens control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageLicenseName">
            <summary>
            packageLicenseName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.RequiredFieldValidator5">
            <summary>
            RequiredFieldValidator5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_license_url">
            <summary>
            pp_license_url control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageLicenseUrl">
            <summary>
            packageLicenseUrl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.RequiredFieldValidator6">
            <summary>
            RequiredFieldValidator6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane1_3">
            <summary>
            Pane1_3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_readme">
            <summary>
            pp_readme control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageReadme">
            <summary>
            packageReadme control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane2">
            <summary>
            Pane2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.pp_content">
            <summary>
            pp_content control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.content">
            <summary>
            content control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageContentSubdirs">
            <summary>
            packageContentSubdirs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane2_1">
            <summary>
            Pane2_1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.documentTypes">
            <summary>
            documentTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane2_2">
            <summary>
            Pane2_2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.templates">
            <summary>
            templates control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane2_3">
            <summary>
            Pane2_3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.stylesheets">
            <summary>
            stylesheets control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane2_4">
            <summary>
            Pane2_4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.macros">
            <summary>
            macros control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane2_5">
            <summary>
            Pane2_5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.languages">
            <summary>
            languages control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane2_6">
            <summary>
            Pane2_6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.dictionary">
            <summary>
            dictionary control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane2_7">
            <summary>
            Pane2_7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.cbl_datatypes">
            <summary>
            cbl_datatypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane3">
            <summary>
            Pane3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane3_1">
            <summary>
            Pane3_1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageFilesRepeater">
            <summary>
            packageFilesRepeater control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageFilePathNew">
            <summary>
            packageFilePathNew control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.createNewFilePath">
            <summary>
            createNewFilePath control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane3_2">
            <summary>
            Pane3_2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.packageControlPath">
            <summary>
            packageControlPath control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.Pane4">
            <summary>
            Pane4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.actionsVal">
            <summary>
            actionsVal control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages._Default.tb_actions">
            <summary>
            tb_actions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pane_meta">
            <summary>
            pane_meta control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_name">
            <summary>
            pp_name control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.lt_packagename">
            <summary>
            lt_packagename control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_version">
            <summary>
            pp_version control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.lt_packageVersion">
            <summary>
            lt_packageVersion control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_author">
            <summary>
            pp_author control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.lt_packageAuthor">
            <summary>
            lt_packageAuthor control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_documentation">
            <summary>
            pp_documentation control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.hl_docLink">
            <summary>
            hl_docLink control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.lb_demoLink">
            <summary>
            lb_demoLink control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_repository">
            <summary>
            pp_repository control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.hl_packageRepo">
            <summary>
            hl_packageRepo control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_readme">
            <summary>
            pp_readme control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.lt_readme">
            <summary>
            lt_readme control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pane_versions">
            <summary>
            pane_versions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_versions">
            <summary>
            pp_versions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.rptr_versions">
            <summary>
            rptr_versions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pane_upgrade">
            <summary>
            pane_upgrade control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_upgradeInstruction">
            <summary>
            pp_upgradeInstruction control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.lt_upgradeReadme">
            <summary>
            lt_upgradeReadme control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.bt_gotoUpgrade">
            <summary>
            bt_gotoUpgrade control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pane_noItems">
            <summary>
            pane_noItems control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.bt_deletePackage">
            <summary>
            bt_deletePackage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pane_uninstall">
            <summary>
            pane_uninstall control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_docTypes">
            <summary>
            pp_docTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.documentTypes">
            <summary>
            documentTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_templates">
            <summary>
            pp_templates control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.templates">
            <summary>
            templates control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_css">
            <summary>
            pp_css control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.stylesheets">
            <summary>
            stylesheets control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_macros">
            <summary>
            pp_macros control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.macros">
            <summary>
            macros control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_files">
            <summary>
            pp_files control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.files">
            <summary>
            files control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_di">
            <summary>
            pp_di control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.dictionaryItems">
            <summary>
            dictionaryItems control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_dt">
            <summary>
            pp_dt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.dataTypes">
            <summary>
            dataTypes control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pp_confirm">
            <summary>
            pp_confirm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.bt_confirmUninstall">
            <summary>
            bt_confirmUninstall control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.progbar">
            <summary>
            progbar control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.installedPackage.pane_uninstalled">
            <summary>
            pane_uninstalled control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.LoadNitros.loadNitros">
            <summary>
            loadNitros control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.LoadNitros.ph_recommendedHolder">
            <summary>
            ph_recommendedHolder control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.LoadNitros.rep_nitros">
            <summary>
            rep_nitros control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.LoadNitros.bt_install">
            <summary>
            bt_install control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.fb_feedback">
            <summary>
            fb_feedback control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.feedbackControls">
            <summary>
            feedbackControls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.Pane2">
            <summary>
            Pane2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.pl_repoChoose">
            <summary>
            pl_repoChoose control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.dd_repositories">
            <summary>
            dd_repositories control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.pl_repoLogin">
            <summary>
            pl_repoLogin control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.publicRepoHelp">
            <summary>
            publicRepoHelp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.privateRepoHelp">
            <summary>
            privateRepoHelp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.PropertyPanel2">
            <summary>
            PropertyPanel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.tb_email">
            <summary>
            tb_email control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.RequiredFieldValidator1">
            <summary>
            RequiredFieldValidator1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.PropertyPanel3">
            <summary>
            PropertyPanel3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.tb_password">
            <summary>
            tb_password control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.Pane1">
            <summary>
            Pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.PropertyPanel4">
            <summary>
            PropertyPanel4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.PropertyPanel5">
            <summary>
            PropertyPanel5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.fu_doc">
            <summary>
            fu_doc control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.doc_regex">
            <summary>
            doc_regex control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.submitControls">
            <summary>
            submitControls control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.developer.packages.SubmitPackage.bt_submit">
            <summary>
            bt_submit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.developer.getXsltStatus">
            <summary>
            Summary description for getXsltStatus.
            </summary>
        </member>
        <member name="M:umbraco.developer.getXsltStatus.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:umbraco.developer.getXsltStatus.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:umbraco.developer.xsltChooseExtension">
            <summary>
            Summary description for xsltChooseExtension.
            </summary>
        </member>
        <member name="M:umbraco.developer.xsltChooseExtension.GetXsltAssembliesAndMethods">
            <summary>
            Gets the XSLT assemblies and their methods.
            </summary>
            <returns>A list of assembly names linked to a list of method signatures.</returns>
        </member>
        <member name="M:umbraco.developer.xsltChooseExtension.GetStaticMethods(System.Type)">
            <summary>
            Gets the static methods of the specified type, alphabetically sorted.
            </summary>
            <param name="type">The type.</param>
            <returns>A sortd list with method signatures.</returns>
        </member>
        <member name="M:umbraco.developer.xsltChooseExtension.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.developer.xsltChooseExtension.assemblies">
            <summary>
            assemblies control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.xsltChooseExtension.methods">
            <summary>
            methods control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.xsltChooseExtension.PlaceHolderParamters">
            <summary>
            PlaceHolderParamters control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.xsltChooseExtension.bt_insert">
            <summary>
            bt_insert control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.developer.xsltInsertValueOf">
            <summary>
            Summary description for xsltInsertValueOf.
            </summary>
        </member>
        <member name="F:umbraco.developer.xsltInsertValueOf.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.xsltInsertValueOf.valueOf">
            <summary>
            valueOf control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.xsltInsertValueOf.preValues">
            <summary>
            preValues control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.developer.xsltInsertValueOf.disableOutputEscaping">
            <summary>
            disableOutputEscaping control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.about">
            <summary>
            Summary description for about.
            </summary>
        </member>
        <member name="M:umbraco.dialogs.about.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.about.version">
            <summary>
            version control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.about.thisYear">
            <summary>
            thisYear control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.dialogs.exportDocumenttype">
            <summary>
            Summary description for exportDocumenttype.
            </summary>
        </member>
        <member name="M:umbraco.presentation.dialogs.exportDocumenttype.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.imageViewer.Form1">
            <summary>
            Form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.imageViewer.image">
            <summary>
            image control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.umbraco.dialogs.importDocumentType">
            <summary>
            Summary description for importDocumentType.
            </summary>
        </member>
        <member name="M:umbraco.presentation.umbraco.dialogs.importDocumentType.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:umbraco.dialogs.insertMacro">
            <summary>
            Summary description for insertMacro.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.insertMacro.pane_edit">
            <summary>
            pane_edit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.insertMacro.macroProperties">
            <summary>
            macroProperties control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.insertMacro.pane_insert">
            <summary>
            pane_insert control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.insertMacro.macroAlias">
            <summary>
            macroAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.insertTable">
            <summary>
            Summary description for insertTable.
            </summary>
        </member>
        <member name="M:umbraco.dialogs.insertTable.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.insertTable.tableForm">
            <summary>
            tableForm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.insertTable.tableClass">
            <summary>
            tableClass control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.dialogs.notifications">
            <summary>
            Summary description for cruds.
            </summary>
        </member>
        <member name="M:umbraco.dialogs.notifications.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.dialogs.notifications.pane_form">
            <summary>
            pane_form control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.notifications.pl_buttons">
            <summary>
            pl_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.notifications.Button1">
            <summary>
            Button1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.RegexWs.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.RegexWs.pane1">
            <summary>
            pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.RegexWs.pp_search">
            <summary>
            pp_search control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.RegexWs.searchField">
            <summary>
            searchField control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.RegexWs.bt_search">
            <summary>
            bt_search control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.RegexWs.regexPanel">
            <summary>
            regexPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.RegexWs.results">
            <summary>
            results control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.dialogs.rollBack">
            <summary>
            Summary description for rollBack.
            </summary>
        </member>
        <member name="M:umbraco.presentation.dialogs.rollBack.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.feedBackMsg">
            <summary>
            feedBackMsg control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.pp_selectVersion">
            <summary>
            pp_selectVersion control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.pp_currentVersion">
            <summary>
            pp_currentVersion control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.currentVersionTitle">
            <summary>
            currentVersionTitle control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.currentVersionMeta">
            <summary>
            currentVersionMeta control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.pp_rollBackTo">
            <summary>
            pp_rollBackTo control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.allVersions">
            <summary>
            allVersions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.pp_view">
            <summary>
            pp_view control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.rbl_mode">
            <summary>
            rbl_mode control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.diffPanel">
            <summary>
            diffPanel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.lt_notice">
            <summary>
            lt_notice control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.propertiesCompare">
            <summary>
            propertiesCompare control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.pl_buttons">
            <summary>
            pl_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.rollBack.Button1">
            <summary>
            Button1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.feedback">
            <summary>
            feedback control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.pane_form">
            <summary>
            pane_form control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.pp_translator">
            <summary>
            pp_translator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.translator">
            <summary>
            translator control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.pp_language">
            <summary>
            pp_language control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.language">
            <summary>
            language control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.defaultLanguage">
            <summary>
            defaultLanguage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.pp_includeSubs">
            <summary>
            pp_includeSubs control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.includeSubpages">
            <summary>
            includeSubpages control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.pp_comment">
            <summary>
            pp_comment control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.comment">
            <summary>
            comment control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.pl_buttons">
            <summary>
            pl_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.dialogs.sendToTranslation.doTranslation">
            <summary>
            doTranslation control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.dialogs.uploadImage.MediaUploader">
            <summary>
            MediaUploader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.umbraco.dialogs.viewAuditTrail">
            <summary>
            Summary description for viewAuditTrail.
            </summary>
        </member>
        <member name="M:umbraco.presentation.umbraco.dialogs.viewAuditTrail.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.viewAuditTrail.CssInclude2">
            <summary>
            CssInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.viewAuditTrail.CssInclude3">
            <summary>
            CssInclude3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.dialogs.viewAuditTrail.auditLog">
            <summary>
            auditLog control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.members.EditMemberGroup">
            <summary>
            Summary description for EditMemberGroup.
            </summary>
        </member>
        <member name="M:umbraco.presentation.members.EditMemberGroup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.presentation.members.EditMemberGroup.memberGroupName">
            <summary>
            memberGroupName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.members.EditMemberGroup.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.members.EditMemberGroup.Pane7">
            <summary>
            Pane7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.members.EditMemberGroup.NameTxt">
            <summary>
            NameTxt control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="M:umbraco.cms.presentation.members.EditMemberType.ContentTypeControlNew1_SavingContentType(umbraco.cms.businesslogic.ContentType)">
            <summary>
            Executes some code before the member type is saved, this allows us to save the member can edit/member can view information
            before the Save() command is executed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:umbraco.cms.presentation.members.EditMemberType.Pane1andmore">
            <summary>
            Pane1andmore control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.members.EditMemberType.dgEditExtras">
            <summary>
            dgEditExtras control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.members.search.Panel2">
            <summary>
            Panel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.members.ViewMembers.panel1">
            <summary>
            panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.members.ViewMembers.pane1">
            <summary>
            pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.members.ViewMembers.rp_members">
            <summary>
            rp_members control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.GzipCompressor">
            <summary>
            Description of GzipCompressor.
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.GzipCompressor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.GzipCompressor.AddFile(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.GzipCompressor.AddData(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.GzipCompressor.Compress(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="to_stream"></param>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.GzipCompressor.NoCompression">
            <summary>
            
            </summary>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.GzipCompressor.DiskCache">
            <summary>
            
            </summary>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.GzipCompressor.CachePath">
            <summary>
            
            </summary>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.GzipModule">
            <summary>
            Description of HttpHandler.
            </summary>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.IModule">
            <summary>
            Description of IModule.
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.IModule.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.GzipModule.ProcessRequest(System.Web.HttpContext)">
            <summary></summary>
            <param name="context">Request context.</param>
        </member>
        <member name="F:umbraco.presentation.umbraco.plugins.tinymce3.InsertAnchor.ClientLoader">
            <summary>
            ClientLoader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.plugins.tinymce3.InsertAnchor.JsInclude4">
            <summary>
            JsInclude4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.plugins.tinymce3.InsertAnchor.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.plugins.tinymce3.insertChar.ClientLoader">
            <summary>
            ClientLoader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.plugins.tinymce3.insertChar.JsInclude4">
            <summary>
            JsInclude4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.plugins.tinymce3.insertChar.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.ClientLoader">
            <summary>
            ClientLoader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.JsInclude9">
            <summary>
            JsInclude9 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.JsInclude8">
            <summary>
            JsInclude8 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.JsInclude4">
            <summary>
            JsInclude4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.JsInclude5">
            <summary>
            JsInclude5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.JsInclude6">
            <summary>
            JsInclude6 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.JsInclude7">
            <summary>
            JsInclude7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.JsInclude2">
            <summary>
            JsInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.Form1">
            <summary>
            Form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.ScriptManager1">
            <summary>
            ScriptManager1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.pane_src">
            <summary>
            pane_src control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.ImageViewer">
            <summary>
            ImageViewer control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.pp_src">
            <summary>
            pp_src control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.pp_title">
            <summary>
            pp_title control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.pp_dimensions">
            <summary>
            pp_dimensions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.lt_widthLabel">
            <summary>
            lt_widthLabel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.lt_heightLabel">
            <summary>
            lt_heightLabel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.tv_options">
            <summary>
            tv_options control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.pane_select">
            <summary>
            pane_select control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.DialogTree">
            <summary>
            DialogTree control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.pane_upload">
            <summary>
            pane_upload control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertImage.MediaUploader">
            <summary>
            MediaUploader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.Head1">
            <summary>
            Head1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.ClientLoader">
            <summary>
            ClientLoader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.JsInclude3">
            <summary>
            JsInclude3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.JsInclude4">
            <summary>
            JsInclude4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.JsInclude5">
            <summary>
            JsInclude5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.pane_url">
            <summary>
            pane_url control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.PropertyPanel1">
            <summary>
            PropertyPanel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.PropertyPanel2">
            <summary>
            PropertyPanel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.PropertyPanel3">
            <summary>
            PropertyPanel3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.tv_options">
            <summary>
            tv_options control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.pane_content">
            <summary>
            pane_content control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.TreeControl2">
            <summary>
            TreeControl2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.pane_media">
            <summary>
            pane_media control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.insertLink.TreeControl1">
            <summary>
            TreeControl1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.tinymce3.insertMacro">
            <summary>
            Summary description for insertMacro.
            </summary>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.ClientLoader">
            <summary>
            ClientLoader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.JsInclude8">
            <summary>
            JsInclude8 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.JsInclude3">
            <summary>
            JsInclude3 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.JsInclude4">
            <summary>
            JsInclude4 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.JsInclude5">
            <summary>
            JsInclude5 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.Form1">
            <summary>
            Form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.ScriptManager1">
            <summary>
            ScriptManager1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.pane_edit">
            <summary>
            pane_edit control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.macroProperties">
            <summary>
            macroProperties control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.edit_buttons">
            <summary>
            edit_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.bt_renderMacro">
            <summary>
            bt_renderMacro control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.pane_insert">
            <summary>
            pane_insert control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.pp_selectMacro">
            <summary>
            pp_selectMacro control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.umb_macroAlias">
            <summary>
            umb_macroAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.insert_buttons">
            <summary>
            insert_buttons control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.renderHolder">
            <summary>
            renderHolder control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.tinymce3.insertMacro.jQueryReady">
            <summary>
            jQueryReady control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.JSON">
            <summary>
            Description of JSON.
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSON.SerializeRPC(System.String,System.Object,System.Object,System.IO.Stream)">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSON.WriteObject(System.IO.TextWriter,System.Object)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="obj"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSON.ParseJSON(System.IO.TextReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSON.ParseRPC(System.IO.TextReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.JSONRpcCall">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONRpcCall.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.JSONRpcCall.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.JSONRpcCall.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.JSONRpcCall.Args">
            <summary>
            
            </summary>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.JSONToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.Boolean">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.Integer">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.String">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.Null">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.Float">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.StartArray">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.EndArray">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.PropertyName">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.StartObject">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONToken.EndObject">
            <summary> </summary>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.JSONReader">
            <summary>
             Description of JSONReader.
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONReader.#ctor(System.IO.TextReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONReader.Read">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONReader.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.JSONReader.Location">
            <summary>
            
            </summary>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.JSONReader.TokenType">
            <summary>
            
            </summary>
        </member>
        <member name="P:umbraco.presentation.plugins.tinymce3.JSONReader.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.JSONLocation">
            <summary>
            
            </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONLocation.InArray">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONLocation.InObject">
            <summary> </summary>
        </member>
        <member name="F:umbraco.presentation.plugins.tinymce3.JSONLocation.Normal">
            <summary> </summary>
        </member>
        <member name="T:umbraco.presentation.plugins.tinymce3.JSONWriter">
            <summary>
            Description of JSONWriter.
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.#ctor(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.WriteStartObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.WriteEndObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.WriteStartArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.WriteEndArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.WritePropertyName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.WriteProperty(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.WriteValue(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.WriteNull">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.presentation.plugins.tinymce3.JSONWriter.EncodeString(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.presentation.umbraco.Search.QuickSearchHandler">
            <summary>
            Summary description for $codebehindclassname$
            </summary>
        </member>
        <member name="F:umbraco.presentation.settings.DictionaryItemList.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.settings.DictionaryItemList.pane1">
            <summary>
            pane1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.settings.DictionaryItemList.lt_table">
            <summary>
            lt_table control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.settings.EditDictionaryItem">
            <summary>
            Summary description for EditDictionaryItem.
            </summary>
        </member>
        <member name="M:umbraco.settings.EditDictionaryItem.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.settings.EditDictionaryItem.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.settings.editLanguage">
            <summary>
            Summary description for editLanguage.
            </summary>
        </member>
        <member name="M:umbraco.settings.editLanguage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:umbraco.settings.editLanguage.Panel1">
            <summary>
            Panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.settings.editLanguage.Pane7">
            <summary>
            Pane7 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.settings.editLanguage.pp_language">
            <summary>
            pp_language control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.settings.editLanguage.Cultures">
            <summary>
            Cultures control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.settings.EditMediaType">
            <summary>
            Summary description for EditMediaType.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.settings.EditMediaType.ContentTypeControlNew1">
            <summary>
            ContentTypeControlNew1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="M:umbraco.presentation.templateControls.Script.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the control content.</param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseMediaTree.GetLinkValue(umbraco.cms.businesslogic.media.Media,System.String)">
            <summary>
            Returns the value for a link in WYSIWYG mode, by default only media items that have a 
            DataTypeUploadField are linkable, however, a custom tree can be created which overrides
            this method, or another GUID for a custom data type can be added to the LinkableMediaDataTypes
            list on application startup.
            </summary>
            <param name="dd"></param>
            <param name="nodeLink"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseMediaTree.GetLinkValue(Umbraco.Core.Models.UmbracoEntity)">
            <summary>
            NOTE: New implementation of the legacy GetLinkValue. This is however a bit quirky as a media item can have multiple "Linkable DataTypes".
            Returns the value for a link in WYSIWYG mode, by default only media items that have a 
            DataTypeUploadField are linkable, however, a custom tree can be created which overrides
            this method, or another GUID for a custom data type can be added to the LinkableMediaDataTypes
            list on application startup.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseMediaTree.CurrentUser">
            <summary>
            Returns the current User. This ensures that we don't instantiate a new User object 
            each time.
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseMediaTree.LinkableMediaDataTypes">
            <summary>
            By default, any media type that is to be "linkable" in the WYSIWYG editor must contain
            a DataTypeUploadField data type which will ouput the value for the link, however, if 
            a developer wants the WYSIWYG editor to link to a custom media type, they will either have
            to create their own media tree and inherit from this one and override the GetLinkValue 
            or add another GUID to the LinkableMediaDataType list on application startup that matches
            the GUID of a custom data type. The order of property types on the media item definition will determine the output value.
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseMediaTree.UseOptimizedRendering">
            <summary>
            Returns true if we can use the EntityService to render the tree or revert to the original way 
            using normal documents
            </summary>
            <remarks>
            We determine this by:
            * If there are any subscribers to the events: BeforeTreeRender or AfterTreeRender - then we cannot run optimized
            </remarks>
        </member>
        <member name="T:umbraco.loadDLRScripts">
            <summary>
            Handles loading of python items into the developer application tree
            </summary>
        </member>
        <member name="M:umbraco.loadDLRScripts.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="T:umbraco.loadRelationTypes">
            <summary>
            RelationTypes tree for developer section
            </summary>
        </member>
        <member name="M:umbraco.loadRelationTypes.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RelationTypeTree class.
            </summary>
            <param name="application">name of umbraco app to which this tree has been added, (in this case "developer")</param>
        </member>
        <member name="M:umbraco.loadRelationTypes.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Builds the javascript methods for use by the nodes in this tree
            </summary>
            <param name="javascript">string container for javascript</param>
        </member>
        <member name="M:umbraco.loadRelationTypes.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            This is called if the tree has been expanded, and it's used to render and child nodes for this tree
            </summary>
            <param name="tree">current tree</param>
        </member>
        <member name="M:umbraco.loadRelationTypes.CreateAllowedActions(System.Collections.Generic.List{umbraco.interfaces.IAction}@)">
            <summary>
            Adds right click context tree actions for each child node
            </summary>
            <param name="actions">collection of actions (expected to be empty)</param>
        </member>
        <member name="M:umbraco.loadRelationTypes.CreateRootNodeActions(System.Collections.Generic.List{umbraco.interfaces.IAction}@)">
            <summary>
            Adds right click context tree actions for the root 'Relation Types' node
            </summary>
            <param name="actions">collection of actions (expected to be empty)</param>
        </member>
        <member name="M:umbraco.loadRelationTypes.CreateRootNode(umbraco.cms.presentation.Trees.XmlTreeNode@)">
            <summary>
            Configures root node 'Relation Types' properties
            </summary>
            <param name="rootNode">the 'Relation Types' root node</param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.MediaRecycleBin.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Override the render js so no duplicate js is rendered.
            </summary>
            <param name="Javascript"></param>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.MediaRecycleBin.StartNodeID">
            <summary>
            By default the Recycle bin start node is -21
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.TreeEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeEventArgs.#ctor(umbraco.cms.presentation.Trees.XmlTree)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.presentation.Trees.TreeEventArgs"/> class.
            </summary>
            <param name="tree">The tree which the event is for.</param>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.TreeEventArgs.Tree">
            <summary>
            Gets the tree.
            </summary>
            <value>The tree.</value>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.TreeRequestParams">
            <summary>
            An ITreeService class that returns the values found in the Query String or any dictionary
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeRequestParams.CreateTreeService">
            <summary>
            Converts the tree parameters to a tree service object
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.ContentExtensions">
            <summary>
            uQuery extensions for the Content object (the Document / Media and Memeber objects derive from Content, hence these extension methods are available to Documents / Media and Members)
            </summary>
        </member>
        <member name="M:umbraco.ContentExtensions.HasProperty(umbraco.cms.businesslogic.Content,System.String)">
            <summary>
            Determines whether the specified content item has property.
            </summary>
            <param name="item">The content item.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns>
            	<c>true</c> if the specified content item has property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.ContentExtensions.GetProperty``1(umbraco.cms.businesslogic.Content,System.String)">
            <summary>
            Get a value (of specified type) from a content item's property.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="item">The content item.</param>
            <param name="propertyAlias">alias of property to get</param>
            <returns>default(T) or property value cast to (T)</returns>
        </member>
        <member name="M:umbraco.ContentExtensions.GetPropertyAsString(umbraco.cms.businesslogic.Content,System.String)">
            <summary>
            Get a string value from a content item's property.
            </summary>
            <param name="item">The content item.</param>
            <param name="propertyAlias">alias of propety to get</param>
            <returns>
            empty string, or property value as string
            </returns>
        </member>
        <member name="M:umbraco.ContentExtensions.GetPropertyAsBoolean(umbraco.cms.businesslogic.Content,System.String)">
            <summary>
            Get a boolean value from a content item's property, (works with built in Yes/No dataype).
            </summary>
            <param name="item">The content item.</param>
            <param name="propertyAlias">alias of propety to get</param>
            <returns>
            true if can cast value, else false for all other circumstances
            </returns>
        </member>
        <member name="M:umbraco.ContentExtensions.GetRandom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets the random content item.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="items">The content items.</param>
            <returns>
            Returns a random content item from a collection of content items.
            </returns>
        </member>
        <member name="M:umbraco.ContentExtensions.GetRandom``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Gets a collection of random content items.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="items">The content items.</param>
            <param name="numberOfItems">The number of items.</param>
            <returns>
            Returns the specified number of random content items from a collection of content items.
            </returns>
        </member>
        <member name="M:umbraco.ContentExtensions.OrderByProperty``1(System.Collections.Generic.IEnumerable{umbraco.cms.businesslogic.Content},System.String)">
            <summary>
            Sorts the by property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="items">The items.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.ContentExtensions.OrderByPropertyDescending``1(System.Collections.Generic.IEnumerable{umbraco.cms.businesslogic.Content},System.String)">
            <summary>
            Orders the by property descending.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="items">The items.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.ContentExtensions.RandomOrder``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomizes the order of the content items.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="items">The content items.</param>
            <returns>Returns a list of content items in a random order.</returns>
        </member>
        <member name="M:umbraco.ContentExtensions.SetProperty(umbraco.cms.businesslogic.Content,System.String,System.Object)">
            <summary>
            Sets a property value, and returns self.
            </summary>
            <param name="item">The content item.</param>
            <param name="propertyAlias">The alias of property to set.</param>
            <param name="value">The value to set.</param>
            <returns>
            The same content item on which this is an extension method.
            </returns>
        </member>
        <member name="T:umbraco.ContentTypeExtensions">
            <summary>
            uQuery extensions for the ContentType object.
            </summary>
        </member>
        <member name="M:umbraco.ContentTypeExtensions.getPropertyType(umbraco.cms.businesslogic.ContentType,System.String,System.Boolean)">
            <summary>
            Gets the type of the property, regardless of the casing of the alias name.
            </summary>
            <param name="contentType">Type of the content.</param>
            <param name="alias">The alias.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="T:umbraco.DocumentExtensions">
            <summary>
            uQuery extensions for the Document object
            </summary>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetAncestorByPathLevel(umbraco.cms.businesslogic.web.Document,System.Int32)">
            <summary>
            Gets the ancestor by path level.
            </summary>
            <param name="document">an <c>umbraco.cms.businesslogic.web.Document</c> object.</param>
            <param name="level">The level.</param>
            <returns>Returns an ancestor document by path level.</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetAncestorDocuments(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Functionally similar to the XPath axis 'ancestor'
            </summary>
            <param name="document">an <c>umbraco.cms.businesslogic.web.Document</c> object.</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetAncestorOrSelfDocuments(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Functionally similar to the XPath axis 'ancestor-or-self'
            </summary>
            <param name="document">The document.</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetPrecedingSiblingDocuments(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Functionally similar to the XPath axis 'preceding-sibling'
            </summary>
            <param name="document">The document.</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetFollowingSiblingDocuments(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Functionally similar to the XPath axis 'following-sibling'
            </summary>
            <param name="document">The document.</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetSiblingDocuments(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Gets all sibling Documents
            </summary>
            <param name="document">The document.</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetDescendantOrSelfDocuments(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Functionally similar to the XPath axis 'descendant-or-self'
            </summary>
            <param name="document">The document.</param>
            <returns>Node as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetDescendantDocuments(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Functionally similar to the XPath axis 'descendant'
            Make the All Descendants LINQ queryable
            taken from: http://our.umbraco.org/wiki/how-tos/useful-helper-extension-methods-%28linq-null-safe-access%29
            </summary>
            <param name="document">The document.</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetDescendantDocuments(umbraco.cms.businesslogic.web.Document,System.Func{umbraco.cms.businesslogic.web.Document,System.Boolean})">
            <summary>
            Drills down into the descendant documents returning those where Func is true, when Func is false further descendants are not checked
            taken from: http://ucomponents.codeplex.com/discussions/246406
            </summary>
            <param name="document">The <c>umbraco.cms.businesslogic.web.Document</c>.</param>
            <param name="func">The func</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetDescendantDocumentsByType(umbraco.cms.businesslogic.web.Document,System.String)">
            <summary>
            Gets the descendant documents by document-type.
            </summary>
            <param name="document">The <c>umbraco.cms.businesslogic.web.Document</c>.</param>
            <param name="documentTypeAlias">The document type alias.</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetChildDocuments(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Functionally similar to the XPath axis 'child'
            Make the imediate Children LINQ queryable
            Performance optimised for just imediate children.
            taken from: http://our.umbraco.org/wiki/how-tos/useful-helper-extension-methods-%28linq-null-safe-access%29
            </summary>
            <param name="document">The document.</param>
            <returns>Documents as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetChildDocuments(umbraco.cms.businesslogic.web.Document,System.Func{umbraco.cms.businesslogic.web.Document,System.Boolean})">
            <summary>
            Gets the child documents.
            </summary>
            <param name="document">The <c>umbraco.cms.businesslogic.web.Document</c>.</param>
            <param name="func">The func.</param>
            <returns>Nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetChildDocumentsByType(umbraco.cms.businesslogic.web.Document,System.String)">
            <summary>
            Gets the child documents by document-type.
            </summary>
            <param name="document">The <c>umbraco.cms.businesslogic.web.Document</c>.</param>
            <param name="documentTypeAlias">The document type alias.</param>
            <returns>Nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.GetChildDocumentByName(umbraco.cms.businesslogic.web.Document,System.String)">
            <summary>
            Extension method on Document to retun a matching child document by name
            </summary>
            <param name="document">The <c>umbraco.cms.businesslogic.web.Document</c>.</param>
            <param name="documentName">name of node to search for</param>
            <returns>null or Node</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.Publish(umbraco.cms.businesslogic.web.Document,System.Boolean)">
            <summary>
            Publishes this document
            </summary>
            <param name="document">an umbraco.cms.businesslogic.web.Document object</param>
            <param name="useAdminUser">if true then publishes under the context of User(0), if false uses current user</param>
            <returns>the same document object on which this is an extension method</returns>
        </member>
        <member name="M:umbraco.DocumentExtensions.ToNode(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Returns a node representation of the document (if it exists)
            </summary>
            <param name="document">The document.</param>
            <returns>Node for the document (if it's published)</returns>
        </member>
        <member name="T:umbraco.MediaExtensions">
            <summary>
            Extension methods for umbraco.cms.businesslogic.media.Media
            </summary>
        </member>
        <member name="M:umbraco.MediaExtensions.GetAncestorMedia(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Functionally similar to the XPath axis 'ancestor'
            </summary>
            <param name="media">an umbraco.cms.businesslogic.media.Media object</param>
            <returns>Media nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetAncestorOrSelfMedia(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Funtionally similar to the XPath axis 'ancestor-or-self'
            </summary>
            <param name="media">an umbraco.cms.businesslogic.media.Media object</param>
            <returns>Media nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetSiblingMedia(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Gets all sibling Media
            </summary>
            <param name="media">an umbraco.cms.businesslogic.media.Media object</param>
            <returns>Media nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetDescendantOrSelfMedia(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Functionally similar to the XPath axis 'descendant-or-self'
            </summary>
            <param name="media">an umbraco.cms.businesslogic.media.Media object</param>
            <returns>Media nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetDescendantMedia(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Functionally similar to the XPath axis 'descendant'
            </summary>
            <param name="media">an umbraco.cms.businesslogic.media.Media object</param>
            <returns>Media nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetChildMedia(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Functionally similar to the XPath axis 'child'
            Performance optimised for just imediate children.
            </summary>
            <param name="media">The <c>umbraco.cms.businesslogic.media.Media</c> object.</param>
            <returns>Media nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetChildMedia(umbraco.cms.businesslogic.media.Media,System.Func{umbraco.cms.businesslogic.media.Media,System.Boolean})">
            <summary>
            Gets the child media that satisfy the <c>Func</c> condition.
            </summary>
            <param name="media">The <c>umbraco.cms.businesslogic.media.Media</c> object.</param>
            <param name="func">The func.</param>
            <returns>Media nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.MediaExtensions.Level(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Tell me the level of this node (0 = root)
            updated from Depth and changed to start at 0
            to align with other 'Level' methods (eg xslt)
            </summary>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetImageCropperUrl(umbraco.cms.businesslogic.media.Media,System.String,System.String)">
            <summary>
            Returns the url for a given crop name using the built in Image Cropper datatype
            </summary>
            <param name="media">an umbraco.cms.businesslogic.media.Media object</param>
            <param name="propertyAlias">property alias</param>
            <param name="cropName">name of crop to get url for</param>
            <returns>emtpy string or url</returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetImageUrl(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Gets the image URL.
            </summary>
            <param name="media">an umbraco.cms.businesslogic.media.Media object</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.MediaExtensions.GetImageThumbnailUrl(umbraco.cms.businesslogic.media.Media)">
            <summary>
            Gets the image thumbnail URL.
            </summary>
            <param name="media">an umbraco.cms.businesslogic.media.Media object</param>
            <returns></returns>
        </member>
        <member name="T:umbraco.MemberExtensions">
            <summary>
            uQuery Member extensions.
            </summary>
        </member>
        <member name="M:umbraco.MemberExtensions.AddGroup(umbraco.cms.businesslogic.member.Member,System.String)">
            <summary>
            Adds a member the group (by group name).
            </summary>
            <param name="member">The member.</param>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:umbraco.MemberExtensions.AddGroup(umbraco.cms.businesslogic.member.Member,umbraco.cms.businesslogic.member.MemberGroup)">
            <summary>
            Adds a member the group.
            </summary>
            <param name="member">The member.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:umbraco.MemberExtensions.IsInGroup(umbraco.cms.businesslogic.member.Member,System.Int32)">
            <summary>
            Determines whether [is in group] [the specified member].
            </summary>
            <param name="member">The member.</param>
            <param name="groupId">The group id.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified member]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.MemberExtensions.IsInGroup(umbraco.cms.businesslogic.member.Member,System.String)">
            <summary>
            Determines whether [is in group] [the specified member].
            </summary>
            <param name="member">The member.</param>
            <param name="groupName">Name of the group.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified member]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.MemberExtensions.IsInGroup(umbraco.cms.businesslogic.member.Member,umbraco.cms.businesslogic.member.MemberGroup)">
            <summary>
            Determines whether [is in group] [the specified member].
            </summary>
            <param name="member">The member.</param>
            <param name="group">The group.</param>
            <returns>
            	<c>true</c> if [is in group] [the specified member]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.MemberExtensions.RemoveGroup(umbraco.cms.businesslogic.member.Member,System.String)">
            <summary>
            Removes a member the group (by group name).
            </summary>
            <param name="member">The member.</param>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:umbraco.MemberExtensions.RemoveGroup(umbraco.cms.businesslogic.member.Member,umbraco.cms.businesslogic.member.MemberGroup)">
            <summary>
            Removes a member the group.
            </summary>
            <param name="member">The member.</param>
            <param name="group">The group.</param>
        </member>
        <member name="T:umbraco.NodeExtensions">
            <summary>
            uQuery extensions for the Node object.
            </summary>
        </member>
        <member name="M:umbraco.NodeExtensions.GetAncestorByPathLevel(umbraco.NodeFactory.Node,System.Int32)">
            <summary>
            Gets the ancestor by path level.
            </summary>
            <param name="node">The node.</param>
            <param name="level">The level.</param>
            <returns>Returns an ancestor node by path level.</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetAncestorByPathLevel(umbraco.interfaces.INode,System.Int32)">
            <summary>
            Gets the ancestor by path level.
            </summary>
            <param name="node">The node.</param>
            <param name="level">The level.</param>
            <returns>Returns an ancestor node by path level.</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetAncestorNodes(umbraco.NodeFactory.Node)">
            <summary>
            Functionally similar to the XPath axis 'ancestor'
            Get the Ancestor Nodes from current to root, (useful for breadcrumbs)
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <returns>Node as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetAncestorNodes(umbraco.interfaces.INode)">
            <summary>
            Functionally similar to the XPath axis 'ancestor'
            Get the Ancestor Nodes from current to root (useful for breadcrumbs)
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <returns>INode as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetAncestorOrSelfNodes(umbraco.NodeFactory.Node)">
            <summary>
            Functionally similar to the XPath axis 'ancestor-or-self'
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <returns>Node as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetAncestorOrSelfNodes(umbraco.interfaces.INode)">
            <summary>
            Functionally similar to the XPath axis 'ancestor-or-self'
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <returns>INode as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetPrecedingSiblingNodes(umbraco.NodeFactory.Node)">
            <summary>
            Functionally similar to the XPath axis 'preceding-sibling'
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <returns>Node as IEumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetPrecedingSiblingNodes(umbraco.interfaces.INode)">
            <summary>
            Functionally similar to the XPath axis 'preceding-sibling'
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <returns>INode as IEumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFollowingSiblingNodes(umbraco.NodeFactory.Node)">
            <summary>
            Functionally similar to the XPath axis 'following-sibling'
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <returns>Node as IEumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFollowingSiblingNodes(umbraco.interfaces.INode)">
            <summary>
            Functionally similar to the XPath axis 'following-sibling'
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <returns>INode as IEumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetSiblingNodes(umbraco.NodeFactory.Node)">
            <summary>
            Gets all sibling Nodes
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <returns>Node as IEumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetSiblingNodes(umbraco.interfaces.INode)">
            <summary>
            Gets all sibling Nodes
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <returns>INode as IEumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetDescendantOrSelfNodes(umbraco.NodeFactory.Node)">
            <summary>
            Functionally similar to the XPath axis 'descendant-or-self'
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <returns>Node as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetDescendantOrSelfNodes(umbraco.interfaces.INode)">
            <summary>
            Functionally similar to the XPath axis 'descendant-or-self'
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <returns>INode as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetDescendantNodes(umbraco.NodeFactory.Node)">
            <summary>
            Functionally similar to the XPath axis 'descendant'
            Make the All Descendants LINQ queryable
            taken from: http://our.umbraco.org/wiki/how-tos/useful-helper-extension-methods-%28linq-null-safe-access%29
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <returns>Node as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetDescendantNodes(umbraco.interfaces.INode)">
            <summary>
            Functionally similar to the XPath axis 'descendant'
            Make the All Descendants LINQ queryable
            taken from: http://our.umbraco.org/wiki/how-tos/useful-helper-extension-methods-%28linq-null-safe-access%29
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <returns>INode as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetDescendantNodes(umbraco.NodeFactory.Node,System.Func{umbraco.NodeFactory.Node,System.Boolean})">
            <summary>
            Drills down into the descendant nodes returning those where Func is true, when Func is false further descendants are not checked
            taken from: http://ucomponents.codeplex.com/discussions/246406
            </summary>
            <param name="node">The <c>umbraco.presentation.nodeFactory.Node</c>.</param>
            <param name="func">The func</param>
            <returns>Nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetDescendantNodes(umbraco.interfaces.INode,System.Func{umbraco.interfaces.INode,System.Boolean})">
            <summary>
            Drills down into the descendant nodes returning those where Func is true, when Func is false further descendants are not checked
            taken from: http://ucomponents.codeplex.com/discussions/246406
            </summary>
            <param name="node">The <c>umbraco.interfaces.INode</c>.</param>
            <param name="func">The func</param>
            <returns>INode as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetDescendantNodesByType(umbraco.NodeFactory.Node,System.String)">
            <summary>
            Gets the descendant nodes by document-type.
            Get all descendants, and then return only those that match the requested typeAlias
            </summary>
            <param name="node">The <c>umbraco.presentation.nodeFactory.Node</c>.</param>
            <param name="documentTypeAlias">The document type alias.</param>
            <returns>Nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetDescendantNodesByType(umbraco.interfaces.INode,System.String)">
            <summary>
            Gets the descendant nodes by document-type.
            Get all descendants, and then return only those that match the requested typeAlias
            </summary>
            <param name="node">The <c>umbraco.interfaces.INode</c>.</param>
            <param name="documentTypeAlias">The document type alias.</param>
            <returns>INodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetChildNodes(umbraco.NodeFactory.Node)">
            <summary>
            Functionally similar to the XPath axis 'child'
            Make the imediate Children LINQ queryable
            Performance optimised for just imediate children.
            taken from: http://our.umbraco.org/wiki/how-tos/useful-helper-extension-methods-%28linq-null-safe-access%29
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <returns>Node as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetChildNodes(umbraco.interfaces.INode)">
            <summary>
            Functionally similar to the XPath axis 'child'
            Make the imediate Children LINQ queryable
            Performance optimised for just imediate children.
            taken from: http://our.umbraco.org/wiki/how-tos/useful-helper-extension-methods-%28linq-null-safe-access%29
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <returns>INode as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetChildNodes(umbraco.NodeFactory.Node,System.Func{umbraco.NodeFactory.Node,System.Boolean})">
            <summary>
            Gets the child nodes.
            </summary>
            <param name="node">The <c>umbraco.presentation.nodeFactory.Node</c>.</param>
            <param name="func">The func.</param>
            <returns>Nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetChildNodes(umbraco.interfaces.INode,System.Func{umbraco.interfaces.INode,System.Boolean})">
            <summary>
            Gets the child nodes.
            </summary>
            <param name="node">The <c>umbraco.interfaces.INode</c>.</param>
            <param name="func">The func.</param>
            <returns>INodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetChildNodesByType(umbraco.NodeFactory.Node,System.String)">
            <summary>
            Gets the child nodes by document-type.
            </summary>
            <param name="node">The <c>umbraco.presentation.nodeFactory.Node</c>.</param>
            <param name="documentTypeAlias">The document type alias.</param>
            <returns>Nodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetChildNodesByType(umbraco.interfaces.INode,System.String)">
            <summary>
            Gets the child nodes by document-type.
            </summary>
            <param name="node">The <c>umbraco.interfaces.INode</c>.</param>
            <param name="documentTypeAlias">The document type alias.</param>
            <returns>INodes as IEnumerable</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetChildNodeByName(umbraco.NodeFactory.Node,System.String)">
            <summary>
            Extension method on Node to retun a matching child node by name
            </summary>
            <param name="parentNode">an umbraco.presentation.nodeFactory.Node object</param>
            <param name="nodeName">name of node to search for</param>
            <returns>null or Node</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetChildNodeByName(umbraco.interfaces.INode,System.String)">
            <summary>
            Extension method on Node to retun a matching child node by name
            </summary>
            <param name="parentNode">an umbraco.interfaces.INode object</param>
            <param name="nodeName">name of node to search for</param>
            <returns>null or INode</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.HasProperty(umbraco.NodeFactory.Node,System.String)">
            <summary>
            Determines whether the specified node has property.
            </summary>
            <param name="node">The node.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns>
              <c>true</c> if the specified node has property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.NodeExtensions.HasProperty(umbraco.interfaces.INode,System.String)">
            <summary>
            Determines whether the specified node has property.
            </summary>
            <param name="node">The INode.</param>
            <param name="propertyAlias">The property alias.</param>
            <returns>
              <c>true</c> if the specified node has property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetProperty``1(umbraco.NodeFactory.Node,System.String)">
            <summary>
            Get a value of type T from a property
            </summary>
            <typeparam name="T">type T to cast to</typeparam>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <param name="propertyAlias">alias of property to get</param>
            <returns>default(T) or property cast to (T)</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetProperty``1(umbraco.interfaces.INode,System.String)">
            <summary>
            Get a value of type T from a property
            </summary>
            <typeparam name="T">type T to cast to</typeparam>
            <param name="node">an umbraco.interfaces.INode object</param>
            <param name="propertyAlias">alias of property to get</param>
            <returns>default(T) or property cast to (T)</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetPropertyAsString(umbraco.NodeFactory.Node,System.String)">
            <summary>
            Get a string value for the supplied property alias
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <param name="propertyAlias">alias of propety to get</param>
            <returns>empty string, or property value as string</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetPropertyAsString(umbraco.interfaces.INode,System.String)">
            <summary>
            Get a string value for the supplied property alias
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <param name="propertyAlias">alias of propety to get</param>
            <returns>empty string, or property value as string</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetPropertyAsBoolean(umbraco.NodeFactory.Node,System.String)">
            <summary>
            Get a boolean value for the supplied property alias (works with built in Yes/No dataype)
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <param name="propertyAlias">alias of propety to get</param>
            <returns>true if can cast value, else false for all other circumstances</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetPropertyAsBoolean(umbraco.interfaces.INode,System.String)">
            <summary>
            Get a boolean value for the supplied property alias (works with built in Yes/No dataype)
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <param name="propertyAlias">alias of propety to get</param>
            <returns>true if can cast value, else false for all other circumstances</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.Level(umbraco.NodeFactory.Node)">
            <summary>
            Tell me the level of this node (0 = root)
            updated from Depth and changed to start at 0
            to align with other 'Level' methods (eg xslt)
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.Level(umbraco.interfaces.INode)">
            <summary>
            Tell me the level of this node (0 = root)
            updated from Depth and changed to start at 0
            to align with other 'Level' methods (eg xslt)
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.ToXml(umbraco.NodeFactory.Node)">
            <summary>
            Gets the XML for the Node.
            </summary>
            <param name="node">The node.</param>
            <returns>Returns an <c>XmlNode</c> for the selected Node</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.ToXml(umbraco.interfaces.INode)">
            <summary>
            Gets the XML for the Node.
            </summary>
            <param name="node">The INode.</param>
            <returns>Returns an <c>XmlNode</c> for the selected Node</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetImageCropperUrl(umbraco.NodeFactory.Node,System.String,System.String)">
            <summary>
            Returns the url for a given crop name using the built in Image Cropper datatype
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <param name="propertyAlias">property alias</param>
            <param name="cropName">name of crop to get url for</param>
            <returns>emtpy string or url</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetImageCropperUrl(umbraco.interfaces.INode,System.String,System.String)">
            <summary>
            Returns the url for a given crop name using the built in Image Cropper datatype
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <param name="propertyAlias">property alias</param>
            <param name="cropName">name of crop to get url for</param>
            <returns>emtpy string or url</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.SetProperty(umbraco.NodeFactory.Node,System.String,System.Object)">
            <summary>
            Sets a property value on this node
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <param name="propertyAlias">alias of property to set</param>
            <param name="value">value to set</param>
            <returns>the same node object on which this is an extension method</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.SetProperty(umbraco.interfaces.INode,System.String,System.Object)">
            <summary>
            Sets a property value on this node
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <param name="propertyAlias">alias of property to set</param>
            <param name="value">value to set</param>
            <returns>the same node object on which this is an extension method</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.Publish(umbraco.NodeFactory.Node,System.Boolean)">
            <summary>
            Republishes this node
            </summary>
            <param name="node">an umbraco.presentation.nodeFactory.Node object</param>
            <param name="useAdminUser">if true then publishes under the context of User(0), if false uses current user</param>
            <returns>the same node object on which this is an extension method</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.Publish(umbraco.interfaces.INode,System.Boolean)">
            <summary>
            Republishes this node
            </summary>
            <param name="node">an umbraco.interfaces.INode object</param>
            <param name="useAdminUser">if true then publishes under the context of User(0), if false uses current user</param>
            <returns>the same node object on which this is an extension method</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetRandom(System.Collections.Generic.IList{umbraco.NodeFactory.Node})">
            <summary>
            Gets a random node.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>
            Returns a random node from a collection of nodes.
            </returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetRandom(System.Collections.Generic.IList{umbraco.interfaces.INode})">
            <summary>
            Gets a random node.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>
            Returns a random INode from a collection of INodes.
            </returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetRandom(System.Collections.Generic.IList{umbraco.NodeFactory.Node},System.Int32)">
            <summary>
            Gets a collection of random nodes.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="numberOfItems">The number of items.</param>
            <returns>
            Returns the specified number of random nodes from a collection of nodes.
            </returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetRandom(System.Collections.Generic.IList{umbraco.interfaces.INode},System.Int32)">
            <summary>
            Gets a collection of random nodes.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="numberOfItems">The number of items.</param>
            <returns>
            Returns the specified number of random INodes from a collection of INodes.
            </returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.NodeFactory.Node)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.interfaces.INode)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node as INode.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.NodeFactory.Node,System.String)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.interfaces.INode,System.String)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node as INode.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.NodeFactory.Node,System.String,System.Boolean)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node.</param>
            <param name="language">The language.</param>
            <param name="ssl">if set to <c>true</c> [SSL].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.interfaces.INode,System.String,System.Boolean)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node as INode.</param>
            <param name="language">The language.</param>
            <param name="ssl">if set to <c>true</c> [SSL].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.NodeFactory.Node,umbraco.cms.businesslogic.web.Domain)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node.</param>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.interfaces.INode,umbraco.cms.businesslogic.web.Domain)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node as INode.</param>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.NodeFactory.Node,umbraco.cms.businesslogic.web.Domain,System.Boolean)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node.</param>
            <param name="domain">The domain.</param>
            <param name="ssl">if set to <c>true</c> [SSL].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.GetFullNiceUrl(umbraco.interfaces.INode,umbraco.cms.businesslogic.web.Domain,System.Boolean)">
            <summary>
            Gets the full nice URL.
            </summary>
            <param name="node">The node as INode.</param>
            <param name="domain">The domain.</param>
            <param name="ssl">if set to <c>true</c> [SSL].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.NodeExtensions.ToINodes(System.Collections.Generic.IEnumerable{umbraco.presentation.nodeFactory.Node})">
            <summary>
            Converts legacy nodeFactory collection to INode collection
            </summary>
            <param name="nodes">The legacy nodeFactory nodes.</param>
            <returns>Returns the legacy nodeFactory nodes as INode nodes.</returns>
        </member>
        <member name="M:umbraco.NodeExtensions.ToLegacyNodes(System.Collections.Generic.IEnumerable{umbraco.NodeFactory.Node})">
            <summary>
            Converts INode collection to legacy nodeFactory collection
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>Returns the nodes as legacy nodeFactory nodes.</returns>
        </member>
        <member name="T:umbraco.PreValueExtensions">
            <summary>
            uQuery extensions for the PreValue object.
            </summary>
        </member>
        <member name="M:umbraco.PreValueExtensions.GetAlias(umbraco.cms.businesslogic.datatype.PreValue)">
            <summary>
            Gets the alias of the specified PreValue
            </summary>
            <param name="preValue">The PreValue.</param>
            <returns>The alias</returns>
        </member>
        <member name="T:umbraco.RelationTypeExtensions">
            <summary>
            uQuery extensions for the RelationType object.
            </summary>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.GetParentUmbracoObjectType(umbraco.cms.businesslogic.relation.RelationType)">
            <summary>
            Extension method to return the Parent UmbracoObjectType
            </summary>
            <param name="relationType">an instance of umbraco.cms.businesslogic.relation.RelationType</param>
            <returns>an UmbracoObjectType value</returns>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.GetChildUmbracoObjectType(umbraco.cms.businesslogic.relation.RelationType)">
            <summary>
            Extension method to return the Child UmbracoObjectType
            </summary>
            <param name="relationType">an instance of umbraco.cms.businesslogic.relation.RelationType</param>
            <returns>an UmbracoObjectType value</returns>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.CreateRelation(umbraco.cms.businesslogic.relation.RelationType,System.Int32,System.Int32)">
            <summary>
            Creates a new relation for this relation type - also performs objectype validation
            </summary>
            <param name="relationType">an instance of umbraco.cms.businesslogic.relation.RelationType</param>
            <param name="parentId">parentId of relation</param>
            <param name="childId">child Id of relation</param>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.HasRelations(umbraco.cms.businesslogic.relation.RelationType,System.Int32)">
            <summary>
            Determines whether the specified id exists as a relation for the current relation type
            </summary>
            <param name="relationType">Type of the relation.</param>
            <param name="id">The id.</param>
            <returns>
              <c>true</c> if the specified relation type has relations; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.IsRelated(umbraco.cms.businesslogic.relation.RelationType,System.Int32,System.Int32)">
            <summary>
            Wrapper for Relation.IsRelated(int, int, RelationType)
            </summary>
            <param name="relationType">an instance of umbraco.cms.businesslogic.relation.RelationType</param>
            <param name="parentId">parentId to test</param>
            <param name="childId">childId to test</param>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.GetRelation(umbraco.cms.businesslogic.relation.RelationType,System.Int32,System.Int32)">
            <summary>
            Extension method to get a relation from it's parent and child Ids
            </summary>
            <param name="relationType">an instance of umbraco.cms.businesslogic.relation.RelationType</param>
            <param name="parentId">parentId of relation</param>
            <param name="childId">child Id of relation</param>
            <returns>null or the Relation matching supplied parentId and childId</returns>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.GetRelations(umbraco.cms.businesslogic.relation.RelationType,System.Int32)">
            <summary>
            Gets the relations for the supplied id (wrapper for Relation.GetRelations)
            </summary>
            <param name="relationType">an instance of umbraco.cms.businesslogic.relation.RelationType</param>
            <param name="id">the id</param>
            <returns>relations for the id</returns>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.DeleteRelation(umbraco.cms.businesslogic.relation.RelationType,System.Int32,System.Int32)">
            <summary>
            Extension method to delete a relation, found by it's parent and child Ids
            </summary>
            <param name="relationType">an instance of umbraco.cms.businesslogic.relation.RelationType</param>
            <param name="parentId">parent id of relation to delete</param>
            <param name="childId">child id of relation to delte</param>
        </member>
        <member name="M:umbraco.RelationTypeExtensions.ClearRelations(umbraco.cms.businesslogic.relation.RelationType,System.Int32)">
            <summary>
            Wipes all relations associated with the id supplied in this relation type
            </summary>
            <param name="relationType">an instance of umbraco.cms.businesslogic.relation.RelationType</param>
            <param name="id">key id to wipe</param>
        </member>
        <member name="T:umbraco.UmbracoObjectTypeExtensions">
            <summary>
            uQuery extensions for Umbraco object types.
            </summary>
        </member>
        <member name="M:umbraco.UmbracoObjectTypeExtensions.GetGuid(umbraco.uQuery.UmbracoObjectType)">
            <summary>
            Extension method for the UmbracoObjectType enum to return the enum GUID
            </summary>
            <param name="umbracoObjectType">UmbracoObjectType Enum value</param>
            <returns>a GUID value of the UmbracoObjectType</returns>
        </member>
        <member name="M:umbraco.UmbracoObjectTypeExtensions.GetName(umbraco.uQuery.UmbracoObjectType)">
            <summary>
            Extension method for the UmbracoObjectType enum to return the enum name
            </summary>
            <param name="umbracoObjectType">UmbracoObjectType value</param>
            <returns>The enum name of the UmbracoObjectType value</returns>
        </member>
        <member name="M:umbraco.UmbracoObjectTypeExtensions.GetFriendlyName(umbraco.uQuery.UmbracoObjectType)">
            <summary>
            Extension method for the UmbracoObejctType enum to return the enum friendly name
            </summary>
            <param name="umbracoObjectType">UmbracoObjectType value</param>
            <returns>a string of the FriendlyName</returns>
        </member>
        <member name="T:umbraco.presentation.webservices.MacroContainerService">
            <summary>
            Summary description for MacroContainerService
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebServices.UmbracoAuthorizedWebService">
            <summary>
            An abstract web service class that has the methods and properties to correct validate an Umbraco user
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebServices.UmbracoWebService">
            <summary>
            An abstract web service class exposing common umbraco objects
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoWebService.ApplicationContext">
            <summary>
            Returns the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoWebService.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoWebService.Umbraco">
            <summary>
            Returns an UmbracoHelper object
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoWebService.Url">
            <summary>
            Returns a UrlHelper
            </summary>
            <remarks>
            This URL helper is created without any route data and an empty request context
            </remarks>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoWebService.Services">
            <summary>
            Returns a ServiceContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoWebService.DatabaseContext">
            <summary>
            Returns a DatabaseContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoWebService.Security">
            <summary>
            Returns a WebSecurity instance
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedWebService.ValidateUserContextId(System.String)">
            <summary>
            Checks if the umbraco context id is valid
            </summary>
            <param name="currentUmbracoUserContextId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedWebService.ValidateCredentials(System.String,System.String)">
            <summary>
            Checks if the username/password credentials are valid
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedWebService.AuthorizeRequest(System.String,System.Boolean)">
            <summary>
            Validates the user for access to a certain application
            </summary>
            <param name="app">The application alias.</param>
            <param name="throwExceptions">true if an exception should be thrown if authorization fails</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedWebService.UserHasAppAccess(System.String,umbraco.BusinessLogic.User)">
            <summary>
            Checks if the specified user as access to the app
            </summary>
            <param name="app"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedWebService.UserHasAppAccess(System.String,System.String)">
            <summary>
            Checks if the specified user by username as access to the app
            </summary>
            <param name="app"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedWebService.AuthorizeRequest(System.Boolean)">
            <summary>
            Returns true if there is a valid logged in user and that ssl is enabled if required
            </summary>
            <param name="throwExceptions">true if an exception should be thrown if authorization fails</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoAuthorizedWebService.UmbracoUser">
            <summary>
            Returns the current user
            </summary>
        </member>
        <member name="T:umbraco.presentation.webservices.TreeClientService">
            <summary>
            Client side ajax utlities for the tree
            </summary>
        </member>
        <member name="M:umbraco.presentation.webservices.TreeClientService.GetInitAppTreeData(System.String,System.String,System.Boolean,System.Boolean,umbraco.cms.presentation.Trees.TreeDialogModes,System.String,System.String)">
            <summary>
            Returns a key/value object with: json, app, js as the keys
            </summary>	
            <returns></returns>
        </member>
        <member name="T:umbraco.presentation.templateControls.DisableRequestValidation">
            <summary>
            This control disables request validation (equalevant of setting validateRequest to false in page directive)
            </summary>
        </member>
        <member name="T:umbraco.presentation.templateControls.Item">
            <summary>
            Control that renders an Umbraco item on a page.
            </summary>
        </member>
        <member name="F:umbraco.presentation.templateControls.Item.m_ItemId">
            <summary>The item's unique ID on the page.</summary>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.presentation.templateControls.Item"/> class.
            </summary>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.#ctor(Umbraco.Core.Models.IPublishedContent)">
            <summary>
            Internal ctor used to assign an IPublishedContent object.
            </summary>
            <param name="contentItem"></param>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Writes the <see cref="T:System.Web.UI.WebControls.CompositeControl"/> content
            to the specified <see cref="T:System.Web.UI.HtmlTextWriter"/> object, for display on the client.
            </summary>
            <param name="writer">
                An <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents
                the output stream to render HTML content on the client.
            </param>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.GetParsedNodeId">
            <summary>
            Gets the parsed node id. As a nodeid on a item element can be null, an integer or even a squarebracket syntax, this helper method
            is handy for getting the exact parsed nodeid back.
            </summary>
            <returns>The parsed nodeid, the id of the current page OR null if it's not specified</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.IsInsideFormTag">
            <summary>
            Gets a value indicating whether this control is inside the form tag.
            </summary>
            <returns><c>true</c> if this control is inside the form tag; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.FieldIsDictionaryItem">
            <summary>
            Determines whether the field is a dictionary item.
            </summary>
            <returns><c>true</c> if the field is a dictionary item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.FieldIsRercursive">
            <summary>
            Determines whether the field is recursive.
            </summary>
            <returns><c>true</c> if the field is recursive; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.FieldIsApiLookup">
            <summary>
            Determines whether field uses the API to lookup the value
            (if a NodeId attribute is specified and is different from the current page id).
            </summary>
            <returns><c>true</c> if API lookup is used; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.Item.FieldEditableWithUserPermissions">
            <summary>
            Gets a value indicating whether the current item is editable by the current user.
            </summary>
            <value><c>true</c> if the current item is editable by the current user; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:umbraco.presentation.templateControls.Item.ContentItem">
            <summary>
            Used by the UmbracoHelper to assign an IPublishedContent to the Item which allows us to pass this in
            to the 'item' ctor so that it renders with the new API instead of the old one.
            </summary>
        </member>
        <member name="P:umbraco.presentation.templateControls.Item.Field">
            <summary>
            Gets or sets the field name.
            </summary>
            <value>The field name.</value>
        </member>
        <member name="P:umbraco.presentation.templateControls.Item.NodeId">
            <summary>
            Gets or sets the node id expression.
            </summary>
            <value>The node id expression.</value>
        </member>
        <member name="P:umbraco.presentation.templateControls.Item.TextIfEmpty">
            <summary>
            Gets or sets the text to display if the control is empty.
            </summary>
            <value>The text to display if the control is empty.</value>
        </member>
        <member name="P:umbraco.presentation.templateControls.Item.Xslt">
            <summary>
            Gets or sets the XPath expression used for the inline XSLT transformation.
            </summary>
            <value>
            The XPath expression, or an empty string to disable XSLT transformation.
            The code <c>{0}</c> is used as a placeholder for the rendered field contents.
            </value>
        </member>
        <member name="P:umbraco.presentation.templateControls.Item.XsltDisableEscaping">
            <summary>
            Gets or sets a value indicating whether XML entity escaping of the XSLT transformation output is disabled.
            </summary>
            <value><c>true</c> HTML escaping is disabled; otherwise, <c>false</c> (default).</value>
            <remarks>
                This corresponds value to the <c>disable-output-escaping</c> parameter
                of the XSLT <c>value-of</c> element.
            </remarks>
        </member>
        <member name="P:umbraco.presentation.templateControls.Item.ItemId">
            <summary>
            Gets the item's unique ID on the page.
            </summary>
            <value>The item id.</value>
        </member>
        <member name="P:umbraco.presentation.templateControls.Item.PageElements">
            <summary>
            Gets the Umbraco page elements.
            </summary>
            <value>The Umbraco page elements.</value>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.presentation.templateControls.ItemRenderer"/> class.
            </summary>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.Render(umbraco.presentation.templateControls.Item,System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.GetFieldContents(umbraco.presentation.templateControls.Item)">
            <summary>
            Renders the field contents.
            Checks via the NodeId attribute whether to fetch data from another page than the current one.
            </summary>
            <returns>A string of field contents (macros not parsed)</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.Init(umbraco.presentation.templateControls.Item)">
            <summary>
            Inits the specified item. To be called from the OnInit method of Item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.Load(umbraco.presentation.templateControls.Item)">
            <summary>
            Loads the specified item. To be called from the OnLoad method of Item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.ParseMacros(umbraco.presentation.templateControls.Item)">
            <summary>
            Parses the macros inside the text, by creating child elements for each item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.XsltTransform(System.String,System.String,System.Boolean)">
            <summary>
            Transforms the content using the XSLT attribute, if provided.
            </summary>
            <param name="xpath">The xpath expression.</param>
            <param name="itemData">The item's rendered content.</param>
            <param name="disableEscaping">if set to <c>true</c>, escaping is disabled.</param>
            <returns>The transformed content if the XSLT attribute is present, otherwise the original content.</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.GetEmptyText(umbraco.presentation.templateControls.Item)">
            <summary>
            Gets the text to display if the field contents are empty.
            </summary>
            <param name="item">The item.</param>
            <returns>The text to display.</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.GetContentFromDatabase(umbraco.AttributeCollectionAdapter,System.Int32,System.String)">
            <summary>
            Gets the field content from database instead of the published XML via the APIs.
            </summary>
            <param name="itemAttributes"></param>
            <param name="nodeIdInt">The node id.</param>
            <param name="currentField">The field that should be fetched.</param>
            <returns>The contents of the <paramref name="currentField"/> from the <paramref name="nodeIdInt"/> content object</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.ItemRenderer.GetContentFromCache(System.Int32,System.String)">
            <summary>
            Gets the content from cache.
            </summary>
            <param name="nodeIdInt">The node id.</param>
            <param name="field">The field.</param>
            <returns>The cached contents of the <paramref name="field"/> from the <paramref name="nodeIdInt"/> content object</returns>
        </member>
        <member name="M:umbraco.presentation.templateControls.Macro.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:umbraco.presentation.templateControls.Macro.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:umbraco.presentation.templateControls.Macro.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the control content.</param>
        </member>
        <member name="T:Umbraco.Web.umbraco.presentation.umbraco.templateControls.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Umbraco.Web.umbraco.presentation.umbraco.templateControls.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.umbraco.presentation.umbraco.templateControls.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Umbraco.Web.umbraco.presentation.umbraco.templateControls.Resources.InlineXslt">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;!DOCTYPE xsl:stylesheet [ &lt;!ENTITY nbsp &quot;&amp;#x00A0;&quot;&gt; ]&gt;
            &lt;xsl:stylesheet 
            	version=&quot;1.0&quot; 
            	xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
            	xmlns:msxml=&quot;urn:schemas-microsoft-com:xslt&quot;
            	xmlns:umbraco.library=&quot;urn:umbraco.library&quot;
              {3}
            	exclude-result-prefixes=&quot;msxml umbraco.library {2}&quot;&gt;
            &lt;xsl:output method=&quot;xml&quot; omit-xml-declaration=&quot;yes&quot;/&gt;
            &lt;xsl:param name=&quot;currentPage&quot;/&gt;
            &lt;xsl:param name=&quot;itemData&quot;/&gt;
            &lt;xsl:template match=&quot;/&quot;&gt;&lt;xsl:value-of select=&quot;{0}&quot; disa [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="F:umbraco.presentation.translation._default.Panel2">
            <summary>
            Panel2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.translation._default.feedback">
            <summary>
            feedback control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.translation._default.pane_uploadFile">
            <summary>
            pane_uploadFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.translation._default.translationFile">
            <summary>
            translationFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.translation._default.uploadFile">
            <summary>
            uploadFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.translation._default.pane_tasks">
            <summary>
            pane_tasks control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.translation._default.lt_tasksHelp">
            <summary>
            lt_tasksHelp control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.translation._default.taskList">
            <summary>
            taskList control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.panel1">
            <summary>
            panel1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pane_details">
            <summary>
            pane_details control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pp_date">
            <summary>
            pp_date control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pp_owner">
            <summary>
            pp_owner control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pp_totalWords">
            <summary>
            pp_totalWords control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pp_comment">
            <summary>
            pp_comment control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pane_tasks">
            <summary>
            pane_tasks control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pp_xml">
            <summary>
            pp_xml control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pp_upload">
            <summary>
            pp_upload control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pp_closeTask">
            <summary>
            pp_closeTask control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.bt_close">
            <summary>
            bt_close control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.pane_fields">
            <summary>
            pane_fields control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.umbraco.translation.details.dg_fields">
            <summary>
            dg_fields control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.presentation.translation.xml.xmlContents">
            <summary>
            xmlContents control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.TreeInit.Head1">
            <summary>
            Head1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.TreeInit.ClientLoader">
            <summary>
            ClientLoader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.TreeInit.CssInclude1">
            <summary>
            CssInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.TreeInit.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.TreeInit.ScriptManager1">
            <summary>
            ScriptManager1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.TreeInit.JTree">
            <summary>
            JTree control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.BaseContentTree">
            <summary>
            An abstract tree class for the content application.
            Has built in methods for handling all of the request parameters specific to the content tree.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            Renders the specified tree item.
            </summary>        
            <param name="Tree">The tree.</param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.CreateNode(umbraco.cms.businesslogic.web.Document,System.Collections.Generic.List{umbraco.interfaces.IAction})">
            <summary>
            Creates an XmlTreeNode based on the passed in Document
            </summary>
            <param name="dd"></param>
            <param name="allowedUserOptions"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.CreateNodeLink(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Creates the link for the current document 
            </summary>
            <param name="dd"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.OnRenderNode(umbraco.cms.presentation.Trees.XmlTreeNode@,umbraco.cms.businesslogic.web.Document)">
            <summary>
            Inheritors override this method to modify the content node being created
            </summary>
            <param name="xNode"></param>
            <param name="doc"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.CanUserAccessNode(umbraco.cms.businesslogic.web.Document,System.Collections.Generic.List{umbraco.interfaces.IAction})">
            <summary>
            Determins if the user has access to view the node/document
            </summary>
            <param name="doc">The Document to check permissions against</param>
            <param name="allowedUserOptions">A list of IActions that the user has permissions to execute on the current document</param>
            <remarks>By default the user must have Browse permissions to see the node in the Content tree</remarks>
            <returns></returns>        
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.GetUserActionsForNode(umbraco.cms.businesslogic.web.Document)">
            <summary>
            Builds a string of actions that the user is able to perform on the current document.
            The list of actions is subject to the user's rights assigned to the document and also
            is dependant on the type of node.
            </summary>
            <param name="dd"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.CreateNode(Umbraco.Core.Models.UmbracoEntity,System.Collections.Generic.List{umbraco.interfaces.IAction})">
            <summary>
            Creates an XmlTreeNode based on the passed in UmbracoEntity
            </summary>
            <param name="dd"></param>
            <param name="allowedUserOptions"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.CreateNodeLink(Umbraco.Core.Models.UmbracoEntity)">
            <summary>
            Creates the link for the current UmbracoEntity 
            </summary>
            <param name="dd"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.CanUserAccessNode(Umbraco.Core.Models.UmbracoEntity,System.Collections.Generic.List{umbraco.interfaces.IAction})">
            <summary>
            Determins if the user has access to view the node/document
            </summary>
            <param name="doc">The Document to check permissions against</param>
            <param name="allowedUserOptions">A list of IActions that the user has permissions to execute on the current document</param>
            <remarks>By default the user must have Browse permissions to see the node in the Content tree</remarks>
            <returns></returns>        
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.GetUserActionsForNode(Umbraco.Core.Models.UmbracoEntity)">
            <summary>
            Builds a string of actions that the user is able to perform on the current document.
            The list of actions is subject to the user's rights assigned to the document and also
            is dependant on the type of node.
            </summary>
            <param name="dd"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.GetUserAllowedActions(System.Collections.Generic.List{umbraco.interfaces.IAction},System.Collections.Generic.List{umbraco.interfaces.IAction})">
            <summary>
            The returned list is filtered based on the IActions that the user is allowed to perform based on the actions
            that are allowed for the current tree.
            </summary>
            <param name="actions"></param>
            <param name="userAllowedActions"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.BaseContentTree.RemoveDuplicateMenuDividers(System.Collections.Generic.List{umbraco.interfaces.IAction})">
            <summary>
            Once the context menu has been created, this utility will simply strip out duplicate dividers if they exist and also leading and trailing dividers.
            </summary>
            <param name="actions"></param>
            <returns></returns>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseContentTree.CurrentUser">
            <summary>
            Returns the current User. This ensures that we don't instantiate a new User object 
            each time.
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.BaseContentTree.UseOptimizedRendering">
            <summary>
            Returns true if we can use the EntityService to render the tree or revert to the original way 
            using normal documents
            </summary>
            <remarks>
            We determine this by:
            * If there are any subscribers to the events: BeforeTreeRender or AfterTreeRender - then we cannot run optimized
            * If there are any overrides of the method: OnRenderNode - then we cannot run optimized
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.ContentRecycleBin">
            <summary>
            Handles loading the content tree into umbraco's application tree
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.ContentRecycleBin.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Override the render js so no duplicate js is rendered.
            </summary>
            <param name="Javascript"></param>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.ContentRecycleBin.StartNodeID">
            <summary>
            By default the Recycle bin start node is -20
            </summary>
        </member>
        <member name="T:umbraco.loadContent">
            <summary>
            Handles loading the content tree into umbraco's application tree
            </summary>
        </member>
        <member name="M:umbraco.loadContent.CreateRootNodeActions(System.Collections.Generic.List{umbraco.interfaces.IAction}@)">
            <summary>
            Creates the root node context menu for the content tree.
            Depending on the current User's permissions, this menu will change.
            If the current User's starting node is not -1 (the normal root content tree node)
            then the menu will be built based on the permissions of the User's start node.
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:umbraco.loadContent.CreateRootNode(umbraco.cms.presentation.Trees.XmlTreeNode@)">
            <summary>
            Creates the root node for the content tree. If the current User does
            not have access to the actual content tree root, then we'll display the 
            node that correlates to their StartNodeID
            </summary>
            <param name="rootNode"></param>
        </member>
        <member name="M:umbraco.loadContent.CreateRecycleBin">
            <summary>
            Adds the recycling bin node. This method should only actually add the recycle bin node when the tree is initially created and if the user
            actually has access to the root node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.loadContent.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            Override the render method to add the recycle bin to the end of this tree
            </summary>
            <param name="Tree"></param>
        </member>
        <member name="P:umbraco.loadContent.StartNode">
            <summary>
            Returns the Document object of the starting node for the current User. This ensures
            that the Document object is only instantiated once.
            </summary>
        </member>
        <member name="P:umbraco.loadContent.StartNodeID">
            <summary>
            If the user is an admin, always return entire tree structure, otherwise
            return the user's start node id.
            </summary>
        </member>
        <member name="M:umbraco.loadcontentItemType.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            This will call the normal Render method by passing the converted XmlTree to an XmlDocument.
            TODO: need to update this render method to do everything that the obsolete render method does and remove the obsolete method
            </summary>
            <param name="tree"></param>
        </member>
        <member name="T:umbraco.loadDataTypes">
            <summary>
            Handles loading of all datatypes into the developer application tree
            </summary>    
        </member>
        <member name="M:umbraco.loadDataTypes.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="T:umbraco.loadMacros">
            <summary>
            Handles loading of the cache application into the developer application tree
            </summary>
        </member>
        <member name="M:umbraco.loadMacros.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the JS.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="M:umbraco.loadMacros.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            This will call the normal Render method by passing the converted XmlTree to an XmlDocument.
            TODO: need to update this render method to do everything that the obsolete render method does and remove the obsolete method
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:umbraco.loadMedia.#cctor">
            <summary>
            Create the linkable data types list and add the DataTypeUploadField guid to it.
            By default, any media type that is to be "linkable" in the WYSIWYG editor must contain
            a DataTypeUploadField data type which will ouput the value for the link, however, if 
            a developer wants the WYSIWYG editor to link to a custom media type, they will either have
            to create their own media tree and inherit from this one and override the GetLinkValue 
            or add another GUID to the LinkableMediaDataType list on application startup that matches
            the GUID of a custom data type. The order of GUIDs will determine the output value.
            </summary>
        </member>
        <member name="M:umbraco.loadMedia.CreateRecycleBin">
            <summary>
            Adds the recycling bin node. This method should only actually add the recycle bin node when the tree is initially created and if the user
            actually has access to the root node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:umbraco.loadMedia.StartNodeID">
            <summary>
            If the user is an admin, always return entire tree structure, otherwise
            return the user's start node id.
            </summary>
        </member>
        <member name="T:umbraco.loadMemberGroups">
            <summary>
            Handles loading of the member groups into the application tree
            </summary>
        </member>
        <member name="M:umbraco.loadMemberGroups.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="T:umbraco.loadMembers">
            <summary>
            Handles loading of the member application into the application tree
            </summary>
        </member>
        <member name="M:umbraco.loadMembers.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="M:umbraco.loadMembers.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            This will call the normal Render method by passing the converted XmlTree to an XmlDocument.
            TODO: need to update this render method to do everything that the obsolete render method does and remove the obsolete method
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:umbraco.loadMembers.Render(System.Xml.XmlDocument@)">
            <summary>
            Renders the specified tree item.
            </summary>
            <param name="Tree">The tree.</param>
        </member>
        <member name="T:umbraco.loadMemberTypes">
            <summary>
            Handles loading of the member types into the application tree
            </summary>
        </member>
        <member name="M:umbraco.loadMemberTypes.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="M:umbraco.loadMemberTypes.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            This will call the normal Render method by passing the converted XmlTree to an XmlDocument.
            TODO: need to update this render method to do everything that the obsolete render method does and remove the obsolete method
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:umbraco.loadMemberTypes.Render(System.Xml.XmlDocument@)">
            <summary>
            Renders the specified tree item.
            </summary>
            <param name="Tree">The tree.</param>
        </member>
        <member name="T:umbraco.loadPython">
            <summary>
            Handles loading of python items into the developer application tree
            </summary>
        </member>
        <member name="T:umbraco.loadUsers">
            <summary>
            Handles loading of all umbraco users into the users application tree
            </summary>
        </member>
        <member name="M:umbraco.loadUsers.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript.
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="T:umbraco.loadXslt">
            <summary>
            Handles loading of the xslt files into the application tree
            </summary>
        </member>
        <member name="M:umbraco.loadXslt.RenderJS(System.Text.StringBuilder@)">
            <summary>
            Renders the Javascript
            </summary>
            <param name="Javascript">The javascript.</param>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.NullTree">
            <summary>
            An empty tree with no functionality. This gets loaded when the requested tree cannot be loaded with the type specified.
            Should not be used directly in code.
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.LegacyTree">
            <summary>
            A simple wrapper for an ITree that doesn't extend BaseTree. This is used for backwards compatibility with versions previous to 5.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.LegacyTree.Render(umbraco.cms.presentation.Trees.XmlTree@)">
            <summary>
            This will call the normal Render method by passing the converted XmlTree to an XmlDocument.
            This is used only for backwards compatibility of converting normal ITrees to BasicTree's
            </summary>
            <param name="tree"></param>
        </member>
        <member name="T:umbraco.presentation.webservices.TreeDataService">
            <summary>
            Summary description for TreeDataService
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoHttpHandler.ApplicationContext">
            <summary>
            Returns the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoHttpHandler.UmbracoContext">
            <summary>
            Returns the current UmbracoContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoHttpHandler.Umbraco">
            <summary>
            Returns an UmbracoHelper object
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoHttpHandler.Url">
            <summary>
            Returns a UrlHelper
            </summary>
            <remarks>
            This URL helper is created without any route data and an empty request context
            </remarks>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoHttpHandler.Services">
            <summary>
            Returns a ServiceContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoHttpHandler.DatabaseContext">
            <summary>
            Returns a DatabaseContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoHttpHandler.Security">
            <summary>
            Returns a WebSecurity instance
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedHttpHandler.ValidateUserContextId(System.String)">
            <summary>
            Checks if the umbraco context id is valid
            </summary>
            <param name="currentUmbracoUserContextId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedHttpHandler.ValidateCredentials(System.String,System.String)">
            <summary>
            Checks if the username/password credentials are valid
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedHttpHandler.AuthorizeRequest(System.String,System.Boolean)">
            <summary>
            Validates the user for access to a certain application
            </summary>
            <param name="app">The application alias.</param>
            <param name="throwExceptions">true if an exception should be thrown if authorization fails</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedHttpHandler.UserHasAppAccess(System.String,umbraco.BusinessLogic.User)">
            <summary>
            Checks if the specified user as access to the app
            </summary>
            <param name="app"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedHttpHandler.UserHasAppAccess(System.String,System.String)">
            <summary>
            Checks if the specified user by username as access to the app
            </summary>
            <param name="app"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.UmbracoAuthorizedHttpHandler.AuthorizeRequest(System.Boolean)">
            <summary>
            Returns true if there is a valid logged in user and that ssl is enabled if required
            </summary>
            <param name="throwExceptions">true if an exception should be thrown if authorization fails</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Web.WebServices.UmbracoAuthorizedHttpHandler.UmbracoUser">
            <summary>
            Returns the current user
            </summary>
        </member>
        <member name="M:umbraco.presentation.webservices.TreeDataService.GetXmlTree(System.Web.HttpContext)">
            <summary>
            Returns the an XmlTree based on the current http request
            </summary>
            <returns></returns>
        </member>
        <member name="M:umbraco.presentation.webservices.TreeDataService.LoadAppTrees(umbraco.cms.presentation.Trees.TreeRequestParams,System.Web.HttpContext)">
            <summary>
            If the application supports multiple trees, then this function iterates over all of the trees assigned to it
            and creates their top level nodes and context menus.
            </summary>
            <param name="treeParams"></param>
            <param name="context"></param>
        </member>
        <member name="M:umbraco.presentation.webservices.TreeDataService.LoadTree(umbraco.cms.presentation.Trees.TreeRequestParams,System.Web.HttpContext)">
            <summary>
            This will load the particular ITree object and call it's render method to get the nodes that need to be rendered.
            </summary>
            <param name="treeParams"></param>
            <param name="httpContext"></param>
        </member>
        <member name="M:umbraco.presentation.webservices.TreeDataService.LoadNullTree(umbraco.cms.presentation.Trees.TreeRequestParams)">
            <summary>
            Load an empty tree structure to show the end user that there was a problem loading the tree.
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.TreeDefinitionCollection">
            <summary>
            A collection of TreeDefinitions found in any loaded assembly.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinitionCollection.FindTree(umbraco.interfaces.ITree)">
            <summary>
            Find the TreeDefinition object based on the ITree
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinitionCollection.FindTree``1">
            <summary>
            Finds the TreeDefinition with the generic type specified
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinitionCollection.FindTree(System.String)">
            <summary>
            Return the TreeDefinition object based on the tree alias and application it belongs to
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinitionCollection.FindTrees(System.String)">
            <summary>
            Return a list of TreeDefinition's with the appAlias specified
            </summary>
            <param name="appAlias"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinitionCollection.FindActiveTrees(System.String)">
            <summary>
            Return a list of TreeDefinition's with the appAlias specified
            </summary>
            <param name="appAlias"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinitionCollection.EnsureTreesRegistered">
            <summary>
            Finds all instances of ITree in loaded assemblies, then finds their associated ApplicationTree and Application objects
            and stores them together in a TreeDefinition class and adds the definition to our list.
            This will also store an instance of each tree object in the TreeDefinition class which should be 
            used when referencing all tree classes.
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.TreeDefinition">
            <summary>
            Defines the entire structure of an application tree including it's Type, a reference to it's ApplicationTree object, and a reference 
            to it's Application object. Tree Definitions are based on defining a database in the umbracoAppTree database. Any tree defined in this table 
            that is of an ITree type, it will be found and can be instantiated by this class. Any ITree that is not defined in the database will
            need to be instantiated with it's own tree constructor.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinition.#ctor(System.Type,umbraco.BusinessLogic.ApplicationTree,umbraco.BusinessLogic.Application)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.cms.presentation.Trees.TreeDefinition"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="tree">The tree.</param>
            <param name="app">The app.</param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinition.CreateInstance">
            <summary>
            Returns a new instance of a BaseTree based on this Tree Definition
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeDefinition.CreateTreeInstance(System.Type,System.String)">
            <summary>
            Creates an ITree instance.
            </summary>
            <param name="tree">The tree.</param>
            <param name="appAlias">The app alias.</param>
            <returns></returns>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.TreeDefinition.TreeType">
            <summary>
            Gets or sets the type of the tree.
            </summary>
            <value>The type of the tree.</value>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.TreeDefinition.Tree">
            <summary>
            Gets or sets the tree.
            </summary>
            <value>The tree.</value>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.TreeDefinition.App">
            <summary>
            Gets or sets the application.
            </summary>
            <value>The app.</value>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.TreeService">
            <summary>
            A utility class to aid in creating the URL for returning XML for a tree structure and
            for reading the parameters from the URL when a request is made.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeService.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeService.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},umbraco.cms.presentation.Trees.TreeDialogModes,System.String)">
            <summary>
            Constructor to assign all TreeService properties except nodeKey in one call
            </summary>
            <param name="startNodeID"></param>
            <param name="treeType"></param>
            <param name="showContextMenu"></param>
            <param name="isDialog"></param>
            <param name="dialogMode"></param>
            <param name="app"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeService.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},umbraco.cms.presentation.Trees.TreeDialogModes,System.String,System.String)">
            <summary>
            Constructor to assign all TreeService properties in one call
            </summary>
            <param name="startNodeID"></param>
            <param name="treeType"></param>
            <param name="showContextMenu"></param>
            <param name="isDialog"></param>
            <param name="dialogMode"></param>
            <param name="app"></param>
            <param name="nodeKey"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeService.GetServiceUrl(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},umbraco.cms.presentation.Trees.TreeDialogModes,System.String,System.String,System.String)">
            <summary>
            Static method to return the tree service url with the specified parameters
            </summary>
            <param name="startNodeID"></param>
            <param name="treeType"></param>
            <param name="showContextMenu"></param>
            <param name="isDialog"></param>
            <param name="dialogMode"></param>
            <param name="app"></param>
            <param name="nodeKey"></param>
            <param name="functionToCall"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.TreeService.GetInitUrl(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},umbraco.cms.presentation.Trees.TreeDialogModes,System.String,System.String,System.String)">
            <summary>
            static method to return the tree init url with the specified parameters
            </summary>
            <param name="startNodeID"></param>
            <param name="treeType"></param>
            <param name="showContextMenu"></param>
            <param name="isDialog"></param>
            <param name="dialogMode"></param>
            <param name="app"></param>
            <param name="nodeKey"></param>
            <param name="functionToCall"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.UserPermissions.CreateAllowedActions(System.Collections.Generic.List{umbraco.interfaces.IAction}@)">
            <summary>
            don't allow any actions on this tree
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.UserPermissions.CreateRootNodeActions(System.Collections.Generic.List{umbraco.interfaces.IAction}@)">
            <summary>
            no actions should be able to be performed on the parent node except for refresh
            </summary>
            <param name="actions"></param>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.XmlTree">
            <summary>
            Used for serializing data to XML as the data structure for the JavaScript tree
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTree.#ctor(umbraco.cms.presentation.Trees.SerializedTreeType)">
            <summary>
            Use this constructor to force a tree provider to be used
            </summary>
            <param name="treeType"></param>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTree.ToString">
            <summary>
            Returns the string representation of the tree structure depending on the SerializedTreeType
            specified. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.XmlTreeNode">
            <summary>
            Used for serializing data to XML as the data structure for the JavaScript tree
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTreeNode.Create(umbraco.cms.presentation.Trees.BaseTree)">
            <summary>
            creates a new XmlTreeNode with the default parameters from the BaseTree
            </summary>
            <param name="bTree"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTreeNode.CreateRoot(umbraco.cms.presentation.Trees.BaseTree)">
            <summary>
            creates a new XmlTreeNode with the default parameters for the BaseTree root node
            </summary>
            <param name="bTree"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTreeNode.DimNode">
             <summary>
             Dims the color of the node
             </summary>
            <remarks>
            This adds the class to the existing icon class as to not override anything.
            </remarks>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.IsRoot">
            <summary>
            Set to true when a node is created with CreateRootNode
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.TreeType">
            <summary>
            Generally the tree type and node type are the same but in some cased they are not so
            we need to store the tree type too which is read only.
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.Text">
            <summary>
            The tree node text
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.IconClass">
            <summary>
            The CSS class of the icon to use for the node
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.Action">
            <summary>
            The JavaScript action for the node
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.Menu">
            <summary>
            A string of letters representing actions for the context menu
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.Source">
            <summary>
            The xml source for the child nodes (a URL)
            </summary>      
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.Icon">
            <summary>
            The path to the icon to display for the node
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.OpenIcon">
            <summary>
            The path to the icon to display for the node if the node is showing it's children
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.NodeType">
            <summary>
            Normally just the type of tree being rendered.
            This should really only be set with this property in very special cases
            where the create task for a node in the same tree as another node is different.		
            </summary>		
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.NotPublished">
            <summary>
            Used by the content tree and flagged as true if the node is not published
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.IsProtected">
            <summary>
            Used by the content tree and flagged as true if the node is protected
            </summary>
        </member>
        <member name="P:umbraco.cms.presentation.Trees.XmlTreeNode.Style">
            <summary>
            Returns the styling object used to add common styles to a node
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.XmlTreeNode.NodeStyle">
            <summary>
            Used to add common styles to an XmlTreeNode.
            This also adds the ability to add a custom class which will add the class to the li node
            that is rendered in the tree whereas the IconClass property of the XmlTreeNode object
            adds a class to the anchor of the li node.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTreeNode.NodeStyle.DimNode">
            <summary>
            Dims the color of the node
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTreeNode.NodeStyle.HighlightNode">
            <summary>
            Adds the star icon highlight overlay to a node
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTreeNode.NodeStyle.SecureNode">
            <summary>
            Adds the padlock icon overlay to a node
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.XmlTreeNode.NodeStyle.AddCustom(System.String)">
            <summary>
            Adds a custom class to the li node of the tree
            </summary>
            <param name="cssClass"></param>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.JSONTreeConverter">
            <summary>
            Used to serialize an XmlTree object to JSON for supporting a JSON Tree View control.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.JSONTreeConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Not implemented as we never need to Deserialize
            </summary>
            <param name="dictionary"></param>
            <param name="type"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.JSONTreeConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Serializes an XmlTree object with the relevant values.
            </summary>
            <param name="obj"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.JSONTreeNodeConverter">
            <summary>
            Used to serialize an XmlTreeNode object to JSON for supporting a JS Tree View control.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.JSONTreeNodeConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Not implemented as we never need to Deserialize
            </summary>
            <param name="dictionary"></param>
            <param name="type"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.JSONTreeNodeConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Serializes an XmlTreeNode object with the relevant values.
            </summary>
            <param name="obj"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.presentation.Trees.JsTreeNodeConverter">
            <summary>
            Used to serialize an XmlTreeNode object to JSON for supporting a JS Tree View control.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.Trees.JsTreeNodeConverter.IconPath">
            <summary>
            A reference path to where the icons are actually stored as compared to where the tree themes folder is
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.JsTreeNodeConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Not implemented as we never need to Deserialize
            </summary>
            <param name="dictionary"></param>
            <param name="type"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.Trees.JsTreeNodeConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            Serializes an XmlTreeNode object with the relevant values.
            </summary>
            <param name="obj"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.pnlUmbraco">
            <summary>
            pnlUmbraco control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.pnl1">
            <summary>
            pnl1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.hidUserTypeID">
            <summary>
            hidUserTypeID control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.pp_name">
            <summary>
            pp_name control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.txtUserTypeName">
            <summary>
            txtUserTypeName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.pp_alias">
            <summary>
            pp_alias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.lblUserTypeAlias">
            <summary>
            lblUserTypeAlias control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.pnl2">
            <summary>
            pnl2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.pp_rights">
            <summary>
            pp_rights control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.EditUserType.cbl_rights">
            <summary>
            cbl_rights control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:umbraco.cms.presentation.user.NodePermissions">
            <summary>
            An object to display the current permissions for a user and a node.
            </summary>
        </member>
        <member name="F:umbraco.cms.presentation.user.NodePermissions.lt_names">
            <summary>
            lt_names control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.NodePermissions.pnlReplaceChildren">
            <summary>
            pnlReplaceChildren control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.NodePermissions.lblMessage">
            <summary>
            lblMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.NodePermissions.rptPermissionsList">
            <summary>
            rptPermissionsList control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:umbraco.cms.presentation.user.NodePermissions.OnClientItemChecked">
            <summary>
            The JavaScript method to call when a node is checked. The method will receive a comma seperated list of node IDs that are checked.
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.user.PermissionEditor.CheckUser(System.String)">
            <summary>
            Makes sure the user exists with the id specified
            </summary>
            <param name="strID"></param>
        </member>
        <member name="F:umbraco.cms.presentation.user.PermissionEditor.CssInclude2">
            <summary>
            CssInclude2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.PermissionEditor.CssInclude1">
            <summary>
            CssInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.PermissionEditor.JsInclude1">
            <summary>
            JsInclude1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.PermissionEditor.pnlUmbraco">
            <summary>
            pnlUmbraco control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.PermissionEditor.pnl1">
            <summary>
            pnl1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.PermissionEditor.JTree">
            <summary>
            JTree control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:umbraco.cms.presentation.user.PermissionEditor.nodePermissions">
            <summary>
            nodePermissions control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:umbraco.cms.presentation.user.PermissionEditor.UmbracoUser">
            <summary>
            Since Umbraco stores users in cache, we'll use this method to retrieve our user object by the selected id
            </summary>
        </member>
        <member name="T:umbraco.cms.presentation.user.PermissionsHandler">
            <summary>
            Summary description for PermissionsHandler
            </summary>
        </member>
        <member name="M:umbraco.cms.presentation.user.PermissionsHandler.GetNodePermissions(System.Int32,System.String)">
            <summary>
            Loads the NodePermissions UserControl with the appropriate properties, renders the contents and returns the output html.
            </summary>
            <param name="userID"></param>
            <param name="nodeID"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.cms.presentation.user.UserPermissions">
            <summary>
            Provides umbraco user permission functionality on various nodes. Only nodes that are published are queried via the cache.
            </summary>    
        </member>
        <member name="M:umbraco.cms.presentation.user.UserPermissions.SaveNewPermissions(System.Int32[],System.Collections.Generic.List{umbraco.interfaces.IAction},System.Boolean)">
            <summary>
            saves new permissions with the parameters supplied
            </summary>
            <param name="nodeIDs"></param>
            <param name="actions"></param>
            <param name="replaceChildren"></param>
        </member>
        <member name="M:umbraco.cms.presentation.user.UserPermissions.GetExistingNodePermission(System.Int32)">
            <summary>
            Returns the current user permissions for the node specified
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.user.UserPermissions.GetNodePath(System.Int32)">
            <summary>
            gets path attribute for node id passed
            </summary>
            <param name="iNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.cms.presentation.user.UserPermissions.FindChildNodes(System.Int32)">
            <summary>
            Finds all child node IDs
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="T:umbraco.webService">
            <summary>
            Summary description for webService.
            </summary>
            
        </member>
        <member name="M:umbraco.webService.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:umbraco.webService.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:umbraco.presentation.webservices.CacheRefresher">
            <summary>
            Summary description for CacheRefresher.
            </summary>
        </member>
        <member name="M:umbraco.presentation.webservices.CacheRefresher.ContinueRefreshingForRequest(System.String,System.String,System.String)">
            <summary>
            This checks the passed in hash and verifies if it does not match the hash of the combination of appDomainAppId and machineName
            passed in. If the hashes don't match, then cache refreshing continues.
            </summary>
            <param name="hash"></param>
            <param name="appDomainAppId"></param>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.presentation.webservices.CacheRefresher.RefreshByIds(System.Guid,System.String,System.String,System.String)">
            <summary>
            Refreshes objects for all Ids matched in the json string
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="jsonIds">A JSON Serialized string of ids to match</param>
            <param name="Login"></param>
            <param name="Password"></param>
        </member>
        <member name="M:umbraco.presentation.webservices.CacheRefresher.RefreshByJson(System.Guid,System.String,System.String,System.String)">
            <summary>
            Refreshes objects using the passed in Json payload, it will be up to the cache refreshers to deserialize
            </summary>
            <param name="uniqueIdentifier"></param>
            <param name="jsonPayload">A custom JSON payload used by the cache refresher</param>
            <param name="Login"></param>
            <param name="Password"></param>
            <remarks>
            NOTE: the cache refresher defined by the ID MUST be of type IJsonCacheRefresher or an exception will be thrown
            </remarks>
        </member>
        <member name="T:umbraco.presentation.webservices.CheckForUpgrade">
            <summary>
            Summary description for CheckForUpgrade
            </summary>
        </member>
        <member name="T:umbraco.presentation.webservices.CMSNode">
            <summary>
            Summary description for CMSNode
            </summary>
        </member>
        <member name="T:umbraco.presentation.webservices.codeEditorSave">
            <summary>
            Summary description for codeEditorSave
            </summary>
        </member>
        <member name="T:umbraco.webservices.Developer">
            <summary>
            Summary description for Developer.
            </summary>
        </member>
        <member name="T:umbraco.presentation.webservices.legacyAjaxCalls">
            <summary>
            Summary description for legacyAjaxCalls
            </summary>
        </member>
        <member name="M:umbraco.presentation.webservices.legacyAjaxCalls.Delete(System.String,System.String,System.String)">
            <summary>
            method to accept a string value for the node id. Used for tree's such as python
            and xslt since the file names are the node IDs
            </summary>
            <param name="nodeId"></param>
            <param name="alias"></param>
            <param name="nodeType"></param>
        </member>
        <member name="M:umbraco.presentation.webservices.legacyAjaxCalls.DeleteContentPermanently(System.String,System.String)">
            <summary>
            Permanently deletes a document/media object.
            Used to remove an item from the recycle bin.
            </summary>
            <param name="nodeId"></param>
            <param name="nodeType"></param>
        </member>
        <member name="T:umbraco.presentation.webservices.nodeSorter">
            <summary>
            Summary description for nodeSorter
            </summary>
        </member>
        <member name="T:presentation.umbraco.webservices.progressStatus">
            <summary>
            Summary description for progressStatus.
            </summary>
        </member>
        <member name="T:umbraco.webservices.publication">
            <summary>
            Summary description for publication.
            </summary>
        </member>
        <member name="T:umbraco.presentation.webservices.RegexComWebservice">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.#ctor">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.getRegExpDetails(System.Int32)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.BegingetRegExpDetails(System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.EndgetRegExpDetails(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.getRegExpDetailsAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.getRegExpDetailsAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.ListAllAsXml(System.Int32)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.BeginListAllAsXml(System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.EndListAllAsXml(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.ListAllAsXmlAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.ListAllAsXmlAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.listRegExp(System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.BeginlistRegExp(System.String,System.String,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.EndlistRegExp(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.listRegExpAsync(System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.listRegExpAsync(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:umbraco.presentation.webservices.RegexComWebservice.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:umbraco.presentation.webservices.RegexComWebservice.getRegExpDetailsCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.presentation.webservices.RegexComWebservice.ListAllAsXmlCompleted">
            <remarks/>
        </member>
        <member name="E:umbraco.presentation.webservices.RegexComWebservice.listRegExpCompleted">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.RegExpDetails">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.user_id">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.regexp_id">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.regular_expression">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.matches">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.not_matches">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.source">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.description">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.create_date">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.disable">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.RegExpDetails.rating">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.BaseDataObject">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.BaseDataObject.Id">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.BaseDataObject.DateCreated">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.BaseDataObject.DateModified">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.BaseDataObject.IsDirty">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.Expression">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.AuthorId">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.AuthorName">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.ProviderId">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.Title">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.Pattern">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.MatchingText">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.NonMatchingText">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.Enabled">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.Rating">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.Source">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.Expression.Description">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.getRegExpDetailsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.getRegExpDetailsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.getRegExpDetailsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.ListAllAsXmlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.ListAllAsXmlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.ListAllAsXmlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.listRegExpCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:umbraco.presentation.webservices.listRegExpCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:umbraco.presentation.webservices.listRegExpCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:umbraco.webservices.templates">
            <summary>
            Summary description for templates.
            </summary>
        </member>
        <member name="T:umbraco.presentation.webservices.trashcan">
            <summary>
            Summary description for trashcan
            </summary>
        </member>
        <member name="T:umbraco.presentation.umbraco.webservices.UltimatePickerAutoCompleteHandler">
            <summary>
            Summary description for $codebehindclassname$
            </summary>
        </member>
        <member name="T:umbraco.presentation.Web.UI.ContentPage">
            <summary>
            Summary description for ContentPage.
            </summary>
        </member>
        <member name="T:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellChecker">
            <summary>
            Base class for a spellchecker for TinyMCE
            </summary>
        </member>
        <member name="M:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellChecker.CheckWords(System.String,System.String[])">
            <summary>
            Checks all the words submitted
            </summary>
            <param name="language">The language.</param>
            <param name="words">The words.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellChecker.GetSuggestions(System.String,System.String)">
            <summary>
            Gets the suggestions for a single word
            </summary>
            <param name="language">The language.</param>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerInput">
            <summary>
            Object representation of the input from TinyMCE's spellchecker plugin
            </summary>
        </member>
        <member name="M:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerInput.Parse(System.IO.StreamReader)">
            <summary>
            Parses the specified stream into the object
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="P:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerInput.Id">
            <summary>
            Gets or sets the id from TinyMCE
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerInput.Method">
            <summary>
            Gets or sets the spellchecking method. eg: checkWords, getSuggestions
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerInput.Language">
            <summary>
            Gets or sets the language used by the content
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerInput.Words">
            <summary>
            Gets or sets the words which are to be spell checked
            </summary>
            <value>The words.</value>
        </member>
        <member name="T:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerResult">
            <summary>
            Object which will be returned to TinyMCE from the spellchecker
            </summary>
        </member>
        <member name="P:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerResult.result">
            <summary>
            Gets or sets the spellcheck words
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerResult.id">
            <summary>
            Gets or sets the id of the initial request
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:umbraco.presentation.umbraco_client.tinymce3.plugins.spellchecker.SpellCheckerResult.error">
            <summary>
            Gets or sets the error details if there was a problem when performing the spellcheck
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:umbraco.presentation.viewstateMoverModule">
            <summary>
            Moved the viewstate
            </summary>
        </member>
        <member name="T:Umbraco.Web.UmbracoApplication">
            <summary>
            The Umbraco global.asax class
            </summary>
        </member>
        <member name="T:Umbraco.Web.UmbracoContext">
            <summary>
            Class that encapsulates Umbraco information of a specific HTTP request
            </summary>
        </member>
        <member name="F:Umbraco.Web.UmbracoContext._umbracoContext">
            <summary>
            Used if not running in a web application (no real HttpContext)
            </summary>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.EnsureContext(System.Web.HttpContextBase,Umbraco.Core.ApplicationContext,Umbraco.Web.Security.WebSecurity)">
            <summary>
            This is a helper method which is called to ensure that the singleton context is created and the nice url and routing
            context is created and assigned.
            </summary>
            <param name="httpContext"></param>
            <param name="applicationContext"></param>
            <param name="webSecurity"></param>
            <returns>
            The Singleton context object
            </returns>
            <remarks>
            This is created in order to standardize the creation of the singleton. Normally it is created during a request
            in the UmbracoModule, however this module does not execute during application startup so we need to ensure it
            during the startup process as well.
            See: http://issues.umbraco.org/issue/U4-1890, http://issues.umbraco.org/issue/U4-1717
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.EnsureContext(System.Web.HttpContextBase,Umbraco.Core.ApplicationContext)">
            <summary>
            This is a helper method which is called to ensure that the singleton context is created and the nice url and routing
            context is created and assigned.
            </summary>
            <param name="httpContext"></param>
            <param name="applicationContext"></param>
            <returns>
            The Singleton context object
            </returns>
            <remarks>
            This is created in order to standardize the creation of the singleton. Normally it is created during a request
            in the UmbracoModule, however this module does not execute during application startup so we need to ensure it
            during the startup process as well.
            See: http://issues.umbraco.org/issue/U4-1890, http://issues.umbraco.org/issue/U4-1717
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.EnsureContext(System.Web.HttpContextBase,Umbraco.Core.ApplicationContext,System.Boolean)">
            <summary>
            This is a helper method which is called to ensure that the singleton context is created and the nice url and routing
            context is created and assigned.
            </summary>
            <param name="httpContext"></param>
            <param name="applicationContext"></param>
            <param name="replaceContext">
            if set to true will replace the current singleton with a new one, this is generally only ever used because
            during application startup the base url domain will not be available so after app startup we'll replace the current
            context with a new one in which we can access the httpcontext.Request object.
            </param>
            <returns>
            The Singleton context object
            </returns>
            <remarks>
            This is created in order to standardize the creation of the singleton. Normally it is created during a request
            in the UmbracoModule, however this module does not execute during application startup so we need to ensure it
            during the startup process as well.
            See: http://issues.umbraco.org/issue/U4-1890, http://issues.umbraco.org/issue/U4-1717
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.EnsureContext(System.Web.HttpContextBase,Umbraco.Core.ApplicationContext,Umbraco.Web.Security.WebSecurity,System.Boolean)">
            <summary>
            This is a helper method which is called to ensure that the singleton context is created and the nice url and routing
            context is created and assigned.
            </summary>
            <param name="httpContext"></param>
            <param name="applicationContext"></param>
            <param name="webSecurity"></param>
            <param name="replaceContext">
            if set to true will replace the current singleton with a new one, this is generally only ever used because
            during application startup the base url domain will not be available so after app startup we'll replace the current
            context with a new one in which we can access the httpcontext.Request object.
            </param>
            <returns>
            The Singleton context object
            </returns>
            <remarks>
            This is created in order to standardize the creation of the singleton. Normally it is created during a request
            in the UmbracoModule, however this module does not execute during application startup so we need to ensure it
            during the startup process as well.
            See: http://issues.umbraco.org/issue/U4-1890, http://issues.umbraco.org/issue/U4-1717
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.EnsureContext(System.Web.HttpContextBase,Umbraco.Core.ApplicationContext,Umbraco.Web.Security.WebSecurity,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            This is a helper method which is called to ensure that the singleton context is created and the nice url and routing
            context is created and assigned.
            </summary>
            <param name="httpContext"></param>
            <param name="applicationContext"></param>
            <param name="webSecurity"></param>
            <param name="replaceContext">
            if set to true will replace the current singleton with a new one, this is generally only ever used because
            during application startup the base url domain will not be available so after app startup we'll replace the current
            context with a new one in which we can access the httpcontext.Request object.
            </param>
            <param name="preview"></param>
            <returns>
            The Singleton context object
            </returns>
            <remarks>
            This is created in order to standardize the creation of the singleton. Normally it is created during a request
            in the UmbracoModule, however this module does not execute during application startup so we need to ensure it
            during the startup process as well.
            See: http://issues.umbraco.org/issue/U4-1890, http://issues.umbraco.org/issue/U4-1717
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.#ctor(System.Web.HttpContextBase,Umbraco.Core.ApplicationContext,Umbraco.Web.PublishedCache.IPublishedCaches,Umbraco.Web.Security.WebSecurity,System.Nullable{System.Boolean})">
            <summary>
            Creates a new Umbraco context.
            </summary>
            <param name="httpContext"></param>
            <param name="applicationContext"> </param>
            <param name="publishedCaches">The published caches.</param>
            <param name="webSecurity"></param>
            <param name="preview">An optional value overriding detection of preview mode.</param>
        </member>
        <member name="M:Umbraco.Web.UmbracoContext.#ctor(System.Web.HttpContextBase,Umbraco.Core.ApplicationContext,System.Lazy{Umbraco.Web.PublishedCache.IPublishedCaches},Umbraco.Web.Security.WebSecurity,System.Nullable{System.Boolean})">
            <summary>
            Creates a new Umbraco context.
            </summary>
            <param name="httpContext"></param>
            <param name="applicationContext"> </param>
            <param name="publishedCaches">The published caches.</param>
            <param name="webSecurity"></param>
            <param name="preview">An optional value overriding detection of preview mode.</param>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.Current">
            <summary>
            Gets the current Umbraco Context.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.ObjectCreated">
            <summary>
            This is used internally for performance calculations, the ObjectCreated DateTime is set as soon as this
            object is instantiated which in the web site is created during the BeginRequest phase.
            We can then determine complete rendering time from that.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.UmbracoRequestId">
            <summary>
            This is used internally for debugging and also used to define anything required to distinguish this request from another.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.Application">
            <summary>
            Gets the current ApplicationContext
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.Security">
            <summary>
            Gets the WebSecurity class
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.OriginalRequestUrl">
            <summary>
            Gets the uri that is handled by ASP.NET after server-side rewriting took place.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.CleanedUmbracoUrl">
            <summary>
            Gets the cleaned up url that is handled by Umbraco.
            </summary>
            <remarks>That is, lowercase, no trailing slash after path, no .aspx...</remarks>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.ContentCache">
            <summary>
            Gets or sets the published content cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.MediaCache">
            <summary>
            Gets or sets the published media cache.
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.IsFrontEndUmbracoRequest">
            <summary>
            Boolean value indicating whether the current request is a front-end umbraco request
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.UrlProvider">
            <summary>
            A shortcut to the UmbracoContext's RoutingContext's NiceUrlProvider
            </summary>
            <remarks>
            If the RoutingContext is null, this will throw an exception.
            </remarks>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.RoutingContext">
            <summary>
            Gets/sets the RoutingContext object
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.PublishedContentRequest">
            <summary>
            Gets/sets the PublishedContentRequest object
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.HttpContext">
            <summary>
            Exposes the HttpContext for the current request
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.IsDebug">
            <summary>
            Gets a value indicating whether the request has debugging enabled
            </summary>
            <value><c>true</c> if this instance is debug; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.PageId">
            <summary>
            Gets the current page ID, or <c>null</c> if no page ID is available (e.g. a custom page).
            </summary>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.UmbracoUser">
            <summary>
            Gets the current logged in Umbraco user (editor).
            </summary>
            <value>The Umbraco user object or null</value>
        </member>
        <member name="P:Umbraco.Web.UmbracoContext.InPreviewMode">
            <summary>
            Determines whether the current user is in a preview mode and browsing the site (ie. not in the admin UI)
            </summary>
            <remarks>Can be internally set by the RTE macro rendering to render macros in the appropriate mode.</remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.BeginRequest(System.Web.HttpContextBase)">
            <summary>
            Begins to process a request.
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Processses the Umbraco Request
            </summary>
            <param name="httpContext"></param>
            <remarks>
            
            This will check if we are trying to route to the default back office page (i.e. ~/Umbraco/ or ~/Umbraco or ~/Umbraco/Default )
            and ensure that the MVC handler executes for that. This is required because the route for /Umbraco will never execute because 
            files/folders exist there and we cannot set the RouteCollection.RouteExistingFiles = true since that will muck a lot of other things up.
            So we handle it here and explicitly execute the MVC controller.
            
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Authenticates the request by reading the FormsAuthentication cookie and setting the 
            context and thread principle object
            </summary>
            <param name="sender"></param>
            <param name="e"></param> 
            <remarks>
            We will set the identity, culture, etc... for any request that is:
            * A back office request
            * An installer request
            * A /base request (since these can be back office web service requests)
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.ShouldAuthenticateRequest(System.Web.HttpRequestBase,System.Uri)">
            <summary>
            Determines if we should authenticate the request
            </summary>
            <param name="request"></param>
            <param name="originalRequestUrl"></param>
            <returns></returns>
            <remarks>
            We auth the request when:
            * it is a back office request
            * it is an installer request
            * it is a /base request
            * it is a preview request
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.ShouldIgnoreTicketRenew(System.Uri,System.Web.HttpContextBase)">
            <summary>
            Determines if the authentication ticket should be renewed with a new timeout
            </summary>
            <param name="url"></param>
            <param name="httpContext"></param>
            <returns></returns>
            <remarks>
            We do not want to renew the ticket when we are checking for the user's remaining timeout unless -
            UmbracoConfig.For.UmbracoSettings().Security.KeepUserLoggedIn == true
            </remarks>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.EnsureUmbracoRoutablePage(Umbraco.Web.UmbracoContext,System.Web.HttpContextBase)">
            <summary>
            Checks the current request and ensures that it is routable based on the structure of the request and URI
            </summary>		
            <param name="context"></param>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.EnsureDocumentRequest(System.Web.HttpContextBase,System.Uri)">
            <summary>
            Ensures that the request is a document request (i.e. one that the module should handle)
            </summary>
            <param name="httpContext"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.RewriteToBackOfficeHandler(System.Web.HttpContextBase)">
            <summary>
            Rewrites to the default back office page.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.RewriteToUmbracoHandler(System.Web.HttpContextBase,Umbraco.Web.Routing.PublishedContentRequest)">
            <summary>
            Rewrites to the Umbraco handler - we always send the request via our MVC rendering engine, this will deal with
            requests destined for webforms.
            </summary>		
            <param name="context"></param>
            <param name="pcr"> </param>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.DisposeHttpContextItems(System.Web.HttpContext)">
            <summary>
            Any object that is in the HttpContext.Items collection that is IDisposable will get disposed on the end of the request
            </summary>
            <param name="http"></param>
        </member>
        <member name="M:Umbraco.Web.UmbracoModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize the module,  this will trigger for each new application 
            and there may be more than 1 application per application domain
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Umbraco.Web.UriUtility.ToFullUrl(System.String,System.Web.HttpContextBase)">
            <summary>
            Returns an faull url with the host, port, etc...
            </summary>
            <param name="absolutePath">An absolute path (i.e. starts with a '/' )</param>
            <param name="httpContext"> </param>
            <returns></returns>
            <remarks>
            Based on http://stackoverflow.com/questions/3681052/get-absolute-url-from-relative-path-refactored-method
            </remarks>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.update.CheckForUpgrade">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.update.CheckForUpgrade.#ctor">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.update.CheckForUpgrade.Install(System.Guid,System.Boolean,System.Boolean,System.DateTime,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.update.CheckForUpgrade.InstallAsync(System.Guid,System.Boolean,System.Boolean,System.DateTime,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.update.CheckForUpgrade.InstallAsync(System.Guid,System.Boolean,System.Boolean,System.DateTime,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.update.CheckForUpgrade.CheckUpgrade(System.Int32,System.Int32,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.update.CheckForUpgrade.CheckUpgradeAsync(System.Int32,System.Int32,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.update.CheckForUpgrade.CheckUpgradeAsync(System.Int32,System.Int32,System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Umbraco.Web.org.umbraco.update.CheckForUpgrade.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.update.CheckForUpgrade.InstallCompleted">
            <remarks/>
        </member>
        <member name="E:Umbraco.Web.org.umbraco.update.CheckForUpgrade.CheckUpgradeCompleted">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.update.UpgradeResult">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.update.UpgradeResult.Comment">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.update.UpgradeResult.UpgradeType">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.update.UpgradeResult.UpgradeUrl">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.update.UpgradeType">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.update.UpgradeType.None">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.update.UpgradeType.Patch">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.update.UpgradeType.Minor">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.update.UpgradeType.Major">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.update.UpgradeType.Critical">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.update.UpgradeType.Error">
            <remarks/>
        </member>
        <member name="F:Umbraco.Web.org.umbraco.update.UpgradeType.OutOfSync">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.update.InstallCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.update.CheckUpgradeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.org.umbraco.update.CheckUpgradeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Umbraco.Web.org.umbraco.update.CheckUpgradeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Umbraco.Web.WebServices.BulkPublishController">
            <summary>
            A REST controller used for the publish dialog in order to publish bulk items at once
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebServices.BulkPublishController.PublishDocument(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Publishes an document
            </summary>
            <param name="documentId"></param>
            <param name="publishDescendants">true to publish descendants as well</param>
            <param name="includeUnpublished">true to publish documents that are unpublished</param>
            <returns>A Json array containing objects with the child id's of the document and it's current published status</returns>
        </member>
        <member name="T:Umbraco.Web.WebServices.CoreStringsController">
            <summary>
            A REST controller used for accessing Core.Strings services.
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebServices.DomainsApiController">
            <summary>
            A REST controller used for managing domains.
            </summary>
            <remarks>Nothing to do with Active Directory.</remarks>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.CheckMembersInternalIndex">
            <summary>
            Checks if the member internal index is consistent with the data stored in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.CheckMediaInternalIndex">
            <summary>
            Checks if the media internal index is consistent with the data stored in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.CheckContentInternalIndex">
            <summary>
            Checks if the content internal index is consistent with the data stored in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.GetIndexerDetails">
            <summary>
            Get the details for indexers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.GetSearcherDetails">
            <summary>
            Get the details for searchers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.PostOptimizeIndex(System.String)">
            <summary>
            Optimizes an index
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.PostRebuildIndex(System.String)">
            <summary>
            Rebuilds the index
            </summary>
            <param name="indexerName"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.PostCheckRebuildIndex(System.String)">
            <summary>
            Check if the index has been rebuilt
            </summary>
            <param name="indexerName"></param>
            <returns></returns>
            <remarks>
            This is kind of rudimentary since there's no way we can know that the index has rebuilt, we'll just check
            if the index is locked based on Lucene apis
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebServices.ExamineManagementApiController.PostCheckOptimizeIndex(System.String)">
            <summary>
            Checks if the index is optimized
            </summary>
            <param name="indexerName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebServices.TagsController">
            <summary>
            A public web service for querying tags
            </summary>
            <remarks>
            This controller does not contain methods to query for content, media or members based on tags, those methods would require
            authentication and should not be exposed publicly.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebServices.TagsController.GetAllTags(System.String)">
            <summary>
            Get every tag stored in the database (with optional group)
            </summary>
        </member>
        <member name="M:Umbraco.Web.WebServices.TagsController.GetAllContentTags(System.String)">
            <summary>
            Get all tags for content items (with optional group)
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.TagsController.GetAllMediaTags(System.String)">
            <summary>
            Get all tags for media items (with optional group)
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.TagsController.GetAllMemberTags(System.String)">
            <summary>
            Get all tags for member items (with optional group)
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.TagsController.GetTagsForProperty(System.Int32,System.String,System.String)">
            <summary>
            Returns all tags attached to a property by entity id
            </summary>
            <param name="contentId"></param>
            <param name="propertyTypeAlias"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.TagsController.GetTagsForEntity(System.Int32,System.String)">
            <summary>
            Returns all tags attached to an entity (content, media or member) by entity id
            </summary>
            <param name="contentId"></param>
            <param name="tagGroup"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Web.WebServices.ScheduledPublishController">
            <summary>
            A REST controller used for running the scheduled publishing, this is called from the background worker timer
            </summary>
        </member>
        <member name="T:Umbraco.Web.WebServices.SaveFileController">
            <summary>
            A REST controller used to save files such as templates, partial views, macro files, etc...
            </summary>
            <remarks>
            This isn't fully implemented yet but we should migrate all of the logic in the umbraco.presentation.webservices.codeEditorSave
            over to this controller.
            </remarks>
        </member>
        <member name="M:Umbraco.Web.WebServices.SaveFileController.SavePartialViewMacro(System.String,System.String,System.String)">
            <summary>
            Saves a partial view macro
            </summary>
            <param name="filename"></param>
            <param name="oldName"></param>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.SaveFileController.SavePartialView(System.String,System.String,System.String)">
            <summary>
            Saves a partial view
            </summary>
            <param name="filename"></param>
            <param name="oldName"></param>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.SaveFileController.SaveTemplate(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Saves a template
            </summary>
            <param name="templateName"></param>
            <param name="templateAlias"></param>
            <param name="templateContents"></param>
            <param name="templateId"></param>
            <param name="masterTemplateId"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.SaveFileController.Success(System.String,System.String,System.Object)">
            <summary>
            Returns a successful message
            </summary>
            <param name="message">The message to display in the speach bubble</param>
            <param name="header">The header to display in the speach bubble</param>
            <param name="additionalVals"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Web.WebServices.SaveFileController.Failed(System.String,System.String,System.Exception)">
            <summary>
            Returns a failed message
            </summary>
            <param name="message">The message to display in the speach bubble</param>
            <param name="header">The header to display in the speach bubble</param>
            <param name="exception">The exception if there was one</param>
            <returns></returns>
        </member>
    </members>
</doc>
